[{"path":"src/app/app-routing.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { RouterModule, Routes } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { AuthModule } from \u0027./auth/auth.module\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthGuard } from \u0027./core/guards/auth.guard\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PhaseBugReportingModule } from \u0027./phase-bug-reporting/phase-bug-reporting.module\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { PhaseModerationModule } from \u0027./phase-moderation/phase-moderation.module\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { PhaseTeamResponseModule } from \u0027./phase-team-response/phase-team-response.module\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseTesterResponseModule } from \u0027./phase-tester-response/phase-tester-response.module\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"const routes: Routes \u003d ["},{"lineNumber":11,"author":{"gitId":"-"},"content":"  { path: \u0027\u0027, loadChildren: () \u003d\u003e AuthModule },"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  { path: \u0027phaseBugReporting\u0027, loadChildren: () \u003d\u003e PhaseBugReportingModule, canLoad: [AuthGuard] },"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  { path: \u0027phaseTeamResponse\u0027, loadChildren: () \u003d\u003e PhaseTeamResponseModule, canLoad: [AuthGuard] },"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  { path: \u0027phaseTesterResponse\u0027, loadChildren: () \u003d\u003e PhaseTesterResponseModule, canLoad: [AuthGuard] },"},{"lineNumber":15,"author":{"gitId":"NereusWB922"},"content":"  { path: \u0027phaseModeration\u0027, loadChildren: () \u003d\u003e PhaseModerationModule, canLoad: [AuthGuard] },"},{"lineNumber":16,"author":{"gitId":"NereusWB922"},"content":"  { path: \u0027**\u0027, redirectTo: \u0027\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"];"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  imports: [RouterModule.forRoot(routes)],"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  exports: [RouterModule]"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export class AppRoutingModule {}"}],"authorContributionMap":{"NereusWB922":2,"-":21}},{"path":"src/app/auth/confirm-login/confirm-login.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../core/services/githubevent.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-auth-confirm-login\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./confirm-login.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./confirm-login.component.css\u0027]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class ConfirmLoginComponent implements OnInit {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  @Input() username: string;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  @Input() currentSessionOrg: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private authService: AuthService,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private logger: LoggingService,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private router: Router"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  onGithubWebsiteClicked() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    window.open(\u0027https://github.com/\u0027, \u0027_blank\u0027);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    window.location.reload();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  logIntoAnotherAccount() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    this.logger.info(\u0027ConfirmLoginComponent: Logging into another account\u0027);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    this.authService.startOAuthProcess();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   * Handles the clean up required after authentication and setting up of user data is completed."},{"lineNumber":44,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  handleAuthSuccess() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    this.authService.setTitleWithPhaseDetail();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.Authenticated);"},{"lineNumber":48,"author":{"gitId":"nknguyenhc"},"content":"    this.authService.navigateToLandingPage();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * Will complete the process of logging in the given user."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  completeLoginProcess(): void {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.phaseService.setPhaseOwners(this.currentSessionOrg, this.username);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.userService"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .createUserModel(this.username)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":60,"author":{"gitId":"-"},"content":"        mergeMap(() \u003d\u003e this.phaseService.sessionSetup()),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        mergeMap(() \u003d\u003e this.githubEventService.setLatestChangeEvent())"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":64,"author":{"gitId":"-"},"content":"        () \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          this.handleAuthSuccess();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          this.logger.info(`ConfirmLoginComponent: Completion of login process failed with an error: ${error}`);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":1,"-":73}},{"path":"src/app/core/directives/internal-link-disable.directive.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"NereusWB922"},"content":"import { Directive, HostListener } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"NereusWB922"},"content":"import { ErrorHandlingService } from \u0027../services/error-handling.service\u0027;"},{"lineNumber":3,"author":{"gitId":"NereusWB922"},"content":""},{"lineNumber":4,"author":{"gitId":"NereusWB922"},"content":"class InvalidLinkError extends Error {"},{"lineNumber":5,"author":{"gitId":"NereusWB922"},"content":"  constructor() {"},{"lineNumber":6,"author":{"gitId":"NereusWB922"},"content":"    super(\u0027Invalid link!\u0027);"},{"lineNumber":7,"author":{"gitId":"NereusWB922"},"content":"    Object.setPrototypeOf(this, InvalidLinkError.prototype);"},{"lineNumber":8,"author":{"gitId":"NereusWB922"},"content":"  }"},{"lineNumber":9,"author":{"gitId":"NereusWB922"},"content":"}"},{"lineNumber":10,"author":{"gitId":"NereusWB922"},"content":""},{"lineNumber":11,"author":{"gitId":"NereusWB922"},"content":"@Directive({"},{"lineNumber":12,"author":{"gitId":"NereusWB922"},"content":"  selector: \u0027[disableInternalLink]\u0027"},{"lineNumber":13,"author":{"gitId":"NereusWB922"},"content":"})"},{"lineNumber":14,"author":{"gitId":"NereusWB922"},"content":"export class InternalLinkDisableDirective {"},{"lineNumber":15,"author":{"gitId":"NereusWB922"},"content":"  constructor(private errorHandlingService: ErrorHandlingService) {}"},{"lineNumber":16,"author":{"gitId":"NereusWB922"},"content":""},{"lineNumber":17,"author":{"gitId":"NereusWB922"},"content":"  @HostListener(\u0027click\u0027, [\u0027$event\u0027])"},{"lineNumber":18,"author":{"gitId":"NereusWB922"},"content":"  public onClick(e: MouseEvent): void {"},{"lineNumber":19,"author":{"gitId":"NereusWB922"},"content":"    const srcElement \u003d e.target;"},{"lineNumber":20,"author":{"gitId":"NereusWB922"},"content":""},{"lineNumber":21,"author":{"gitId":"NereusWB922"},"content":"    if (srcElement instanceof HTMLAnchorElement) {"},{"lineNumber":22,"author":{"gitId":"NereusWB922"},"content":"      const baseURI \u003d srcElement.baseURI;"},{"lineNumber":23,"author":{"gitId":"NereusWB922"},"content":"      const href \u003d srcElement.href;"},{"lineNumber":24,"author":{"gitId":"NereusWB922"},"content":""},{"lineNumber":25,"author":{"gitId":"NereusWB922"},"content":"      if (href.startsWith(baseURI)) {"},{"lineNumber":26,"author":{"gitId":"NereusWB922"},"content":"        this.errorHandlingService.handleError(new InvalidLinkError());"},{"lineNumber":27,"author":{"gitId":"NereusWB922"},"content":"        e.preventDefault();"},{"lineNumber":28,"author":{"gitId":"NereusWB922"},"content":"        e.stopPropagation();"},{"lineNumber":29,"author":{"gitId":"NereusWB922"},"content":"      }"},{"lineNumber":30,"author":{"gitId":"NereusWB922"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"NereusWB922"},"content":"  }"},{"lineNumber":32,"author":{"gitId":"NereusWB922"},"content":"}"}],"authorContributionMap":{"NereusWB922":32}},{"path":"src/app/core/guards/auth.guard.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ActivatedRouteSnapshot, CanActivate, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../services/auth.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"})"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export class AuthGuard implements CanActivate, CanLoad {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  constructor(private auth: AuthService, private router: Router) {}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable\u003cboolean\u003e | Promise\u003cboolean\u003e | boolean {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    if (this.auth.isAuthenticated()) {"},{"lineNumber":14,"author":{"gitId":"nknguyenhc"},"content":"      this.auth.clearNext();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      return true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":17,"author":{"gitId":"nknguyenhc"},"content":"      this.auth.storeNext(state);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      this.router.navigate([\u0027\u0027]);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      return false;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  canLoad(route: Route, segments: UrlSegment[]): Observable\u003cboolean\u003e | Promise\u003cboolean\u003e | boolean {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    if (this.auth.isAuthenticated()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      return true;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      this.router.navigate([\u0027\u0027]);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      return false;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":2,"-":29}},{"path":"src/app/core/models/generators/github-issue.generator.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../github/github-issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export default function generateGithubIssuesArray(numberOfElements: number \u003d 1): Array\u003cGithubIssue\u003e {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  const created_and_updated_date: string \u003d getRandomDate().toISOString();"},{"lineNumber":5,"author":{"gitId":"MadLamprey"},"content":"  return new Array\u003cGithubIssue\u003e(10).map("},{"lineNumber":6,"author":{"gitId":"MadLamprey"},"content":"    (value: GithubIssue, index: number, array: GithubIssue[]) \u003d\u003e"},{"lineNumber":7,"author":{"gitId":"MadLamprey"},"content":"      new GithubIssue({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        id: index,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        number: Math.random(),"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assignees: undefined,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        body: `Automatically Generated Issue No id: ${index}.`,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        created_at: created_and_updated_date,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        labels: undefined,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        title: `Autogen Issue ${index}`,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        updated_at: created_and_updated_date,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        url: \u0027\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        user: undefined,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        comments: undefined"},{"lineNumber":19,"author":{"gitId":"MadLamprey"},"content":"      })"},{"lineNumber":20,"author":{"gitId":"MadLamprey"},"content":"  );"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Returns a random Date between the start and end dates."},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @param start - Date representing the start of the date range. Default: 1/1/2018"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * @param end - Date representing the end of the date range. Default: Current Date"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"function getRandomDate(start: Date \u003d new Date(2018, 1, 1), end: Date \u003d new Date()): Date {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":5,"-":25}},{"path":"src/app/core/models/github/github-graphql.issue.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueModelFragment } from \u0027../../../../../graphql/graphql-types\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { flattenEdges } from \u0027../../../shared/lib/graphgql-common\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027./github-issue.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"export class GithubGraphqlIssue extends GithubIssue {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  constructor(issue: IssueModelFragment) {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    super({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      id: issue.id,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      number: issue.number,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      body: issue.body,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      created_at: String(issue.createdAt),"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      updated_at: String(issue.updatedAt),"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      url: String(issue.url),"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      title: issue.title,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      state: issue.state,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      user: {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        login: issue.author.login,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        url: issue.author.url,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        avatar_url: issue.author.avatarUrl"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      assignees: flattenEdges(issue.assignees.edges),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      labels: flattenEdges(issue.labels.edges),"},{"lineNumber":23,"author":{"gitId":"MadLamprey"},"content":"      comments: flattenEdges(issue.comments.edges, (node) \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"MadLamprey"},"content":"        return {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          ...node,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          id: node.databaseId"},{"lineNumber":27,"author":{"gitId":"MadLamprey"},"content":"        };"},{"lineNumber":28,"author":{"gitId":"MadLamprey"},"content":"      })"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":4,"-":27}},{"path":"src/app/core/models/github/github-issue.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueState } from \u0027../../../../../graphql/graphql-types\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027./github-comment.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027./github-label.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"export class GithubIssue {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  id: string; // Github\u0027s backend\u0027s id"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  number: number; // Issue\u0027s display id"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  assignees: Array\u003c{"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    id: number;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    login: string;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    url: string;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }\u003e;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  body: string;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  created_at: string;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  labels: Array\u003cGithubLabel\u003e;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  state: IssueState;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  title: string;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  updated_at: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  url: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Author of the issue"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    login: string;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    avatar_url: string;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    url: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  comments: Array\u003cGithubComment\u003e;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor(githubIssue: {}) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    Object.assign(this, githubIssue);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    this.labels \u003d [];"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    for (const label of githubIssue[\u0027labels\u0027]) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      this.labels.push(new GithubLabel(label));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"   * @param name Depending on the isCategorical flag, this name either refers to the category name of label or the exact name of label."},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * @param isCategorical Whether the label is categorical."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  findLabel(name: string, isCategorical: boolean \u003d true): string {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    if (!isCategorical) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      const label \u003d this.labels.find((l) \u003d\u003e !l.isCategorical() \u0026\u0026 l.name \u003d\u003d\u003d name);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      return label ? label.getValue() : undefined;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // Find labels with the same category name as what is specified in the parameter."},{"lineNumber":48,"author":{"gitId":"-"},"content":"    const labels \u003d this.labels.filter((l) \u003d\u003e l.isCategorical() \u0026\u0026 l.getCategory() \u003d\u003d\u003d name);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    if (labels.length \u003d\u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      return undefined;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    } else if (labels.length \u003d\u003d\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      return labels[0].getValue();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      // If Label order is not specified, return the first label value else"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      // If Label order is specified, return the highest ranking label value"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      if (!GithubLabel.LABEL_ORDER[name]) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return labels[0].getValue();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        const order \u003d GithubLabel.LABEL_ORDER[name];"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return labels"},{"lineNumber":61,"author":{"gitId":"MadLamprey"},"content":"          .reduce((result, currLabel) \u003d\u003e (order[currLabel.getValue()] \u003e order[result.getValue()] ? currLabel : result))"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          .getValue();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  findTeamId(): string {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    return `${this.findLabel(\u0027team\u0027)}.${this.findLabel(\u0027tutorial\u0027)}`;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":69}},{"path":"src/app/core/models/table-settings.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"Arif-Khalid"},"content":"export class TableSettings {"},{"lineNumber":2,"author":{"gitId":"Arif-Khalid"},"content":"  public sortActiveId \u003d \u0027\u0027; // The ID of the column the table is sorted by"},{"lineNumber":3,"author":{"gitId":"Arif-Khalid"},"content":"  public sortDirection \u003d \u0027\u0027;"},{"lineNumber":4,"author":{"gitId":"Arif-Khalid"},"content":"  public pageSize \u003d 20;"},{"lineNumber":5,"author":{"gitId":"Arif-Khalid"},"content":"  public pageIndex \u003d 0;"},{"lineNumber":6,"author":{"gitId":"Arif-Khalid"},"content":"}"}],"authorContributionMap":{"Arif-Khalid":6}},{"path":"src/app/core/models/templates/tester-response-template.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"-"},"content":" * A Tester Response comment has the following format:"},{"lineNumber":3,"author":{"gitId":"-"},"content":" *"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * [IMPORTANT!: Please do not edit or reply to this comment using the GitHub UI. \\"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      You can respond to it using CATcher during the next phase of the PE]"},{"lineNumber":6,"author":{"gitId":"-"},"content":" *"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * # Team\u0027s response"},{"lineNumber":8,"author":{"gitId":"-"},"content":" *"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * { team\u0027s response }"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * # Items for the Tester to Verify"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * { 1 or more Tester Response sections, see tester-response-section-parser.model.ts }"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A concrete example would be:"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * [IMPORTANT!: Please do not edit or reply to this comment using the GitHub UI. \\"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      You can respond to it using CATcher during the next phase of the PE]"},{"lineNumber":19,"author":{"gitId":"-"},"content":" *"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * # Team\u0027s response"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * This is not a bug, it\u0027s a feature"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * # Items for the Tester to Verify"},{"lineNumber":25,"author":{"gitId":"-"},"content":" *"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * ## :question: Issue type"},{"lineNumber":27,"author":{"gitId":"-"},"content":" *"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Team chose [`type.DocumentationBug`]."},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Originally [`type.FunctionalityBug`]."},{"lineNumber":30,"author":{"gitId":"-"},"content":" *"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * [x] - I disagree"},{"lineNumber":32,"author":{"gitId":"-"},"content":" *"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * **Reason for disagreement:**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * It\u0027s not a use case, it\u0027s a bug! This has nothing to do with the docs."},{"lineNumber":35,"author":{"gitId":"-"},"content":" *"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * \u003ccatcher-end-of-segment\u003e\u003chr\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":" *"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * ## :question: Issue severity"},{"lineNumber":39,"author":{"gitId":"-"},"content":" *"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Team chose [`severity.VeryLow`]."},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Originally [`severity.High`]."},{"lineNumber":42,"author":{"gitId":"-"},"content":" *"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * [x] - I disagree"},{"lineNumber":44,"author":{"gitId":"-"},"content":" *"},{"lineNumber":45,"author":{"gitId":"-"},"content":" * **Reason for disagreement:**"},{"lineNumber":46,"author":{"gitId":"-"},"content":" * You don\u0027t understand how frustrating this bug is!!"},{"lineNumber":47,"author":{"gitId":"-"},"content":" *"},{"lineNumber":48,"author":{"gitId":"-"},"content":" * \u003ccatcher-end-of-segment\u003e\u003chr\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":" */"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../comment.model\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../github/github-comment.model\u0027;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../tester-response.model\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import { buildTeamResponseSectionParser } from \u0027./section-parsers/common-parsers.model\u0027;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import { TesterResponseSectionParser } from \u0027./section-parsers/tester-response-section-parser.model\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import { Template } from \u0027./template.model\u0027;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"const { coroutine, many1, str, optionalWhitespace, possibly, whitespace } \u003d require(\u0027arcsecond\u0027);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"interface TesterResponseParseResult {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  teamResponse: string;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  testerResponses: TesterResponse[];"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  testerDisagree: boolean;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  teamChosenSeverity: string;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  teamChosenType: string;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"const GITHUB_UI_EDIT_WARNING \u003d"},{"lineNumber":69,"author":{"gitId":"MadLamprey"},"content":"  // eslint-disable-next-line max-len"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  \u0027[IMPORTANT!: Please do not edit or reply to this comment using the GitHub UI. You can respond to it using CATcher during the next phase of the PE]\u0027;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"const TESTER_RESPONSES_HEADER \u003d \u0027# Items for the Tester to Verify\u0027;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"const DISAGREE_CHECKBOX_DESCRIPTION \u003d \u0027I disagree\u0027;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"const TeamResponseSectionParser \u003d buildTeamResponseSectionParser(TESTER_RESPONSES_HEADER);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"export const TesterResponseParser \u003d coroutine(function* () {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  yield possibly(str(GITHUB_UI_EDIT_WARNING));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  yield optionalWhitespace;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  const teamResponse \u003d yield TeamResponseSectionParser;"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  // parse tester responses from comment"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  yield str(TESTER_RESPONSES_HEADER);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  const responses \u003d yield many1(TesterResponseSectionParser);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  // build array of TesterResponse"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  let testerDisagree \u003d false;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  let teamChosenSeverity: string;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  let teamChosenType: string;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  const testerResponses: TesterResponse[] \u003d [];"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  for (const response of responses) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    if (response.disagreeCheckboxValue) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      testerDisagree \u003d true;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    if (response.title \u003d\u003d\u003d \u0027severity\u0027) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      teamChosenSeverity \u003d response.teamChose;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    } else if (response.title \u003d\u003d\u003d \u0027type\u0027) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      teamChosenType \u003d response.teamChose;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    testerResponses.push("},{"lineNumber":105,"author":{"gitId":"-"},"content":"      new TesterResponse("},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u0027Issue \u0027 + response.title,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        response.description,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        DISAGREE_CHECKBOX_DESCRIPTION,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        response.disagreeCheckboxValue,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        response.reasonForDisagreement"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  const result: TesterResponseParseResult \u003d {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    teamResponse: teamResponse,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    testerResponses: testerResponses,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    testerDisagree: testerDisagree,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    teamChosenSeverity: teamChosenSeverity,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    teamChosenType: teamChosenType"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  return result;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"});"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"export class TesterResponseTemplate extends Template {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  teamResponse: string;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  testerResponses: TesterResponse[];"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  testerDisagree: boolean;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  comment: IssueComment;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  teamChosenSeverity?: string;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  teamChosenType?: string;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  constructor(githubComments: GithubComment[]) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    super(TesterResponseParser);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    const templateConformingComment \u003d this.findConformingComment(githubComments);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    if (this.parseFailure) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    this.comment \u003d \u003cIssueComment\u003e{"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      ...templateConformingComment,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      description: templateConformingComment.body"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    this.teamResponse \u003d this.parseResult.teamResponse;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    this.testerResponses \u003d this.parseResult.testerResponses;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    this.testerDisagree \u003d this.parseResult.testerDisagree;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    this.teamChosenSeverity \u003d this.parseResult.teamChosenSeverity;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    this.teamChosenType \u003d this.parseResult.teamChosenType;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":152}},{"path":"src/app/core/services/auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"nknguyenhc"},"content":"import { Router, RouterStateSnapshot } from \u0027@angular/router\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { BehaviorSubject } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { generateSessionId } from \u0027../../shared/lib/session\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027./githubevent.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"export enum AuthState {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u0027NotAuthenticated\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u0027AwaitingAuthentication\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u0027ConfirmOAuthUser\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u0027Authenticated\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":26,"author":{"gitId":"-"},"content":"})"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Responsible for initiating the authentication process and querying or"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * updating the application state with regards to authentication."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"export class AuthService {"},{"lineNumber":33,"author":{"gitId":"nknguyenhc"},"content":"  private static readonly SESSION_NEXT_KEY \u003d \u0027next\u0027;"},{"lineNumber":34,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  authStateSource \u003d new BehaviorSubject(AuthState.NotAuthenticated);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  currentAuthState \u003d this.authStateSource.asObservable();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  accessToken \u003d new BehaviorSubject(undefined);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  private state: string;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  ENABLE_POPUP_MESSAGE \u003d \u0027Please enable pop-ups in your browser\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private ngZone: NgZone,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private dataService: DataService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private titleService: Title,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":56,"author":{"gitId":"nknguyenhc"},"content":"   * Stores the data about the next route in the session storage."},{"lineNumber":57,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":58,"author":{"gitId":"nknguyenhc"},"content":"  storeNext(next: RouterStateSnapshot) {"},{"lineNumber":59,"author":{"gitId":"nknguyenhc"},"content":"    sessionStorage.setItem(AuthService.SESSION_NEXT_KEY, next.url);"},{"lineNumber":60,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":62,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":63,"author":{"gitId":"nknguyenhc"},"content":"   * Returns the next route"},{"lineNumber":64,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":65,"author":{"gitId":"nknguyenhc"},"content":"  private getNext(): string {"},{"lineNumber":66,"author":{"gitId":"nknguyenhc"},"content":"    return sessionStorage.getItem(AuthService.SESSION_NEXT_KEY);"},{"lineNumber":67,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":69,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":70,"author":{"gitId":"nknguyenhc"},"content":"   * Clears the next route from the session storage."},{"lineNumber":71,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":72,"author":{"gitId":"nknguyenhc"},"content":"  clearNext() {"},{"lineNumber":73,"author":{"gitId":"nknguyenhc"},"content":"    sessionStorage.removeItem(AuthService.SESSION_NEXT_KEY);"},{"lineNumber":74,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   * Will store the OAuth token."},{"lineNumber":78,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(token: string) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    this.githubService.storeOAuthAccessToken(token);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    this.accessToken.next(token);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    this.logger.info(\u0027AuthService: Clearing access token and setting AuthState to NotAuthenticated.\u0027);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    this.accessToken.next(undefined);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    this.ngZone.run(() \u003d\u003e this.router.navigate([\u0027\u0027]));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"  logOut(): void {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    this.userService.reset();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    this.issueService.reset(true);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    this.phaseService.reset();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    this.dataService.reset();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    this.githubEventService.reset();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    this.logger.reset();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    this.setLandingPageTitle();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(\u0027All Teams\u0027);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    this.reset();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  setTitleWithPhaseDetail(): void {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version} - ${this.phaseService.getPhaseDetail()}`;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.logger.info(`AuthService: Setting Title as ${title}`);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  setLandingPageTitle(): void {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version}`;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.logger.info(`AuthService: Setting LandingPageTitle as ${title}`);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  isAuthenticated(): boolean {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    return this.authStateSource.getValue() \u003d\u003d\u003d AuthState.Authenticated;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"  changeAuthState(newAuthState: AuthState) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    if (newAuthState \u003d\u003d\u003d AuthState.Authenticated) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      const sessionId \u003d generateSessionId();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      this.issueService.setSessionId(sessionId);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      this.logger.info(`AuthService: Successfully authenticated with session: ${sessionId}`);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    this.authStateSource.next(newAuthState);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"   * Generates and assigns an unguessable random \u0027state\u0027 string to pass to Github for protection against cross-site request forgery attacks"},{"lineNumber":133,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  generateStateString() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    this.state \u003d uuid();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    sessionStorage.setItem(\u0027state\u0027, this.state);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  isReturnedStateSame(returnedState: string): boolean {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    const state \u003d sessionStorage.getItem(\u0027state\u0027);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    return returnedState \u003d\u003d\u003d state;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   * Will start the Github OAuth web flow process."},{"lineNumber":146,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  startOAuthProcess() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    this.logger.info(\u0027AuthService: Starting authentication\u0027);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const githubRepoPermission \u003d this.phaseService.githubRepoPermissionLevel();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    this.generateStateString();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    this.redirectToOAuthPage("},{"lineNumber":154,"author":{"gitId":"-"},"content":"      encodeURI("},{"lineNumber":155,"author":{"gitId":"MadLamprey"},"content":"        // eslint-disable-next-line max-len"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        `${AppConfig.githubUrl}/login/oauth/authorize?client_id\u003d${AppConfig.clientId}\u0026scope\u003d${githubRepoPermission},read:user\u0026state\u003d${this.state}`"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    this.logger.info(\u0027AuthService: Redirecting for Github authentication\u0027);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   * Will redirect to GitHub OAuth page"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  private redirectToOAuthPage(url: string): void {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    if (url \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    window.location.href \u003d url;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":171,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":172,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":173,"author":{"gitId":"nknguyenhc"},"content":"   * Navigates to next if there is, or default landing page."},{"lineNumber":174,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":175,"author":{"gitId":"nknguyenhc"},"content":"  navigateToLandingPage() {"},{"lineNumber":176,"author":{"gitId":"nknguyenhc"},"content":"    const nextRoute \u003d this.getNext();"},{"lineNumber":177,"author":{"gitId":"nknguyenhc"},"content":"    if (!nextRoute || !this.phaseService.isValidRoute(nextRoute)) {"},{"lineNumber":178,"author":{"gitId":"nknguyenhc"},"content":"      this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":179,"author":{"gitId":"nknguyenhc"},"content":"    } else {"},{"lineNumber":180,"author":{"gitId":"nknguyenhc"},"content":"      this.router.navigateByUrl(nextRoute);"},{"lineNumber":181,"author":{"gitId":"nknguyenhc"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":36,"MadLamprey":1,"-":146}},{"path":"src/app/core/services/data.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { map } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { DataFile } from \u0027../models/data-file.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Team } from \u0027../models/team.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Admins } from \u0027../models/users/admins.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ParsedUserData } from \u0027../models/users/parsed-user-data.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Roles } from \u0027../models/users/roles.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { Students } from \u0027../models/users/students.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { TabulatedUserData } from \u0027../models/users/tabulated-user-data.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Teams } from \u0027../models/users/teams.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { Tutors } from \u0027../models/users/tutors.model\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":"})"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Responsible for retrieving and parsing data related to staff"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * and student information for the current session in CATcher."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class DataService {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  public static ROLES \u003d \u0027roles\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  public static TEAM_STRUCTURE \u003d \u0027team-structure\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  public static STUDENTS_ALLOCATION \u003d \u0027students-allocation\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  public static TUTORS_ALLOCATION \u003d \u0027tutors-allocation\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  public static ADMINS_ALLOCATION \u003d \u0027admins-allocation\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  // CSV Headers"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  public static NAME \u003d \u0027name\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  public static TEAM \u003d \u0027team\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  public static ROLE \u003d \u0027role\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  // Team Notation"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  public static TEAM_ID \u003d \u0027teamId\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  public static STUDENTS \u003d \u0027students\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  public static TUTORS \u003d \u0027tutors\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  public static ADMINS \u003d \u0027admins\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  public dataFile: DataFile;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   * Retrieves the csv file from the settings repo and constructs"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   * the required data file for the app."},{"lineNumber":50,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  getDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    return this.githubService.fetchDataFile().pipe("},{"lineNumber":53,"author":{"gitId":"MadLamprey"},"content":"      map((allCsvDataWrapper: {}) \u003d\u003e this.constructData(allCsvDataWrapper)),"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      map((jsonData: TabulatedUserData) \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.dataFile \u003d \u003cDataFile\u003e{"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          teamStructure: this.extractTeamStructure(jsonData)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return jsonData;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"   * Merges all parsed Csv Data into a single readable JSON"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   * format."},{"lineNumber":66,"author":{"gitId":"-"},"content":"   * @param allCsvDataWrapper - Object containing strings of csv data."},{"lineNumber":67,"author":{"gitId":"-"},"content":"   * @return jsonData - CSV Data Object the tabulated information of the different users"},{"lineNumber":68,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  private constructData(allCsvDataWrapper: {}): TabulatedUserData {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    const jsonData: TabulatedUserData \u003d {};"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    const allCsvData: string \u003d allCsvDataWrapper[\u0027data\u0027];"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    jsonData[DataService.ROLES] \u003d this.parseRolesData(allCsvData);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    jsonData[DataService.TEAM_STRUCTURE] \u003d this.parseTeamStructureData(allCsvData);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    jsonData[DataService.STUDENTS_ALLOCATION] \u003d this.parseStudentAllocation(allCsvData);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    jsonData[DataService.TUTORS_ALLOCATION] \u003d this.parseTutorAllocation(allCsvData);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    jsonData[DataService.ADMINS_ALLOCATION] \u003d this.parseAdminAllocation(allCsvData);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    return jsonData;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * Parses the input string containing admin allocation information"},{"lineNumber":84,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":85,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":86,"author":{"gitId":"-"},"content":"   * @return admins - object that represents parsed csv data."},{"lineNumber":87,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  private parseAdminAllocation(csvInput: string): Admins {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const admins: Admins \u003d {};"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const parsedCSV: ParsedUserData[] \u003d this.parseUsersData(csvInput);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    parsedCSV.forEach((entry) \u003d\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      if (entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        admins[entry[DataService.NAME].toLowerCase()] \u003d {};"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    return admins;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Parses the input string containing tutor allocation information"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * into application readable Object."},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"   * @return tutors- object that represents parsed csv data."},{"lineNumber":107,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  private parseTutorAllocation(csvInput: string): Tutors {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    const tutors: Tutors \u003d {};"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    const parsedCSV: ParsedUserData[] \u003d this.parseUsersData(csvInput);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    parsedCSV.forEach((entry) \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      if (!(entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase())) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      const tutor \u003d tutors[entry[DataService.NAME].toLowerCase()] || {};"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"      tutor[entry[DataService.TEAM]] \u003d \u0027true\u0027;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      tutors[entry[DataService.NAME].toLowerCase()] \u003d tutor;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    return tutors;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"   * Parses the input string containing student allocation information"},{"lineNumber":128,"author":{"gitId":"-"},"content":"   * into a Student Object"},{"lineNumber":129,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":130,"author":{"gitId":"-"},"content":"   * @return students - object that represents parsed csv data about the students\u0027 team allocation"},{"lineNumber":131,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  private parseStudentAllocation(csvInput: string): Students {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    const students: Students \u003d {};"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    const parsedCSV: ParsedUserData[] \u003d this.parseUsersData(csvInput);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    parsedCSV.forEach((entry) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      if (!(entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      const newStudent \u003d {};"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      newStudent[DataService.TEAM_ID] \u003d entry[DataService.TEAM];"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      students[entry[DataService.NAME].toLowerCase()] \u003d newStudent;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return students;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * Parses the input string containing team structure information"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * into a Teams Object"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   * @return teams - object that represents parsed csv data containing the team structures."},{"lineNumber":154,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  private parseTeamStructureData(csvInput: string): Teams {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    const teams: Teams \u003d {};"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    const parsedCSV: ParsedUserData[] \u003d this.parseUsersData(csvInput);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    parsedCSV.forEach((entry) \u003d\u003e {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      if (!(entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase())) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      const team \u003d teams[entry[DataService.TEAM]] || {};"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"      team[entry[DataService.NAME].toLowerCase()] \u003d entry[DataService.NAME];"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      teams[entry[DataService.TEAM]] \u003d team;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    return teams;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"   * Parses the input string containing roles information"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   * into a Roles object which indicates their allocated roles"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   * @param csvInput - string containing csv data."},{"lineNumber":177,"author":{"gitId":"-"},"content":"   * @return roles - object that represents parsed csv data regarding the allocated user roles."},{"lineNumber":178,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  private parseRolesData(csvInput: string): Roles {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    const roles: Roles \u003d {};"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    const students \u003d {};"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    const tutors \u003d {};"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    const admins \u003d {};"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    const parsedCSV: ParsedUserData[] \u003d this.parseUsersData(csvInput);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    // Formats the parsed information for easier app reading"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    parsedCSV.forEach((entry) \u003d\u003e {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      if (entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Student.toLowerCase()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        students[entry[DataService.NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      } else if (entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Tutor.toLowerCase()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        tutors[entry[DataService.NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      } else if (entry[DataService.ROLE] \u003d\u003d\u003d UserRole.Admin.toLowerCase()) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        admins[entry[DataService.NAME].toLowerCase()] \u003d \u0027true\u0027;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    roles[DataService.STUDENTS] \u003d students;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    roles[DataService.TUTORS] \u003d tutors;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    roles[DataService.ADMINS] \u003d admins;"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    return roles;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * Converts the input csv information to an array of"},{"lineNumber":206,"author":{"gitId":"-"},"content":"   * parsed user data. Each object\u0027s values are"},{"lineNumber":207,"author":{"gitId":"-"},"content":"   * marked by the respective csv table headers."},{"lineNumber":208,"author":{"gitId":"-"},"content":"   * @param csvText - csv information."},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * @return - Subjects that tracks the parsed data."},{"lineNumber":210,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  private parseUsersData(csvText: string): ParsedUserData[] {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    const lines \u003d csvText.split(\u0027\\n\u0027).filter((v) \u003d\u003e v.trim());"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    const headers \u003d lines[0].split(\u0027,\u0027).map((h) \u003d\u003e h.trim());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    const result: ParsedUserData[] \u003d [];"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    for (let i \u003d 1; i \u003c lines.length; i++) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      const line \u003d lines[i].trim();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      const lineValues \u003d line.split(\u0027,\u0027).map((v) \u003d\u003e v.trim());"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      const lineObj: ParsedUserData \u003d {};"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      for (let j \u003d 0; j \u003c headers.length; j++) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        if (!lineValues[j]) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"          lineObj[headers[j]] \u003d null;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"          lineObj[headers[j]] \u003d lineValues[j];"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      result.push(lineObj);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"  getTeam(teamId: string): Team {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    return this.dataFile.teamStructure.get(teamId);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"  getTeams(): string[] {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    return Array.from(this.dataFile.teamStructure.keys());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  // returns a mapping from teamId to their respective team structure."},{"lineNumber":241,"author":{"gitId":"-"},"content":"  private extractTeamStructure(jsonData: TabulatedUserData): Map\u003cstring, Team\u003e {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    const teamStructure \u003d new Map\u003cstring, Team\u003e();"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    const jsonTeamStructure \u003d jsonData[DataService.TEAM_STRUCTURE];"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const teamIds \u003d Object.keys(jsonTeamStructure);"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    teamIds.forEach((teamId: string) \u003d\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      const teamMemberIds \u003d Object.values(jsonTeamStructure[teamId]);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      const teamMembers: Array\u003cUser\u003e \u003d teamMemberIds.map((teamMemberId: string) \u003d\u003e \u003cUser\u003e{ loginId: teamMemberId, role: UserRole.Student });"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"      teamStructure.set(teamId, new Team({ id: teamId, teamMembers: teamMembers }));"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    return teamStructure;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    this.dataFile \u003d undefined;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":258}},{"path":"src/app/core/services/github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { ApolloQueryResult } from \u0027@apollo/client/core\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Apollo, QueryRef } from \u0027apollo-angular\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { DocumentNode } from \u0027graphql\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { forkJoin, from, Observable, of, throwError } from \u0027rxjs\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { catchError, filter, map, mergeMap, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  FetchIssue,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  FetchIssueQuery,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  FetchIssues,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  FetchIssuesByTeam,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  FetchIssuesByTeamQuery,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  FetchIssuesQuery,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  FetchLabels,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  FetchLabelsQuery"},{"lineNumber":17,"author":{"gitId":"-"},"content":"} from \u0027../../../../graphql/graphql-types\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":19,"author":{"gitId":"nknguyenhc"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { getNumberOfPages } from \u0027../../shared/lib/github-paginator-parser\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { IssueLastModifiedManagerModel } from \u0027../models/github/cache-manager/issue-last-modified-manager.model\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { IssuesCacheManager } from \u0027../models/github/cache-manager/issues-cache-manager.model\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import { GithubGraphqlIssue } from \u0027../models/github/github-graphql.issue\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import { GithubResponse } from \u0027../models/github/github-response.model\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import { GithubRelease } from \u0027../models/github/github.release\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import { SessionData } from \u0027../models/session.model\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import { ERRORCODE_NOT_FOUND, ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"const { Octokit } \u003d require(\u0027@octokit/rest\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"const CATCHER_ORG \u003d \u0027CATcher-org\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"const CATCHER_REPO \u003d \u0027CATcher\u0027;"},{"lineNumber":39,"author":{"gitId":"nknguyenhc"},"content":"const BRANCH \u003d \u0027main\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"const UNABLE_TO_OPEN_IN_BROWSER \u003d \u0027Unable to open this issue in Browser\u0027;"},{"lineNumber":41,"author":{"gitId":"nknguyenhc"},"content":"const BRANCH_CREATION_FAILED \u003d `Unable to create ${BRANCH} branch.`;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"function getSettingsUrl(org: string, repoName: string): string {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  return `https://raw.githubusercontent.com/${org}/${repoName}/master/settings.json`;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"let ORG_NAME \u003d \u0027\u0027;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"let MOD_ORG \u003d \u0027\u0027;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"let REPO \u003d \u0027\u0027;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"let DATA_REPO \u003d \u0027\u0027;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"const MAX_ITEMS_PER_PAGE \u003d 100;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"let octokit \u003d new Octokit();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"})"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":59,"author":{"gitId":"-"},"content":" * Responsible for communicating with GitHub to create, update, read and delete"},{"lineNumber":60,"author":{"gitId":"-"},"content":" * features related to Github using GitHub API Requests."},{"lineNumber":61,"author":{"gitId":"-"},"content":" * For example, issues, issue labels and repositories."},{"lineNumber":62,"author":{"gitId":"-"},"content":" */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"export class GithubService {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  private static readonly IF_NONE_MATCH_EMPTY \u003d { \u0027If-None-Match\u0027: \u0027\u0027 };"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  private issuesCacheManager \u003d new IssuesCacheManager();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  private issuesLastModifiedManager \u003d new IssueLastModifiedManagerModel();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  private issueQueryRefs \u003d new Map\u003cNumber, QueryRef\u003cFetchIssueQuery\u003e\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  constructor(private errorHandlingService: ErrorHandlingService, private apollo: Apollo, private logger: LoggingService) {}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(accessToken: string) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    octokit \u003d new Octokit({"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      auth() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return `Token ${accessToken}`;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      log: {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        debug: (message, ...otherInfo) \u003d\u003e this.logger.debug(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Do not log info for HTTP response 304 due to repeated polling"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        info: (message, ...otherInfo) \u003d\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"          /304 in \\d+ms$/.test(message) ? undefined : this.logger.info(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        warn: (message, ...otherInfo) \u003d\u003e this.logger.warn(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        error: (message, ...otherInfo) \u003d\u003e this.logger.error(\u0027GithubService: \u0027 + message, ...otherInfo)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  storeOrganizationDetails(orgName: string, dataRepo: string) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    MOD_ORG \u003d orgName;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    DATA_REPO \u003d dataRepo;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  storePhaseDetails(phaseRepoOwner: string, repoName: string) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    REPO \u003d repoName;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    ORG_NAME \u003d phaseRepoOwner;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"   * Fetches an array of filtered GitHubIssues using GraphQL query for a given team."},{"lineNumber":100,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"   * @param tutorial - The tutorial that the team belongs to."},{"lineNumber":102,"author":{"gitId":"-"},"content":"   * @param team - The team\u0027s designated name."},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * @param issuesFilter - The issue filter."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @returns An observable array of filtered GithubIssues"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  fetchIssuesGraphqlByTeam(tutorial: string, team: string, issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":109,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":110,"author":{"gitId":"MadLamprey"},"content":"      mergeMap(() \u003d\u003e"},{"lineNumber":111,"author":{"gitId":"MadLamprey"},"content":"        this.fetchGraphqlList\u003cFetchIssuesByTeamQuery, GithubGraphqlIssue\u003e("},{"lineNumber":112,"author":{"gitId":"-"},"content":"          FetchIssuesByTeam,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            owner: ORG_NAME,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            name: REPO,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            filter: {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"              ...graphqlFilter,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"              labels: [...(graphqlFilter.labels ? graphqlFilter.labels : []), team]"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            tutorial"},{"lineNumber":121,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.label.issues.edges,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":124,"author":{"gitId":"MadLamprey"},"content":"        )"},{"lineNumber":125,"author":{"gitId":"MadLamprey"},"content":"      )"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"   * Fetches an array of filtered GitHubIssues using GraphQL query."},{"lineNumber":131,"author":{"gitId":"-"},"content":"   * @param issuesFilter - The issue filter."},{"lineNumber":132,"author":{"gitId":"-"},"content":"   * @returns An observable array of filtered GithubIssues"},{"lineNumber":133,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  fetchIssuesGraphql(issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":138,"author":{"gitId":"MadLamprey"},"content":"      mergeMap(() \u003d\u003e"},{"lineNumber":139,"author":{"gitId":"MadLamprey"},"content":"        this.fetchGraphqlList\u003cFetchIssuesQuery, GithubGraphqlIssue\u003e("},{"lineNumber":140,"author":{"gitId":"-"},"content":"          FetchIssues,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: graphqlFilter },"},{"lineNumber":142,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.issues.edges,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":144,"author":{"gitId":"MadLamprey"},"content":"        )"},{"lineNumber":145,"author":{"gitId":"MadLamprey"},"content":"      )"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * Checks if there are pages of filtered issues that are not cached in the cache model,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * and updates the model to cache these new pages."},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * @param filter - The issue filter."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cboolean\u003e that returns true if there are pages that do not exist in the cache model."},{"lineNumber":154,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  private toFetchIssues(filter: RestGithubIssueFilter): Observable\u003cboolean\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    let responseInFirstPage: GithubResponse\u003cGithubIssue[]\u003e;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    return this.getIssuesAPICall(filter, 1).pipe("},{"lineNumber":158,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue[]\u003e) \u003d\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        responseInFirstPage \u003d response;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return getNumberOfPages(response);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      mergeMap((numOfPages: number) \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        const apiCalls: Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e[] \u003d [];"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        for (let i \u003d 2; i \u003c\u003d numOfPages; i++) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"          apiCalls.push(this.getIssuesAPICall(filter, i));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return apiCalls.length \u003d\u003d\u003d 0 ? of([]) : forkJoin(apiCalls);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      map((resultArray: GithubResponse\u003cGithubIssue[]\u003e[]) \u003d\u003e {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        const responses \u003d [responseInFirstPage, ...resultArray];"},{"lineNumber":171,"author":{"gitId":"MadLamprey"},"content":"        const isCached \u003d responses.reduce((result, response) \u003d\u003e result \u0026\u0026 response.isCached, true);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        responses.forEach((resp, index) \u003d\u003e this.issuesCacheManager.set(index + 1, resp));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return !isCached;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"   * Checks if the specified repository exists."},{"lineNumber":180,"author":{"gitId":"-"},"content":"   * @param owner - Owner of Specified Repository."},{"lineNumber":181,"author":{"gitId":"-"},"content":"   * @param repo - Name of Repository."},{"lineNumber":182,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  isRepositoryPresent(owner: string, repo: string): Observable\u003cboolean\u003e {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    return from(octokit.repos.get({ owner: owner, repo: repo, headers: GithubService.IF_NONE_MATCH_EMPTY })).pipe("},{"lineNumber":185,"author":{"gitId":"MadLamprey"},"content":"      map((rawData: { status: number }) \u003d\u003e rawData.status !\u003d\u003d ERRORCODE_NOT_FOUND),"},{"lineNumber":186,"author":{"gitId":"MadLamprey"},"content":"      catchError((err) \u003d\u003e of(false)),"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch repo data.\u0027))"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"   * Creates a repository in for the authenticated user location."},{"lineNumber":193,"author":{"gitId":"-"},"content":"   * @param name - Name of Repo to create."},{"lineNumber":194,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - That returns true if the repository has been successfully"},{"lineNumber":195,"author":{"gitId":"-"},"content":"   *                                created."},{"lineNumber":196,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  createRepository(name: string): void {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    octokit.repos.createForAuthenticatedUser({ name: name });"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":202,"author":{"gitId":"nknguyenhc"},"content":"   * Creates the `main` branch for the current repository."},{"lineNumber":203,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":204,"author":{"gitId":"nknguyenhc"},"content":"  createBranch() {"},{"lineNumber":205,"author":{"gitId":"nknguyenhc"},"content":"    return this.getDefaultBranch().pipe("},{"lineNumber":206,"author":{"gitId":"nknguyenhc"},"content":"      mergeMap((res) \u003d\u003e this.getBranchHeadInfo(res)),"},{"lineNumber":207,"author":{"gitId":"nknguyenhc"},"content":"      map((res) \u003d\u003e res.data.object.sha),"},{"lineNumber":208,"author":{"gitId":"nknguyenhc"},"content":"      mergeMap((sha: string) \u003d\u003e this.createBranchFromCommit(sha)),"},{"lineNumber":209,"author":{"gitId":"nknguyenhc"},"content":"      mergeMap(() \u003d\u003e this.isMainBranchPresent()),"},{"lineNumber":210,"author":{"gitId":"nknguyenhc"},"content":"      throwIfFalse("},{"lineNumber":211,"author":{"gitId":"nknguyenhc"},"content":"        (isBranchPresent: boolean) \u003d\u003e isBranchPresent,"},{"lineNumber":212,"author":{"gitId":"nknguyenhc"},"content":"        () \u003d\u003e new Error(BRANCH_CREATION_FAILED)"},{"lineNumber":213,"author":{"gitId":"nknguyenhc"},"content":"      )"},{"lineNumber":214,"author":{"gitId":"nknguyenhc"},"content":"    );"},{"lineNumber":215,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":216,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":217,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":218,"author":{"gitId":"nknguyenhc"},"content":"   * Creates the `main` branch for the current repository,"},{"lineNumber":219,"author":{"gitId":"nknguyenhc"},"content":"   * from the commit with the given SHA."},{"lineNumber":220,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":221,"author":{"gitId":"nknguyenhc"},"content":"  createBranchFromCommit(commitSha: string) {"},{"lineNumber":222,"author":{"gitId":"nknguyenhc"},"content":"    return from("},{"lineNumber":223,"author":{"gitId":"nknguyenhc"},"content":"      octokit.git.createRef({"},{"lineNumber":224,"author":{"gitId":"nknguyenhc"},"content":"        owner: ORG_NAME,"},{"lineNumber":225,"author":{"gitId":"nknguyenhc"},"content":"        repo: REPO,"},{"lineNumber":226,"author":{"gitId":"nknguyenhc"},"content":"        ref: `refs/heads/${BRANCH}`,"},{"lineNumber":227,"author":{"gitId":"nknguyenhc"},"content":"        sha: commitSha"},{"lineNumber":228,"author":{"gitId":"nknguyenhc"},"content":"      })"},{"lineNumber":229,"author":{"gitId":"nknguyenhc"},"content":"    );"},{"lineNumber":230,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":231,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":232,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":233,"author":{"gitId":"nknguyenhc"},"content":"   * Get the default branch of the specified repository."},{"lineNumber":234,"author":{"gitId":"nknguyenhc"},"content":"   * @param owner The owner of the repository."},{"lineNumber":235,"author":{"gitId":"nknguyenhc"},"content":"   * @param repo The name of the repository."},{"lineNumber":236,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":237,"author":{"gitId":"nknguyenhc"},"content":"  getDefaultBranch(): Observable\u003cstring\u003e {"},{"lineNumber":238,"author":{"gitId":"nknguyenhc"},"content":"    return from("},{"lineNumber":239,"author":{"gitId":"nknguyenhc"},"content":"      octokit.repos.get({"},{"lineNumber":240,"author":{"gitId":"nknguyenhc"},"content":"        owner: ORG_NAME,"},{"lineNumber":241,"author":{"gitId":"nknguyenhc"},"content":"        repo: REPO"},{"lineNumber":242,"author":{"gitId":"nknguyenhc"},"content":"      })"},{"lineNumber":243,"author":{"gitId":"nknguyenhc"},"content":"    ).pipe(map((res: any) \u003d\u003e res.data.default_branch));"},{"lineNumber":244,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":245,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":246,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":247,"author":{"gitId":"nknguyenhc"},"content":"   * Get information of the head of the given branch name,"},{"lineNumber":248,"author":{"gitId":"nknguyenhc"},"content":"   * in the current repository."},{"lineNumber":249,"author":{"gitId":"nknguyenhc"},"content":"   * @param branch The name of the branch."},{"lineNumber":250,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":251,"author":{"gitId":"nknguyenhc"},"content":"  getBranchHeadInfo(branch: string): Observable\u003cany\u003e {"},{"lineNumber":252,"author":{"gitId":"nknguyenhc"},"content":"    return from("},{"lineNumber":253,"author":{"gitId":"nknguyenhc"},"content":"      octokit.git.getRef({"},{"lineNumber":254,"author":{"gitId":"nknguyenhc"},"content":"        owner: ORG_NAME,"},{"lineNumber":255,"author":{"gitId":"nknguyenhc"},"content":"        repo: REPO,"},{"lineNumber":256,"author":{"gitId":"nknguyenhc"},"content":"        ref: `heads/${branch}`"},{"lineNumber":257,"author":{"gitId":"nknguyenhc"},"content":"      })"},{"lineNumber":258,"author":{"gitId":"nknguyenhc"},"content":"    );"},{"lineNumber":259,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":260,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":261,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":262,"author":{"gitId":"nknguyenhc"},"content":"   * Checks if the repo already has the branch `main`."},{"lineNumber":263,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":264,"author":{"gitId":"nknguyenhc"},"content":"  isMainBranchPresent(): Observable\u003cboolean\u003e {"},{"lineNumber":265,"author":{"gitId":"nknguyenhc"},"content":"    return from("},{"lineNumber":266,"author":{"gitId":"nknguyenhc"},"content":"      octokit.git.getRef({"},{"lineNumber":267,"author":{"gitId":"nknguyenhc"},"content":"        owner: ORG_NAME,"},{"lineNumber":268,"author":{"gitId":"nknguyenhc"},"content":"        repo: REPO,"},{"lineNumber":269,"author":{"gitId":"nknguyenhc"},"content":"        ref: `heads/${BRANCH}`"},{"lineNumber":270,"author":{"gitId":"nknguyenhc"},"content":"      })"},{"lineNumber":271,"author":{"gitId":"nknguyenhc"},"content":"    ).pipe("},{"lineNumber":272,"author":{"gitId":"nknguyenhc"},"content":"      map((res: any) \u003d\u003e res.status !\u003d\u003d ERRORCODE_NOT_FOUND),"},{"lineNumber":273,"author":{"gitId":"MadLamprey"},"content":"      catchError(() \u003d\u003e of(false))"},{"lineNumber":274,"author":{"gitId":"nknguyenhc"},"content":"    );"},{"lineNumber":275,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":276,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":278,"author":{"gitId":"-"},"content":"   * Fetches information about an issue using GraphQL."},{"lineNumber":279,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":280,"author":{"gitId":"-"},"content":"   * If the issue is not modified, return a `304 - Not Modified` response."},{"lineNumber":281,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":282,"author":{"gitId":"-"},"content":"   * @param id - The issue id."},{"lineNumber":283,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cGithubGraphqlIssue\u003e that represents the response object."},{"lineNumber":284,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":285,"author":{"gitId":"-"},"content":"  fetchIssueGraphql(id: number): Observable\u003cGithubGraphqlIssue\u003e {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    if (this.issueQueryRefs.get(id) \u003d\u003d\u003d undefined) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      const newQueryRef \u003d this.apollo.watchQuery\u003cFetchIssueQuery\u003e({"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        query: FetchIssue,"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        variables: {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"          owner: ORG_NAME,"},{"lineNumber":291,"author":{"gitId":"-"},"content":"          name: REPO,"},{"lineNumber":292,"author":{"gitId":"-"},"content":"          issueId: id"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      this.issueQueryRefs.set(id, newQueryRef);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    const queryRef \u003d this.issueQueryRefs.get(id);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    return this.toFetchIssue(id).pipe("},{"lineNumber":300,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      mergeMap(() \u003d\u003e from(queryRef.refetch())),"},{"lineNumber":302,"author":{"gitId":"MadLamprey"},"content":"      map((value: ApolloQueryResult\u003cFetchIssueQuery\u003e) \u003d\u003e new GithubGraphqlIssue(value.data.repository.issue)),"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new HttpErrorResponse({ status: 304 }))"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":305,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":308,"author":{"gitId":"-"},"content":"   * Checks if the issue has been modified since the last query, and"},{"lineNumber":309,"author":{"gitId":"-"},"content":"   * updates the model to reflect the last modified time."},{"lineNumber":310,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":311,"author":{"gitId":"-"},"content":"   * @param id - The issue id."},{"lineNumber":312,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cboolean\u003e that returns true if the issue has been modified."},{"lineNumber":313,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"  toFetchIssue(id: number): Observable\u003cboolean\u003e {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":316,"author":{"gitId":"-"},"content":"      octokit.issues.get({"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        issue_number: id,"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        headers: { \u0027If-Modified-Since\u0027: this.issuesLastModifiedManager.get(id) }"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":323,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch issue.\u0027))"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":329,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":332,"author":{"gitId":"-"},"content":"   * Fetches all labels in the current repository."},{"lineNumber":333,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":334,"author":{"gitId":"-"},"content":"  fetchAllLabels(): Observable\u003cArray\u003cGithubLabel\u003e\u003e {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    const githubLabels \u003d this.fetchGraphqlList\u003cFetchLabelsQuery, GithubLabel\u003e("},{"lineNumber":336,"author":{"gitId":"-"},"content":"      FetchLabels,"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      { owner: ORG_NAME, name: REPO },"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      (result) \u003d\u003e result.data.repository.labels.edges,"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      GithubLabel"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"    return githubLabels.pipe(catchError((err) \u003d\u003e throwError(\u0027Failed to fetch labels.\u0027)));"},{"lineNumber":343,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":346,"author":{"gitId":"-"},"content":"   * Creates a label in the current repository."},{"lineNumber":347,"author":{"gitId":"-"},"content":"   * @param formattedLabelName - name of new label."},{"lineNumber":348,"author":{"gitId":"-"},"content":"   * @param labelColor - colour of new label."},{"lineNumber":349,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"  createLabel(formattedLabelName: string, labelColor: string): void {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    octokit.issues.createLabel({ owner: ORG_NAME, repo: REPO, name: formattedLabelName, color: labelColor });"},{"lineNumber":352,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":355,"author":{"gitId":"-"},"content":"   * Updates a label\u0027s information in the current repository."},{"lineNumber":356,"author":{"gitId":"-"},"content":"   * @param labelName - name of existing label"},{"lineNumber":357,"author":{"gitId":"-"},"content":"   * @param labelColor - new color to be assigned to existing label."},{"lineNumber":358,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":359,"author":{"gitId":"-"},"content":"  updateLabel(labelName: string, labelColor: string): void {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    octokit.issues.updateLabel({ owner: ORG_NAME, repo: REPO, name: labelName, current_name: labelName, color: labelColor });"},{"lineNumber":361,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"  closeIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({ owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027closed\u0027 })).pipe("},{"lineNumber":365,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":370,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"  reopenIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({ owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027open\u0027 })).pipe("},{"lineNumber":374,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":379,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, labels: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    return from(octokit.issues.create({ owner: ORG_NAME, repo: REPO, title: title, body: description, labels: labels })).pipe("},{"lineNumber":383,"author":{"gitId":"MadLamprey"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e new GithubIssue(response.data))"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":385,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"  createIssueComment(issueId: number, description: string): Observable\u003cGithubComment\u003e {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    return from(octokit.issues.createComment({ owner: ORG_NAME, repo: REPO, issue_number: issueId, body: description })).pipe("},{"lineNumber":389,"author":{"gitId":"MadLamprey"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e response.data)"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":391,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"  updateIssue(id: number, title: string, description: string, labels: string[], assignees?: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":395,"author":{"gitId":"-"},"content":"      octokit.issues.update({"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        issue_number: id,"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        title: title,"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        body: description,"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        labels: labels,"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        assignees: assignees"},{"lineNumber":403,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":405,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":409,"author":{"gitId":"MadLamprey"},"content":"      catchError((err) \u003d\u003e throwError(err))"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":411,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"  updateIssueComment(issueComment: IssueComment): Observable\u003cGithubComment\u003e {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":415,"author":{"gitId":"-"},"content":"      octokit.issues.updateComment({ owner: ORG_NAME, repo: REPO, comment_id: issueComment.id, body: issueComment.description })"},{"lineNumber":416,"author":{"gitId":"MadLamprey"},"content":"    ).pipe(map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e response.data));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"  uploadFile(filename: string, base64String: string): Observable\u003cany\u003e {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":421,"author":{"gitId":"-"},"content":"      octokit.repos.createOrUpdateFile({"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":424,"author":{"gitId":"nknguyenhc"},"content":"        branch: BRANCH,"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        path: `files/${filename}`,"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        message: \u0027upload file\u0027,"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        content: base64String"},{"lineNumber":428,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":430,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"  fetchEventsForRepo(): Observable\u003cany[]\u003e {"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listEventsForRepo({ owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY })).pipe("},{"lineNumber":434,"author":{"gitId":"MadLamprey"},"content":"      map((response) \u003d\u003e response[\u0027data\u0027]),"},{"lineNumber":435,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch events for repo.\u0027))"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":437,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"  fetchDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":441,"author":{"gitId":"-"},"content":"      octokit.repos.getContents({ owner: MOD_ORG, repo: DATA_REPO, path: \u0027data.csv\u0027, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":442,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":443,"author":{"gitId":"-"},"content":"      map((rawData) \u003d\u003e {"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        return { data: atob(rawData[\u0027data\u0027][\u0027content\u0027]) };"},{"lineNumber":445,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":446,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch data file.\u0027))"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":448,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"  fetchLatestRelease(): Observable\u003cGithubRelease\u003e {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":452,"author":{"gitId":"-"},"content":"      octokit.repos.getLatestRelease({ owner: CATCHER_ORG, repo: CATCHER_REPO, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":454,"author":{"gitId":"-"},"content":"      map((res) \u003d\u003e res[\u0027data\u0027]),"},{"lineNumber":455,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch latest release.\u0027))"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":457,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"  private fetchSettingsFromRawUrl(): Observable\u003cSessionData\u003e {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    return from(fetch(getSettingsUrl(MOD_ORG, DATA_REPO))).pipe("},{"lineNumber":461,"author":{"gitId":"-"},"content":"      mergeMap((res) \u003d\u003e res.json()),"},{"lineNumber":462,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch settings file.\u0027))"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":464,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":467,"author":{"gitId":"-"},"content":"   * Fetches the data file that is regulates session information."},{"lineNumber":468,"author":{"gitId":"-"},"content":"   * @return Observable\u003cSessionData\u003e representing session information."},{"lineNumber":469,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":470,"author":{"gitId":"-"},"content":"  fetchSettingsFile(): Observable\u003cSessionData\u003e {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":472,"author":{"gitId":"-"},"content":"      octokit.repos.getContents({ owner: MOD_ORG, repo: DATA_REPO, path: \u0027settings.json\u0027, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":474,"author":{"gitId":"-"},"content":"      map((rawData) \u003d\u003e JSON.parse(atob(rawData[\u0027data\u0027][\u0027content\u0027]))),"},{"lineNumber":475,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        this.logger.error("},{"lineNumber":477,"author":{"gitId":"-"},"content":"          \u0027GithubService: Failed to fetch settings file via REST API. Trying to fetch using raw.githubusercontent.com: \u0027,"},{"lineNumber":478,"author":{"gitId":"-"},"content":"          err"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        return this.fetchSettingsFromRawUrl();"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":483,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"  fetchAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"    return from(octokit.users.getAuthenticated()).pipe("},{"lineNumber":487,"author":{"gitId":"MadLamprey"},"content":"      map((response) \u003d\u003e response[\u0027data\u0027]),"},{"lineNumber":488,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch authenticated user.\u0027))"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":490,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"  getRepoURL(): string {"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    return ORG_NAME.concat(\u0027/\u0027).concat(REPO);"},{"lineNumber":494,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number, event: Event) {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"    if (id) {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"      window.open(\u0027https://github.com/\u0027.concat(this.getRepoURL()).concat(\u0027/issues/\u0027).concat(String(id)));"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":500,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(new Error(UNABLE_TO_OPEN_IN_BROWSER));"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":502,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":503,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"    this.logger.info(`GithubService: Resetting issues cache`);"},{"lineNumber":507,"author":{"gitId":"-"},"content":"    this.issuesCacheManager.clear();"},{"lineNumber":508,"author":{"gitId":"-"},"content":"    this.issuesLastModifiedManager.clear();"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    this.issueQueryRefs.clear();"},{"lineNumber":510,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"  getProfilesData(): Promise\u003cResponse\u003e {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    return fetch(AppConfig.clientDataUrl);"},{"lineNumber":514,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":515,"author":{"gitId":"-"},"content":""},{"lineNumber":516,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":517,"author":{"gitId":"-"},"content":"   * Performs an API call to fetch a page of filtered issues with a given pageNumber."},{"lineNumber":518,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":519,"author":{"gitId":"-"},"content":"   * The request is sent with the ETag of the latest cached HTTP response."},{"lineNumber":520,"author":{"gitId":"-"},"content":"   * If page requested has the same ETag, or the request results in an error,"},{"lineNumber":521,"author":{"gitId":"-"},"content":"   * then the cached page is returned instead."},{"lineNumber":522,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":523,"author":{"gitId":"-"},"content":"   * @param filter - The issue filter"},{"lineNumber":524,"author":{"gitId":"-"},"content":"   * @param pageNumber - The page to be fetched"},{"lineNumber":525,"author":{"gitId":"-"},"content":"   * @returns An observable representing the response containing a single page of filtered issues"},{"lineNumber":526,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":527,"author":{"gitId":"-"},"content":"  private getIssuesAPICall(filter: RestGithubIssueFilter, pageNumber: number): Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e {"},{"lineNumber":528,"author":{"gitId":"-"},"content":"    const apiCall: Promise\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e \u003d octokit.issues.listForRepo({"},{"lineNumber":529,"author":{"gitId":"-"},"content":"      ...filter,"},{"lineNumber":530,"author":{"gitId":"-"},"content":"      owner: ORG_NAME,"},{"lineNumber":531,"author":{"gitId":"-"},"content":"      repo: REPO,"},{"lineNumber":532,"author":{"gitId":"-"},"content":"      sort: \u0027created\u0027,"},{"lineNumber":533,"author":{"gitId":"-"},"content":"      direction: \u0027desc\u0027,"},{"lineNumber":534,"author":{"gitId":"-"},"content":"      per_page: MAX_ITEMS_PER_PAGE,"},{"lineNumber":535,"author":{"gitId":"-"},"content":"      page: pageNumber,"},{"lineNumber":536,"author":{"gitId":"-"},"content":"      headers: { \u0027If-None-Match\u0027: this.issuesCacheManager.getEtagFor(pageNumber) }"},{"lineNumber":537,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    const apiCall$ \u003d from(apiCall);"},{"lineNumber":539,"author":{"gitId":"MadLamprey"},"content":"    return apiCall$.pipe(catchError((err) \u003d\u003e of(this.issuesCacheManager.get(pageNumber))));"},{"lineNumber":540,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":543,"author":{"gitId":"-"},"content":"   * Fetches a list of items using a GraphQL query that queries for paginated data."},{"lineNumber":544,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":545,"author":{"gitId":"-"},"content":"   * @param query - The GraphQL query that queries for paginated data."},{"lineNumber":546,"author":{"gitId":"-"},"content":"   * @param variables - Additional variables for the GraphQL query."},{"lineNumber":547,"author":{"gitId":"-"},"content":"   * @callback pluckEdges A function that returns a list of edges in a ApolloQueryResult."},{"lineNumber":548,"author":{"gitId":"-"},"content":"   * @callback Model Constructor for the item model."},{"lineNumber":549,"author":{"gitId":"-"},"content":"   * @returns A list of items from the query."},{"lineNumber":550,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":551,"author":{"gitId":"-"},"content":"  private fetchGraphqlList\u003cT, M\u003e("},{"lineNumber":552,"author":{"gitId":"-"},"content":"    query: DocumentNode,"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    variables: {},"},{"lineNumber":554,"author":{"gitId":"-"},"content":"    pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e,"},{"lineNumber":555,"author":{"gitId":"-"},"content":"    Model: new (data) \u003d\u003e M"},{"lineNumber":556,"author":{"gitId":"-"},"content":"  ): Observable\u003cArray\u003cM\u003e\u003e {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"    return from(this.withPagination\u003cT\u003e(pluckEdges)(query, variables)).pipe("},{"lineNumber":558,"author":{"gitId":"-"},"content":"      map((results: Array\u003cApolloQueryResult\u003cT\u003e\u003e) \u003d\u003e {"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        const issues \u003d results.reduce((accumulated, current) \u003d\u003e accumulated.concat(pluckEdges(current)), []);"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        return issues.map((issue) \u003d\u003e new Model(issue.node));"},{"lineNumber":561,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":562,"author":{"gitId":"MadLamprey"},"content":"      throwIfEmpty(() \u003d\u003e new HttpErrorResponse({ status: 304 }))"},{"lineNumber":563,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":564,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":565,"author":{"gitId":"-"},"content":""},{"lineNumber":566,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":567,"author":{"gitId":"-"},"content":"   * Returns an async function that will accept a GraphQL query that requests for paginated items."},{"lineNumber":568,"author":{"gitId":"-"},"content":"   * Said function will recursively query for all subsequent pages until a page that has less than 100 items is found,"},{"lineNumber":569,"author":{"gitId":"-"},"content":"   * then return all queried pages in an array."},{"lineNumber":570,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":571,"author":{"gitId":"-"},"content":"   * @callback pluckEdges - A function that returns a list of edges in a ApolloQueryResult."},{"lineNumber":572,"author":{"gitId":"-"},"content":"   * @returns an async function that accepts a GraphQL query for paginated data and any additional variables to that query"},{"lineNumber":573,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":574,"author":{"gitId":"-"},"content":"  private withPagination\u003cT\u003e(pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e) {"},{"lineNumber":575,"author":{"gitId":"-"},"content":"    return async (query: DocumentNode, variables: { [key: string]: any } \u003d {}): Promise\u003cArray\u003cApolloQueryResult\u003cT\u003e\u003e\u003e \u003d\u003e {"},{"lineNumber":576,"author":{"gitId":"-"},"content":"      const cursor \u003d variables.cursor || null;"},{"lineNumber":577,"author":{"gitId":"-"},"content":"      const graphqlQuery \u003d this.apollo.watchQuery\u003cT\u003e({ query, variables: { ...variables, cursor } });"},{"lineNumber":578,"author":{"gitId":"-"},"content":"      return graphqlQuery.refetch().then(async (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e {"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        const intermediate \u003d Array.isArray(results) ? results : [results];"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        const edges \u003d pluckEdges(results);"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        const nextCursor \u003d edges.length \u003d\u003d\u003d 0 ? null : edges[edges.length - 1].cursor;"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"        if (edges.length \u003c MAX_ITEMS_PER_PAGE || !nextCursor) {"},{"lineNumber":584,"author":{"gitId":"-"},"content":"          return intermediate;"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        const nextResults \u003d await this.withPagination\u003cT\u003e(pluckEdges)(query, {"},{"lineNumber":587,"author":{"gitId":"-"},"content":"          ...variables,"},{"lineNumber":588,"author":{"gitId":"-"},"content":"          cursor: nextCursor"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":590,"author":{"gitId":"-"},"content":"        return intermediate.concat(nextResults);"},{"lineNumber":591,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":593,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":594,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":79,"MadLamprey":21,"-":494}},{"path":"src/app/core/services/issue-table-settings.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"Arif-Khalid"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"Arif-Khalid"},"content":"import { TableSettings } from \u0027../models/table-settings.model\u0027;"},{"lineNumber":3,"author":{"gitId":"Arif-Khalid"},"content":"@Injectable({"},{"lineNumber":4,"author":{"gitId":"Arif-Khalid"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":5,"author":{"gitId":"Arif-Khalid"},"content":"})"},{"lineNumber":6,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":7,"author":{"gitId":"Arif-Khalid"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Arif-Khalid"},"content":" * Responsible for storing and retrieving the table settings for issue tables created"},{"lineNumber":9,"author":{"gitId":"Arif-Khalid"},"content":" * Map is required since there can be multiple tables within the same page"},{"lineNumber":10,"author":{"gitId":"Arif-Khalid"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Arif-Khalid"},"content":"export class IssueTableSettingsService {"},{"lineNumber":12,"author":{"gitId":"Arif-Khalid"},"content":"  private _tableSettingsMap: { [index: string]: TableSettings } \u003d {};"},{"lineNumber":13,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":14,"author":{"gitId":"Arif-Khalid"},"content":"  public getTableSettings(tableName: string): TableSettings {"},{"lineNumber":15,"author":{"gitId":"Arif-Khalid"},"content":"    return this._tableSettingsMap[tableName] || new TableSettings();"},{"lineNumber":16,"author":{"gitId":"Arif-Khalid"},"content":"  }"},{"lineNumber":17,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":18,"author":{"gitId":"Arif-Khalid"},"content":"  public setTableSettings(tableName: string, tableSettings: TableSettings): void {"},{"lineNumber":19,"author":{"gitId":"Arif-Khalid"},"content":"    this._tableSettingsMap[tableName] \u003d tableSettings;"},{"lineNumber":20,"author":{"gitId":"Arif-Khalid"},"content":"  }"},{"lineNumber":21,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":22,"author":{"gitId":"Arif-Khalid"},"content":"  public clearTableSettings(): void {"},{"lineNumber":23,"author":{"gitId":"Arif-Khalid"},"content":"    this._tableSettingsMap \u003d {};"},{"lineNumber":24,"author":{"gitId":"Arif-Khalid"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"Arif-Khalid"},"content":"}"}],"authorContributionMap":{"Arif-Khalid":25}},{"path":"src/app/core/services/issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { BehaviorSubject, EMPTY, forkJoin, Observable, of, Subscription, throwError, timer } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { catchError, exhaustMap, finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../models/hidden-data.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../models/issue-dispute.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { FILTER, Issue, Issues, IssuesFilter, STATUS } from \u0027../models/issue.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { appVersion } from \u0027./application.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Responsible for creating and updating issues, and periodically fetching issues"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * using GitHub."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export class IssueService {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  issues: Issues;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  private sessionId: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private dataService: DataService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  startPollIssues() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.isLoading.next(true);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d timer(0, IssueService.POLL_INTERVAL)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        .pipe("},{"lineNumber":58,"author":{"gitId":"MadLamprey"},"content":"          exhaustMap(() \u003d\u003e"},{"lineNumber":59,"author":{"gitId":"MadLamprey"},"content":"            this.reloadAllIssues().pipe("},{"lineNumber":60,"author":{"gitId":"MadLamprey"},"content":"              catchError(() \u003d\u003e EMPTY),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"              finalize(() \u003d\u003e this.isLoading.next(false))"},{"lineNumber":62,"author":{"gitId":"MadLamprey"},"content":"            )"},{"lineNumber":63,"author":{"gitId":"MadLamprey"},"content":"          )"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        .subscribe();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  stopPollIssues() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   * Will constantly poll and update the application\u0027s state\u0027s with the updated issue."},{"lineNumber":78,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"   * @param issueId - The issue\u0027s id to poll for."},{"lineNumber":80,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    return timer(0, IssueService.POLL_INTERVAL).pipe("},{"lineNumber":83,"author":{"gitId":"MadLamprey"},"content":"      exhaustMap(() \u003d\u003e"},{"lineNumber":84,"author":{"gitId":"MadLamprey"},"content":"        this.githubService.fetchIssueGraphql(issueId).pipe("},{"lineNumber":85,"author":{"gitId":"-"},"content":"          map((response) \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            const issue \u003d this.createIssueModel(response);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            this.updateLocalStore(issue);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return issue;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"          }),"},{"lineNumber":90,"author":{"gitId":"MadLamprey"},"content":"          catchError((err) \u003d\u003e this.getIssue(issueId))"},{"lineNumber":91,"author":{"gitId":"MadLamprey"},"content":"        )"},{"lineNumber":92,"author":{"gitId":"MadLamprey"},"content":"      )"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  reloadAllIssues() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    return this.initializeData();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      return of(this.issues[id]);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":110,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return this.issues[id];"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":114,"author":{"gitId":"MadLamprey"},"content":"      catchError((err) \u003d\u003e of(this.issues[id]))"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const clientType \u003d \u0027Desktop\u0027;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    const hiddenData \u003d new Map(["},{"lineNumber":122,"author":{"gitId":"-"},"content":"      [\u0027session\u0027, this.sessionId],"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      [\u0027Version\u0027, `${clientType} v${appVersion}`]"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    ]);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      .createIssue(title, issueDescription, labelsArray)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      .pipe(map((response: GithubIssue) \u003d\u003e this.createIssueModel(response)));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    return this.updateGithubIssue(issue).pipe("},{"lineNumber":133,"author":{"gitId":"-"},"content":"      map((githubIssue: GithubIssue) \u003d\u003e {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        githubIssue.comments \u003d issue.githubComments;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return this.createIssueModel(githubIssue);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"   * Updates an issue without attempting to create an issue model. Used when we want to treat"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   * updateIssue as an atomic operation that only performs an API call."},{"lineNumber":143,"author":{"gitId":"-"},"content":"   * @param issue current issue model"},{"lineNumber":144,"author":{"gitId":"-"},"content":"   * @returns GitHubIssue from the API request"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  updateGithubIssue(issue: Issue): Observable\u003cGithubIssue\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      .updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue), this.createLabelsForIssue(issue), assignees)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":151,"author":{"gitId":"-"},"content":"        catchError((err) \u003d\u003e {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"          return this.parseUpdateIssueResponseError(err);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":159,"author":{"gitId":"-"},"content":"      mergeMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [updatedComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d updatedComment.id)];"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    const commentApiToCall \u003d isTesterResponseExist"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":176,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":186,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    // The issue must be updated first to ensure that fields like assignees are valid"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    return this.updateGithubIssue(issue).pipe("},{"lineNumber":198,"author":{"gitId":"-"},"content":"      mergeMap((response: GithubIssue) \u003d\u003e {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":200,"author":{"gitId":"-"},"content":"          map((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            issue.githubComments \u003d [githubComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d githubComment.id)];"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            response.comments \u003d issue.githubComments;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return this.createIssueModel(response);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":212,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":218,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":222,"author":{"gitId":"-"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":223,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":224,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":225,"author":{"gitId":"-"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        return ("},{"lineNumber":229,"author":{"gitId":"-"},"content":"          `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":230,"author":{"gitId":"-"},"content":"          // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":231,"author":{"gitId":"-"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    return issueDisputeString;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":248,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return deletedIssue;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"  undeleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    return this.githubService.reopenIssue(id).pipe("},{"lineNumber":258,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        const reopenedIssue \u003d this.createIssueModel(response);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        this.updateLocalStore(reopenedIssue);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        return reopenedIssue;"},{"lineNumber":262,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":267,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":268,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":269,"author":{"gitId":"-"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":276,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":277,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    this.issues \u003d {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      ...this.issues,"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      [issueToUpdate.id]: issueToUpdate"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":288,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":294,"author":{"gitId":"-"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":295,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":296,"author":{"gitId":"-"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":297,"author":{"gitId":"MadLamprey"},"content":"    return this.issues$.pipe(map((issues) \u003d\u003e issues.filter((issue) \u003d\u003e issue.duplicateOf \u003d\u003d\u003d parentIssue.id)));"},{"lineNumber":298,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"  reset(resetSessionId: boolean) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    if (resetSessionId) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      this.sessionId \u003d undefined;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    this.issues \u003d undefined;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    this.stopPollIssues();"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    this.isLoading.complete();"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    const issuesAPICallsByFilter: Array\u003cObservable\u003cArray\u003cGithubIssue\u003e\u003e\u003e \u003d [];"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[this.phaseService.currentPhase][this.userService.currentUser.role]) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      case FILTER.FilterByCreator:"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":319,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({ creator: this.userService.currentUser.loginId }))"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      case FILTER.FilterByTeam: // Only student has this filter"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":324,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":325,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027tutorial\u0027, this.userService.currentUser.team.tutorialClassId),"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027team\u0027, this.userService.currentUser.team.teamId),"},{"lineNumber":327,"author":{"gitId":"-"},"content":"            new RestGithubIssueFilter({})"},{"lineNumber":328,"author":{"gitId":"-"},"content":"          )"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      case FILTER.FilterByTeamAssigned: // Only for Tutors and Admins"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        const allocatedTeams \u003d this.userService.currentUser.allocatedTeams;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        allocatedTeams.forEach((team) \u003d\u003e {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"          issuesAPICallsByFilter.push("},{"lineNumber":335,"author":{"gitId":"-"},"content":"            this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":336,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027tutorial\u0027, team.tutorialClassId),"},{"lineNumber":337,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027team\u0027, team.teamId),"},{"lineNumber":338,"author":{"gitId":"-"},"content":"              new RestGithubIssueFilter({})"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":340,"author":{"gitId":"-"},"content":"          );"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      case FILTER.NoFilter:"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push(this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({})));"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      case FILTER.NoAccess:"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        return of([]);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    // const issuesAPICallsByFilter \u003d filters.map(filter \u003d\u003e this.githubService.fetchIssuesGraphql(filter));"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    return forkJoin(issuesAPICallsByFilter).pipe("},{"lineNumber":353,"author":{"gitId":"-"},"content":"      map((issuesByFilter: [][]) \u003d\u003e {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        const fetchedIssueIds: Array\u003cNumber\u003e \u003d [];"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"        for (const issues of issuesByFilter) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"          for (const issue of issues) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            fetchedIssueIds.push(this.createIssueModel(issue).id);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            this.createAndSaveIssueModel(issue);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"        const outdatedIssueIds: Array\u003cNumber\u003e \u003d this.getOutdatedIssueIds(fetchedIssueIds);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        this.deleteIssuesFromLocalStore(outdatedIssueIds);"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        return Object.values(this.issues);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":369,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    return true;"},{"lineNumber":375,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"  private deleteIssuesFromLocalStore(ids: Array\u003cNumber\u003e): void {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    ids.forEach((id: number) \u003d\u003e {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"      this.getIssue(id).subscribe((issue) \u003d\u003e this.deleteFromLocalStore(issue));"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":381,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":384,"author":{"gitId":"-"},"content":"   * Returns an array of outdated issue ids by comparing the ids of the recently"},{"lineNumber":385,"author":{"gitId":"-"},"content":"   * fetched issues with the current issue ids in the local store"},{"lineNumber":386,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":387,"author":{"gitId":"-"},"content":"  private getOutdatedIssueIds(fetchedIssueIds: Array\u003cNumber\u003e): Array\u003cNumber\u003e {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      Ignore for first fetch or ignore if there is no fetch result"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"      We also have to ignore for no fetch result as the cache might return a"},{"lineNumber":392,"author":{"gitId":"-"},"content":"      304 reponse with no differences in issues, resulting in the fetchIssueIds"},{"lineNumber":393,"author":{"gitId":"-"},"content":"      to be empty"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined || !fetchedIssueIds.length) {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"      return [];"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"    const fetchedIssueIdsSet \u003d new Set\u003cNumber\u003e(fetchedIssueIds);"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    const result \u003d Object.keys(this.issues)"},{"lineNumber":402,"author":{"gitId":"-"},"content":"      .map((x) \u003d\u003e +x)"},{"lineNumber":403,"author":{"gitId":"-"},"content":"      .filter((issueId) \u003d\u003e !fetchedIssueIdsSet.has(issueId));"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":406,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":409,"author":{"gitId":"-"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":410,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":411,"author":{"gitId":"-"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026 this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":416,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`), this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"    if (issue.severity) {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    if (issue.type) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"    if (issue.response) {"},{"lineNumber":428,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.response));"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"    if (issue.duplicated) {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"    if (issue.status) {"},{"lineNumber":436,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"    if (issue.pending) {"},{"lineNumber":440,"author":{"gitId":"-"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":442,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":443,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"    if (issue.unsure) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":450,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":454,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":458,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    let issue: Issue;"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":464,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":467,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseTeamResponseIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":470,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":473,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseModerationIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":476,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":478,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"    if (issue.parseError) {"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      this.logger.error(\u0027IssueService: \u0027 + issue.parseError);"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":484,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"  private parseUpdateIssueResponseError(err: any) {"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    this.logger.error(\u0027IssueService: \u0027, err); // Log full details of error first"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"    if (err.code !\u003d\u003d 422 || !err.hasOwnProperty(\u0027message\u0027)) {"},{"lineNumber":490,"author":{"gitId":"-"},"content":"      return throwError(err.response.data.message); // More readable error message"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"    // Error code 422 implies that one of the fields are invalid"},{"lineNumber":494,"author":{"gitId":"-"},"content":"    const validationFailedPrefix \u003d \u0027Validation Failed:\u0027;"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    const message: string \u003d err.message;"},{"lineNumber":496,"author":{"gitId":"-"},"content":"    const errorJsonRaw \u003d message.substring(validationFailedPrefix.length);"},{"lineNumber":497,"author":{"gitId":"-"},"content":"    const errorJson \u003d JSON.parse(errorJsonRaw);"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"    const mandatoryFields \u003d [\u0027field\u0027, \u0027code\u0027, \u0027value\u0027];"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    const hasMandatoryFields \u003d mandatoryFields.every((field) \u003d\u003e errorJson.hasOwnProperty(field));"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"    if (hasMandatoryFields) {"},{"lineNumber":503,"author":{"gitId":"-"},"content":"      if (errorJson[\u0027field\u0027] \u003d\u003d\u003d \u0027assignees\u0027 \u0026\u0026 errorJson[\u0027code\u0027] \u003d\u003d\u003d \u0027invalid\u0027) {"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        // If assignees are invalid, return a custom error"},{"lineNumber":505,"author":{"gitId":"-"},"content":"        return throwError("},{"lineNumber":506,"author":{"gitId":"-"},"content":"          `Assignee ${errorJson[\u0027value\u0027]} has not joined your organization yet. Please remove them from the assignees list.`"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":508,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"    // Generic 422 Validation Failed since it is not an assignees problem"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    return throwError(err.response.data.message);"},{"lineNumber":513,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":516,"author":{"gitId":"-"},"content":"    if (filterValue) {"},{"lineNumber":517,"author":{"gitId":"-"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":518,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":519,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":522,"author":{"gitId":"-"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":523,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":524,"author":{"gitId":"-"},"content":""},{"lineNumber":525,"author":{"gitId":"-"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":526,"author":{"gitId":"-"},"content":"    return this.issueTeamFilter;"},{"lineNumber":527,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":528,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":12,"-":516}},{"path":"src/app/core/services/label.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, pipe, UnaryFunction } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Label } from \u0027../models/label.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/* The threshold to decide if color is dark or light."},{"lineNumber":10,"author":{"gitId":"-"},"content":"A higher threshold value will result in more colors determined to be \"dark\"."},{"lineNumber":11,"author":{"gitId":"-"},"content":"W3C recommendation is 0.179, but 0.184 is chosen so that some colors (like bright red)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"are considered dark (Github too consider them dark) */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const COLOR_DARKNESS_THRESHOLD \u003d 0.184;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"const COLOR_BLACK \u003d \u0027000000\u0027; // Dark color for text with light background"},{"lineNumber":16,"author":{"gitId":"-"},"content":"const COLOR_WHITE \u003d \u0027ffffff\u0027; // Light color for text with dark background"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"const COLOR_RED_PALE \u003d \u0027ffe0e0\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"const COLOR_RED_LIGHT \u003d \u0027ffcccc\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"const COLOR_RED \u003d \u0027ff9999\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"const COLOR_RED_DARK \u003d \u0027ff6666\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"const COLOR_PURPLE_LIGHT \u003d \u0027d966ff\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"const COLOR_PURPLE \u003d \u00279900cc\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"const COLOR_GREEN \u003d \u002700802b\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"const COLOR_ORANGE_PALE \u003d \u0027ffebcc\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"const COLOR_ORANGE_LIGHT \u003d \u0027ffcc80\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"const COLOR_ORANGE \u003d \u0027ff9900\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"const COLOR_SILVER \u003d \u0027a6a6a6\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"const COLOR_BLUE \u003d \u00270066ff\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_SEVERITY \u003d \u0027Severity\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_BUG_TYPE \u003d \u0027Bug Type\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_RESPONSE \u003d \u0027Response\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"// The HTML template definition of selected labels are hard-coded here, move to a config file in the future"},{"lineNumber":40,"author":{"gitId":"-"},"content":"const VERY_LOW_DEFINITION \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that is \u003cmark\u003epurely cosmetic\u003c/mark\u003e and \u003cmark\u003edoes not affect usage\u003c/mark\u003e. For example, \u0027 +"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u0027\u003cul\u003e\u0027 +"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003etypo issues\u003c/li\u003e\u0027 +"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003espacing issues\u003c/li\u003e\u0027 +"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003elayout issues\u003c/li\u003e\u0027 +"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003ecolor issues\u003c/li\u003e\u0027 +"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003efont issues\u003c/li\u003e\u0027 +"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  \u0027\u003c/ul\u003e\u0027 +"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \"in the docs or the UI that doesn\u0027t affect usage.\u003c/p\u003e\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"const LOW_DEFINITION \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that is unlikely to affect normal operations of the product. \u0027 +"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u0027Appears only in very rare situations and causes a minor inconvenience only.\u003c/p\u003e\u0027;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"const MEDIUM_DEFINITION \u003d \u0027\u003cp\u003eA flaw that causes occasional inconvenience to some users but they can \u0027 + \u0027continue to use the product.\u003c/p\u003e\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"const HIGH_DEFINITION \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that affects most users and causes major problems for users.\u0027 + \u0027i.e., makes the product almost unusable for most users.\u003c/p\u003e\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"const FUNCTIONALITY_BUG_DEFINITION \u003d \u0027\u003cp\u003eA functionality does not work as specified/expected.\u003c/p\u003e\u0027;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"const FEATURE_FLAW_DEFINITION \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eSome functionality missing from a feature delivered in the current version in \u0027 +"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u0027a way that the feature becomes less useful to the intended target user for \u003ci\u003enormal\u003c/i\u003e usage. \u0027 +"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \"i.e., the feature is not \u0027complete\u0027.\\nIn other words, an acceptance-testing bug that falls within \" +"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u0027the scope of the current version features. These issues are counted against the \u003ci\u003eproduct design\u003c/i\u003e aspect \u0027 +"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u0027of the project.\u003c/p\u003e\u0027;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"const DOCUMENTATION_BUG_DEFINITION \u003d"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw in the documentation \u0027 + \u0027\u003cspan style\u003d\"color:grey;\"\u003ee.g., a missing step, a wrong instruction, typos\u003c/span\u003e\u003c/p\u003e\u0027;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"const ACCEPTED_DEFINITION \u003d \u0027\u003cp\u003eYou accept it as a bug.\u003c/p\u003e\u0027;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"const NOT_IN_SCOPE_DEFINITION \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eIt is a valid issue but not something the team should be penalized for \u0027 +"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  \u0027\u003cspan style\u003d\"color:grey;\"\u003ee.g., it was not related to features delivered in this version\u003c/span\u003e.\u003c/p\u003e\u0027;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"const REJECTED_DEFINITION \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \"\u003cp\u003eWhat tester treated as a bug is in fact the expected behavior (from the user\u0027s point of view), or the tester \" +"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  \u0027was mistaken in some other way.\u003c/p\u003e\u0027;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"const CANNOT_REPRODUCE_DEFINITION \u003d \u0027\u003cp\u003eYou are unable to reproduce the behavior reported in the bug after multiple tries.\u003c/p\u003e\u0027;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"const ISSUE_UNCLEAR_DEFINITION \u003d \u0027\u003cp\u003eThe issue description is not clear.\u003c/p\u003e\u0027;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"const UNDEFINED_DEFINITION \u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"export const LABEL_DEFINITIONS \u003d {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  severityVeryLow: VERY_LOW_DEFINITION,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  severityLow: LOW_DEFINITION,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  severityMedium: MEDIUM_DEFINITION,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  severityHigh: HIGH_DEFINITION,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  typeFunctionalityBug: FUNCTIONALITY_BUG_DEFINITION,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  typeFeatureFlaw: FEATURE_FLAW_DEFINITION,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  typeDocumentationBug: DOCUMENTATION_BUG_DEFINITION,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  responseAccepted: ACCEPTED_DEFINITION,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  responseNotInScope: NOT_IN_SCOPE_DEFINITION,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  responseRejected: REJECTED_DEFINITION,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  responseCannotProduce: CANNOT_REPRODUCE_DEFINITION,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  responseIssueUnclear: ISSUE_UNCLEAR_DEFINITION,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  undefined: UNDEFINED_DEFINITION"},{"lineNumber":92,"author":{"gitId":"-"},"content":"};"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"const REQUIRED_LABELS \u003d {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  severity: {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    VeryLow: new Label(\u0027severity\u0027, \u0027VeryLow\u0027, COLOR_RED_PALE, VERY_LOW_DEFINITION),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    Low: new Label(\u0027severity\u0027, \u0027Low\u0027, COLOR_RED_LIGHT, LOW_DEFINITION),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    Medium: new Label(\u0027severity\u0027, \u0027Medium\u0027, COLOR_RED, MEDIUM_DEFINITION),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    High: new Label(\u0027severity\u0027, \u0027High\u0027, COLOR_RED_DARK, HIGH_DEFINITION)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  type: {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    DocumentationBug: new Label(\u0027type\u0027, \u0027DocumentationBug\u0027, COLOR_PURPLE_LIGHT, DOCUMENTATION_BUG_DEFINITION),"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    FeatureFlaw: new Label(\u0027type\u0027, \u0027FeatureFlaw\u0027, COLOR_PURPLE_LIGHT, FEATURE_FLAW_DEFINITION),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    FunctionalityBug: new Label(\u0027type\u0027, \u0027FunctionalityBug\u0027, COLOR_PURPLE, FUNCTIONALITY_BUG_DEFINITION)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  response: {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    Accepted: new Label(\u0027response\u0027, \u0027Accepted\u0027, COLOR_GREEN, ACCEPTED_DEFINITION),"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    CannotReproduce: new Label(\u0027response\u0027, \u0027CannotReproduce\u0027, COLOR_ORANGE_PALE, CANNOT_REPRODUCE_DEFINITION),"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    IssueUnclear: new Label(\u0027response\u0027, \u0027IssueUnclear\u0027, COLOR_ORANGE_LIGHT, ISSUE_UNCLEAR_DEFINITION),"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    NotInScope: new Label(\u0027response\u0027, \u0027NotInScope\u0027, COLOR_ORANGE_LIGHT, NOT_IN_SCOPE_DEFINITION),"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    Rejected: new Label(\u0027response\u0027, \u0027Rejected\u0027, COLOR_ORANGE, REJECTED_DEFINITION)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  status: {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    Done: new Label(\u0027status\u0027, \u0027Done\u0027, COLOR_SILVER),"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    Incomplete: new Label(\u0027status\u0027, \u0027Incomplete\u0027, COLOR_BLACK)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  others: {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    duplicate: new Label(undefined, \u0027duplicate\u0027, COLOR_BLUE)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"};"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"export type LabelCategory \u003d keyof typeof REQUIRED_LABELS;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":126,"author":{"gitId":"-"},"content":"})"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":129,"author":{"gitId":"-"},"content":" * Responsible for retrieval and parsing and syncing of label data"},{"lineNumber":130,"author":{"gitId":"-"},"content":" * from the GitHub repository for the CATcher application."},{"lineNumber":131,"author":{"gitId":"-"},"content":" */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"export class LabelService {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  private static severityLabels: Label[] \u003d Object.values(REQUIRED_LABELS.severity);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  private static typeLabels: Label[] \u003d Object.values(REQUIRED_LABELS.type);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  private static responseLabels: Label[] \u003d Object.values(REQUIRED_LABELS.response);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  private static statusLabels: Label[] \u003d Object.values(REQUIRED_LABELS.status);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  private static otherLabels: Label[] \u003d Object.values(REQUIRED_LABELS.others);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  private static allLabelArrays \u003d {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    severity: LabelService.severityLabels,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    type: LabelService.typeLabels,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    response: LabelService.responseLabels,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    status: LabelService.statusLabels,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    others: LabelService.otherLabels"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  private static testerLabelArrays \u003d {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    severity: LabelService.severityLabels,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    type: LabelService.typeLabels"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private logger: LoggingService) {}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  public static getRequiredLabelsAsArray(needAllLabels: boolean): Label[] {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    let requiredLabels: Label[] \u003d [];"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    const labels \u003d needAllLabels ? Object.values(this.allLabelArrays) : Object.values(this.testerLabelArrays);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    labels.map((label) \u003d\u003e (requiredLabels \u003d requiredLabels.concat(label)));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    return requiredLabels;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"   * Updates the required label to be in sync with the labels on the GitHub repository."},{"lineNumber":163,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  public static updateRequiredLabelColor(labelColor: string, label: Label) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    const labelArray \u003d LabelService.allLabelArrays[label.labelCategory];"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    if (labelArray) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      const requiredLabel \u003d labelArray.find((requiredLabel: Label) \u003d\u003e requiredLabel.labelValue \u003d\u003d\u003d label.labelValue);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      requiredLabel.labelColor \u003d labelColor;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"   * Returns an custom operator which helps to"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   * synchronise the labels in our application"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   * with the remote repository."},{"lineNumber":177,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  syncLabels(needAllLabels: boolean): UnaryFunction\u003cObservable\u003cboolean\u003e, Observable\u003cany\u003e\u003e {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    return pipe(mergeMap(() \u003d\u003e this.synchronizeRemoteLabels(needAllLabels)));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"   * Synchronizes the labels in github with those required by the application."},{"lineNumber":184,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  synchronizeRemoteLabels(needAllLabels: boolean): Observable\u003cany\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    return this.githubService.fetchAllLabels().pipe("},{"lineNumber":187,"author":{"gitId":"-"},"content":"      map((githubLabels) \u003d\u003e githubLabels.map(this.toLabel)),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      map((response) \u003d\u003e {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        this.ensureRepoHasRequiredLabels(response, LabelService.getRequiredLabelsAsArray(needAllLabels));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return response;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"   * Returns all the labels of a certain type (e.g severity)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":198,"author":{"gitId":"-"},"content":"   * @return an array of label of that type"},{"lineNumber":199,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  getLabelList(attributeName: string): Label[] {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return LabelService.severityLabels;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return LabelService.typeLabels;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      // case \u0027responseTag\u0027:"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      case \u0027response\u0027:"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return LabelService.responseLabels;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    this.logger.info(`LabelService: Unfiltered Attribute ${attributeName} in getLabelList`);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * Returns a title for the label type"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  getLabelTitle(attributeName: string): string {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_SEVERITY;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_BUG_TYPE;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      case \u0027response\u0027:"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_RESPONSE;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    this.logger.info(`LabelService: Unfiltered Attribute ${attributeName} in getLabelTitle`);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   * Returns the color of the label by searching a list of"},{"lineNumber":231,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":232,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low / Medium / High / ...)"},{"lineNumber":233,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  getColorOfLabel(labelCategory: LabelCategory, labelValue: string): string {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027 || !LabelService.allLabelArrays[labelCategory]) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"      this.logger.info(`LabelService: Unfiltered Attribute, ${labelValue}: ${labelCategory} in getColorOfLabel`);"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"      return COLOR_WHITE;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    const existingLabel \u003d LabelService.allLabelArrays[labelCategory].find((label: Label) \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue);"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelColor \u003d\u003d\u003d undefined) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      return COLOR_WHITE;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      return existingLabel.labelColor;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"   * Returns the definition of the label by searching a list of"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low/ Medium/ High / ...)."},{"lineNumber":254,"author":{"gitId":"-"},"content":"   * @param labelCategory: the label\u0027s category (e.g Type/ Severity / ...)."},{"lineNumber":255,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  getLabelDefinition(labelValue: string, labelCategory: string): string {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027 || labelValue \u003d\u003d\u003d null || labelCategory \u003d\u003d\u003d \u0027\u0027 || labelCategory \u003d\u003d\u003d null) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    const existingLabel \u003d LabelService.getRequiredLabelsAsArray(true).find("},{"lineNumber":262,"author":{"gitId":"-"},"content":"      (label) \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue \u0026\u0026 label.labelCategory \u003d\u003d\u003d labelCategory"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelDefinition \u003d\u003d\u003d undefined) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"      return existingLabel.labelDefinition;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"   * Ensures that the repo has the required labels."},{"lineNumber":274,"author":{"gitId":"-"},"content":"   * Compares the actual labels in the repo with the required labels. If an required label is missing,"},{"lineNumber":275,"author":{"gitId":"-"},"content":"   * it is added to the repo. If the required label exists but the label color is not as expected,"},{"lineNumber":276,"author":{"gitId":"-"},"content":"   * the color is updated. Does not delete actual labels that do not match required labels."},{"lineNumber":277,"author":{"gitId":"-"},"content":"   * i.e., the repo might have more labels than the required labels after this operation."},{"lineNumber":278,"author":{"gitId":"-"},"content":"   * @param actualLabels: labels in the repo."},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * @param requiredLabels: required labels."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  private ensureRepoHasRequiredLabels(actualLabels: Label[], requiredLabels: Label[]): void {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    requiredLabels.forEach((label) \u003d\u003e {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      // Finds for a label that has the same name as a required label."},{"lineNumber":284,"author":{"gitId":"-"},"content":"      const nameMatchedLabels: Label[] \u003d actualLabels.filter((remoteLabel) \u003d\u003e remoteLabel.getFormattedName() \u003d\u003d\u003d label.getFormattedName());"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"      if (nameMatchedLabels.length \u003d\u003d\u003d 0) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        // Create new Label (Could not find a label with the same name \u0026 category)"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        this.githubService.createLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      } else if (nameMatchedLabels.length \u003d\u003d\u003d 1) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        if (nameMatchedLabels[0].equals(label)) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"          // the label exists exactly as expected -\u003e do nothing"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"          // the label exists but the color does not match -\u003e update the required label\u0027s color to the one in github"},{"lineNumber":294,"author":{"gitId":"-"},"content":"          LabelService.updateRequiredLabelColor(nameMatchedLabels[0].labelColor, label);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Unexpected error: the repo has multiple labels with the same name \u0027 + label.getFormattedName());"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":303,"author":{"gitId":"-"},"content":"   * Converts a GithubLabel object to Label object."},{"lineNumber":304,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":305,"author":{"gitId":"-"},"content":"  toLabel(githubLabel: GithubLabel) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    let labelCategory: string;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    let labelValue: string;"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    const containsDotRegex \u003d /\\./g;"},{"lineNumber":310,"author":{"gitId":"MadLamprey"},"content":"    const rawName \u003d String(githubLabel.name);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    [labelCategory, labelValue] \u003d containsDotRegex.test(rawName) ? githubLabel.name.split(\u0027.\u0027) : [undefined, rawName];"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    const labelColor \u003d githubLabel.color;"},{"lineNumber":314,"author":{"gitId":"MadLamprey"},"content":"    const labelDefinition \u003d String(githubLabel.description);"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    return new Label(labelCategory, labelValue, labelColor, labelDefinition);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":320,"author":{"gitId":"-"},"content":"   * Returns true if the given color is considered \"dark\""},{"lineNumber":321,"author":{"gitId":"-"},"content":"   * The color is considered \"dark\" if its luminance is less than COLOR_DARKNESS_THRESHOLD"},{"lineNumber":322,"author":{"gitId":"-"},"content":"   * @param inputColor: the color"},{"lineNumber":323,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  isDarkColor(inputColor: string): boolean {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    const COLOR \u003d inputColor.charAt(0) \u003d\u003d\u003d \u0027#\u0027 ? inputColor.substring(1, 7) : inputColor;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    const R \u003d parseInt(COLOR.substring(0, 2), 16);"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    const G \u003d parseInt(COLOR.substring(2, 4), 16);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    const B \u003d parseInt(COLOR.substring(4, 6), 16);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    const RGB \u003d [R / 255, G / 255, B / 255];"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    const LINEAR_RGB \u003d RGB.map((col) \u003d\u003e {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      if (col \u003c\u003d 0.03928) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return col / 12.92;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"      return Math.pow((col + 0.055) / 1.055, 2.4);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    // Calculate the luminance of the color"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    const LUMINANCE \u003d 0.2126 * LINEAR_RGB[0] + 0.7152 * LINEAR_RGB[1] + 0.0722 * LINEAR_RGB[2];"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    // The color is \"dark\" if the luminance is lower than the threshold"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    return LUMINANCE \u003c COLOR_DARKNESS_THRESHOLD;"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":343,"author":{"gitId":"-"},"content":"   * Returns a css style for the label to use"},{"lineNumber":344,"author":{"gitId":"-"},"content":"   * @param color: the color of the label"},{"lineNumber":345,"author":{"gitId":"-"},"content":"   * @return the style with background-color in rgb"},{"lineNumber":346,"author":{"gitId":"-"},"content":"   * @throws exception if input is an invalid color code"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  setLabelStyle(color: string, display: string \u003d \u0027inline-flex\u0027) {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    let textColor: string;"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    textColor \u003d this.isDarkColor(color) ? COLOR_WHITE : COLOR_BLACK;"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    const styles \u003d {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      \u0027background-color\u0027: `#${color}`,"},{"lineNumber":355,"author":{"gitId":"-"},"content":"      \u0027border-radius\u0027: \u00273px\u0027,"},{"lineNumber":356,"author":{"gitId":"-"},"content":"      cursor: \u0027default\u0027,"},{"lineNumber":357,"author":{"gitId":"-"},"content":"      padding: \u00273px\u0027,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      color: `#${textColor}`,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"      \u0027font-weight\u0027: \u0027410\u0027,"},{"lineNumber":360,"author":{"gitId":"-"},"content":"      display: display"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"    return styles;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":365,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":2,"-":363}},{"path":"src/app/core/services/mocks/mock.issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { BehaviorSubject, forkJoin, Observable, of, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { catchError, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { generateIssueWithRandomData } from \u0027../../../../../tests/constants/githubissue.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../../models/github/github-comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../../models/github/github-issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../models/github/github-label.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../../models/hidden-data.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../models/issue-dispute.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { Issue, Issues, STATUS } from \u0027../../models/issue.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":19,"author":{"gitId":"-"},"content":"})"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export class MockIssueService {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  issues: Issues;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private sessionId: string;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private phaseService: PhaseService, private dataService: DataService) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * Loads Issues and Prevents polling during testing."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  startPollIssues() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.isLoading.next(true);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d of(this.reloadAllIssues()).subscribe((result) \u003d\u003e this.isLoading.next(false));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  stopPollIssues() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * Simply returns the existing issue, to simulate polling."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    return of(this.issues[issueId]);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  reloadAllIssues() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    return this.initializeData();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      return of(this.issues[id]);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":77,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this.issues[id];"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":81,"author":{"gitId":"MadLamprey"},"content":"      catchError((err) \u003d\u003e of(this.issues[id]))"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const hiddenData \u003d new Map([[\u0027session\u0027, this.sessionId]]);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      .createIssue(title, issueDescription, labelsArray)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .pipe(map((response: GithubIssue) \u003d\u003e this.createIssueModel(response)));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      .updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue), this.createLabelsForIssue(issue), assignees)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":99,"author":{"gitId":"-"},"content":"        map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"          response.comments \u003d issue.githubComments;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          return this.createIssueModel(response);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":108,"author":{"gitId":"-"},"content":"      mergeMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [updatedComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d updatedComment.id)];"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    const commentApiToCall \u003d isTesterResponseExist"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":125,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":135,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":146,"author":{"gitId":"-"},"content":"      mergeMap((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [githubComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d githubComment.id)];"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":155,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":165,"author":{"gitId":"-"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":166,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":167,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return ("},{"lineNumber":172,"author":{"gitId":"-"},"content":"          `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":173,"author":{"gitId":"-"},"content":"          // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":174,"author":{"gitId":"-"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    return issueDisputeString;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":191,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return deletedIssue;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":201,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":210,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    this.issues \u003d {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      ...this.issues,"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      [issueToUpdate.id]: issueToUpdate"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":221,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":227,"author":{"gitId":"-"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":228,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":230,"author":{"gitId":"MadLamprey"},"content":"    return this.issues$.pipe(map((issues) \u003d\u003e issues.filter((issue) \u003d\u003e issue.duplicateOf \u003d\u003d\u003d parentIssue.id)));"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    this.issues \u003d undefined;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    this.sessionId \u003d undefined;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    this.stopPollIssues();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    this.isLoading.complete();"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":244,"author":{"gitId":"-"},"content":"   * Populates store with random issues depending on the current test phase."},{"lineNumber":245,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    if (this.issues !\u003d null) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      return of(Object.values(this.issues));"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    const NUM_ISSUES \u003d 10;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    const generatedIssues: Array\u003cGithubIssue\u003e \u003d [];"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        for (let i \u003d 0; i \u003c NUM_ISSUES; i++) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"          generatedIssues.push(generateIssueWithRandomData());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    for (const issue of generatedIssues) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      this.createAndSaveIssueModel(issue);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    return of(Object.values(this.issues));"},{"lineNumber":267,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    return true;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":276,"author":{"gitId":"-"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":277,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026 this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`), this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"    if (issue.severity) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    if (issue.type) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"    if (issue.response) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.response));"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    if (issue.duplicated) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    if (issue.status) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    if (issue.pending) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"    if (issue.unsure) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    if (filterValue) {"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    return this.issueTeamFilter;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":355,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":2,"-":353}},{"path":"src/app/core/services/phase.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, pipe } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { map, mergeMap, retry, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { assertSessionDataIntegrity, SessionData } from \u0027../models/session.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027./label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { RepoCreatorService } from \u0027./repo-creator.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const SESSION_AVALIABILITY_FIX_FAILED \u003d \u0027Session Availability Fix failed.\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const PhaseDescription \u003d {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  [Phase.phaseBugReporting]: \u0027Bug Reporting Phase\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  [Phase.phaseTeamResponse]: \"Team\u0027s Response Phase\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"  [Phase.phaseTesterResponse]: \"Tester\u0027s Response Phase\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"  [Phase.phaseModeration]: \u0027Moderation Phase\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":"};"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Responsible for managing the current phase of CATcher as well as the"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * current session data and repository details related to the session."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export class PhaseService {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  public currentPhase: Phase;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  private repoName: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  private orgName: string;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  public sessionData: SessionData;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private phaseRepoOwners \u003d {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    phaseBugReporting: \u0027\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    phaseTeamResponse: \u0027\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    phaseTesterResponse: \u0027\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    phaseModeration: \u0027\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private labelService: LabelService, private repoCreatorService: RepoCreatorService) {}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   * Stores the location of the repositories belonging to"},{"lineNumber":45,"author":{"gitId":"-"},"content":"   * each phase of the application."},{"lineNumber":46,"author":{"gitId":"-"},"content":"   * @param org - name of organization."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   * @param user - name of user."},{"lineNumber":48,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  setPhaseOwners(org: string, user: string): void {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.orgName \u003d org;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseBugReporting \u003d user;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTeamResponse \u003d org;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTesterResponse \u003d user;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseModeration \u003d org;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * Returns the name of the owner of a given phase."},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * @param phase"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  getPhaseOwner(phase: string): string {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    return this.phaseRepoOwners[phase];"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  fetchSessionData(): Observable\u003cSessionData\u003e {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    return this.githubService.fetchSettingsFile().pipe(map((data) \u003d\u003e data as SessionData));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   * Will fetch session data and update phase service with it."},{"lineNumber":71,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  storeSessionData(): Observable\u003cvoid\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":74,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      map((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        localStorage.setItem(\u0027sessionData\u0027, JSON.stringify(sessionData));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * Retrieves session data from local storage and update phase service with it."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  setSessionData() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    const sessionData \u003d JSON.parse(localStorage.getItem(\u0027sessionData\u0027));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.updateSessionParameters(sessionData);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"   * Determines the github\u0027s level of repo permission required for the phase."},{"lineNumber":92,"author":{"gitId":"-"},"content":"   * Ref: https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes"},{"lineNumber":93,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  githubRepoPermissionLevel(): string {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    if (this.sessionData.openPhases.includes(Phase.phaseModeration)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      return \u0027repo\u0027;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      return \u0027public_repo\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Checks if the necessary repository is available and creates it if the permissions are available."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  verifySessionAvailability(sessionData: SessionData): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    return this.githubService.isRepositoryPresent(this.phaseRepoOwners[this.currentPhase], sessionData[this.currentPhase]);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Stores session data and sets current session\u0027s phase."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  updateSessionParameters(sessionData: SessionData) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.sessionData \u003d sessionData;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d Phase[sessionData.openPhases[0]];"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.repoName \u003d sessionData[sessionData.openPhases[0]];"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails(this.phaseRepoOwners[this.currentPhase], this.repoName);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"   * Ensures that the necessary data for the current session is available"},{"lineNumber":123,"author":{"gitId":"-"},"content":"   * and synchronized with the remote server."},{"lineNumber":124,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  sessionSetup(): Observable\u003cany\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    // Permission Caching Mechanism to prevent repeating permission request."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    let isSessionFixPermissionGranted \u003d false;"},{"lineNumber":128,"author":{"gitId":"MadLamprey"},"content":"    const cacheSessionFixPermission \u003d () \u003d\u003e"},{"lineNumber":129,"author":{"gitId":"MadLamprey"},"content":"      pipe("},{"lineNumber":130,"author":{"gitId":"-"},"content":"        tap((sessionFixPermission: boolean | null) \u003d\u003e {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"          isSessionFixPermissionGranted \u003d sessionFixPermission ? sessionFixPermission : false;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":136,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      mergeMap((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return this.verifySessionAvailability(sessionData);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      this.repoCreatorService.requestRepoCreationPermissions(this.currentPhase, this.sessionData[this.currentPhase]),"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      cacheSessionFixPermission(),"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      this.repoCreatorService.verifyRepoCreationPermissions(this.currentPhase),"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      this.repoCreatorService.attemptRepoCreation(this.sessionData[this.currentPhase]),"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      this.repoCreatorService.verifyRepoCreation(this.getPhaseOwner(this.currentPhase), this.sessionData[this.currentPhase]),"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      throwIfFalse("},{"lineNumber":147,"author":{"gitId":"-"},"content":"        (isSessionCreated: boolean) \u003d\u003e isSessionCreated,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        () \u003d\u003e new Error(SESSION_AVALIABILITY_FIX_FAILED)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      ),"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      this.labelService.syncLabels(this.isTeamOrModerationPhase()),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      retry(1) // Retry once, to handle edge case where GitHub API cannot immediately confirm existence of the newly created repo."},{"lineNumber":152,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  private isTeamOrModerationPhase(): boolean {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    return this.currentPhase \u003d\u003d\u003d Phase.phaseTeamResponse || this.currentPhase \u003d\u003d\u003d Phase.phaseModeration;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"  public getPhaseDetail() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    return this.orgName.concat(\u0027/\u0027).concat(this.repoName);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"nknguyenhc"},"content":"  /**"},{"lineNumber":164,"author":{"gitId":"nknguyenhc"},"content":"   * Checks whether the given route is allowed in this phase."},{"lineNumber":165,"author":{"gitId":"nknguyenhc"},"content":"   */"},{"lineNumber":166,"author":{"gitId":"nknguyenhc"},"content":"  isValidRoute(route: string): boolean {"},{"lineNumber":167,"author":{"gitId":"nknguyenhc"},"content":"    return route.startsWith(\u0027/\u0027 + this.currentPhase);"},{"lineNumber":168,"author":{"gitId":"nknguyenhc"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"nknguyenhc"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d null;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":7,"MadLamprey":2,"-":164}},{"path":"src/app/core/services/upload.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"nknguyenhc"},"content":"import { of, throwError } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"nknguyenhc"},"content":"import { catchError, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":5,"author":{"gitId":"nknguyenhc"},"content":"import { ERRORCODE_NOT_FOUND } from \u0027./error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const SUPPORTED_VIDEO_FILE_TYPES \u003d [\u0027mp4\u0027, \u0027mov\u0027];"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const SUPPORTED_FILE_TYPES \u003d ["},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u0027gif\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u0027jpeg\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u0027jpg\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u0027png\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u0027docx\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u0027gz\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u0027log\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u0027pdf\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u0027pptx\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u0027txt\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u0027xlsx\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u0027zip\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  ...SUPPORTED_VIDEO_FILE_TYPES"},{"lineNumber":23,"author":{"gitId":"-"},"content":"];"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export const FILE_TYPE_SUPPORT_ERROR \u003d \"We don\u0027t support that file type.\" + \u0027 Try again with \u0027 + SUPPORTED_FILE_TYPES.join(\u0027, \u0027) + \u0027.\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Returns an error message string for when file exceeds the defined size limit"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * @param fileType Canonical name for file, not to be confused with file extension"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * @param size Number of MBs"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"export const getSizeExceedErrorMsg \u003d (fileType: string, size: number): string \u003d\u003e `Oops, ${fileType} is too big. Keep it under ${size}MiB.`;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":34,"author":{"gitId":"-"},"content":"})"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Responsible for upload of media files to the current phase\u0027s repository."},{"lineNumber":38,"author":{"gitId":"-"},"content":" */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"export class UploadService {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService) {}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  uploadFile(base64File: string | ArrayBuffer, userFilename: string) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    let base64String: string;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    if (base64File instanceof ArrayBuffer) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      base64String \u003d String.fromCharCode.apply(null, new Uint16Array(base64File));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      base64String \u003d base64File;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    const fileType \u003d this.getFileExtension(userFilename);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    if (SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase())) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      base64String \u003d base64String.split(\u0027,\u0027)[1];"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      const onlineFilename \u003d uuid();"},{"lineNumber":54,"author":{"gitId":"nknguyenhc"},"content":"      const attemptUploadFile \u003d () \u003d\u003e this.githubService.uploadFile(`${onlineFilename}.${fileType}`, base64String);"},{"lineNumber":55,"author":{"gitId":"nknguyenhc"},"content":"      return attemptUploadFile().pipe("},{"lineNumber":56,"author":{"gitId":"nknguyenhc"},"content":"        catchError((err: any) \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"nknguyenhc"},"content":"          if (!(err.status \u003d\u003d\u003d ERRORCODE_NOT_FOUND)) {"},{"lineNumber":58,"author":{"gitId":"nknguyenhc"},"content":"            return throwError(err);"},{"lineNumber":59,"author":{"gitId":"nknguyenhc"},"content":"          }"},{"lineNumber":60,"author":{"gitId":"nknguyenhc"},"content":"          return of(false);"},{"lineNumber":61,"author":{"gitId":"nknguyenhc"},"content":"        }),"},{"lineNumber":62,"author":{"gitId":"nknguyenhc"},"content":"        mergeMap((isBranchPresent) \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"nknguyenhc"},"content":"          if (isBranchPresent) {"},{"lineNumber":64,"author":{"gitId":"nknguyenhc"},"content":"            return of(isBranchPresent);"},{"lineNumber":65,"author":{"gitId":"nknguyenhc"},"content":"          }"},{"lineNumber":66,"author":{"gitId":"nknguyenhc"},"content":"          return this.githubService.createBranch().pipe(mergeMap(attemptUploadFile));"},{"lineNumber":67,"author":{"gitId":"nknguyenhc"},"content":"        })"},{"lineNumber":68,"author":{"gitId":"nknguyenhc"},"content":"      );"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      return throwError(FILE_TYPE_SUPPORT_ERROR);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  getFileExtension(fileName: string): string {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    return fileName.split(\u0027.\u0027).pop();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  isVideoFile(fileName): boolean {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    const fileType \u003d this.getFileExtension(fileName);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    return SUPPORTED_VIDEO_FILE_TYPES.includes(fileType.toLowerCase());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  isSupportedFileType(fileName): boolean {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const fileType \u003d this.getFileExtension(fileName);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    return SUPPORTED_FILE_TYPES.includes(fileType.toLowerCase());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":18,"-":69}},{"path":"src/app/core/services/user.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { filter, map, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Team } from \u0027../models/team.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Responsible for creation of users and teams within the CATcher application."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export class UserService {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  public currentUser: User;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private dataService: DataService, private logger: LoggingService) {}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   * Get the authenticated user if it exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  getAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":27,"author":{"gitId":"MadLamprey"},"content":"    return this.githubService.fetchAuthenticatedUser().pipe(map((data: GithubUser) \u003d\u003e data));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  createUserModel(userLoginId: string): Observable\u003cUser\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    return this.dataService.getDataFile().pipe("},{"lineNumber":32,"author":{"gitId":"-"},"content":"      map((jsonData: {}) \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.currentUser \u003d this.createUser(jsonData, userLoginId);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return this.currentUser;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      filter((user) \u003d\u003e user !\u003d\u003d null),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new Error(\u0027Unauthorized user.\u0027))"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    this.logger.info(\u0027UserService: Clearing current user\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    this.currentUser \u003d undefined;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  private createUser(data: {}, userLoginId: string): User {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    const lowerCaseUserLoginId \u003d userLoginId.toLowerCase();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    const userRole \u003d this.parseUserRole(data, lowerCaseUserLoginId);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    switch (userRole) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      case UserRole.Student:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        const teamId \u003d data[DataService.STUDENTS_ALLOCATION][lowerCaseUserLoginId][DataService.TEAM_ID];"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        const studentTeam \u003d this.createTeamModel(data[DataService.TEAM_STRUCTURE], teamId);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, team: studentTeam };"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"      case UserRole.Tutor:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        const tutorTeams: Array\u003cTeam\u003e \u003d Object.keys("},{"lineNumber":58,"author":{"gitId":"-"},"content":"          data[DataService.TUTORS_ALLOCATION][lowerCaseUserLoginId]"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ).map((allocatedTeamId: string) \u003d\u003e this.createTeamModel(data[DataService.TEAM_STRUCTURE], allocatedTeamId));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, allocatedTeams: tutorTeams };"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"      case UserRole.Admin:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        const studentTeams: Array\u003cTeam\u003e \u003d Object.keys("},{"lineNumber":65,"author":{"gitId":"-"},"content":"          data[DataService.ADMINS_ALLOCATION][lowerCaseUserLoginId]"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        ).map((allocatedTeamId: string) \u003d\u003e this.createTeamModel(data[DataService.TEAM_STRUCTURE], allocatedTeamId));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, allocatedTeams: studentTeams };"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  private createTeamModel(teamData: {}, teamId: string): Team {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    const teammates: Array\u003cUser\u003e \u003d Object.values(teamData[teamId]).map("},{"lineNumber":76,"author":{"gitId":"-"},"content":"      (teammate: string) \u003d\u003e \u003cUser\u003e{ loginId: teammate, role: UserRole.Student }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    return new Team({ id: teamId, teamMembers: teammates });"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * To be used to parse the JSON data containing data pertaining to the user role."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"   * @return NULL if user is unauthorized, meaning that no role is specified for the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":"   *         else the the role with the highest access rights will be returned."},{"lineNumber":87,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  private parseUserRole(data: {}, userLoginId: string): UserRole {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    let userRole: UserRole;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.STUDENTS] \u0026\u0026 data[DataService.ROLES][DataService.STUDENTS][[userLoginId]]) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Student;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.TUTORS] \u0026\u0026 data[DataService.ROLES][DataService.TUTORS][[userLoginId]]) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Tutor;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.ADMINS] \u0026\u0026 data[DataService.ROLES][DataService.ADMINS][[userLoginId]]) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Admin;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    return userRole;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":100}},{"path":"src/app/core/validators/noWhitespace.validator.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"MadLamprey"},"content":"import { AbstractControl, ValidationErrors, ValidatorFn } from \u0027@angular/forms\u0027;"},{"lineNumber":2,"author":{"gitId":"MadLamprey"},"content":""},{"lineNumber":3,"author":{"gitId":"MadLamprey"},"content":"export function noWhitespace(): ValidatorFn {"},{"lineNumber":4,"author":{"gitId":"MadLamprey"},"content":"  return (title: AbstractControl): ValidationErrors | null \u003d\u003e {"},{"lineNumber":5,"author":{"gitId":"MadLamprey"},"content":"    if (title.value \u0026\u0026 title.value.trim() \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":6,"author":{"gitId":"MadLamprey"},"content":"      return { whitespace: true };"},{"lineNumber":7,"author":{"gitId":"MadLamprey"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"MadLamprey"},"content":"    return null;"},{"lineNumber":9,"author":{"gitId":"MadLamprey"},"content":"  };"},{"lineNumber":10,"author":{"gitId":"MadLamprey"},"content":"}"}],"authorContributionMap":{"MadLamprey":10}},{"path":"src/app/phase-bug-reporting/new-issue/new-issue.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"mat-display-1 title\"\u003eNew Issue\u003c/h1\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"newIssueForm\" #myForm\u003d\"ngForm\" (ngSubmit)\u003d\"submitNewIssue(myForm)\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"form\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"column left\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        \u003cmat-form-field\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"          \u003cinput id\u003d\"title\" formControlName\u003d\"title\" matInput placeholder\u003d\"Title\" required maxlength\u003d\"256\" /\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"title.errors \u0026\u0026 title.errors[\u0027required\u0027] \u0026\u0026 (title.touched || title.dirty)\"\u003e Title required. \u003c/mat-error\u003e"},{"lineNumber":10,"author":{"gitId":"MadLamprey"},"content":"          \u003cmat-error *ngIf\u003d\"title.errors \u0026\u0026 title.errors[\u0027whitespace\u0027]\"\u003e Title cannot contain only whitespaces. \u003c/mat-error\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"title.errors \u0026\u0026 title.errors[\u0027maxlength\u0027]\"\u003e Title cannot exceed 256 characters. \u003c/mat-error\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"          \u003cmat-hint *ngIf\u003d\"title.value?.length \u003e\u003d 206\"\u003e {{ 256 - title.value?.length }} characters remaining. \u003c/mat-hint\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003c/mat-form-field\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cdiv style\u003d\"margin: 10px 0 10px 0\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"          \u003capp-comment-editor"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            [id]\u003d\"\u0027description\u0027\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            [commentField]\u003d\"description\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            [commentForm]\u003d\"this.newIssueForm\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            [(isFormPending)]\u003d\"this.isFormPending\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            [(submitButtonText)]\u003d\"this.submitButtonText\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003c/app-comment-editor\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          style\u003d\"float: right\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"          class\u003d\"submit-new-bug-report\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"!newIssueForm.valid || isFormPending\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          {{ this.submitButtonText }}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"column right\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"severity-dropdown\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003capp-label-dropdown initialValue\u003d\"\" attributeName\u003d\"severity\" [dropdownForm]\u003d\"newIssueForm\"\u003e\u003c/app-label-dropdown\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"bug-dropdown\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003capp-label-dropdown initialValue\u003d\"\" attributeName\u003d\"type\" [dropdownForm]\u003d\"newIssueForm\"\u003e\u003c/app-label-dropdown\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"MadLamprey":1,"-":47}},{"path":"src/app/phase-bug-reporting/new-issue/new-issue.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AbstractControl, FormBuilder, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"MadLamprey"},"content":"import { noWhitespace } from \u0027../../core/validators/noWhitespace.validator\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../../shared/view-issue/view-issue.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  selector: \u0027app-new-issue\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./new-issue.component.html\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./new-issue.component.css\u0027]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"})"},{"lineNumber":17,"author":{"gitId":"-"},"content":"export class NewIssueComponent implements OnInit {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  newIssueForm: FormGroup;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private router: Router"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    this.newIssueForm \u003d this.formBuilder.group({"},{"lineNumber":32,"author":{"gitId":"MadLamprey"},"content":"      title: [\u0027\u0027, [Validators.required, Validators.maxLength(256), noWhitespace()]],"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027],"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      severity: [\u0027\u0027, Validators.required],"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      type: [\u0027\u0027, Validators.required]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SUBMIT;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  submitNewIssue(form: NgForm) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    if (this.newIssueForm.invalid) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"MadLamprey"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      .createIssue(this.title.value, Issue.updateDescription(this.description.value), this.severity.value, this.type.value)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      .pipe(finalize(() \u003d\u003e (this.isFormPending \u003d false)))"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":51,"author":{"gitId":"-"},"content":"        (newIssue) \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          this.issueService.updateLocalStore(newIssue);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          this.router.navigateByUrl(`phaseBugReporting/issues/${newIssue.id}`);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  canDeactivate() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":64,"author":{"gitId":"-"},"content":"      !this.isAttributeEditing(this.title) \u0026\u0026"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      !this.isAttributeEditing(this.description) \u0026\u0026"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      !this.isAttributeEditing(this.severity) \u0026\u0026"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      !this.isAttributeEditing(this.type)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  isAttributeEditing(attribute: AbstractControl) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    return attribute.value !\u003d\u003d null \u0026\u0026 attribute.value !\u003d\u003d \u0027\u0027;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"  get title() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027title\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  get description() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027description\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  get severity() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027severity\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  get type() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    return this.newIssueForm.get(\u0027type\u0027);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":3,"-":87}},{"path":"src/app/phase-team-response/issues-faulty/issues-faulty.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ACTION_BUTTONS, IssueTablesComponent } from \u0027../../shared/issue-tables/issue-tables.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-issues-faulty\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issues-faulty.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issues-faulty.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class IssuesFaultyComponent implements OnInit, OnChanges {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  displayedColumns: string[];"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  filter: (issue: Issue) \u003d\u003e boolean;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  readonly actionButtons: ACTION_BUTTONS[] \u003d [ACTION_BUTTONS.VIEW_IN_WEB, ACTION_BUTTONS.FIX_ISSUE];"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  @Input() teamFilter: string;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  @ViewChild(IssueTablesComponent, { static: true }) table: IssueTablesComponent;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  constructor(public issueService: IssueService, public userService: UserService, public permissions: PermissionService) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    if (userService.currentUser.role \u003d\u003d\u003d UserRole.Student) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":28,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      this.displayedColumns \u003d ["},{"lineNumber":39,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ID,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TITLE,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TEAM_ASSIGNED,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.TYPE,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.SEVERITY,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.RESPONSE,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.DUPLICATED_ISSUES,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        TABLE_COLUMNS.ACTIONS"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      ];"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    if (!changes.teamFilter.isFirstChange()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      this.table.issues.teamFilter \u003d changes.teamFilter.currentValue;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.filter \u003d (issue: Issue): boolean \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      const hasTeamResponse \u003d (issue: Issue) \u003d\u003e this.issueService.hasTeamResponse(issue.id);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      const isDuplicateIssue \u003d (issue: Issue) \u003d\u003e !!issue.duplicateOf;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      const isDuplicatedBy \u003d (issue: Issue) \u003d\u003e"},{"lineNumber":63,"author":{"gitId":"MadLamprey"},"content":"        !!this.issueService.issues$.getValue().filter((childIssue) \u003d\u003e childIssue.duplicateOf \u003d\u003d\u003d issue.id).length;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      const isTransitiveDuplicate \u003d hasTeamResponse(issue) \u0026\u0026 isDuplicateIssue(issue) \u0026\u0026 isDuplicatedBy(issue);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"      const hasStatus \u003d (issue: Issue) \u003d\u003e !!issue.status;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      const hasParseErrors \u003d (issue: Issue) \u003d\u003e !!issue.teamResponseError;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      const hasWrongHeaders \u003d hasStatus(issue) \u0026\u0026 hasParseErrors(issue);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"      return isTransitiveDuplicate || hasWrongHeaders;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  applyFilter(filterValue: string) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.table.issues.filter \u003d filterValue;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":76}},{"path":"src/app/shared/comment-editor/comment-editor.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"commentForm\" style\u003d\"min-height: 350px\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-tab-group class\u003d\"mat-elevation-z1\" animationDuration\u003d\"0ms\" (selectedTabChange)\u003d\"commentField.setValue(commentTextArea.value)\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cmat-tab label\u003d\"Write\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \u003cdiv"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        #dropArea"},{"lineNumber":6,"author":{"gitId":"-"},"content":"        class\u003d\"tab-content\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"        (dragleave)\u003d\"onDragExit($event)\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"        (dragenter)\u003d\"onDragEnter($event)\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"        (drop)\u003d\"onDrop($event)\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"        (dragover)\u003d\"enableFileDrop($event)\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        \u003capp-markdown-toolbar [forTextAreaId]\u003d\"this.id\"\u003e\u003c/app-markdown-toolbar\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003cmat-form-field appearance\u003d\"outline\" style\u003d\"width: 100%\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"          \u003cmat-label\u003e\u003c/mat-label\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"          \u003ctextarea"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            (paste)\u003d\"onPaste($event)\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            (keydown)\u003d\"onKeyPress($event)\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            (beforeinput)\u003d\"handleBeforeInputChange($event)\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            (input)\u003d\"handleInputChange($event)\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            #commentTextArea"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            (dragover)\u003d\"disableCaretMovement($event)\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            id\u003d\"{{ this.id }}\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            formControlName\u003d\"{{ this.id }}\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            matInput"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            cdkTextareaAutosize"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            #autosize\u003d\"cdkTextareaAutosize\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            cdkAutosizeMinRows\u003d\"10\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            cdkAutosizeMaxRows\u003d\"20\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            class\u003d\"text-input-area\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            placeholder\u003d\"{{ this.placeholderText }}\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            maxlength\u003d\"{{ this.maxLength }}\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003e\u003c/textarea\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"commentField.errors \u0026\u0026 commentField.errors[\u0027required\u0027] \u0026\u0026 commentField.touched\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Description required."},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/mat-error\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"commentField.errors \u0026\u0026 commentField.errors[\u0027maxLength\u0027]\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            Description cannot exceed {{ maxLength }} characters."},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003c/mat-error\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cmat-hint *ngIf\u003d\"commentField.value?.length \u003e\u003d maxLength - 50\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            {{ maxLength - commentField.value?.length }} character(s) remaining."},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/mat-hint\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"drag-and-drop\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"!isInErrorState\"\u003e Attach files by dragging \u0026 dropping or select them by clicking here. \u003c/span\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"isInErrorState\" class\u003d\"error\"\u003e {{ uploadErrorMessage }} \u003c/span\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cinput"},{"lineNumber":47,"author":{"gitId":"-"},"content":"              #fileInput"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              [disabled]\u003d\"this.commentField.disabled\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"              [accept]\u003d\"SUPPORTED_FILE_TYPES\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"              type\u003d\"file\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"              class\u003d\"file\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"              (change)\u003d\"onFileInputUpload($event, fileInput)\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            /\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003c/mat-form-field\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \u003c/mat-tab\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmat-tab label\u003d\"Preview\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"tab-content\" style\u003d\"min-height: 228px\"\u003e"},{"lineNumber":60,"author":{"gitId":"nknguyenhc"},"content":"        \u003cmarkdown #markdownArea *ngIf\u003d\"commentField.value !\u003d\u003d \u0027\u0027\" [data]\u003d\"commentField.value\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"commentField.value \u003d\u003d\u003d \u0027\u0027\"\u003eNothing to preview.\u003c/div\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \u003c/mat-tab\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003c/mat-tab-group\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"nknguyenhc":1,"-":64}},{"path":"src/app/shared/comment-editor/upload-text-insertor.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ElementRef } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AbstractControl } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"export const DISPLAYABLE_CONTENT \u003d [\u0027gif\u0027, \u0027jpeg\u0027, \u0027jpg\u0027, \u0027png\u0027];"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"export function insertUploadingText("},{"lineNumber":7,"author":{"gitId":"-"},"content":"  filename: string,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  commentField: AbstractControl,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  commentTextArea: ElementRef\u003cHTMLTextAreaElement\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"): string {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  const originalDescription \u003d commentField.value;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  const fileType \u003d filename.split(\u0027.\u0027).pop();"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  let toInsert: string;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  if (DISPLAYABLE_CONTENT.includes(fileType.toLowerCase())) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    toInsert \u003d `![Uploading ${filename}...]\\n`;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    toInsert \u003d `[Uploading ${filename}...]\\n`;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  const cursorPosition \u003d commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  const endOfLineIndex \u003d originalDescription.indexOf(\u0027\\n\u0027, cursorPosition);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  const nextCursorPosition \u003d cursorPosition + toInsert.length;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  if (endOfLineIndex \u003d\u003d\u003d -1) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    if (commentField.value \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      commentField.setValue(toInsert);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      commentField.setValue(`${commentField.value}\\n${toInsert}`);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    const startTillNewline \u003d originalDescription.slice(0, endOfLineIndex + 1);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    const newlineTillEnd \u003d originalDescription.slice(endOfLineIndex);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    commentField.setValue(`${startTillNewline + toInsert + newlineTillEnd}`);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  commentTextArea.nativeElement.setSelectionRange(nextCursorPosition, nextCursorPosition);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  return toInsert;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"export function insertUploadUrlVideo("},{"lineNumber":42,"author":{"gitId":"-"},"content":"  filename: string,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  uploadUrl: string,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  commentField: AbstractControl,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  commentTextArea: ElementRef\u003cHTMLTextAreaElement\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":") {"},{"lineNumber":47,"author":{"gitId":"MadLamprey"},"content":"  // eslint-disable-next-line max-len"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  const insertedString \u003d `\u003ci\u003e\u003cvideo controls\u003e\u003csource src\u003d\"${uploadUrl}\" type\u003d\"video/mp4\"\u003eYour browser does not support the video tag.\u003c/video\u003e\u003cbr\u003evideo:${uploadUrl}\u003c/i\u003e`;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  replacePlaceholderString(filename, insertedString, commentField, commentTextArea);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"export function insertUploadUrl("},{"lineNumber":54,"author":{"gitId":"-"},"content":"  filename: string,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  uploadUrl: string,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  commentField: AbstractControl,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  commentTextArea: ElementRef\u003cHTMLTextAreaElement\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":") {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  const insertedString \u003d `[${filename}](${uploadUrl})`;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  replacePlaceholderString(filename, insertedString, commentField, commentTextArea);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"function replacePlaceholderString("},{"lineNumber":64,"author":{"gitId":"-"},"content":"  filename: string,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  insertedString: string,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  commentField: AbstractControl,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  commentTextArea: ElementRef\u003cHTMLTextAreaElement\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":") {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  const cursorPosition \u003d commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  const insertingString \u003d `[Uploading ${filename}...]`;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  const startIndexOfString \u003d commentField.value.indexOf(insertingString);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  const endIndexOfString \u003d startIndexOfString + insertingString.length;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  const endOfInsertedString \u003d startIndexOfString + insertedString.length;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  const differenceInLength \u003d endOfInsertedString - endIndexOfString;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  const newCursorPosition \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    cursorPosition \u003e startIndexOfString - 1 \u0026\u0026 cursorPosition \u003c\u003d endIndexOfString // within the range of uploading text"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      ? endOfInsertedString"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      : cursorPosition \u003c startIndexOfString // before the uploading text"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      ? cursorPosition"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      : cursorPosition + differenceInLength; // after the uploading text"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  commentField.setValue(commentField.value.replace(insertingString, insertedString));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  commentTextArea.nativeElement.setSelectionRange(newCursorPosition, newCursorPosition);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":83}},{"path":"src/app/shared/issue-tables/issue-tables.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"Arif-Khalid"},"content":"\u003cmat-table"},{"lineNumber":2,"author":{"gitId":"Arif-Khalid"},"content":"  [dataSource]\u003d\"this.issues\""},{"lineNumber":3,"author":{"gitId":"Arif-Khalid"},"content":"  matSort"},{"lineNumber":4,"author":{"gitId":"Arif-Khalid"},"content":"  [matSortActive]\u003d\"this.tableSettings.sortActiveId\""},{"lineNumber":5,"author":{"gitId":"Arif-Khalid"},"content":"  [matSortDirection]\u003d\"this.tableSettings.sortDirection\""},{"lineNumber":6,"author":{"gitId":"Arif-Khalid"},"content":"  (matSortChange)\u003d\"this.sortChange($event)\""},{"lineNumber":7,"author":{"gitId":"Arif-Khalid"},"content":"  class\u003d\"mat-elevation-z8\""},{"lineNumber":8,"author":{"gitId":"Arif-Khalid"},"content":"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003c!-- ID Column --\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"id\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e ID \u003c/mat-header-cell\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default\"\u003e{{ issue.id }}\u003c/span\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c!-- Title Column --\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"title\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Title \u003c/mat-header-cell\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003ca class\u003d\"no-underline link-grey-dark title-wrap\" [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\"\u003e {{ issue.title }} \u003c/a\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  \u003c!-- Team Assigned Column --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003cng-container *ngIf\u003d\"userService.currentUser.role !\u003d\u003d \u0027Student\u0027\" matColumnDef\u003d\"teamAssigned\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Team \u003c/mat-header-cell\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e {{ (issue.teamAssigned \u0026\u0026 issue.teamAssigned.id) || \u0027-\u0027 }} \u003c/mat-cell\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  \u003c!-- Type Column --\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"type\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Type \u003c/mat-header-cell\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027type\u0027, issue.type))\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        {{ issue.type || \u0027-\u0027 }}"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenType \u0026\u0026 issue.teamChosenType !\u003d issue.type\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; padding: 1px 2px\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003cmat-icon class\u003d\"arrow-right\"\u003earrow_right_alt\u003c/mat-icon\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenType \u0026\u0026 issue.teamChosenType !\u003d issue.type\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027type\u0027, issue.teamChosenType))\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        {{ issue.teamChosenType }}"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c!-- Severity Column --\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"severity\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Severity \u003c/mat-header-cell\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027severity\u0027, issue.severity))\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        {{ issue.severity || \u0027-\u0027 }}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenSeverity \u0026\u0026 issue.teamChosenSeverity !\u003d issue.severity\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; margin: 3px\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        \u003cmat-icon class\u003d\"arrow-right\"\u003earrow_right_alt\u003c/mat-icon\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenSeverity \u0026\u0026 issue.teamChosenSeverity !\u003d issue.severity\""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027severity\u0027, issue.teamChosenSeverity))\""},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        {{ issue.teamChosenSeverity }}"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"  \u003c!--Response Tag Column--\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"response\"\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Response \u003c/mat-header-cell\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.response\""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, issue.response))\""},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        {{ issue.response }}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!issue.response\" style\u003d\"margin-left: 10%\"\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003cmat-icon matTooltip\u003d\"Should not be empty\" matTooltipPosition\u003d\"above\" color\u003d\"warn\"\u003ewarning\u003c/mat-icon\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  \u003c!--Assignee Column--\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"assignees\"\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell mat-header-cell *matHeaderCellDef mat-sort-header\u003e Assignees \u003c/mat-header-cell\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default\" *ngIf\u003d\"issue.assignees.length !\u003d\u003d 0\"\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        {{ issue.assignees.join(\u0027, \u0027) }}"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.assignees.length \u003d\u003d\u003d 0\" style\u003d\"margin-left: 5%\"\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003cmat-icon matTooltip\u003d\"We strongly recommend assigning all issues to someone\" matTooltipPosition\u003d\"above\" style\u003d\"color: #ffab40\"\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          warning"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003c/mat-icon\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  \u003c!-- Duplicated Issues Column --\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"duplicatedIssues\"\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef\u003e Duplicates \u003c/mat-header-cell\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"(issueService.getDuplicateIssuesFor(issue) | async).length \u003d\u003d\u003d 0\"\u003e-\u003c/div\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmat-chip-list"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        *ngFor\u003d\"let duplicateIssue of issueService.getDuplicateIssuesFor(issue) | async\""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline-block; margin-left: 5px\""},{"lineNumber":125,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        \u003cmat-chip"},{"lineNumber":127,"author":{"gitId":"-"},"content":"          [routerLink]\u003d\"[\u0027issues/\u0027 + duplicateIssue.id]\""},{"lineNumber":128,"author":{"gitId":"-"},"content":"          [matTooltip]\u003d\"duplicateIssue.title\""},{"lineNumber":129,"author":{"gitId":"-"},"content":"          matTooltipPosition\u003d\"above\""},{"lineNumber":130,"author":{"gitId":"-"},"content":"          style\u003d\"font-size: 12px; cursor: pointer\""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":"          #{{ duplicateIssue.id }}"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        \u003c/mat-chip\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c/mat-chip-list\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  \u003c!-- To do Column --\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"Todo Remaining\"\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Todo Remaining \u003c/mat-header-cell\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"isTodoListChecked(issue) \u0026\u0026 issue.issueDisputes.length \u003e 0\"\u003e \u003cfont color\u003d\"green\"\u003eAll tasks are completed\u003c/font\u003e \u003c/span\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!isTodoListChecked(issue)\"\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        \u003cfont color\u003d\"red\""},{"lineNumber":145,"author":{"gitId":"-"},"content":"          \u003e{{ issue.issueDisputes.length - todoFinished(issue) }}/{{ issue.issueDisputes.length }} tasks pending.\u003c/font"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003e\u003c/span"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      \u003cprogress"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.issueDisputes.length \u003e 0\""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        value\u003d\"{{ todoFinished(issue) }}\""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        max\u003d\"{{ issue.issueDisputes.length }}\""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        role\u003d\"progressbar\""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        style\u003d\"width: 100%\""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        aria-valuenow\u003d\"100\""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        aria-valuemin\u003d\"0\""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        aria-valuemax\u003d\"100\""},{"lineNumber":157,"author":{"gitId":"-"},"content":"      \u003e\u003c/progress\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.issueDisputes.length \u003d\u003d\u003d 0\"\u003e No Todo List for this issue \u003c/span\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  \u003c!--Tester Disagree Column--\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"testerDisagree\"\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell mat-header-cell *matHeaderCellDef mat-sort-header\u003eResponse\u003c/mat-header-cell\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      \u003c!-- Response Agree/Disagree colours are the same as Response Agree/Rejected label colours for uniformity in the app --\u003e"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.testerDisagree\""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, \u0027Rejected\u0027))\""},{"lineNumber":171,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Disagree"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"!issue.testerDisagree\""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, \u0027Accepted\u0027))\""},{"lineNumber":178,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Agree"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"  \u003c!-- Action Buttons Column --\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"actions\"\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef\u003e Actions \u003c/mat-header-cell\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"View this issue on GitHub\""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isActionVisible(action_buttons.VIEW_IN_WEB)\""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        (click)\u003d\"this.viewIssueInBrowser(issue.id, $event)\""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":194,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003eopen_in_new\u003c/mat-icon\u003e"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 !issue.status \u0026\u0026 this.isActionVisible(action_buttons.RESPOND_TO_ISSUE); else tryEditIssue\""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        color\u003d\"accent\""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Respond to this issue\""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        (click)\u003d\"this.logIssueRespondRouting(issue.id)\""},{"lineNumber":205,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003efeedback\u003c/mat-icon\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      \u003cng-template #tryEditIssue\u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":210,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"permissions.isIssueEditable() \u0026\u0026 this.isActionVisible(action_buttons.FIX_ISSUE)\""},{"lineNumber":211,"author":{"gitId":"-"},"content":"          mat-button"},{"lineNumber":212,"author":{"gitId":"-"},"content":"          color\u003d\"accent\""},{"lineNumber":213,"author":{"gitId":"-"},"content":"          style\u003d\"transform: scale(0.8)\""},{"lineNumber":214,"author":{"gitId":"-"},"content":"          matTooltip\u003d\"Edit this issue\""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":216,"author":{"gitId":"-"},"content":"          \u003cmat-icon\u003eedit\u003c/mat-icon\u003e"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003c/ng-template\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 issue.status \u0026\u0026 this.isActionVisible(action_buttons.MARK_AS_RESPONDED)\""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        color\u003d\"primary\""},{"lineNumber":223,"author":{"gitId":"-"},"content":"        (click)\u003d\"markAsResponded(issue, $event)\""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Mark this issue as Responded\""},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003echeck_circle\u003c/mat-icon\u003e"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        color\u003d\"primary\""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Mark this issue as Pending\""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        (click)\u003d\"markAsPending(issue, $event)\""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        *ngIf\u003d\""},{"lineNumber":236,"author":{"gitId":"-"},"content":"          (userService.currentUser.role \u003d\u003d\u003d \u0027Student\u0027 || userService.currentUser.role \u003d\u003d\u003d \u0027Admin\u0027) \u0026\u0026"},{"lineNumber":237,"author":{"gitId":"-"},"content":"          this.isActionVisible(action_buttons.MARK_AS_PENDING)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        \""},{"lineNumber":239,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003ecancel\u003c/mat-icon\u003e"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        color\u003d\"warn\""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"permissions.isIssueDeletable() \u0026\u0026 !issuesPendingDeletion[issue.id] \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        (click)\u003d\"openDeleteDialog(issue.id, $event); $event.stopPropagation()\""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Delete this issue\""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003edelete_outline\u003c/mat-icon\u003e"},{"lineNumber":251,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      \u003cmat-spinner"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        color\u003d\"warn\""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        [diameter]\u003d\"25\""},{"lineNumber":255,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; padding-right: 30px; margin-left: 5px\""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issuesPendingDeletion[issue.id] \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\""},{"lineNumber":257,"author":{"gitId":"-"},"content":"      \u003e\u003c/mat-spinner\u003e"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":259,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"  \u003cmat-header-row *matHeaderRowDef\u003d\"this.headers\"\u003e\u003c/mat-header-row\u003e\u003e"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  \u003cmat-row"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    *matRowDef\u003d\"let issue; columns: this.headers\""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    (click)\u003d\"this.logIssueEditRouting(issue.id)\""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    style\u003d\"cursor: pointer\""},{"lineNumber":267,"author":{"gitId":"-"},"content":"  \u003e\u003c/mat-row\u003e"},{"lineNumber":268,"author":{"gitId":"-"},"content":"\u003c/mat-table\u003e"},{"lineNumber":269,"author":{"gitId":"-"},"content":"\u003cmat-card *ngIf\u003d\"this.issues.isLoading$ | async\" style\u003d\"display: flex; justify-content: center; align-items: center\"\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  \u003cmat-progress-spinner color\u003d\"primary\" mode\u003d\"indeterminate\" diameter\u003d\"50\" strokeWidth\u003d\"5\"\u003e\u003c/mat-progress-spinner\u003e"},{"lineNumber":271,"author":{"gitId":"-"},"content":"\u003c/mat-card\u003e"},{"lineNumber":272,"author":{"gitId":"Arif-Khalid"},"content":"\u003cmat-paginator"},{"lineNumber":273,"author":{"gitId":"Arif-Khalid"},"content":"  [paginatorLocalStorage]\u003d\"this.table_name\""},{"lineNumber":274,"author":{"gitId":"Arif-Khalid"},"content":"  [pageSize]\u003d\"this.tableSettings.pageSize\""},{"lineNumber":275,"author":{"gitId":"Arif-Khalid"},"content":"  [pageSizeOptions]\u003d\"[10, 20, 50]\""},{"lineNumber":276,"author":{"gitId":"Arif-Khalid"},"content":"  [pageIndex]\u003d\"this.tableSettings.pageIndex\""},{"lineNumber":277,"author":{"gitId":"Arif-Khalid"},"content":"  (page)\u003d\"this.pageChange($event)\""},{"lineNumber":278,"author":{"gitId":"Arif-Khalid"},"content":"\u003e\u003c/mat-paginator\u003e"}],"authorContributionMap":{"Arif-Khalid":15,"-":263}},{"path":"src/app/shared/issue-tables/issue-tables.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component, Input, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"Arif-Khalid"},"content":"import { MatPaginator, PageEvent } from \u0027@angular/material/paginator\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatSnackBar } from \u0027@angular/material/snack-bar\u0027;"},{"lineNumber":4,"author":{"gitId":"Arif-Khalid"},"content":"import { MatSort, Sort } from \u0027@angular/material/sort\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"Arif-Khalid"},"content":"import { TableSettings } from \u0027../../core/models/table-settings.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../core/services/dialog.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":11,"author":{"gitId":"Arif-Khalid"},"content":"import { IssueTableSettingsService } from \u0027../../core/services/issue-table-settings.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { UndoActionComponent } from \u0027../../shared/action-toasters/undo-action/undo-action.component\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027./IssuesDataTable\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"export enum ACTION_BUTTONS {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  VIEW_IN_WEB,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  MARK_AS_RESPONDED,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  MARK_AS_PENDING,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  RESPOND_TO_ISSUE,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  FIX_ISSUE,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  DELETE_ISSUE"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-tables\u0027,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-tables.component.html\u0027,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-tables.component.css\u0027]"},{"lineNumber":34,"author":{"gitId":"-"},"content":"})"},{"lineNumber":35,"author":{"gitId":"-"},"content":"export class IssueTablesComponent implements OnInit, AfterViewInit {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  snackBarAutoCloseTime \u003d 3000;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  @Input() headers: string[];"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  @Input() actions: ACTION_BUTTONS[];"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  @Input() filters?: any \u003d undefined;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  @Input() table_name: string;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  @ViewChild(MatSort, { static: true }) sort: MatSort;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  issues: IssuesDataTable;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  issuesPendingDeletion: { [id: number]: boolean };"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Arif-Khalid"},"content":"  public tableSettings: TableSettings;"},{"lineNumber":50,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  public readonly action_buttons \u003d ACTION_BUTTONS;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon deleting an issue"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  private readonly deleteIssueModalMessages \u003d [\u0027Do you wish to delete this issue?\u0027, \u0027This action is irreversible!\u0027];"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Yes, I wish to delete this issue\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \"No, I don\u0027t wish to delete this issue\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":64,"author":{"gitId":"Arif-Khalid"},"content":"    public issueTableSettingsService: IssueTableSettingsService,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private logger: LoggingService,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private dialogService: DialogService,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private snackBar: MatSnackBar \u003d null"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.issues \u003d new IssuesDataTable(this.issueService, this.sort, this.paginator, this.headers, this.filters);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {};"},{"lineNumber":75,"author":{"gitId":"Arif-Khalid"},"content":"    this.tableSettings \u003d this.issueTableSettingsService.getTableSettings(this.table_name);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  ngAfterViewInit(): void {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      this.issues.loadIssues();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Arif-Khalid"},"content":"  sortChange(newSort: Sort) {"},{"lineNumber":85,"author":{"gitId":"Arif-Khalid"},"content":"    this.tableSettings.sortActiveId \u003d newSort.active;"},{"lineNumber":86,"author":{"gitId":"Arif-Khalid"},"content":"    this.tableSettings.sortDirection \u003d newSort.direction;"},{"lineNumber":87,"author":{"gitId":"Arif-Khalid"},"content":"    this.issueTableSettingsService.setTableSettings(this.table_name, this.tableSettings);"},{"lineNumber":88,"author":{"gitId":"Arif-Khalid"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":90,"author":{"gitId":"Arif-Khalid"},"content":"  pageChange(pageEvent: PageEvent) {"},{"lineNumber":91,"author":{"gitId":"Arif-Khalid"},"content":"    this.tableSettings.pageSize \u003d pageEvent.pageSize;"},{"lineNumber":92,"author":{"gitId":"Arif-Khalid"},"content":"    this.tableSettings.pageIndex \u003d pageEvent.pageIndex;"},{"lineNumber":93,"author":{"gitId":"Arif-Khalid"},"content":"    this.issueTableSettingsService.setTableSettings(this.table_name, this.tableSettings);"},{"lineNumber":94,"author":{"gitId":"Arif-Khalid"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  isActionVisible(action: ACTION_BUTTONS): boolean {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    return this.actions.includes(action);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  markAsResponded(issue: Issue, event: Event) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Marking Issue ${issue.id} as Responded`);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Done;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe("},{"lineNumber":105,"author":{"gitId":"-"},"content":"      (updatedIssue) \u003d\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  isResponseEditable() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable() || this.permissions.isTesterResponseEditable();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"  markAsPending(issue: Issue, event: Event) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Marking Issue ${issue.id} as Pending`);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe("},{"lineNumber":124,"author":{"gitId":"-"},"content":"      (updatedIssue) \u003d\u003e {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  logIssueRespondRouting(id: number) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Proceeding to Respond to Issue ${id}`);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  logIssueEditRouting(id: number) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Proceeding to Edit Issue ${id}`);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"   * Gets the number of resolved disputes."},{"lineNumber":144,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  todoFinished(issue: Issue): number {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return issue.issueDisputes.length - issue.numOfUnresolvedDisputes();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * Checks if all the disputes are resolved."},{"lineNumber":151,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  isTodoListChecked(issue: Issue): boolean {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    return issue.issueDisputes \u0026\u0026 issue.numOfUnresolvedDisputes() \u003d\u003d\u003d 0;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number, event: Event) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Opening Issue ${id} on Github`);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    this.githubService.viewIssueInBrowser(id, event);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  deleteIssue(id: number, event: Event) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Deleting Issue ${id}`);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      ...this.issuesPendingDeletion,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      [id]: true"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      .deleteIssue(id)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":170,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"          const { [id]: issueRemoved, ...theRest } \u003d this.issuesPendingDeletion;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          this.issuesPendingDeletion \u003d theRest;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":176,"author":{"gitId":"-"},"content":"        (removedIssue) \u003d\u003e {},"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    let snackBarRef \u003d null;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    snackBarRef \u003d this.snackBar.openFromComponent(UndoActionComponent, {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      data: { message: `Deleted issue ${id}` },"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      duration: this.snackBarAutoCloseTime"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    snackBarRef.onAction().subscribe(() \u003d\u003e {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      this.undeleteIssue(id, event);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":191,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"  undeleteIssue(id: number, event: Event) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    this.logger.info(`IssueTablesComponent: Undeleting Issue ${id}`);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    this.issueService.undeleteIssue(id).subscribe("},{"lineNumber":196,"author":{"gitId":"-"},"content":"      (reopenedIssue) \u003d\u003e {},"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    this.snackBar.open(`Restored issue ${id}`, \u0027\u0027, { duration: this.snackBarAutoCloseTime });"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"  openDeleteDialog(id: number, event: Event) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":208,"author":{"gitId":"-"},"content":"      this.deleteIssueModalMessages,"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        this.logger.info(`IssueTablesComponent: Deleting issue ${id}`);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        this.deleteIssue(id, event);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Arif-Khalid":20,"-":200}},{"path":"src/app/shared/issue/description/description.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch3 class\u003d\"mat-title\"\u003e{{ descriptionTitle }}\u003c/h3\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"issueDescriptionForm\" #myForm\u003d\"ngForm\" (ngSubmit)\u003d\"updateDescription(myForm)\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"timeline-comment\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"timeline-header\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cspan\u003e \u003cstrong\u003e Tester \u003c/strong\u003e posted on {{ issue.created_at }}. \u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cbutton style\u003d\"float: right\" mat-button *ngIf\u003d\"permissions.isIssueDescriptionEditable() \u0026\u0026 !isEditing\" (click)\u003d\"changeToEditMode()\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        Edit"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"!isEditing\" class\u003d\"comment\"\u003e"},{"lineNumber":11,"author":{"gitId":"NereusWB922"},"content":"      \u003cmarkdown [data]\u003d\"issue.description\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003capp-comment-editor"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        [id]\u003d\"\u0027description\u0027\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        [commentField]\u003d\"this.issueDescriptionForm.get(\u0027description\u0027)\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        [commentForm]\u003d\"this.issueDescriptionForm\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        [(isFormPending)]\u003d\"this.isSavePending\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        [(submitButtonText)]\u003d\"this.submitButtonText\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/app-comment-editor\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"editor-actions\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isSavePending\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"          (click)\u003d\"viewChanges()\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          View Updated Description"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isSavePending\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"          (click)\u003d\"openCancelDialogIfModified()\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          Cancel"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"issueDescriptionForm.invalid || isSavePending\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":55,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action additional-editor-style\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!conflict\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"issueDescriptionForm.invalid || isSavePending\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":60,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          \u003cmat-button-content\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            {{ submitButtonText }}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \u003cng-container #loadingSpinnerContainer\u003e\u003c/ng-container\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          \u003c/mat-button-content\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"NereusWB922":1,"-":69}},{"path":"src/app/shared/issue/description/description.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewContainerRef } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { LoadingService } from \u0027../../../core/services/loading.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../../view-issue/view-issue.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-description\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./description.component.html\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./description.component.css\u0027],"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  providers: [LoadingService]"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export class DescriptionComponent implements OnInit {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  // The container of the loading spinner"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027loadingSpinnerContainer\u0027, {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    read: ViewContainerRef,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    static: false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  })"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  loadingSpinnerContainer: ViewContainerRef;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  issueDescriptionForm: FormGroup;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  @Input() descriptionTitle: string;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  @Output() changeEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private dialogService: DialogService,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public loadingService: LoadingService"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  showSpinner(): void {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.loadingService.addViewContainerRef(this.loadingSpinnerContainer).showLoader();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  hideSpinner(): void {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.loadingService.hideLoader();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm \u003d this.formBuilder.group({"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027]"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    // Build the loading service spinner"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.loadingService"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      .addAnimationMode(\u0027indeterminate\u0027)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .addSpinnerOptions({ diameter: 15, strokeWidth: 2 })"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      .addTheme(\u0027warn\u0027)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      .addCssClasses([\u0027mat-progress-spinner\u0027]);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(true);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm.setValue({"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      description: this.issue[\u0027description\u0027] || \u0027\u0027"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  updateDescription(form: NgForm) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    if (this.issueDescriptionForm.invalid) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    this.showSpinner();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .getLatestIssue(this.issue.id)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":97,"author":{"gitId":"MadLamprey"},"content":"        map((issue: Issue) \u003d\u003e issue.description \u003d\u003d\u003d this.issue.description),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        mergeMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"          if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssue(this.getUpdatedIssue());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(this.issue.description, this.issueService.issues[this.issue.id].description);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":110,"author":{"gitId":"-"},"content":"        (editedIssue: Issue) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(editedIssue);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"          this.hideSpinner();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"          this.hideSpinner();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(false);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":138,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    const isModified \u003d this.dialogService.checkIfFieldIsModified(this.issueDescriptionForm, \u0027description\u0027, \u0027description\u0027, this.issue);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":149,"author":{"gitId":"-"},"content":"      isModified,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":157,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const newIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    newIssue.description \u003d Issue.updateDescription(this.issueDescriptionForm.get(\u0027description\u0027).value);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    return newIssue;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":173}},{"path":"src/app/shared/issue/duplicateOf/duplicate-of.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, ViewEncapsulation } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormControl } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatCheckbox } from \u0027@angular/material/checkbox\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { MatSelect, MatSelectChange } from \u0027@angular/material/select\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable, ReplaySubject, Subject } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { first, map, takeUntil } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../issue-tables/issue-tables-columns\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027../../issue-tables/search-filter\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  selector: \u0027app-duplicate-of-component\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./duplicate-of.component.html\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./duplicate-of.component.css\u0027],"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  encapsulation: ViewEncapsulation.None"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class DuplicateOfComponent implements OnInit, OnDestroy {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  isEditing \u003d false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  duplicatedIssueList: Observable\u003cIssue[]\u003e;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  searchFilterCtrl: FormControl \u003d new FormControl();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  filteredDuplicateIssueList: ReplaySubject\u003cIssue[]\u003e \u003d new ReplaySubject\u003cIssue[]\u003e(1);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @ViewChild(MatSelect, { static: true }) duplicateOfSelection: MatSelect;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @ViewChild(MatCheckbox, { static: true }) duplicatedCheckbox: MatCheckbox;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  // A subject that will emit a signal when this component is being destroyed"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private _onDestroy \u003d new Subject\u003cvoid\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  // Max chars visible for a duplicate entry in duplicates dropdown list."},{"lineNumber":38,"author":{"gitId":"-"},"content":"  readonly MAX_TITLE_LENGTH_FOR_DUPLICATE_ISSUE \u003d 17;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  // Max chars visible for a non-duplicate entry in duplicates dropdown list."},{"lineNumber":40,"author":{"gitId":"-"},"content":"  readonly MAX_TITLE_LENGTH_FOR_NON_DUPLICATE_ISSUE \u003d 37;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * Checks if the supplied issue requires a tooltip"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * in the UI as some information may be hidden due to truncation."},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * @param issue - Displayed issue that may need a tooltip."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * @return - true (to enable tooltip) / false (to disable tooltip)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  isTooltipNecessary(issue: Issue): boolean {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Maximum Possible Title length varies based on whether the issue"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // is a duplicate. (Whether the Duplicate Issue Tag is visible)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    let maxTitleLength: number;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    maxTitleLength \u003d issue.duplicated ? this.MAX_TITLE_LENGTH_FOR_DUPLICATE_ISSUE : this.MAX_TITLE_LENGTH_FOR_NON_DUPLICATE_ISSUE;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    return issue.title.length \u003e maxTitleLength;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  ngOnDestroy(): void {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this._onDestroy.next(); // Emits the destroy signal"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this._onDestroy.complete();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList \u003d this.getDupIssueList();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    // Populate the filtered list with all the issues first"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList.pipe(first()).subscribe((issues) \u003d\u003e this.filteredDuplicateIssueList.next(issues));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.searchFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((_) \u003d\u003e this.filterIssues());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  private filterIssues(): void {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.changeFilter(this.duplicatedIssueList, this.searchFilterCtrl.value).subscribe((issues) \u003d\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      this.filteredDuplicateIssueList.next(issues)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  updateDuplicateStatus(event: MatSelectChange) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const latestIssue \u003d this.getUpdatedIssue(event);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.issueService.updateIssueWithComment(latestIssue, latestIssue.issueComment).subscribe("},{"lineNumber":85,"author":{"gitId":"-"},"content":"      (issue) \u003d\u003e this.issueUpdated.emit(issue),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e this.errorHandlingService.handleError(error)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  dupIssueOptionIsDisabled(issue: Issue): boolean {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    return issue.duplicated || !!issue.duplicateOf;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  getDisabledDupOptionErrorText(issue: Issue): string {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    return this.dupIssueOptionIsDisabled(issue) ? \u0027Duplicate of #\u0027 + issue.duplicateOf : \u0027\u0027;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  handleCheckboxChange(event) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    if (event.checked) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      this.openSelection();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      this.isEditing \u003d false;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.duplicateOfSelection.close();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      this.duplicateOfSelection.value \u003d null;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      this.updateDuplicateStatus(null);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"  openSelection() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    this.isEditing \u003d true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.duplicateOfSelection.open();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  handleSelectionOpenChange(isOpen) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    if (!isOpen) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      this.isEditing \u003d false;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      this.duplicatedCheckbox.checked \u003d this.duplicateOfSelection.value;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  getUpdatedIssue(duplicateCheckboxEvent: MatSelectChange): Issue {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    clone.duplicated \u003d !!duplicateCheckboxEvent;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    clone.duplicateOf \u003d duplicateCheckboxEvent ? duplicateCheckboxEvent.value : null;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    if (duplicateCheckboxEvent) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      const duplicatedIssue \u003d this.issueService.issues[clone.duplicateOf];"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      clone.severity \u003d duplicatedIssue.severity;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      clone.type \u003d duplicatedIssue.type;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      clone.assignees \u003d duplicatedIssue.assignees;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      clone.response \u003d duplicatedIssue.response;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    clone.issueComment.description \u003d clone.createGithubTeamResponse();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  private changeFilter(issuesObservable: Observable\u003cIssue[]\u003e, searchInputString): Observable\u003cIssue[]\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    return issuesObservable.pipe("},{"lineNumber":138,"author":{"gitId":"-"},"content":"      first(),"},{"lineNumber":139,"author":{"gitId":"MadLamprey"},"content":"      map((issues) \u003d\u003e applySearchFilter(searchInputString, [TABLE_COLUMNS.ID, TABLE_COLUMNS.TITLE], this.issueService, issues))"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  private getDupIssueList(): Observable\u003cIssue[]\u003e {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    return this.issueService.issues$.pipe("},{"lineNumber":145,"author":{"gitId":"MadLamprey"},"content":"      map((issues) \u003d\u003e issues.filter((issue) \u003d\u003e this.issue.id !\u003d\u003d issue.id \u0026\u0026 this.issue.teamAssigned.id \u003d\u003d\u003d issue.teamAssigned.id))"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":2,"-":146}},{"path":"src/app/shared/issue/duplicatedIssues/duplicated-issues.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cspan class\u003d\"mat-title\"\u003e Duplicated Issues \u003c/span\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cmat-chip-list\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cmat-chip"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      *ngFor\u003d\"let duplicatedIssue of duplicatedIssues | async\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"      style\u003d\"cursor: pointer\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"      [matTooltip]\u003d\"duplicatedIssue.title\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"      matTooltipPosition\u003d\"above\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"      (removed)\u003d\"removeDuplicateStatus(duplicatedIssue)\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003e"},{"lineNumber":11,"author":{"gitId":"nknguyenhc"},"content":"      \u003ca class\u003d\"no-underline link-grey-dark\" [routerLink]\u003d\"[\u0027../\u0027 + duplicatedIssue.id]\"\u003e #{{ duplicatedIssue.id }} \u003c/a\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u003cmat-icon *ngIf\u003d\"permissions.isTeamResponseEditable() || permissions.isTutorResponseEditable()\" matChipRemove\u003ecancel\u003c/mat-icon\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003c/mat-chip\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/mat-chip-list\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"nknguyenhc":1,"-":14}},{"path":"src/app/shared/layout/header.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Location } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Router, RoutesRecognized } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { filter, pairwise } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../core/models/phase.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../core/services/dialog.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../core/services/githubevent.service\u0027;"},{"lineNumber":13,"author":{"gitId":"Arif-Khalid"},"content":"import { IssueTableSettingsService } from \u0027../../core/services/issue-table-settings.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { PhaseDescription, PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"const ISSUE_TRACKER_URL \u003d \u0027https://github.com/CATcher-org/CATcher/issues\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  selector: \u0027app-layout-header\u0027,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./header.component.html\u0027"},{"lineNumber":24,"author":{"gitId":"-"},"content":"})"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export class HeaderComponent implements OnInit {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private prevUrl;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  isReloadButtonDisabled \u003d false;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  ISSUE_FILTER \u003d \u0027/issues?q\u003dis:issue+is:open\u0027; // the filtered list must be an issue and must be open"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  TUTORIAL_LABEL \u003d \u0027+label:tutorial.\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  TEAM_LABEL \u003d \u0027+label:team.\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  EXCLUDE_DUPLICATE \u003d \u0027+-label:duplicate\u0027; // exclude duplicate issues"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon logging out"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  private readonly logOutDialogMessages \u003d [\u0027Do you wish to log out?\u0027];"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly yesButtonDialogMessage \u003d \u0027Yes, I wish to log out\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private readonly noButtonDialogMessage \u003d \"No, I don\u0027t wish to log out\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public auth: AuthService,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public phaseService: PhaseService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public logger: LoggingService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private location: Location,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":49,"author":{"gitId":"Arif-Khalid"},"content":"    private dialogService: DialogService,"},{"lineNumber":50,"author":{"gitId":"Arif-Khalid"},"content":"    private issueTableSettingsService: IssueTableSettingsService"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    router.events"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":54,"author":{"gitId":"-"},"content":"        filter((e: any) \u003d\u003e e instanceof RoutesRecognized),"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        pairwise()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .subscribe((e) \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.prevUrl \u003d e[0].urlAfterRedirects;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   * Replaces and resets the current phase data and routes the app to the"},{"lineNumber":66,"author":{"gitId":"-"},"content":"   * newly selected phase."},{"lineNumber":67,"author":{"gitId":"-"},"content":"   * @param openPhase - Open Phase that is selected by the user."},{"lineNumber":68,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  routeToSelectedPhase(openPhase: string): void {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Do nothing if the selected phase is the current phase."},{"lineNumber":71,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase[openPhase]) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    // Replace Current Phase Data."},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.phaseService.currentPhase \u003d Phase[openPhase];"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails("},{"lineNumber":77,"author":{"gitId":"-"},"content":"      this.phaseService.getPhaseOwner(this.phaseService.currentPhase),"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      this.phaseService.sessionData[openPhase]"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // Remove current phase issues and load selected phase issues."},{"lineNumber":82,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    this.issueService.reset(false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.reload();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Arif-Khalid"},"content":"    // Reset Issue Table Settings"},{"lineNumber":87,"author":{"gitId":"Arif-Khalid"},"content":"    this.issueTableSettingsService.clearTableSettings();"},{"lineNumber":88,"author":{"gitId":"Arif-Khalid"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    // Route app to new phase."},{"lineNumber":90,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  isBackButtonShown(): boolean {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return `/${this.phaseService.currentPhase}` !\u003d\u003d this.router.url \u0026\u0026 this.router.url !\u003d\u003d \u0027/\u0027 \u0026\u0026 !this.router.url.startsWith(\u0027/?code\u0027);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  isReloadButtonShown(): boolean {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    return this.router.url !\u003d\u003d \u0027/phaseBugReporting/issues/new\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"  isOpenUrlButtonShown(): boolean {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting ||"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      this.userService.currentUser.role \u003d\u003d\u003d UserRole.Student ||"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      this.issueService.getIssueTeamFilter() !\u003d\u003d \u0027All Teams\u0027 ||"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      this.router.url.includes(\u0027/issues\u0027)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  getVersion(): string {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    return AppConfig.version;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  getPhaseDescription(openPhase: string): string {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    return PhaseDescription[openPhase];"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  goBack() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    if (this.prevUrl \u003d\u003d\u003d `/${this.phaseService.currentPhase}/issues/new`) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      this.router.navigate([\u0027/phaseBugReporting\u0027]);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      this.location.back();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"  viewBrowser() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    const routerUrl \u003d this.router.url.substring(1); // remove the first \u0027/\u0027 from string"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    const issueUrlIndex \u003d routerUrl.indexOf(\u0027/\u0027); // find the index of second \u0027/\u0027"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    let issueUrl: string;"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    // If can\u0027t find the index of second \u0027/\u0027, then router is at the /issues (table list) page"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    if (issueUrlIndex \u003c 0) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      // Apply filters to the issueUrl"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      issueUrl \u003d this.ISSUE_FILTER.concat(this.getTeamFilterString());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      // issueUrl will be from the second \u0027/\u0027"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      issueUrl \u003d routerUrl.substring(issueUrlIndex);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    // Open the url in user\u0027s preferred browser"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    window.open(\u0027https://github.com/\u0027.concat(this.githubService.getRepoURL()).concat(issueUrl));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  openIssueTracker() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    window.open(ISSUE_TRACKER_URL);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  private getTeamFilterString() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    // First Phase does not need team filtering"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting || this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    // Initialise the team filter for Students in other Phases, as they do not have team filter assigned by default"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    if (this.userService.currentUser.team) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      this.issueService.setIssueTeamFilter(this.userService.currentUser.team.id); // e.g W12-3"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    const teamFilter \u003d this.issueService.getIssueTeamFilter().split(\u0027-\u0027); // e.g CS2103T-W12-3 -\u003e CS2103T, W12 and 3"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    // The team filter string E.g \"+label:tutorial.W12+label:team.3\""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    const teamFilterString \u003d this.TUTORIAL_LABEL.concat(`${teamFilter[0]}-${teamFilter[1]}`).concat(this.TEAM_LABEL).concat(teamFilter[2]);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    // Only include duplicate Issues in last Phase"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    return this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? teamFilterString : this.EXCLUDE_DUPLICATE.concat(teamFilterString);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"  reload() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    this.isReloadButtonDisabled \u003d true;"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    this.githubEventService.reloadPage().subscribe("},{"lineNumber":169,"author":{"gitId":"-"},"content":"      (success) \u003d\u003e success,"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error, () \u003d\u003e this.githubEventService.reloadPage());"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    // Prevent user from spamming the reload button"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      this.isReloadButtonDisabled \u003d false;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }, 3000);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"  logOut() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    this.auth.logOut();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"  openLogOutDialog() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.logOutDialogMessages,"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      this.yesButtonDialogMessage,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      this.noButtonDialogMessage"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        this.logger.info(`HeaderComponent: Logging out from ${this.userService.currentUser.loginId}`);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        this.logOut();"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"  exportLogFile() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    this.logger.exportLogFile();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Arif-Khalid":6,"-":197}},{"path":"src/app/shared/lib/github-paginator-parser.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubResponse } from \u0027../../core/models/github/github-response.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Get the number of paginated pages of issues specified in a GitHubResponse"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * @param response"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"export function getNumberOfPages\u003cT\u003e(response: GithubResponse\u003cT\u003e): number {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  let numberOfPages \u003d 1;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  if (response.headers.link) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    const paginatedData \u003d githubPaginatorParser(response.headers.link);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    numberOfPages \u003d +paginatedData[\u0027last\u0027] || 1;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  return numberOfPages;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Will return in the format of { paginateAction: number }"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Example { next: \u002715\u0027, last: \u002734\u0027, first: \u00271\u0027, prev: \u002713\u0027 }"},{"lineNumber":19,"author":{"gitId":"-"},"content":" *"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * ref: https://docs.github.com/en/rest/guides/traversing-with-pagination"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * @param linkStr represent the pagination string provided by github API."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"function githubPaginatorParser(linkStr: string) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  return linkStr"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    .split(\u0027,\u0027)"},{"lineNumber":28,"author":{"gitId":"MadLamprey"},"content":"    .map((paginateItem) \u003d\u003e"},{"lineNumber":29,"author":{"gitId":"MadLamprey"},"content":"      paginateItem.split(\u0027;\u0027).map((curr, idx) \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (idx \u003d\u003d\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          return /[^_]page\u003d(\\d+)/.exec(curr)[1];"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (idx \u003d\u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          return /rel\u003d\"(.+)\"/.exec(curr)[1];"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":37,"author":{"gitId":"MadLamprey"},"content":"    )"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    .reduce((obj, curr) \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      obj[curr[1]] \u003d curr[0];"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      return obj;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }, {});"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":3,"-":39}},{"path":"src/app/shared/lib/marked.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { MarkedOptions, MarkedRenderer } from \u0027ngx-markdown\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export function markedOptionsFactory(): MarkedOptions {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  const renderer \u003d new MarkedRenderer();"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  const linkRenderer \u003d renderer.link;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  renderer.link \u003d (href, title, text) \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    const html \u003d linkRenderer.call(renderer, href, title, text);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    return html.replace(/^\u003ca /, \u0027\u003ca target\u003d\"_blank\" \u0027);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"MadLamprey"},"content":"  renderer.checkbox \u003d (checked) \u003d\u003e (checked ? \u0027\u003ci class\u003d\"fa-solid fa-square-check\"\u003e\u003c/i\u003e \u0027 : \u0027\u003ci class\u003d\"fa-solid fa-square\"\u003e\u003c/i\u003e \u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  return {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    renderer,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    gfm: true,"},{"lineNumber":17,"author":{"gitId":"nknguyenhc"},"content":"    breaks: true,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    pedantic: false,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    smartLists: true,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    smartypants: false"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":1,"MadLamprey":1,"-":20}},{"path":"src/app/shared/shared.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { CommonModule } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { HttpClientModule } from \u0027@angular/common/http\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormsModule, ReactiveFormsModule } from \u0027@angular/forms\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { RouterModule } from \u0027@angular/router\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { FormDisableControlDirective } from \u0027../core/directives/form-disable-control.directive\u0027;"},{"lineNumber":7,"author":{"gitId":"NereusWB922"},"content":"import { InternalLinkDisableDirective } from \u0027../core/directives/internal-link-disable.directive\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ActionToasterModule } from \u0027./action-toasters/action-toasters.module\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ErrorToasterModule } from \u0027./error-toasters/error-toaster.module\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { MaterialModule } from \u0027./material.module\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  imports: [CommonModule, FormsModule, ReactiveFormsModule, HttpClientModule, RouterModule, MaterialModule, ErrorToasterModule],"},{"lineNumber":14,"author":{"gitId":"NereusWB922"},"content":"  declarations: [FormDisableControlDirective, InternalLinkDisableDirective],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  exports: ["},{"lineNumber":16,"author":{"gitId":"-"},"content":"    FormDisableControlDirective,"},{"lineNumber":17,"author":{"gitId":"NereusWB922"},"content":"    InternalLinkDisableDirective,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    CommonModule,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    FormsModule,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    ReactiveFormsModule,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    HttpClientModule,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    RouterModule,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    MaterialModule,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ErrorToasterModule,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ActionToasterModule"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"})"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export class SharedModule {}"}],"authorContributionMap":{"NereusWB922":3,"-":25}},{"path":"src/app/shared/view-issue/issue-dispute/issue-dispute.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch3 class\u003d\"mat-title\"\u003eDisputes\u003c/h3\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"tutorResponseForm\" #tutorForm\u003d\"ngForm\" (ngSubmit)\u003d\"submitTutorResponseForm(tutorForm)\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"timeline-comment\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"timeline-header\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cspan\u003e Post your response here. \u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cbutton mat-button style\u003d\"float: right\" *ngIf\u003d\"!isEditing\" (click)\u003d\"changeToEditMode()\"\u003eEdit\u003c/button\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cdiv\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"container\" *ngFor\u003d\"let dispute of issue.issueDisputes; index as i; trackBy: trackDisputeList\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        \u003cdiv style\u003d\"display: flex; align-items: center\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"question-mark\"\u003e?\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"NereusWB922"},"content":"          \u003cmarkdown [data]\u003d\"this.getItemTitleText(dispute.title)\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":15,"author":{"gitId":"NereusWB922"},"content":"        \u003cmarkdown [data]\u003d\"dispute.description\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cdiv\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"          \u003cmat-checkbox"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            style\u003d\"display: inline-block; width: 20%\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            [id]\u003d\"getTodoFormId(i)\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            [formControlName]\u003d\"getTodoFormId(i)\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            [disableControl]\u003d\"!isEditing\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            Done"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003c/mat-checkbox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cdiv\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cmarkdown data\u003d\"### Tutor\u0027s Response: \"\u003e\u003c/markdown\u003e"},{"lineNumber":30,"author":{"gitId":"NereusWB922"},"content":"          \u003cmarkdown [data]\u003d\"dispute.tutorResponse\" *ngIf\u003d\"!isEditing\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003capp-comment-editor"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            [commentField]\u003d\"tutorResponseForm.get(getTutorResponseFormId(i))\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            [commentForm]\u003d\"tutorResponseForm\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            [id]\u003d\"getTutorResponseFormId(i)\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            [(isFormPending)]\u003d\"isFormPending\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            [(submitButtonText)]\u003d\"submitButtonText\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/app-comment-editor\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cmarkdown data\u003d\"-------------------\"\u003e\u003c/markdown\u003e \u003cbr /\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"editor-actions\" *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"          (click)\u003d\"viewInGithub()\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          View Updated Response On Github"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":59,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":61,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!conflict\""},{"lineNumber":62,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"tutorResponseForm.invalid || isFormPending\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"tutorResponseForm.invalid || isFormPending\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":73,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":74,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":79,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":80,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":81,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":82,"author":{"gitId":"-"},"content":"          style\u003d\"margin-left: 10px\""},{"lineNumber":83,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!this.isNewResponse()\""},{"lineNumber":84,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":85,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":86,"author":{"gitId":"-"},"content":"          (click)\u003d\"cancelEditMode()\""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          Cancel"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"NereusWB922":3,"-":90}},{"path":"src/app/shared/view-issue/new-team-response/new-team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatCheckboxChange } from \u0027@angular/material/checkbox\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable, ReplaySubject, Subject, throwError } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { finalize, first, map, mergeMap, takeUntil } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../core/services/label.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../issue-tables/issue-tables-columns\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027../../issue-tables/search-filter\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  selector: \u0027app-new-team-response\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./new-team-response.component.html\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./new-team-response.component.css\u0027]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class NewTeamResponseComponent implements OnInit, OnDestroy {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  newTeamResponseForm: FormGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  teamMembers: string[];"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  duplicatedIssueList: Observable\u003cIssue[]\u003e;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  searchFilterCtrl: FormControl \u003d new FormControl();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  filteredDuplicateIssueList: ReplaySubject\u003cIssue[]\u003e \u003d new ReplaySubject\u003cIssue[]\u003e(1);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  // A subject that will emit a signal when this component is being destroyed"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  private _onDestroy \u003d new Subject\u003cvoid\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":52,"author":{"gitId":"MadLamprey"},"content":"    this.teamMembers \u003d this.issue.teamAssigned.teamMembers.map((member) \u003d\u003e member.loginId);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList \u003d this.getDupIssueList();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Populate the filtered list with all the issues first"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList.pipe(first()).subscribe((issues) \u003d\u003e this.filteredDuplicateIssueList.next(issues));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.searchFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((_) \u003d\u003e this.filterIssues());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.newTeamResponseForm \u003d this.formBuilder.group({"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027],"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      severity: [this.issue.severity, Validators.required],"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      type: [this.issue.type, Validators.required],"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      response: [this.issue.response, Validators.required],"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      assignees: [this.issue.assignees.map((a) \u003d\u003e a.toLowerCase())],"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      duplicated: [false],"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      duplicateOf: [\u0027\u0027]"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.duplicated.valueChanges.subscribe((checked) \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      if (checked) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(Validators.required);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(null);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(null);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(Validators.required);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      this.duplicateOf.updateValueAndValidity();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      this.responseTag.updateValueAndValidity();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SUBMIT;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  private filterIssues(): void {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    this.changeFilter(this.duplicatedIssueList, this.searchFilterCtrl.value).subscribe((issues) \u003d\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      this.filteredDuplicateIssueList.next(issues)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"  private changeFilter(issuesObservable: Observable\u003cIssue[]\u003e, searchInputString): Observable\u003cIssue[]\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    return issuesObservable.pipe("},{"lineNumber":88,"author":{"gitId":"-"},"content":"      first(),"},{"lineNumber":89,"author":{"gitId":"MadLamprey"},"content":"      map((issues) \u003d\u003e applySearchFilter(searchInputString, [TABLE_COLUMNS.ID, TABLE_COLUMNS.TITLE], this.issueService, issues))"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  ngOnDestroy(): void {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    this._onDestroy.next(); // Emits the destroy signal"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    this._onDestroy.complete();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  submitNewTeamResponse(form: NgForm) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    if (this.newTeamResponseForm.invalid) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    const latestIssue \u003d this.getUpdatedIssue();"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    this.isSafeToSubmit()"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":107,"author":{"gitId":"-"},"content":"        mergeMap((isSafeToSubmit: boolean) \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"          const newCommentDescription \u003d latestIssue.createGithubTeamResponse();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          if (isSafeToSubmit) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return this.issueService.createTeamResponse(latestIssue);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          } else if (this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            const issueCommentId \u003d this.issueService.issues[this.issue.id].issueComment.id;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssueWithComment(latestIssue, \u003cIssueComment\u003e{"},{"lineNumber":114,"author":{"gitId":"-"},"content":"              id: issueCommentId,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"              description: newCommentDescription"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":117,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(\u0027 \u0027, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            this.viewUpdatedResponse();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return throwError(\u0027A response has been submitted. Please verify the changes and try again.\u0027);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isFormPending \u003d false))"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":127,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"          // updatedIssue.issueComment \u003d updatedComment;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit a tester response."},{"lineNumber":140,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  isSafeToSubmit(): Observable\u003cboolean\u003e {"},{"lineNumber":142,"author":{"gitId":"MadLamprey"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe(map((issue: Issue) \u003d\u003e !issue.teamResponse));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   * @return - an updated copy of issue with its updated value from the form."},{"lineNumber":147,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  getUpdatedIssue(): Issue {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    clone.duplicated \u003d this.duplicated.value;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    clone.duplicateOf \u003d this.duplicateOf.value;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    if (clone.duplicated) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      const duplicatedIssue \u003d this.issueService.issues[clone.duplicateOf];"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      clone.severity \u003d duplicatedIssue.severity;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      clone.type \u003d duplicatedIssue.type;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      clone.assignees \u003d duplicatedIssue.assignees;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      clone.response \u003d duplicatedIssue.response;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      clone.severity \u003d this.severity.value;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      clone.type \u003d this.type.value;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      clone.assignees \u003d this.assignees.value;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      clone.response \u003d this.responseTag.value;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    clone.status \u003d STATUS.Done;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.description.value);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"  dupIssueOptionIsDisabled(issue: Issue): boolean {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    return issue.duplicated || !!issue.duplicateOf;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  getDisabledDupOptionErrorText(issue: Issue): string {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return this.dupIssueOptionIsDisabled(issue) ? \u0027Duplicate of #\u0027 + issue.duplicateOf : \u0027\u0027;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  handleChangeOfDuplicateCheckbox(event: MatCheckboxChange) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    if (event.checked) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      this.responseTag.setValue(\u0027\u0027);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      this.assignees.setValue([]);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      this.responseTag.markAsUntouched();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      this.duplicateOf.setValue(\u0027\u0027);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      this.duplicateOf.markAsUntouched();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   * Pops up a dialog that shows the updated team response that was submitted."},{"lineNumber":190,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"  viewUpdatedResponse(): void {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      data: this.issueService.issues[this.issue.id],"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":196,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"  refresh(): void {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issueService.issues[this.issue.id];"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    this.issueUpdated.emit(updatedIssue);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"  private getDupIssueList(): Observable\u003cIssue[]\u003e {"},{"lineNumber":204,"author":{"gitId":"MadLamprey"},"content":"    return this.issueService.issues$.pipe(map((issues) \u003d\u003e issues.filter((issue) \u003d\u003e this.issue.id !\u003d\u003d issue.id)));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"  get description() {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027description\u0027);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"  get severity() {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027severity\u0027);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"  get type() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027type\u0027);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  get assignees() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027assignees\u0027);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"  get responseTag() {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027response\u0027);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"  get duplicated() {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicated\u0027);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"  get duplicateOf() {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicateOf\u0027);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":4,"-":230}},{"path":"src/app/shared/view-issue/team-response/team-response.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch3 class\u003d\"mat-title\"\u003eTeam\u0027s Response\u003c/h3\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"responseForm\" #myForm\u003d\"ngForm\" (ngSubmit)\u003d\"updateResponse(myForm)\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"timeline-comment\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"timeline-header\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cspan\u003e \u003cstrong\u003e Team \u003c/strong\u003e responded. \u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cbutton style\u003d\"float: right\" mat-button *ngIf\u003d\"canEditIssue() \u0026\u0026 !isEditing\" (click)\u003d\"changeToEditMode()\"\u003eEdit\u003c/button\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"!isEditing\" class\u003d\"comment\"\u003e"},{"lineNumber":9,"author":{"gitId":"NereusWB922"},"content":"      \u003cmarkdown [data]\u003d\"issue.teamResponse\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u003capp-comment-editor"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        [id]\u003d\"\u0027description\u0027\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"        [commentField]\u003d\"this.responseForm.get(\u0027description\u0027)\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        [commentForm]\u003d\"this.responseForm\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        [(isFormPending)]\u003d\"this.isSavePending\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        [(submitButtonText)]\u003d\"this.submitButtonText\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/app-comment-editor\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"editor-actions\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isSavePending\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"          (click)\u003d\"viewChanges()\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          View Updated Response"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"responseForm.invalid || isSavePending\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!conflict\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"responseForm.invalid || isSavePending\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isSavePending\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"          (click)\u003d\"openCancelDialogIfModified()\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"          Cancel"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"NereusWB922":1,"-":64}},{"path":"src/app/shared/view-issue/team-response/team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../../issue/conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-team-response\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./team-response.component.html\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./team-response.component.css\u0027]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"})"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export class TeamResponseComponent implements OnInit {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  responseForm: FormGroup;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private permissions: PermissionService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.responseForm \u003d this.formBuilder.group({"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.responseForm.setValue({"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      description: this.issue.teamResponse || \u0027\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  updateResponse(form: NgForm) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (this.responseForm.invalid) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.getUpdatedIssue();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    const updatedIssueComment \u003d \u003cIssueComment\u003e{"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      ...updatedIssue.issueComment,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      description: updatedIssue.createGithubTeamResponse()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.isSafeToUpdate()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":77,"author":{"gitId":"-"},"content":"        mergeMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssueWithComment(updatedIssue, updatedIssueComment);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"          } else if (this.isUpdatingDeletedResponse()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return this.issueService.createTeamResponse(updatedIssue);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(this.issue.teamResponse, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isSavePending \u003d false))"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":92,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to updated an existing team response."},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  isSafeToUpdate(): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"MadLamprey"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe(map((issue: Issue) \u003d\u003e issue.teamResponse \u003d\u003d\u003d this.issue.teamResponse));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    return this.issue.teamResponse \u0026\u0026 !this.issueService.issues[this.issue.id].teamResponse;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  canEditIssue(): boolean {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":123,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":139,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    const isModified \u003d this.dialogService.checkIfFieldIsModified(this.responseForm, \u0027teamResponse\u0027, \u0027description\u0027, this.issue);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":150,"author":{"gitId":"-"},"content":"      isModified,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":158,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.responseForm.get(\u0027description\u0027).value);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    if (!clone.status) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      clone.status \u003d clone.teamResponse \u003d\u003d\u003d \u0027\u0027 ? STATUS.Incomplete : STATUS.Done;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":1,"-":177}},{"path":"src/app/shared/view-issue/tester-response/conflict-dialog/conflict-dialog.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv style\u003d\"display: flex; margin-bottom: 20px; align-items: center\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003ch1 mat-dialog-title style\u003d\"margin: 0\"\u003e{{ \u0027The content you are editing has changed\u0027 }}\u003c/h1\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cmat-slide-toggle style\u003d\"display: inline-block; margin-left: 50px\" color\u003d\"primary\" [checked]\u003d\"showDiff\" (change)\u003d\"handleChangeShowDiff()\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    Show Difference"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u003c/mat-slide-toggle\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cbutton mat-icon-button color\u003d\"default\" style\u003d\"margin: 0 0 0 auto\" (click)\u003d\"close()\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003cmat-icon\u003eclose\u003c/mat-icon\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv mat-dialog-content\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cmat-accordion [multi]\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmat-expansion-panel class\u003d\"full-width\" *ngFor\u003d\"let conflict of conflicts; index as i\" [expanded]\u003d\"panelOpenStates[i]\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cmat-expansion-panel-header\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cmat-panel-title class\u003d\"response-title\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"question-mark\"\u003e?\u003c/div\u003e"},{"lineNumber":17,"author":{"gitId":"NereusWB922"},"content":"          \u003cmarkdown [data]\u003d\"data.updatedResponses[i].getTitleInMarkDown()\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c/mat-panel-title\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cmat-panel-description\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"          \u003cmat-chip-list\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \u003cmat-chip *ngIf\u003d\"data.outdatedResponses[i].compareTo(data.updatedResponses[i]) \u003d\u003d\u003d 0\" style\u003d\"margin-top: 10px\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"              No Changes"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c/mat-chip\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003c/mat-chip-list\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003c/mat-panel-description\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/mat-expansion-panel-header\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cbr /\u003e"},{"lineNumber":28,"author":{"gitId":"NereusWB922"},"content":"      \u003cmarkdown [data]\u003d\"data.updatedResponses[i].description\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cbr /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cdiv"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"data.updatedResponses[i].isDisagree() \u003d\u003d\u003d data.outdatedResponses[i].isDisagree() || !showDiff\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        style\u003d\"margin-bottom: 10px\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cmat-checkbox style\u003d\"display: inline-block; width: 20%\" [disabled]\u003d\"true\" [checked]\u003d\"data.updatedResponses[i].isDisagree()\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          I disagree"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/mat-checkbox\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"!data.outdatedResponses[i].isDisagree() \u0026\u0026 data.updatedResponses[i].isDisagree() \u0026\u0026 showDiff\" class\u003d\"checkbox-changes\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003ci style\u003d\"color: green\" class\u003d\"material-icons-outlined\"\u003eadd_box\u003c/i\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003cins style\u003d\"background: #d4fcbc; text-decoration: none\"\u003e I disagree \u003c/ins\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"data.outdatedResponses[i].isDisagree() \u0026\u0026 !data.updatedResponses[i].isDisagree() \u0026\u0026 showDiff\" class\u003d\"checkbox-changes\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003ci style\u003d\"color: red\" class\u003d\"material-icons-outlined\"\u003eindeterminate_check_box\u003c/i\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cdel style\u003d\"background: #fbb\"\u003eI disagree\u003c/del\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003cmat-tab-group style\u003d\"margin-bottom: 20px\" class\u003d\"mat-elevation-z1\" animationDuration\u003d\"0ms\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003cmat-tab label\u003d\"Markdown Text\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"tab-content\" *ngIf\u003d\"isReady\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"showDiff\" [innerHTML]\u003d\"diffHtmls[i]\"\u003e\u003c/div\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"!showDiff\" [innerHTML]\u003d\"updatedHtmls[i]\"\u003e\u003c/div\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        \u003c/mat-tab\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003cmat-tab label\u003d\"Preview Updated Content\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"tab-content\"\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u003cmarkdown\u003e{{ conflict.updatedContent }}\u003c/markdown\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003c/mat-tab\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003c/mat-tab-group\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003c/mat-expansion-panel\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \u003c/mat-accordion\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"NereusWB922":2,"-":60}},{"path":"src/app/shared/view-issue/tester-response/tester-response.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch3 class\u003d\"mat-title\"\u003eTester\u0027s Response\u003c/h3\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"testerResponseForm\" (ngSubmit)\u003d\"submitTesterResponseForm()\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"timeline-comment\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"timeline-header\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"this.isNewResponse()\"\u003e Please verify the following item(s). \u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!this.isNewResponse()\"\u003e \u003cstrong\u003eTester\u003c/strong\u003e responded. \u003c/span\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \u003cbutton mat-button style\u003d\"float: right\" *ngIf\u003d\"!isEditing\" (click)\u003d\"changeToEditMode()\"\u003eEdit\u003c/button\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cdiv\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"container\" *ngFor\u003d\"let response of issue.testerResponses; index as i; trackBy: trackDisagreeList\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        \u003cdiv style\u003d\"display: flex; align-items: center\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"question-mark\"\u003e?\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"NereusWB922"},"content":"          \u003cmarkdown [data]\u003d\"response.getTitleInMarkDown()\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":16,"author":{"gitId":"NereusWB922"},"content":"        \u003cmarkdown [data]\u003d\"response.description\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cdiv\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"          \u003cmat-radio-group"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            style\u003d\"display: inline-block; width: 20%\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            aria-label\u003d\"Select Agree or Disagree to Team\u0027s Response\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            [disableControl]\u003d\"!isEditing\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            [id]\u003d\"getDisagreeRadioFormId(i)\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            [formControlName]\u003d\"getDisagreeRadioFormId(i)\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            (change)\u003d\"handleChangeOfDisagreeRadioButton($event, i)\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003cmat-radio-button [value]\u003d\"false\"\u003e I Agree \u003c/mat-radio-button\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cmat-radio-button [value]\u003d\"true\"\u003e I Disagree \u003c/mat-radio-button\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/mat-radio-group\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"testerResponseForm.get(getDisagreeRadioFormId(i)).value\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cdiv\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cp style\u003d\"font-weight: 500\"\u003eReason for Disagreement:\u003c/p\u003e"},{"lineNumber":34,"author":{"gitId":"NereusWB922"},"content":"            \u003cmarkdown [data]\u003d\"response.reasonForDisagreement\" *ngIf\u003d\"!isEditing\" disableInternalLink\u003e\u003c/markdown\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cdiv *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003capp-comment-editor"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              [commentField]\u003d\"testerResponseForm.get(getTesterResponseFormId(i))\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"              [id]\u003d\"getTesterResponseFormId(i)\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"              [commentForm]\u003d\"testerResponseForm\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"              [(isFormPending)]\u003d\"isFormPending\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"              [(submitButtonText)]\u003d\"submitButtonText\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003c/app-comment-editor\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003cbr /\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003cmarkdown data\u003d\"-------------------\"\u003e\u003c/markdown\u003e \u003cbr /\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"editor-actions\" *ngIf\u003d\"isEditing\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":58,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"          (click)\u003d\"viewChanges()\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          View Updated Response"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cbutton type\u003d\"submit\" [disabled]\u003d\"testerResponseForm.invalid || isFormPending\" mat-stroked-button color\u003d\"primary\" *ngIf\u003d\"!conflict\"\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":69,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"testerResponseForm.invalid || isFormPending\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":78,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":79,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":80,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!this.isNewResponse()\""},{"lineNumber":81,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":83,"author":{"gitId":"-"},"content":"          (click)\u003d\"openCancelDialogIfModified()\""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"          Cancel"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"NereusWB922":3,"-":87}},{"path":"src/app/shared/view-issue/tester-response/tester-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../../../core/models/tester-response.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../../core/models/user.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../core/services/user.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { CommentEditorComponent } from \u0027../../comment-editor/comment-editor.component\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent, TesterResponseConflictData } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  selector: \u0027app-tester-response\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./tester-response.component.html\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./tester-response.component.css\u0027]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class TesterResponseComponent implements OnInit, OnChanges {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  testerResponseForm: FormGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  @ViewChild(CommentEditorComponent) commentEditor: CommentEditorComponent;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  private readonly responseRadioIdentifier \u003d \u0027response-radio\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  private readonly responseTextIdentifier \u003d \u0027tester-response\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d this.isNewResponse() ? SUBMIT_BUTTON_TEXT.SUBMIT : SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      this.updateEditState.emit(this.isNewResponse());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Whenever there is a change in value of issue, we reset the form so to render the most up to date form."},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (!this.isEditing \u0026\u0026 changes.issue \u0026\u0026 changes.issue.previousValue !\u003d\u003d changes.issue.currentValue) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      this.resetForm();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  submitTesterResponseForm() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    if (this.testerResponseForm.invalid) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.isSafeToSubmit()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":77,"author":{"gitId":"-"},"content":"        mergeMap((isSaveToSubmit: boolean) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          if (isSaveToSubmit || this.isUpdatingDeletedResponse() || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return this.issueService.updateTesterResponse(this.issue, \u003cIssueComment\u003e{"},{"lineNumber":80,"author":{"gitId":"-"},"content":"              ...this.issue.issueComment,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"              description: this.getTesterResponseFromForm()"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isFormPending \u003d false))"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":92,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit a tester response."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  isSafeToSubmit(): Observable\u003cboolean\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":107,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!issue.testerResponses) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          return false;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"MadLamprey"},"content":"        return issue.testerResponses.reduce("},{"lineNumber":112,"author":{"gitId":"MadLamprey"},"content":"          (result, response, index) \u003d\u003e result \u0026\u0026 response.compareTo(this.issue.testerResponses[index]) \u003d\u003d\u003d 0,"},{"lineNumber":113,"author":{"gitId":"MadLamprey"},"content":"          true"},{"lineNumber":114,"author":{"gitId":"MadLamprey"},"content":"        );"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":121,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    return this.issue.testerResponses \u0026\u0026 !this.issueService.issues[this.issue.id].testerResponses;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"   * Pops up a dialog that shows the difference between the outdated tester\u0027s response and the updated one."},{"lineNumber":128,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      data: \u003cTesterResponseConflictData\u003e{"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        outdatedResponses: this.issue.testerResponses,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        updatedResponses: this.issueService.issues[this.issue.id].testerResponses"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    const reasonForDisagreementIsModified \u003d this.issue.testerResponses"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      .filter((t: TesterResponse, index: number) \u003d\u003e this.isResponseDisagreed(index))"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      .map((t: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        const currentValue \u003d this.getTesterResponseText(index);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        const initialValue \u003d t.reasonForDisagreement || \u0027\u0027;"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return currentValue !\u003d\u003d initialValue;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      .reduce((a, b) \u003d\u003e a || b, false);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    const disagreementIsModified \u003d this.issue.testerResponses"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      .map((t: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        const currentValue \u003d this.isResponseDisagreed(index);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        const initialValue \u003d t.isDisagree();"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return currentValue !\u003d\u003d initialValue;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      .reduce((a, b) \u003d\u003e a || b, false);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    const isModified \u003d reasonForDisagreementIsModified || disagreementIsModified;"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":166,"author":{"gitId":"-"},"content":"      isModified,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":174,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"  cancelEditMode() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":193,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":194,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"  handleChangeOfDisagreeRadioButton(event, index: number) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    const responseFormControl \u003d this.testerResponseForm.get(this.getTesterResponseFormId(index));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    const isDisagreeChecked \u003d this.isResponseDisagreed(index);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    if (isDisagreeChecked) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      responseFormControl.enable();"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      responseFormControl.disable();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"  trackDisagreeList(index: number, item: string[]): string {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    return item[index];"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"  isNewResponse(): boolean {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    return !this.issue.status \u0026\u0026 this.userService.currentUser.role \u003d\u003d\u003d UserRole.Student;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   * Will create a form group with initial values in `this.issue`."},{"lineNumber":221,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  createFormGroup() {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    const group: any \u003d {};"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    // initialize fields for tester response and the radio buttons for tester to choose \"Agree\" / \"Disagree\""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c this.issue.testerResponses.length; i++) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      const response \u003d this.issue.testerResponses[i];"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      group[this.getTesterResponseFormId(i)] \u003d new FormControl("},{"lineNumber":228,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"          value: response.reasonForDisagreement,"},{"lineNumber":230,"author":{"gitId":"-"},"content":"          disabled: !response.isDisagree()"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Validators.required"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      group[this.getDisagreeRadioFormId(i)] \u003d new FormControl("},{"lineNumber":235,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"          value: response.isDisagree(),"},{"lineNumber":237,"author":{"gitId":"-"},"content":"          disabled: !this.isEditing"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        Validators.required"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    return group;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"  resetForm(): void {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.testerResponseForm \u003d this.formBuilder.group(this.createFormGroup());"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":250,"author":{"gitId":"-"},"content":"   * Based on the updated form and `this.issue` we obtain the updated tester response in Github format."},{"lineNumber":251,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  getTesterResponseFromForm(): string {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    if (!this.issue.testerResponses) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    updatedIssue.testerResponses.map((response: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      // Filter Keys based on Response Index"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      const isDisagree \u003d this.isResponseDisagreed(index);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"      const reason \u003d isDisagree ? this.getTesterResponseText(index) || response.reasonForDisagreement : response.INITIAL_RESPONSE;"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"      response.setDisagree(isDisagree);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"      response.setReasonForDisagreement(reason);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      return response;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    return updatedIssue.createGithubTesterResponse();"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"   * @param index - index of action which the tester disagree."},{"lineNumber":274,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  getTesterResponseFormId(index: number): string {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    return `${this.responseTextIdentifier}-${index}`;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":280,"author":{"gitId":"-"},"content":"   * Gets the Tester\u0027s Response text."},{"lineNumber":281,"author":{"gitId":"-"},"content":"   * @param index Tester Response Index."},{"lineNumber":282,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  getTesterResponseText(index: number): string {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    return this.testerResponseForm.get(this.getTesterResponseFormId(index)).value;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":288,"author":{"gitId":"-"},"content":"   * @param index - index of action which the tester disagree."},{"lineNumber":289,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  getDisagreeRadioFormId(index: number): string {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    return `${this.responseRadioIdentifier}-${index}`;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":295,"author":{"gitId":"-"},"content":"   * Checks if Tester Response was agreed to or disagreed with."},{"lineNumber":296,"author":{"gitId":"-"},"content":"   * @param index Tester Response Index,"},{"lineNumber":297,"author":{"gitId":"-"},"content":"   * @returns true if response was disagreed with, false if response was agreed with."},{"lineNumber":298,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":299,"author":{"gitId":"-"},"content":"  isResponseDisagreed(index: number): boolean {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    return this.testerResponseForm.get(this.getDisagreeRadioFormId(index)).value;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"  get conflict(): boolean {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    return this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":4,"-":302}},{"path":"src/app/shared/view-issue/view-issue.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"nknguyenhc"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Subscription } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"export enum ISSUE_COMPONENTS {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  TESTER_POST,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  TEAM_RESPONSE,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  NEW_TEAM_RESPONSE,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  TESTER_RESPONSE,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  ISSUE_DISPUTE,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  SEVERITY_LABEL,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  TYPE_LABEL,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  RESPONSE_LABEL,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  ASSIGNEE,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  DUPLICATE,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  UNSURE_CHECKBOX"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"export const SUBMIT_BUTTON_TEXT \u003d {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  SUBMIT: \u0027Submit\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  SAVE: \u0027Save\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  OVERWRITE: \u0027Overwrite\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"};"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  selector: \u0027app-view-issue\u0027,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./view-issue.component.html\u0027,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./view-issue.component.css\u0027]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"})"},{"lineNumber":37,"author":{"gitId":"-"},"content":"export class ViewIssueComponent implements OnInit, OnDestroy, OnChanges {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  issue: Issue;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  isIssueLoading \u003d true;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  isTutorResponseEditing \u003d false;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  isIssueDescriptionEditing \u003d false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  isTeamResponseEditing \u003d false;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  isTesterResponseEditing \u003d false;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  issueSubscription: Subscription;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  @Input() issueId: number;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  @Input() issueComponents: ISSUE_COMPONENTS[];"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  public readonly issueComponentsEnum \u003d ISSUE_COMPONENTS;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  public readonly userRole \u003d UserRole;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":57,"author":{"gitId":"nknguyenhc"},"content":"    private phaseService: PhaseService,"},{"lineNumber":58,"author":{"gitId":"nknguyenhc"},"content":"    private router: Router"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.getAndPollIssue(this.issueId);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"   * Will be triggered when there is a change in issueId (e.g. there is a navigation from 1 issue page to another issue page)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"   * @param changes - The changes being applied to @Input."},{"lineNumber":68,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    if (!changes.issueId.firstChange) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      this.stopPolling();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      this.isIssueLoading \u003d true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      this.getAndPollIssue(changes.issueId.currentValue);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  ngOnDestroy() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    this.stopPolling();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  isComponentVisible(component: ISSUE_COMPONENTS): boolean {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    return this.issueComponents.includes(component);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"  isEditing(): boolean {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    return this.isIssueDescriptionEditing || this.isTutorResponseEditing || this.isTeamResponseEditing;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  updateIssue(newIssue: Issue) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    this.issue \u003d newIssue;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    this.issueService.updateLocalStore(newIssue);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  updateDescriptionEditState(updatedState: boolean) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    this.isIssueDescriptionEditing \u003d updatedState;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  updateTeamResponseEditState(updatedState: boolean) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    this.isTeamResponseEditing \u003d updatedState;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  updateTesterResponseEditState(updatedState: boolean) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    this.isTesterResponseEditing \u003d updatedState;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  updateTutorResponseEditState(updatedState: boolean) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.isTutorResponseEditing \u003d updatedState;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  hasNoTeamResponse(): boolean {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    const isTeamResponsePhase \u003d"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      this.isComponentVisible(this.issueComponentsEnum.NEW_TEAM_RESPONSE) \u0026\u0026 this.permissions.isTeamResponseEditable();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    const hasNoResponse \u003d !this.issue.teamResponse \u0026\u0026 !this.issue.status;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    return isTeamResponsePhase \u0026\u0026 hasNoResponse;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  hasTeamResponseParseError(): boolean {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    const isTeamResponsePhase \u003d"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      this.isComponentVisible(this.issueComponentsEnum.NEW_TEAM_RESPONSE) \u0026\u0026 this.permissions.isTeamResponseEditable();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    const hasParseError \u003d this.issue.teamResponseError \u0026\u0026 !!this.issue.status;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    return isTeamResponsePhase \u0026\u0026 hasParseError;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  private getAndPollIssue(id: number): void {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(id).subscribe("},{"lineNumber":126,"author":{"gitId":"-"},"content":"      (issue: Issue) \u003d\u003e {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        this.isIssueLoading \u003d false;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        this.issue \u003d issue;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        this.pollIssue(id);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":131,"author":{"gitId":"nknguyenhc"},"content":"      (err) \u003d\u003e {"},{"lineNumber":132,"author":{"gitId":"nknguyenhc"},"content":"        this.router.navigateByUrl(this.phaseService.currentPhase).then(() \u003d\u003e {"},{"lineNumber":133,"author":{"gitId":"nknguyenhc"},"content":"          this.errorHandlingService.handleError(new Error(\u0027Invalid URL provided!\u0027));"},{"lineNumber":134,"author":{"gitId":"nknguyenhc"},"content":"        });"},{"lineNumber":135,"author":{"gitId":"nknguyenhc"},"content":"      }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  private pollIssue(id: number): void {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    this.issueSubscription \u003d this.issueService.pollIssue(id).subscribe("},{"lineNumber":141,"author":{"gitId":"-"},"content":"      (issue: Issue) \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        const updatedIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!this.isIssueLoading) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"          // prevent updating of respective attributes while editing"},{"lineNumber":145,"author":{"gitId":"-"},"content":"          if ("},{"lineNumber":146,"author":{"gitId":"-"},"content":"            this.isIssueDescriptionEditing ||"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            this.isTeamResponseEditing ||"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            (!this.issue.teamResponse \u0026\u0026 updatedIssue.teamResponse) ||"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            this.isTesterResponseEditing ||"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            this.isTutorResponseEditing"},{"lineNumber":151,"author":{"gitId":"-"},"content":"          ) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            updatedIssue.retainResponses(this.phaseService.currentPhase, this.issue);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        this.issue \u003d updatedIssue;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        this.isIssueLoading \u003d false;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error, () \u003d\u003e this.pollIssue(id));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  private stopPolling(): void {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    if (this.issueSubscription) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      this.issueSubscription.unsubscribe();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nknguyenhc":8,"-":161}},{"path":"src/typings.d.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"/* SystemJS module definition */"},{"lineNumber":2,"author":{"gitId":"MadLamprey"},"content":"// eslint-disable-next-line no-var -- Please revisit this eslint rule in the future"},{"lineNumber":3,"author":{"gitId":"-"},"content":"declare var nodeModule: NodeModule;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"interface NodeModule {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  id: string;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"MadLamprey"},"content":"// eslint-disable-next-line no-var -- Please revisit this eslint rule in the future"},{"lineNumber":9,"author":{"gitId":"-"},"content":"declare var window: Window \u0026 typeof globalThis;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"interface Window {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  process: any;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  require: any;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MadLamprey":2,"-":11}}]
