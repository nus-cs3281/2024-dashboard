[{"path":".github/workflows/gh-pages.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow executes the various RepoSense tests"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"name: GitHub Pages"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  push:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    branches:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      - master"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  deploy-gh-pages:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    name: Deploy MarkBind to GitHub Pages"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      NODE_VERSION: \"lts/*\""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      uses: actions/checkout@v3"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":24,"author":{"gitId":"sopa301"},"content":"        node-version: \u002718.x\u0027"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      uses: actions/cache@v3"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        path: ~/.npm"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-node-"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    - name: Install Graphviz"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      run: sudo apt-get -y install graphviz"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    - name: Install MarkBind CLI"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      run: npm i -g markbind-cli"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    - name: Build MarkBind website"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      run: cd docs \u0026\u0026 markbind build --baseUrl /RepoSense"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    - name: Deploy to GitHub Pages"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      if: success()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      uses: crazy-max/ghaction-github-pages@v2"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        target_branch: gh-pages"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        build_dir: docs/_site"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        keep_history: true"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      env:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"}],"authorContributionMap":{"sopa301":1,"-":50}},{"path":".github/workflows/integration.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow executes the various RepoSense tests"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"name: Continuous Integration"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  push:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    branches-ignore:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      - gh-pages"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  pull_request:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    branches-ignore:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      - gh-pages"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"env:"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"  NODE_VER: \u002718.x\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  JAVA_DISTRIBUTION: \u0027zulu\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  JAVA_VER: 8"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  mainbuild:"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    name: ${{ matrix.os }} JDK 8"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    strategy:"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      fail-fast: false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      matrix:"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        os: [ubuntu-20.04, ubuntu-22.04, macos-11, macos-12, windows-2019, windows-2022]"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.os }}"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      HOMEBREW_NO_AUTO_UPDATE: 1 # Prevent time-consuming brew update"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      uses: actions/checkout@v3"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        fetch-depth: 0"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        distribution: ${{ env.JAVA_DISTRIBUTION }}"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        java-version: ${{ env.JAVA_VER }}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    - name: Verify Java version"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      run: echo \"Actual JDK in use -- \"; java -version"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        node-version: ${{ env.NODE_VER }}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    - name: Set up Gradle caching"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      uses: actions/cache@v3"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          $HOME/.gradle/caches"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          $HOME/.gradle/wrapper"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-gradle-"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      uses: actions/cache@v3"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        path: $HOME/.npm"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-node-"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    - name: Grant execute permission for gradlew"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      if: ${{ runner.os !\u003d \u0027Windows\u0027 }}"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      run: chmod +x gradlew # Windows does not need this"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    - name: Run environmental checks"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      run: ./gradlew environmentalChecks"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    - name: Run linter"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      run: ./gradlew lintFrontend"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    - name: Build with Gradle"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      run: ./gradlew clean checkstyleAll test systemTest coverage"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    - name: Run code coverage"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 ( matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 || matrix.os \u003d\u003d \u0027macos-11\u0027 || matrix.os \u003d\u003d \u0027windows-2022\u0027 ) }}"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      uses: codecov/codecov-action@v3"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        directory: ${{ github.workspace }}/build/reports/jacoco/coverage"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        files: coverage.xml"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        fail_ci_if_error: true"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    - name: Build preview website (pull request)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      run: |"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        git fetch --all \u0026\u0026 git config --global user.email \"-\" \u0026\u0026 git config --global user.name \"-\" \u0026\u0026 ./gradlew run -Dargs\u003d\"--since d1\""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        sudo apt-get -y install graphviz"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        npm install -g markbind-cli"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        (cd docs \u0026\u0026 markbind build)"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    - name: Save PR number and HEAD commit (pull request)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      run: |"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        mkdir -p ./pr"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        echo ${{ github.event.number }} \u003e ./pr/NUMBER"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        echo ${{ github.event.pull_request.head.sha }} \u003e ./pr/SHA"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    - name: Upload artifacts (pull request)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      uses: actions/upload-artifact@v3"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        name: reposense-deployment"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          ./reposense-report"},{"lineNumber":110,"author":{"gitId":"-"},"content":"          ./docs/_site"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          ./pr"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"  cypress:"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    name: Cypress frontend tests"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-20.04"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      uses: actions/checkout@v3"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        fetch-depth: 0"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        distribution: ${{ env.JAVA_DISTRIBUTION }}"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        java-version: ${{ env.JAVA_VER }}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    - name: Verify Java version"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      run: echo \"Actual JDK in use -- \"; java -version"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        node-version: ${{ env.NODE_VER }}"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    - name: Set up Gradle caching"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      uses: actions/cache@v3"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":141,"author":{"gitId":"-"},"content":"          $HOME/.gradle/caches"},{"lineNumber":142,"author":{"gitId":"-"},"content":"          $HOME/.gradle/wrapper"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":145,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-gradle-"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      uses: actions/cache@v3"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        path: $HOME/.npm"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":153,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-node-"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    - name: Grant execute permission for gradlew"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      run: chmod +x gradlew"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    - name: Set up environment"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      run: sudo apt-get install -y libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    - name: Run frontend tests"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      run: ./gradlew frontendTest -Pci"}],"authorContributionMap":{"sopa301":1,"-":161}},{"path":".github/workflows/surge.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow deploys a RepoSense report and the MarkBind documentation"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# website to surge.sh in a secure manner for pull requests"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"name: Surge.sh build preview"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  workflow_run:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    workflows: [\"Continuous Integration\"]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    types:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      - completed"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  deploy:"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    name: Deploy to surge.sh"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    if: ${{ github.event.workflow_run.event \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 github.event.workflow_run.conclusion \u003d\u003d \u0027success\u0027 }}"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      NODE_VERSION: \"lts/*\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"      GITHUB_TOKEN: ${{ github.token }}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      uses: actions/checkout@v3"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":28,"author":{"gitId":"sopa301"},"content":"        node-version: \u002718.x\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    - name: Download deployment artifacts"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      uses: dawidd6/action-download-artifact@v2"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        workflow: integration.yml"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        run_id: ${{ github.event.workflow_run.id }}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        name: reposense-deployment"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        path: ."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    - name: Extract PR number"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      id: pr-number"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      run: echo \u0027ACTIONS_PR_NUMBER\u003d\u0027$(cat ./pr/NUMBER) \u003e\u003e $GITHUB_OUTPUT"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    - name: Download deployment status artifacts"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      uses: dawidd6/action-download-artifact@v2"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        workflow: pending.yml"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        pr: ${{ steps.pr-number.outputs.ACTIONS_PR_NUMBER }}"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        workflow_conclusion: success"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name: reposense-deployment-id"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        path: ./pr"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as in progress"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh in_progress"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    - name: Install surge"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      run: npm install -g surge"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    - name: Deploy to surge.sh"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      env:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh success"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as failure"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      if: ${{ failure() }}"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh failure"}],"authorContributionMap":{"sopa301":1,"-":67}},{"path":"docs/dg/learningBasics.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Learning the Basics\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed, step with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This is a learning guide for developers who are new to RepoSense."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Depending on what you know already and what you would like to work on (i.e., backend or frontend), you may find certain sections irrelevant to you and you can skip them accordingly."},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Backend"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"This section is for developers who want to contribute to the backend of RepoSense. You may skip this section if you want to contribute as a pure frontend developer. Before you get started, you should have set up the project on your computer according to [the _Setting up_ page](settingUp.html)."},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"The backend implementation of RepoSense is located in `src/main`."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"{{ step(1) }} **Know Java**"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"The RepoSense backend is mostly written in `Java 8`."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. You need to have a basic knowledge of Java before getting started, including its syntax, [API](https://docs.oracle.com/javase/8/docs/api/), and certain frameworks such as [JUnit](https://se-education.org/learningresources/contents/java/JUnit.html)."},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Once you are familiar with the basic syntax, you may wish to learn more advanced topics such as [concurrency](https://se-education.org/learningresources/contents/java/JavaConcurrency.html), [synchronization](https://se-education.org/learningresources/contents/java/JavaSynchronization.html), and [streams](https://se-education.org/learningresources/contents/java/streams-an-introduction.html). These topics can help you to understand certain part of the backend implementation (concurrent cloning and analysis of multiple repositories, etc.). They are optional but you may find them useful when working on certain issues."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"{{ step(2) }} **Learn the RepoSense backend architecture**"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"You may want to refer to the [backend architecture](architecture.html) to understand the RepoSense backend implementation logic."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"To gain a more concrete idea of how the backend works, you can use the IDE Debugger and run RepoSense under the debugging mode to trace through the steps of how arguments from command line and CSV files are parsed, how repositories are cloned and analyzed, and how the JSON files are generated."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"The information below is for **Intellij**. If you are using a different IDE, you may need to check the documentation of how to use the debugger separately."},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Check the [debugging guide](https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html) if you are not familiar with debugging in **Intelij**."},{"lineNumber":51,"author":{"gitId":"-"},"content":"* In `RepoSense.java`, the main class, set appropriate break points. Here are some relevant method calls in the `main` method at which you can set the breakpoints:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  * `ArgsParser.parse(args)`: RepoSense parses the CLI arguments from the command given by the user."},{"lineNumber":53,"author":{"gitId":"-"},"content":"  * `getRepoConfigurations(cliArguments)`: RepoSense gets the configuration for each repository by parsing the CSV files."},{"lineNumber":54,"author":{"gitId":"-"},"content":"  * `getReportConfigurations(cliArguments)`: RepoSense gets the report configuration (report title) by parsing the JSON files."},{"lineNumber":55,"author":{"gitId":"-"},"content":"  * `ReportGenerator.generateReposReport(...)` This is where the bulk of the work is conducted, including cloning repositories, analyzing repositories, and generating the JSON files to be used by the report."},{"lineNumber":56,"author":{"gitId":"-"},"content":"* To supply debugging arguments, right-click on the run button of `RepoSense.main`, click `Modify Run Configuration`, and add [CLI flags](https://reposense.org/ug/customizingReports.html#customize-using-cli-flags) in `Program arguments`. Examples: `--since 16/12/2021 --until 18/12/2022`; `-s 16/12/2021 -u 18/12/2022`."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"When tracing through the program execution, you can cross reference the architecture diagram and Javadoc of the class and method to check your understanding of the procedure."},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"{{ step(3) }} **Gain some hands-on experience**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"Here are some small tasks for you to gain some basic knowledge of the code related to the RepoSense backend. You can do each in a separate branch in your local copy of the code."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 1: Add a flag to pretty-print the JSON file**\" type\u003d\"primary\"\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  **Task 1: Add a flag to pretty-print the JSON file**"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  1. [Generate a report locally](../ug/generatingReports.html#generating-reports-locally)."},{"lineNumber":72,"author":{"gitId":"-"},"content":"  2. Open a generated JSON file. For example, you can open `summary.json` of the generated report."},{"lineNumber":73,"author":{"gitId":"-"},"content":"  3. You should see that the content in the JSON is compactly organized in 1 single line. This may affect readability for developer who wants to investigate the content in the JSON file."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  Add a new CLI argument `--use-json-pretty-printing`, such that when a user runs the command `java -jar RepoSense.jar --repos LIST_OF_REPO_URLS --view --use-json-pretty-printing`, the JSON files `summary.json`, `authorship.json`, and `commits.json` will be printed in a more readable way."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  Try to understand the parsing process of the Command Line Arguments, which starts from `ArgsParser.parse(args)` in `RepoSense.java` and uses `ArgumentParser` to capture the arguments in the command string."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  Therefore, the first step you can take is to add the following to `ArgsParser`."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  public static final String[] JSON_PRINT_MODE_FLAGS \u003d new String[]{\"--use-json-pretty-printing\", \"-j\"};"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  In `getArgumentParser` method, add the following content to make `ArgumentParser` capture the new argument."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  parser.addArgument(JSON_PRINT_MODE_FLAGS)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .dest(JSON_PRINT_MODE_FLAGS[0])"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      .action(Arguments.storeTrue())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .help(\"A flag to use json pretty printing when generating the json files.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"  After the step in hint 1, the argument is captured by `ArgumentParser`. Now make corresponding changes to `CliArguments.java`, `ConfigCliArguments.java`, and the `parse` method in `ArgsParser.java` to make the return result of `parse` include the new argument."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  1. Add the following content to `CliArguments` to include `isPrettyPrintingUsed` as a new attribute to the class."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  protected boolean isPrettyPrintingUsed;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  public boolean isPrettyPrintingUsed() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          return isPrettyPrintingUsed;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"  2. In the constructor of `ConfigCliArguments`, add `isPrettyPrintingUsed` as a new parameter of the method, and add the following instruction to the method body."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  this.isPrettyPrintingUsed \u003d isPrettyPrintingUsed;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"  3. In the `parse` method of `ArgsParser`, add the following instruction to get `isJsonPrettyPrintingUsed` from `ArgmentParser`."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  boolean isJsonPrettyPrintingUsed \u003d results.get(JSON_PRINT_MODE_FLAGS[0]);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  4. Additionally, change the return statement of the `parse` method so that the `ConfigCliArguments` object returned will now include `isJsonPrettyPrintingUsed`."},{"lineNumber":126,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  After the steps in hint 1 and hint 2, the result returned from `ArgsParser.parse(args)` in `RepoSense.java` should be able to capture the new argument when it is specified in the command."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"  The next step is to extract the argument from the `CliArguments` object, and pass it to JSON file writer to notify it of the specified printing mode."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  Note that the creation and writing of JSON file is invoked in `ReportGenerator.generateReposReport`, which calls `FileUtil.writeJsonFile` directly to write the `summary.json` file or indirectly (Check `generateIndividualRepoReport` and `generateEmptyRepoReport`) to write the `commits.json` or `authorship.json` files of individual repositories."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  Therefore, the task now is to make `FileUtil.writeJsonFile` switch between different printing mode."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  1. You can find out what [`Gson.setPrettyPrinting`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.5/com/google/gson/GsonBuilder.html#setPrettyPrinting--) does and how it can be used in the `writeJsonFile` method of [`FileUtil.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/util/FileUtil.java)."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"  2. Add the following content to `FileUtil`."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  private static boolean isPrettyPrintingUsed \u003d false;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"  3. In the `writeJsonFile` method, Replace the creation of the `Gson` object with the following instructions."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  GsonBuilder gsonBuilder \u003d new GsonBuilder()"},{"lineNumber":150,"author":{"gitId":"-"},"content":"          .registerTypeAdapter(LocalDateTime.class, (JsonSerializer\u003cLocalDateTime\u003e) (date, typeOfSrc, context)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                        -\u003e new JsonPrimitive(date.format(DateTimeFormatter.ofPattern(GITHUB_API_DATE_FORMAT))))"},{"lineNumber":152,"author":{"gitId":"-"},"content":"          .registerTypeAdapter(FileType.class, new FileType.FileTypeSerializer());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  Gson gson;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  if (isPrettyPrintingUsed) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      gson \u003d gsonBuilder.setPrettyPrinting().create();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      gson \u003d gsonBuilder.create();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  4. To notify `FileUtil` of the switch between different printing mode, add the following method to `FileUtil`."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  public static void setPrettyPrintingMode(boolean isPrettyPrintingAdopted) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      isPrettyPrintingUsed \u003d isPrettyPrintingAdopted;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"  5. It is now possible to notify `FileUtil` of the printing mode switch by extracting the argument from the `CliArguments` object in the `main` method of `RepoSense.java` and passing it to the corresponding method in `FileUtil`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  FileUtil.setPrettyPrintingMode(cliArguments.isPrettyPrintingUsed());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"  Now the parsing of argument and changing of printing mode should have been completed."},{"lineNumber":176,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. By combining the changes in hint 1, hint 2, and hint 3, you should be able to get a possible solution."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  Try the command `java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --view --use-json-pretty-printing` and check the generated JSON files to see if it works."},{"lineNumber":183,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 2: Add exception message during repository cloning to the summary view**\" type\u003d\"primary\"\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"  **Task 2: Add exception message during repository cloning to the summary view**"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":192,"author":{"gitId":"-"},"content":"  2. You should see that there is a red panel in the summary view containing the following message, indicating that there is an issue in the cloning process of the repository `reposense/testrepo-Empty`."},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  reposense/testrepo-Empty[master]"},{"lineNumber":196,"author":{"gitId":"-"},"content":"          Failed to clone from https://github.com/reposense/testrepo-Empty.git"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"  **Your task**"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"  For the repository with the message `Failed to clone from ...`, find out what exception causes this cloning error, and add that exception message to the panel as well."},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"  You can find out what [`ErrorSummary.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ErrorSummary.java) and [`RepoCloner.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/RepoCloner.java) do, and where they are used."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  Try to understand the cloning process."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * The cloning process is invoked by [`RepoGenerator.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ReportGenerator.java) in the `cloneAndAnalyzeRepos` method, which subsequently calls `cloneBare` in `RepoCloner.java` to start the cloning."},{"lineNumber":213,"author":{"gitId":"-"},"content":"  * The `cloneAndAnalyzeRepos` method will then call `getRepoLocation`  in `RepoCloner.java` to try to get the repository location."},{"lineNumber":214,"author":{"gitId":"-"},"content":"  * Beneath the surface, `RepoCloner` will first execute `spawnCloneProcess` and then execute `waitForCloneProcess` when it is invoked by `RepoGenerator` for the first and second time respectively."},{"lineNumber":215,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"  In `RepoCloner`, the potential exceptions in `spawnCloneProcess` and `waitForCloneProcess` are caught but not recorded by `ErrorSummary`."},{"lineNumber":220,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"  Add this to the catch block of `spawnCloneProcess` and `waitForCloneProcess`, so that the message will be captured in `summary.json`."},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"asdfghjkxd"},"content":"  ```java"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), e.getMessage());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"This is only for your practice. There is no need for you to commit this change and submit it in a pull request."},{"lineNumber":238,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"{{ step(4) }} **Next Step**"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"You can now proceed to learn the [contributing workflow](workflow.html)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"## Frontend"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"This section is for developers who want to contribute to the frontend of RepoSense. You may skip this section if you want to contribute as a pure backend developer."},{"lineNumber":251,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"The frontend implementation of RepoSense is located in `frontend/src`."},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"{{ step(1) }} **Learn the necessary tools**"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"It is necessary for you to learn the basics of Vue.js, Pug, and SCSS before working on the project."},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"### Vue.js"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"Vue.js uses JavaScript as its programming language. Before learning **Vue.js**, you may need to first get yourself familiar with JavaScript syntax first."},{"lineNumber":266,"author":{"gitId":"-"},"content":"You can refer to the [Javascript documentation](https://devdocs.io/javascript/) to learn the basic syntax. There are plenty of other resources available and please feel free to find the resource most suitable for you."},{"lineNumber":267,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"RepoSense uses **Vue.js** (Vue3) in its front-end implementation. In particular, major user interface components, such as [summary view](report.html#summary-view-v-summary-js), [authorship view](report.html#authorship-view-v-authorship-js), and [zoom view](report.html#zoom-view-v-zoom-js), are implemented as Vue components. The corresponding source files are in `frontend/src`."},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"* If you are new to Vue.js, you may want to start learning by looking at [the beginner tutorial](https://www.vuemastery.com/courses/intro-to-vue-js/)."},{"lineNumber":272,"author":{"gitId":"-"},"content":"* You can dive deeper later by checking the [Vue.js documentation](https://vuejs.org/guide/introduction.html) to learn about essential concepts such as component life cycle hooks, and component properties."},{"lineNumber":273,"author":{"gitId":"-"},"content":"* It is recommended if you can work on some small projects first to gain more solid understanding of Vue.js."},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"The guide above uses HTML as the component template, which is not the case with RepoSense. You may wish to learn more about [Pug](#pug) and its connection with HTML."},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"#### Vuex"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"RepoSense uses **Vuex** for the state management of the Vue components."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"* You can check the [Vuex guide](https://vuex.vuejs.org/guide/#the-simplest-store) to find out how Vuex can be used in a Vue project."},{"lineNumber":285,"author":{"gitId":"-"},"content":"* There is also a [course](https://vueschool.io/courses/vuex-for-everyone) available that will walk you through an example of creating Vue application with Vuex."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"### Pug"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"RepoSense uses Pug files as the template of each Vue component. The corresponding HTML templates will later be generated from the Pug files by [spuild](https://github.com/ongspxm/spuild2) when generating the report."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"Since Pug is used to generate the HTML template, it is recommended that you have a basic knowledge of HTML before starting to learn Pug. Once you understand how HTML works, you can proceed to focus on how Pug is translated into HTML."},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"* You can refer to the [official documentation](https://pugjs.org/api/getting-started.html) or [this tutorial](https://www.youtube.com/watch?v\u003dkt3cEjjkCZA) to learn about the syntax of pug and how it is translated into HTML."},{"lineNumber":299,"author":{"gitId":"-"},"content":"* To get a hands-on experience, here is a [Pug to HTML converter](https://pughtml.com/). Feel free to try out a couple of examples on your own."},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"### Scss"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"SCSS is used for styling the Pug template. The corresponding CSS will later be generated from the SCSS files by [spuild](https://github.com/ongspxm/spuild2) when generating the report. The corresponding source files are in `frontend/src/styles`."},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"It is recommended that you have a basic knowledge of CSS before starting to learn SCSS. Once you understand how CSS works, you can proceed to focus on how SCSS is translated into CSS."},{"lineNumber":310,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"* You can refer to the [style rules](https://sass-lang.com/documentation/style-rules) to learn about the similarities and differences between SCSS and CSS."},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"{{ step(2) }} **Learn the RepoSense frontend architecture**"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"* You may want to refer to the [frontend architecture](report.html#report-architecture) to understand the implementation."},{"lineNumber":317,"author":{"gitId":"-"},"content":"* Another way for you to understand the frontend is to use **Vue.js devtools** to learn how the various Vue Components interact with each other. You can refer to the [frontend debugging guide](workflow.html#debugging-front-end) for more information."},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"{{ step(3) }} **Gain some hands-on experience**"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"Here are some small tasks for you to gain some basic knowledge of the code related to the RepoSense frontend. You can do each in a separate branch in your local copy of the code."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 1: Highlight the selected author name in the summary view**\" type\u003d\"primary\"\u003e"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"  **Task 1: Highlight the selected author name in the summary view**"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":328,"author":{"gitId":"-"},"content":"  2. Randomly open the authorship contribution panel of an author (The icon is `\u003c/\u003e`)."},{"lineNumber":329,"author":{"gitId":"-"},"content":"  3. You should see that, after you open the panel, the author title background on the chart panel becomes yellow, and the background of the `\u003c/\u003e` icon you clicked becomes green."},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"  Make corresponding changes to `summary charts` so that in step 3, after opening the panel, the font colour of the author title (in the form of `authorDisplayName(authorName)`) on the chart panel also becomes green."},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"  Try to locate where the author title is in [`c-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/c-summary-charts.vue)."},{"lineNumber":338,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"  You can check what `activeUser` and `activeRepo` do in [`c-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/c-summary-charts.vue)."},{"lineNumber":343,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"  Refer to how changes are made to the title background and icon background in [`c-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/c-summary-charts.vue)."},{"lineNumber":348,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 4\"\u003e"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"  Some of the CSS styling for `c-summary-charts.vue` is in [`style.scss`](https://github.com/reposense/RepoSense/blob/master/frontend/src/styles/style.scss). You can add corresponding class selector if necessary."},{"lineNumber":353,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"  Add this to `c_summary.scss`."},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"asdfghjkxd"},"content":"  ```css"},{"lineNumber":362,"author":{"gitId":"-"},"content":"  .active-text {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    color: mui-color(\u0027green\u0027);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":365,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"  In `c-summary-charts.vue`, locate `summary-chart__title--name`, and add the following to its `v-bind:class` attribute map."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":370,"author":{"gitId":"-"},"content":"  \u0027active-text\u0027: user.name \u003d\u003d\u003d activeUser \u0026\u0026 user.repoName \u003d\u003d\u003d activeRepo"},{"lineNumber":371,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":372,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 2: Add tooltip for file path in authorship panel**\" type\u003d\"primary\"\u003e"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"  **Task 2: Add tooltip for file path in authorship panel**"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":381,"author":{"gitId":"-"},"content":"  2. Randomly open the authorship contribution panel of an author (The icon is `\u003c/\u003e`)."},{"lineNumber":382,"author":{"gitId":"-"},"content":"  3. Select a random file in the authorship contribution panel, and hover your mouse on an icon on the file title, a corresponding tooltip will show up, suggesting what the purpose of the icon is. However, when you hover the mouse over the file path on the file title, there is no tool tip shown, even if clicking the path itself will also trigger some event."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"  For example, if you open the authorship contribution panel of an author in `reposense/RepoSense[master]` and hover the mouse over the triangular icon beside the file path `src/main/java/reposense/model/Author.java`, you should see a tooltip saying `Click to hide file details` above the icon. However, when you hover the mouse over the file path `src/main/java/reposense/model/Author.java`, there is no corresponding tooltip shown."},{"lineNumber":387,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"  Make corresponding `authorship contribution panel` so that in step 3, when hovering your mouse over the file path:"},{"lineNumber":392,"author":{"gitId":"-"},"content":"  * A tip saying `This is the file path. Click to hide file details` will show up when the file details are shown"},{"lineNumber":393,"author":{"gitId":"-"},"content":"  * A tip saying `This is the file path. Click to show file details` will show up when the file details are not shown."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"  Try to locate where the file title and the file path are in [`c-authorship.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/c-authorship.vue)."},{"lineNumber":398,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"  You can check how tooltip is added for the triangular icon in the file title in [`c-authorship.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/c-authorship.vue)."},{"lineNumber":403,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"  You can check what `file.active` does and how it is used to switch between different tooltip messages when hovering the mouse on the corresponding icon."},{"lineNumber":408,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"  1. In `c-authorship.vue`, locate the section that iterates through each file in `selectedFiles`."},{"lineNumber":415,"author":{"gitId":"-"},"content":"  2. There is a specific portion of the section that renders the toggle icon, the file index, and the file path of the file title."},{"lineNumber":416,"author":{"gitId":"-"},"content":"  3. Try to locate the `span` tag that renders `file.path`, and wraps it inside a new `tooptip`."},{"lineNumber":417,"author":{"gitId":"-"},"content":"  4. In the `tooltip`, use the following instructions to handle the switch of tooltip message."},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":420,"author":{"gitId":"-"},"content":"  span.tooltip-text(v-show\u003d\"file.active\") This is the file path. Click to hide file details"},{"lineNumber":421,"author":{"gitId":"-"},"content":"  span.tooltip-text(v-show\u003d\"!file.active\") This is the file path. Click to show file details"},{"lineNumber":422,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":423,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 3: Add tooltip for commit message title in zoom panel**\" type\u003d\"primary\"\u003e"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"  **Task 3: Add tooltip for commit message title in zoom panel**"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":432,"author":{"gitId":"-"},"content":"  2. Randomly open the commits panel of an author."},{"lineNumber":433,"author":{"gitId":"-"},"content":"  3. Select a random commit in the commits panel, and hover your mouse on the icons on the commit title, there is no tooltip shown saying that it will redirect you to a different site."},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"  For example, given the [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003deugenepeh\u0026zR\u003dreposense%2FRepoSense%5Bmaster%5D\u0026zACS\u003d99.28792569659443\u0026zS\u003d2017-10-09\u0026zFS\u003d\u0026zU\u003d2021-04-04\u0026zMG\u003dundefined\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse), if you hover the mouse over the commit title `README: add acknowledgements section (#978)`, there is no corresponding tooltip shown, but when you click on the commit title, you will be redirected to a different site to see the commit details."},{"lineNumber":438,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"  Make corresponding changes to `zoom panel` so that in step 3, when hovering your mouse over the commit title, a tooltip saying `Click to view the detailed file changes in the commit` will show up on the commit title."},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"  Try to locate where the commit title is in [`c-zoom.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/c-zoom.vue)."},{"lineNumber":447,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"  You can check how tooltip is added for other icons in [`c-zoom.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/c-zoom.vue)."},{"lineNumber":452,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"  Check what `selectedCommits` does and how the link and commit title of each commit is retrieved."},{"lineNumber":457,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"  1. In `c-zoom.vue`, locate the section that iterates through each `day` in `selectedCommits`."},{"lineNumber":464,"author":{"gitId":"-"},"content":"  2. The component that helps render the commit message title should be an `a` tag which uses the `getSliceLink` method to set the link to the commit details and uses `slice.messageTitle` to show the commit message title."},{"lineNumber":465,"author":{"gitId":"-"},"content":"  3. Wrap the `a` tag in a new `tooltip`."},{"lineNumber":466,"author":{"gitId":"-"},"content":"  4. In the `tooltip`, add the following content to show the tooltip message."},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":469,"author":{"gitId":"-"},"content":"  span.tooltip-text Click to view the detailed file changes in the commit"},{"lineNumber":470,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":471,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"This is only for your practice. There is no need for you to commit this change and submit it in a pull request."},{"lineNumber":478,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"{{ step(4) }} **Next Step**"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"You can now proceed to learn the [contributing workflow](workflow.html)."},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"## DevOps"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"supermii2"},"content":"If you want to understand and contribute to the DevOps aspect of RepoSense, you can refer to the [DevOps guide](devOpsGuide.html) for more information."}],"authorContributionMap":{"asdfghjkxd":11,"supermii2":1,"-":476}},{"path":"docs/dg/settingUp.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Setting up\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**Prerequisites:**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **JDK `1.8.0_60`** up to **`17`** ([download :fas-download:](https://www.oracle.com/technetwork/java/javase/downloads/index.html))."},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"* **Node.js** **`18`** up to the latest minor version of **`19`** ([download :fas-download:](https://www.npmjs.com/get-npm))."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* **git `2.23`** or later ([download :fas-download:](https://git-scm.com/downloads))."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"supermii2"},"content":"  Type `java -version`, `node -v` and `git --version` respectively on your OS terminal and ensure that you have the correct version of each prerequisite installed."},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Getting the code"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Fork** the [reposense/reposense](https://github.com/reposense/RepoSense) repo."},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. **Clone** the fork to your computer."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Setting up the IDE"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"The recommended IDE is **Intellij IDEA**. While it is not compulsory to use it, note that we will not be able to help you troubleshoot IDE problems if you use any other IDE."},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. **Ensure you have configured IDEA for the correct JDK**, as explained in [this tutorial](https://se-education.org/guides/tutorials/intellijJdk.html)."},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**, as explained in [this tutorial](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Verifying the setup"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"This project is already configured to use Gradle for build automation. If you are new to Gradle, see [this tutorial](https://se-education.org/guides/tutorials/gradle.html) to learn how to use it."},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Open a command prompt and navigate to the project root."},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Run `gradlew clean build` (`./gradlew clean build` if you on a Unix-like OS), and ensure that it finishes with a `BUILD SUCCESSFUL` message."},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Run the tests using the `gradlew test systemtest` command and ensure it succeeds too."},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. You can also try running the app using code, as given in the panel below."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"{{ embed(\u0027Developer guide → **Workflow → Running the app from code**\u0027, \u0027workflow.md#section-running-from-code\u0027, level\u003d2) }}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Before you start coding"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"... read the [Workflow](workflow.html) section."}],"authorContributionMap":{"supermii2":1,"sopa301":1,"-":54}},{"path":"docs/dg/styleGuides.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Style guides\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Our coding standards are mostly based on those at [se-education.org/guides](https://se-education.org/guides)."},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* [**CSS** coding standard](https://se-education.org/guides/conventions/css.html)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* [**Files/folders** naming conventions](https://se-education.org/guides/conventions/files.html)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* [**HTML** coding standard](https://se-education.org/guides/conventions/html.html)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [**Markdown/MarkBind** coding standard](https://se-education.org/guides/conventions/markdown.html)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* [**Java** coding standard](https://se-education.org/guides/conventions/java/index.html)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* [**JavaScript** coding standard](https://se-education.org/guides/conventions/javascript.html)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **TypeScript**: In addition to the JavaScript coding standard, follow the [**recommended ESLint rules**](https://typescript-eslint.io/rules/) and the formatting rules [described below](#typescript-specific-formatting)."},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Vue Components**: Follow the [**Vue style guide**](https://vuejs.org/style-guide/), up to the **Recommended** section."},{"lineNumber":21,"author":{"gitId":"-"},"content":"* **Documentation**: Follow the [**Google developer documentation style guide**](https://developers.google.com/style)."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Note on Ternary Operators:"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Ternary operators can be used to shorten if-else blocks such as this:"},{"lineNumber":25,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"LocalDateTime min \u003d ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if (!commitInfos.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    min \u003d commitInfos.get(0).getTime();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":"return min;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"```"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"The result would look something like this:"},{"lineNumber":34,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":35,"author":{"gitId":"-"},"content":"return (commitInfos.isEmpty())"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ? ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime()"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        : commitInfos.get(0).getTime();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"```"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"To preserve readability, it is recommended that if-else blocks should only be"},{"lineNumber":41,"author":{"gitId":"-"},"content":"converted to ternary operators if the resultant code can be kept at most 3 lines long"},{"lineNumber":42,"author":{"gitId":"-"},"content":"(in accordance to the coding standard)."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"## Additional Javadoc requirements:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"In addition to what has been mentioned in the [**Java** coding standard (SE-EDU)](https://se-education.org/guides/conventions/java/index.html) and [**Google Java Style Guide**](https://google.github.io/styleguide/javaguide.html), we also stipulate the following standards for Javadoc:"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* If Javadoc is written for a method, all input parameters should be described in the Javadoc, either in the description with `@code tags` or through `@param` block tags."},{"lineNumber":47,"author":{"gitId":"-"},"content":"  * If `@param` block tags are used, they must be used for all parameters."},{"lineNumber":48,"author":{"gitId":"-"},"content":"  * This is not necessary (although still recommended) for methods with `@Override` annotations if Javadoc is used. However, if the method that is being overriden is part of your code and has Javadoc, all parameters must be described."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Negative Examples:"},{"lineNumber":51,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":52,"author":{"gitId":"asdfghjkxd"},"content":"// Not okay (Only mentions zoneId parameter):"},{"lineNumber":53,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":54,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object adjusted for timezone given by {@code zoneId}."},{"lineNumber":55,"author":{"gitId":"-"},"content":" */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"asdfghjkxd"},"content":"// Not okay (@param tag used only for zoneId)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":62,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":63,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":64,"author":{"gitId":"-"},"content":" *"},{"lineNumber":65,"author":{"gitId":"-"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":66,"author":{"gitId":"-"},"content":" */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Positive Example #1:"},{"lineNumber":72,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":73,"author":{"gitId":"asdfghjkxd"},"content":"// Okay (No @param tags):"},{"lineNumber":74,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":75,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":76,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":77,"author":{"gitId":"-"},"content":" */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Positive Example #2:"},{"lineNumber":83,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":84,"author":{"gitId":"asdfghjkxd"},"content":"// Okay (@param tags used for all inputs):"},{"lineNumber":85,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":86,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":88,"author":{"gitId":"-"},"content":" *"},{"lineNumber":89,"author":{"gitId":"-"},"content":" * @param sinceDate The date prior to the timezone conversion."},{"lineNumber":90,"author":{"gitId":"-"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":91,"author":{"gitId":"-"},"content":" */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"```"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"* Within the main code, if an exception is thrown in a method (both header and body) for which Javadoc is written, a `@throws` tag must be used to describe how the exception is likely to arise."},{"lineNumber":98,"author":{"gitId":"-"},"content":"  * This requirement does not apply to test code."},{"lineNumber":99,"author":{"gitId":"-"},"content":"  * One `@throws` tag per unique exception."},{"lineNumber":100,"author":{"gitId":"-"},"content":"  * The order of exceptions in the `@throws` tag block should match that of the method\u0027s `throws` statement."},{"lineNumber":101,"author":{"gitId":"asdfghjkxd"},"content":"```java"},{"lineNumber":102,"author":{"gitId":"asdfghjkxd"},"content":"// Not okay (order of exceptions in tag block and method signature do not match):"},{"lineNumber":103,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":104,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":105,"author":{"gitId":"-"},"content":" *"},{"lineNumber":106,"author":{"gitId":"-"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":107,"author":{"gitId":"-"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":108,"author":{"gitId":"-"},"content":" */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":111,"author":{"gitId":"-"},"content":"    // Code here"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"asdfghjkxd"},"content":"// Should be:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":116,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":117,"author":{"gitId":"-"},"content":" *"},{"lineNumber":118,"author":{"gitId":"-"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":119,"author":{"gitId":"-"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":120,"author":{"gitId":"-"},"content":" */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":123,"author":{"gitId":"-"},"content":"    // Code here"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"},{"lineNumber":125,"author":{"gitId":"-"},"content":"```"},{"lineNumber":126,"author":{"gitId":"-"},"content":"## TypeScript specific formatting"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"For TypeScript specific code, such as within an `interface` or type annotations, we also stipulate the following standards:"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* Use semicolons as delimiters for TypeScript interfaces and types."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"Negative Examples:"},{"lineNumber":132,"author":{"gitId":"-"},"content":"```typescript"},{"lineNumber":133,"author":{"gitId":"-"},"content":"// missing semicolon delimiter"},{"lineNumber":134,"author":{"gitId":"-"},"content":"interface Foo {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    name: string"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    greet(): string"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"// using incorrect delimiter"},{"lineNumber":140,"author":{"gitId":"-"},"content":"interface Foo {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    name: string,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    greet(): string,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":"```"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Positive Example:"},{"lineNumber":146,"author":{"gitId":"-"},"content":"```typescript"},{"lineNumber":147,"author":{"gitId":"-"},"content":"// semicolon delimiter"},{"lineNumber":148,"author":{"gitId":"-"},"content":"interface Foo {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    name: string;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    greet(): string;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":"```"},{"lineNumber":153,"author":{"gitId":"-"},"content":"* For type annotations, use a space after but not before."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Negative Examples:"},{"lineNumber":156,"author":{"gitId":"-"},"content":"```typescript"},{"lineNumber":157,"author":{"gitId":"-"},"content":"let foo:string \u003d \"bar\";"},{"lineNumber":158,"author":{"gitId":"-"},"content":"let foo :string \u003d \"bar\";"},{"lineNumber":159,"author":{"gitId":"-"},"content":"let foo : string \u003d \"bar\";"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"function foo():string {}"},{"lineNumber":162,"author":{"gitId":"-"},"content":"function foo() :string {}"},{"lineNumber":163,"author":{"gitId":"-"},"content":"function foo() : string {}"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"class Foo {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    name:string;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"class Foo {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    name :string;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"class Foo {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    name : string;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":"```"},{"lineNumber":177,"author":{"gitId":"-"},"content":"Positive Examples:"},{"lineNumber":178,"author":{"gitId":"-"},"content":"```typescript"},{"lineNumber":179,"author":{"gitId":"-"},"content":"let foo: string \u003d \"bar\";"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"function foo(): string {}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"class Foo {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    name: string;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"}],"authorContributionMap":{"asdfghjkxd":12,"-":174}},{"path":"docs/ug/cli.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: CLI syntax reference\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"The command `java -jar RepoSense.jar` takes several flags."},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cbox\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Examples**:"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"An example of a command using most parameters:\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --output ./report_folder --since 31/1/2017 --until 31/12/2018 --formats java adoc xml --view --ignore-standalone-config --last-modified-date --timezone UTC+08 --find-previous-authors`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"Same command as above but using most parameters in alias format:\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar -r https://github.com/reposense/RepoSense.git -o ./report_folder -s 31/1/2017 -u 31/12/2018 -f java adoc xml -v -i -l -t UTC+08 -F`"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"The section below provides explanations for each of the flags."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### `--assets`, `-a`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-assets\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"**`--assets ASSETS_DIRECTORY`**: Specifies where to place assets for report generation."},{"lineNumber":34,"author":{"gitId":"sopa301"},"content":"* Parameter: `ASSETS_DIRECTORY` The directory containing the assets files. A `favicon.ico` file can be placed here to customize the favicon of the dashboard,"},{"lineNumber":35,"author":{"gitId":"sopa301"},"content":"while a `title.md` file can be placed to customize the header of the report using [Markdown syntax](https://www.markdownguide.org/basic-syntax/)."},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Alias: `-a`"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Example: `--assets ./assets` or `-a ./assets`"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* If `--assets` is not specified, RepoSense looks for assets in the `./assets` directory."},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"### `--config`, `-c`"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-config\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"**`--config CONFIG_DIRECTORY`**: Specifies that config files located in `CONFIG_DIRECTORY` should be used to customize the report."},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Parameter: `CONFIG_DIRECTORY` The directory containing the config files. Should contain a `repo-config.csv` file. Optionally, can contain an `author-config.csv` file or/and a `group-config.csv` file or/and a `report-config.json` file."},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Alias: `-c`"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --config  ./config`"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Cannot be used with `--repos`. The `--repos` flag will take precedence over this flag."},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If both `--repos` and `--config` are not specified, RepoSense looks for config files in the `./config` directory."},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Config files must follow [this](./configFiles.html) format."},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"### `--formats`, `-f`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"**`--formats LIST_OF_FORMATS`**: Specifies which file extensions to be included in the analysis."},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Parameter: `LIST_OF_FORMATS` A space-separated list of file extensions that should be included in the analysis.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  Default: all file formats"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Alias: `-f`"},{"lineNumber":72,"author":{"gitId":"-"},"content":"* Example:`--formats css fxml gradle` or `-f css fxml gradle`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"Binary file formats, such as `jpg`, `png`,`exe`,`zip`, `rar`, `docx`, and `pptx`, all will be labelled as the file type `binary` in the generated report."},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"### `--find-previous-authors`, `-F`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"**`--find-previous-authors`**: Utilizes Git blame\u0027s ignore revisions functionality, RepoSense will attempt to blame the line changes caused by commits in the ignore commit list to the previous authors who altered those lines (if available)."},{"lineNumber":84,"author":{"gitId":"-"},"content":"* Default: RepoSense will assume that no authors are responsible for the code changes in the lines altered by commits in the ignore commit list."},{"lineNumber":85,"author":{"gitId":"-"},"content":"* Alias: `-F` (uppercase F)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* Example:`--find-previous-authors` or `-F`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"### `--help`, `-h`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"**`--help`**: Shows the help message."},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Alias: `-h`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"Cannot be used with any other flags. This flag takes precedence over all other flags."},{"lineNumber":98,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"### `--ignore-standalone-config`, `-i`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"**`--ignore-standalone-config`**: Specifies that the standalone config file in the repo should be ignored."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Default: the standalone config file is not ignored"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Alias: `-i`"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* Example:`--ignore-standalone-config` or `-i`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"This flag overrides the `Ignore standalone config` field in the CSV config file."},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"### `--ignore-filesize-limit`, `-I`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"**`--ignore-filesize-limit`**: Specifies that the file size limit (both default and user-defined) should be ignored during the analysis."},{"lineNumber":118,"author":{"gitId":"-"},"content":"* Default: the file size limit is not ignored"},{"lineNumber":119,"author":{"gitId":"-"},"content":"* Alias: `-I`"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* Example:`--ignore-filesize-limit` or `-I`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"All files are subject to a default file size limit or a custom size limit set by the user. Most files should not be"},{"lineNumber":125,"author":{"gitId":"-"},"content":"affected by the default size limit. This flag can be useful for including files in your report that are affected by"},{"lineNumber":126,"author":{"gitId":"-"},"content":"the size limit. Note that this flag may result in large report sizes and/or slower report generation."},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"This flag overrides the `Ignore file size limit` field in the CSV config file."},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### `--last-modified-date`, `-l`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"**`--last-modified-date`**: Specifies that the last modified date of each line of code should be added to `authorship.json`."},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Default: the last modified date of each line of code will not be added to `authorship.json`"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Alias: `-l` (lowercase L)"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* Example:`--last-modified-date` or `-l`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"* Cannot be used with `--shallow-cloning`. This may result in an incorrect last modified date."},{"lineNumber":146,"author":{"gitId":"-"},"content":"* The last modified dates will be in the same timezone specified with the `--timezone` flag."},{"lineNumber":147,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"### `--output`, `-o`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"**`--output OUTPUT_DIRECTORY`**: Indicates where to save the report generated."},{"lineNumber":154,"author":{"gitId":"-"},"content":"* Parameter: `OUTPUT_DIRECTORY` The location for the generated `reposense-report` folder.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  Default: current directory"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* Alias: `-o`"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* Example: `--output ./foo` or `-o ./foo` (the report will be in the `./foo/reposense-report` folder)"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"### `--period`, `-p`"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"**`--period PERIOD`**: Specifies the period of analysis window."},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Parameter: `PERIOD` The period of analysis window, in the format `nd` (for n days) or `nw` (for n weeks). It is used to calculate end date if only start date is specified, or calculate end date if only start date is specified."},{"lineNumber":165,"author":{"gitId":"-"},"content":"* Alias: `-p`"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* Example: `--period 30d` or `--period 4w`"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"* If both start date and end date are not specified, the date of generating the report will be taken as the end date."},{"lineNumber":171,"author":{"gitId":"-"},"content":"* May analyze the incorrect date range if used with `--since d1`. The program will throw a warning."},{"lineNumber":172,"author":{"gitId":"-"},"content":"* Cannot be used with both `--since` and `--until`. The program will throw an exception."},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"### `--repo`, `--repos`, `-r`"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"**`--repo REPO_LOCATION`**: Specifies which repositories to analyze."},{"lineNumber":179,"author":{"gitId":"-"},"content":"* Parameter: `REPO_LOCATION` A list of URLs or the disk location of the git repositories to analyze, separated by spaces."},{"lineNumber":180,"author":{"gitId":"-"},"content":"* Alias: `-r`"},{"lineNumber":181,"author":{"gitId":"-"},"content":"* Examples:"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  * `--repos https://github.com/reposense/RepoSense.git`"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  * `--repo https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar`: analyzes the two specified repos (one remote, one local) and generates one report containing details of both."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"Cannot be used with `--config`. This flag takes precedence over `--config`."},{"lineNumber":188,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"### `--shallow-cloning`, `-S`"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"**`--shallow-cloning`**: Clones repositories using Git\u0027s shallow cloning functionality, which can significantly reduce the time taken to clone large repositories. However, the flag should not be used for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead."},{"lineNumber":194,"author":{"gitId":"-"},"content":"* Default: RepoSense does not clone repositories using Git\u0027s shallow cloning functionality."},{"lineNumber":195,"author":{"gitId":"-"},"content":"* Alias: `-S` (uppercase S)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"* Example:`--shallow-cloning` or `-S`"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"Cannot be used with `--last-modified-date`. This may result in an incorrect last modified date."},{"lineNumber":201,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"### `--since`, `-s`"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"**`--since START_DATE`**: Specifies the start date for the period to be analyzed."},{"lineNumber":208,"author":{"gitId":"-"},"content":"* Parameter: `START_DATE` The first day of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  Default: one month before the current date"},{"lineNumber":210,"author":{"gitId":"-"},"content":"* Alias: `-s`"},{"lineNumber":211,"author":{"gitId":"-"},"content":"* Example:`--since 21/10/2017` or `-s 21/10/2017`"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"* If the start date is not specified, only commits made one month before the end date (if specified) or the date of generating the report, will be captured and analyzed."},{"lineNumber":216,"author":{"gitId":"-"},"content":"* If `d1` is specified as the start date (`--since d1` or `-s d1`), then the program will search for the earliest commit date of all repositories and use that as the start date."},{"lineNumber":217,"author":{"gitId":"-"},"content":"* If `d1` is specified together with `--period`, then the program will warn that the date range being analyzed may be incorrect."},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"### `--timezone`, `-t`"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"**`--timezone ZONE_ID`**: Indicates the timezone to be used for the analysis."},{"lineNumber":224,"author":{"gitId":"-"},"content":"* Parameter: `ZONE_ID` The timezone in the format `ZONE_ID[±hh[mm]]`.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitId":"-"},"content":"  Default: system\u0027s default timezone"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* Alias: `-t`"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* Example:`--timezone UTC+08` or `-t UTC-1030`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"### `--until`, `-u`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"**`--until END_DATE`**: Specifies the end date of the analysis period."},{"lineNumber":234,"author":{"gitId":"-"},"content":"* Parameter: `END_DATE` The last date of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  Default: current date"},{"lineNumber":236,"author":{"gitId":"-"},"content":"* Alias: `-u`"},{"lineNumber":237,"author":{"gitId":"-"},"content":"* Example:`--until 21/10/2017` or `-u 21/10/2017`"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"Note: If the end date is not specified, the date of generating the report will be taken as the end date."},{"lineNumber":242,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"### `--version`, `-V`"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"**`--version`**: Shows the version of RepoSense."},{"lineNumber":249,"author":{"gitId":"-"},"content":"* Alias: `-V` (upper case)"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"Cannot be used with any other flags. This flag takes precedence over all other flags other than `--help`."},{"lineNumber":254,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"### `--view`, `-v`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`--view [REPORT_FOLDER]`**: Specifies that the report should be opened in the default browser."},{"lineNumber":260,"author":{"gitId":"-"},"content":"* Parameter: `REPORT_FOLDER` Optional. If specified, no analysis will be performed and the report specified by the argument will be opened.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  Default: `./reposense-report`"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* Alias: `-v`"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* Example:`--view` or `-v`"}],"authorContributionMap":{"sopa301":2,"-":261}},{"path":"docs/ug/configFiles.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Config files format\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% set mandatory %}\u003cspan class\u003d\"badge bg-danger\"\u003emandatory\u003c/span\u003e{% endset %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"Given below are the details of the various config files used by RepoSense."},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"**RepoSense ignores the order of column headers in the CSV config files. However, the spelling of the column headers must match the specified headers exactly, or the column would be ignored by RepoSense.**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"**A value in a config file is optional to provide unless it is specified as {{ mandatory }}**."},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## `repo-config.csv`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"**`repo-config.csv` file contains repo-level config data.** Each row represents a repository\u0027s configuration ([example](repo-config.csv))."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"| Column Name | Explanation |"},{"lineNumber":35,"author":{"gitId":"-"},"content":"|-------------|-------------|"},{"lineNumber":36,"author":{"gitId":"-"},"content":"| Repository\u0027s Location {{ mandatory }} | The `Remote Repo URL` or `Disk Path` to the git repository e.g., `https://github.com/foo/bar.git` or `C:\\Users\\user\\Desktop\\GitHub\\foo\\bar` |"},{"lineNumber":37,"author":{"gitId":"-"},"content":"| Branch | The branch to analyze in the target repository e.g., `master`. Default: the default branch of the repo |"},{"lineNumber":38,"author":{"gitId":"-"},"content":"| File formats\u003csup\u003e*+\u003c/sup\u003e | The file extensions to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats |"},{"lineNumber":39,"author":{"gitId":"-"},"content":"| Find Previous Authors | Enter **`yes`** to utilize Git blame\u0027s ignore revisions functionality, RepoSense will attempt to blame the line changes caused by commits in the ignore commit list to the previous authors who altered those lines (if available). |"},{"lineNumber":40,"author":{"gitId":"-"},"content":"| Ignore Glob List\u003csup\u003e*+\u003c/sup\u003e | The list of file path globs to ignore during analysis for each author e.g., `test/**;temp/**`. Refer to the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) for the path glob syntax. |"},{"lineNumber":41,"author":{"gitId":"-"},"content":"| Ignore standalone config | To ignore the standalone config file (if any) in target repository, enter **`yes`**. If the cell is empty, the standalone config file in the repo (if any) will take precedence over configurations provided in the csv files. |"},{"lineNumber":42,"author":{"gitId":"-"},"content":"| Ignore Commits List\u003csup\u003e*+\u003c/sup\u003e | The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive). |"},{"lineNumber":43,"author":{"gitId":"-"},"content":"| Ignore Authors List\u003csup\u003e*+\u003c/sup\u003e | The list of authors to ignore during analysis. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name). |"},{"lineNumber":44,"author":{"gitId":"-"},"content":"| Shallow Cloning | Enter **`yes`** to clone the repository using Git\u0027s shallow cloning functionality. This option can significantly reduce the time taken to clone large repositories. However, the option should ideally be disabled for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead. |"},{"lineNumber":45,"author":{"gitId":"-"},"content":"| File Size Limit\u003csup\u003e+\u003c/sup\u003e | Enter a file size limit for the repository in bytes as a single number without units (for a size limit of 1MB for example, enter 1000000). This file size limit will override the default file size limit (500KB). Files exceeding the file size limit will be marked as ignored and only the file name and line count will be reflected in the report. |"},{"lineNumber":46,"author":{"gitId":"-"},"content":"| Ignore File Size Limit | Enter **`yes`** to ignore both the default file size limit and the file size limit possibly set by the user in `repo-config.csv`. |"},{"lineNumber":47,"author":{"gitId":"-"},"content":"| Skip Ignored File Analysis | Enter **`yes`** to ignore analysis of files exceeding the file size limit entirely. If file analysis is skipped, all information about the file will be omitted from the generated report. This option can significantly improve report generation time. |"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"The Shallow Cloning option is incompatible with the \"--last-modified-date\" CLI flag."},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"If Ignore File Size Limit is yes, the File Size Limit and Skip Ignored File Analysis columns are ignored."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e\u003c/br\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003csup\u003e+ **Overrideable column**: prepend with `override:` to use entered value(s) instead of value(s) from standalone config.\u003c/sup\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"When using [standalone config](#config-json-standalone-config-file) (if it is not ignored), it is possible to override specific values from the standalone config by prepending the entered value with `override:`."},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"## `author-config.csv`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Optionally, you can use an `author-config.csv` (which should be in the same directory as the `repo-config.csv` file) to provide more details about the authors to analyze ([example](author-config.csv)). It should contain the following columns:"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"| Column Name                                      | Explanation                                                                                                                                                                                      |"},{"lineNumber":72,"author":{"gitId":"-"},"content":"|--------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|"},{"lineNumber":73,"author":{"gitId":"-"},"content":"| Repository\u0027s Location\u003csup\u003e*\u003c/sup\u003e                | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv`.                                                                                                                          |"},{"lineNumber":74,"author":{"gitId":"-"},"content":"| Branch                                           | The branch to analyze for this author, e.g., `master`. Default: the author will be bound to all the repos in `repo-config.csv` that has the same repo\u0027s location, regardless of branch.          |"},{"lineNumber":75,"author":{"gitId":"-"},"content":"| Author\u0027s Git Host ID\u003csup\u003e#\u003c/sup\u003e {{ mandatory }} | Username of the target author\u0027s profile on GitHub, GitLab or Bitbucket, e.g.`JohnDoe`.                                                                                                           |"},{"lineNumber":76,"author":{"gitId":"-"},"content":"| Author\u0027s Emails\u003csup\u003e*\u003c/sup\u003e                      | Associated emails of the author. For GitHub users, this can be found in your [GitHub settings](https://github.com/settings/emails).                                                              |"},{"lineNumber":77,"author":{"gitId":"-"},"content":"| Author\u0027s Display Name                            | The name to display for the author. Default: author\u0027s username.                                                                                                                                  |"},{"lineNumber":78,"author":{"gitId":"-"},"content":"| Author\u0027s Git Author Name\u003csup\u003e*\u003c/sup\u003e             | The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name).                                                                                |"},{"lineNumber":79,"author":{"gitId":"-"},"content":"| Ignore Glob List\u003csup\u003e*\u003c/sup\u003e                     | Files to ignore for this author, in addition to files ignored by the patterns specified in `repo-config.csv`. The path glob syntax is the same as that of Ignore Glob List in `repo-config.csv`. |"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003c/br\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003csup\u003e# For backward compatibility, `Author\u0027s GitHub ID` is still accepted as the header in place of `Author\u0027s Git Host ID`.\u003c/sup\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"If `author-config.csv` is not given and the repo has not provided author details in a standalone config file, all the authors of the repositories within the date range specified (if any) will be analyzed."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"`author-config.csv` has some advanced syntax that can help to reduce duplication of the author\u0027s information. The syntax guide is given below:"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"{{ embed(\"Appendix: `author-config.csv` advanced syntax\", \"authorConfigSyntax.md\") }}"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"## `group-config.csv`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Optionally, you can provide a `group-config.csv`(which should be in the same directory as `repo-config.csv` file) to provide details on any custom groupings for files in specified repositories ([example](group-config.csv)). It should contain the following columns:"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"| Column Name | Explanation |"},{"lineNumber":98,"author":{"gitId":"-"},"content":"|-------------|-------------|"},{"lineNumber":99,"author":{"gitId":"-"},"content":"| Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv` |"},{"lineNumber":100,"author":{"gitId":"-"},"content":"| Group Name {{ mandatory }} | Name of the group, e.g.,`test`. |"},{"lineNumber":101,"author":{"gitId":"-"},"content":"| Globs * {{ mandatory }} | The list of file path globs to include for specified group, e.g.,`**/test/*;**.java`. |"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"Note that a file in a given repository should only be tagged to one group. \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"e.g.: `example.java` in `example-repo` can either be in the `test` group or the `code` group, but not in both `test` and `code` group. If multiple groups are specified for a given file, the latter group (i.e., `code` group) is set for the file."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"## `report-config.json`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can optionally use `report-config.json` to customize report generation by providing the following information. ([example](report-config.json))"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"**Fields to provide**:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* `title`: Title of the generated report, which is also the title of the deployed dashboard. Default: \"RepoSense Report\""},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-standalone\"\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"## `config.json` (standalone config file)"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"Repo owners can provide the following additional information to RepoSense using a config file that we call the **_standalone config file_**:"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* which files/authors/commits to analyze/omit"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* which git and git host usernames belong to which authors"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* the display of an author"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"To use this feature, add a `_reposense/config.json` to the root of your repo using the format in the example below ([another example](https://github.com/reposense/RepoSense/blob/master/_reposense/config.json)) and **commit it** (reason: RepoSense can see committed code only):"},{"lineNumber":129,"author":{"gitId":"-"},"content":"```json {.no-line-numbers}"},{"lineNumber":130,"author":{"gitId":"-"},"content":"{"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  \"formats\": [\"html\", \"css\"],"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  \"ignoreCommitList\": [\"90018e49f129ce7e0abdc8b18e91c9813588c601\", \"67890def\", \"abc123..def456\"],"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  \"ignoreAuthorList\": [\"charlie\"],"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  \"authors\":"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  ["},{"lineNumber":137,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      \"gitId\": \"alice\","},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \"emails\": [\"alice@example.com\", \"alicet@example.com\"],"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \"displayName\": \"Alice T.\","},{"lineNumber":141,"author":{"gitId":"-"},"content":"      \"authorNames\": [\"AT\", \"A\"],"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      \"ignoreGlobList\": [\"**.css\"]"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \"gitId\": \"bob\""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"},{"lineNumber":149,"author":{"gitId":"-"},"content":"```"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Note: all fields are optional unless specified otherwise."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"**Fields to provide _repository-level_ info**:"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: Folders/files to ignore, specified using the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob)."},{"lineNumber":155,"author":{"gitId":"-"},"content":"* `formats`: File formats to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* `ignoreCommitList`: The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive)."},{"lineNumber":157,"author":{"gitId":"-"},"content":"* `ignoreAuthorList`: The list of authors to ignore during analysis. Authors specified in `authors` field or `author-config.csv` will be also be omitted if they are in this list. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name)."},{"lineNumber":158,"author":{"gitId":"-"},"content":"* `fileSizeLimit`: A file size limit for the repository in bytes as a single number without units, that will override the default file size limit. If not specified, the default file size limit will continue to be used."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"**Fields to provide _author-level_ info**:\u003cbr\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"Note: `authors` field should contain _all_ authors that should be captured in the analysis."},{"lineNumber":162,"author":{"gitId":"-"},"content":"* `gitId`: Username of the author. {{ mandatory }} field."},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `emails`: Associated git emails of the author. For GitHub, this can be found in your [GitHub settings](https://github.com/settings/emails)."},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `displayName`: Name to display on the report for this author."},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `authorNames`: Git Author Name(s) used in the author\u0027s commits. By default, RepoSense assumes an author would use their remote Git Host username as the Git username too. The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name)."},{"lineNumber":166,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: _Additional_ (i.e. on top of the repo-level `ignoreGlobList`) folders/files to ignore for a specific author. The path glob syntax is specified by the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob). In the example above, the actual `ignoreGlobList` for `alice` would be `[\"about-us/**\", \"**index.html\", \"**.css\"]`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"To verify your standalone configuration is as intended, add the `_reposense/config.json` to your local copy of repo and run RepoSense against it as follows:\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* Format: `java -jar RepoSense.jar --repo LOCAL_REPO_LOCATION` \u003cbr\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --repo c:/myRepose/foo/bar`\u003cbr\u003e"},{"lineNumber":171,"author":{"gitId":"-"},"content":"After that, view the report to see if the configuration you specified in the config file is being reflected correctly in the report."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"## A note about git author name"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"`Git Author Name` refers to the customizable author\u0027s display name set in the local `.gitconfig` file. For example, in the Git Log\u0027s display:"},{"lineNumber":176,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"..."},{"lineNumber":178,"author":{"gitId":"-"},"content":"commit cd7f610e0becbdf331d5231887d8010a689f87c7"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Author: ConfiguredAuthorName \u003cauthor@example.com\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:14:41 2018 +0800"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    Make some changes to show my new author\u0027s name"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"commit e3f699fd4ef128eebce98d5b4e5b3bb06a512f49"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Author: ActualGitHostId \u003cauthor@example.com\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:13:13 2018 +0800"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    Initial commit"},{"lineNumber":189,"author":{"gitId":"-"},"content":" ..."},{"lineNumber":190,"author":{"gitId":"-"},"content":"```"},{"lineNumber":191,"author":{"gitId":"-"},"content":"`ActualGitHostId` and `ConfiguredAuthorName` are both `Git Author Name` of the same author.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitId":"-"},"content":"To find the author name that you are currently using for your current git repository, run the following command within your git repository:"},{"lineNumber":193,"author":{"gitId":"asdfghjkxd"},"content":"``` shell {.no-line-numbers}"},{"lineNumber":194,"author":{"gitId":"-"},"content":"git config user.name"},{"lineNumber":195,"author":{"gitId":"-"},"content":"```"},{"lineNumber":196,"author":{"gitId":"-"},"content":"To set the author name to the value you want (e.g., to set it to your GitHub username) for your current git repository, you can use the following command ([more info](https://www.git-tower.com/learn/git/faq/change-author-name-email)):"},{"lineNumber":197,"author":{"gitId":"asdfghjkxd"},"content":"``` shell {.no-line-numbers}"},{"lineNumber":198,"author":{"gitId":"-"},"content":"git config user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":199,"author":{"gitId":"-"},"content":"```"},{"lineNumber":200,"author":{"gitId":"-"},"content":"To set the author name to use a default value you want for future git repositories, you can use the following command:"},{"lineNumber":201,"author":{"gitId":"asdfghjkxd"},"content":"``` shell {.no-line-numbers}"},{"lineNumber":202,"author":{"gitId":"-"},"content":"git config --global user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":203,"author":{"gitId":"-"},"content":"```"},{"lineNumber":204,"author":{"gitId":"-"},"content":"RepoSense expects the Git Author Name to be the same as author\u0027s username on the Git hosting platform (GitHub, GitLab, BitBucket). If an author\u0027s `Git Author Name` is different from their username on the Git hosting platform, the `Git Author Name` needs to be specified in the standalone config file. If the author has more than one `Git Author Name`, multiple values can be entered too."},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"Note: Symbols such as `\"`, `!`, `/` etc. in your author name will be omitted, which may reduce the accuracy of the analysis if 2 names in the repository are approximately similar."},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"asdfghjkxd":3,"-":208}},{"path":"frontend/.eslintrc.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"env\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"browser\": true"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \"extends\": ["},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"airbnb-base\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"plugin:vue/recommended\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"@vue/typescript\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"plugin:import/typescript\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \"rules\": {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"vue/component-definition-name-casing\": ["},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \"kebab-case\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"vue/require-prop-types\": 0,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"no-param-reassign\": 0,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"arrow-parens\": ["},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \"always\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"indent\": ["},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"      2,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \"ignoredNodes\": ["},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \"ConditionalExpression\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ]"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"prefer-destructuring\": 0,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"func-names\": ["},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \"as-needed\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"no-alert\": 0,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"linebreak-style\": 0,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"max-len\": ["},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"      {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \"code\": 120"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"prefer-object-spread\": 0,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"function-call-argument-newline\": 0,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"vue/no-computed-properties-in-data\": 0,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"import/extensions\": ["},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \"error\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"      {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        \"js\": \"never\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \"ts\": \"never\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ]"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  \"parserOptions\": {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"parser\": \"@typescript-eslint/parser\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \"overrides\": ["},{"lineNumber":59,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \"files\": [\"*.ts\"],"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \"extends\": ["},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \"airbnb-typescript/base\","},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \"plugin:@typescript-eslint/recommended\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"      ],"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \"parserOptions\": {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \"project\": [\"./tsconfig.json\"]"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \"rules\": {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        \"indent\": \"off\","},{"lineNumber":70,"author":{"gitId":"-"},"content":"        \"@typescript-eslint/indent\": ["},{"lineNumber":71,"author":{"gitId":"-"},"content":"          \"error\","},{"lineNumber":72,"author":{"gitId":"-"},"content":"          2,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"          {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"ignoredNodes\": ["},{"lineNumber":75,"author":{"gitId":"-"},"content":"              \"ConditionalExpression\""},{"lineNumber":76,"author":{"gitId":"-"},"content":"            ],"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"SwitchCase\": 0"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        ],"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        \"@typescript-eslint/member-delimiter-style\": \"error\","},{"lineNumber":81,"author":{"gitId":"sopa301"},"content":"        \"@typescript-eslint/type-annotation-spacing\": \"error\","},{"lineNumber":82,"author":{"gitId":"sopa301"},"content":"        \"@typescript-eslint/array-type\": ["},{"lineNumber":83,"author":{"gitId":"sopa301"},"content":"          \"error\","},{"lineNumber":84,"author":{"gitId":"sopa301"},"content":"          {"},{"lineNumber":85,"author":{"gitId":"sopa301"},"content":"            \"default\": \"array-simple\","},{"lineNumber":86,"author":{"gitId":"sopa301"},"content":"            \"readonly\": \"array-simple\""},{"lineNumber":87,"author":{"gitId":"sopa301"},"content":"          }"},{"lineNumber":88,"author":{"gitId":"sopa301"},"content":"        ]"},{"lineNumber":89,"author":{"gitId":"sopa301"},"content":"      }"},{"lineNumber":90,"author":{"gitId":"sopa301"},"content":"    },"},{"lineNumber":91,"author":{"gitId":"sopa301"},"content":"    {"},{"lineNumber":92,"author":{"gitId":"sopa301"},"content":"      \"files\": [\"*.vue\"],"},{"lineNumber":93,"author":{"gitId":"sopa301"},"content":"      \"rules\": {"},{"lineNumber":94,"author":{"gitId":"sopa301"},"content":"        \"@typescript-eslint/array-type\": ["},{"lineNumber":95,"author":{"gitId":"sopa301"},"content":"          \"error\","},{"lineNumber":96,"author":{"gitId":"sopa301"},"content":"          {"},{"lineNumber":97,"author":{"gitId":"sopa301"},"content":"            \"default\": \"generic\","},{"lineNumber":98,"author":{"gitId":"sopa301"},"content":"            \"readonly\": \"generic\""},{"lineNumber":99,"author":{"gitId":"sopa301"},"content":"          }"},{"lineNumber":100,"author":{"gitId":"sopa301"},"content":"        ]"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sopa301":20,"-":84}},{"path":"frontend/.stylelintrc.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"plugins\": ["},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"stylelint-order\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \"extends\": ["},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"stylelint-config-recommended-scss\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"stylelint-config-recommended-vue\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \"rules\": {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"color-no-invalid-hex\": true,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"string-no-newline\": true,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"unit-no-unknown\": true,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"property-no-unknown\": true,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"block-no-empty\": true,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"comment-no-empty\": true,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"no-extra-semicolons\": true,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"no-invalid-double-slash-comments\": true,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"declaration-no-important\": true,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"declaration-block-single-line-max-declarations\": 1,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"number-leading-zero\": \"never\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"number-no-trailing-zeros\": null,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"string-quotes\": \"single\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"length-zero-no-unit\": true,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"value-keyword-case\": \"lower\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"property-case\": \"lower\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"declaration-colon-space-after\": \"always\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"selector-type-case\": \"lower\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"selector-list-comma-newline-after\": \"always\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"no-eol-whitespace\": true,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"order/properties-alphabetical-order\": true,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"indentation\": 2,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"scss/at-import-partial-extension\": null,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"function-no-unknown\": null,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"scss/at-import-no-partial-leading-underscore\": null,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"no-descending-specificity\": null,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"scss/no-global-function-names\": null,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"selector-type-no-unknown\": null,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"at-rule-no-unknown\": null,"},{"lineNumber":39,"author":{"gitId":"sopa301"},"content":"    \"no-duplicate-selectors\": null,"},{"lineNumber":40,"author":{"gitId":"sopa301"},"content":"    \"block-opening-brace-space-before\": \"always\","},{"lineNumber":41,"author":{"gitId":"sopa301"},"content":"    \"declaration-colon-space-before\": \"never\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sopa301":3,"-":40}},{"path":"frontend/cypress/support.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// Disable screenshots"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"// https://docs.cypress.io/api/cypress-api/screenshot-api.html#Disable-screenshots-on-run-failures"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Cypress.Screenshot.defaults({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  screenshotOnRunFailure: false,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"});"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"beforeEach(() \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  cy.visit(\u0027/\u0027);"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"  cy.intercept({"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"    method: \u0027GET\u0027,"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"    url: \u0027/title.md\u0027,"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"  }, \u0027# RepoSense Intro\u0027).as(\u0027getTitleMd\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"sopa301":4,"-":10}},{"path":"frontend/cypress/tests/chartView/chartView_errorSummary_messageBox.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027error summary\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027shows list of issues encountered while analyzing repos\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-wrapper \u003e #summary \u003e .error-message-box \u003e .error-message-box__message\u0027).then(($ele) \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      const expected \u003d \u0027The following issues occurred when analyzing the following repositories:\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      const message \u003d $ele.text();"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"      expect(expected).to.equal(message);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    cy.get(\u0027.error-message-box__failed-repo--name\u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    cy.get(\u0027.error-message-box__failed-repo--reason\u0027)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  it(\u0027can be closed\u0027, () \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-wrapper \u003e #summary \u003e .error-message-box \u003e .error-message-box__close-button\u0027)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":30,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":31,"author":{"gitId":"jonasongg"},"content":"  it(\u0027can be expanded and collapsed if count \u003e 4\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":33,"author":{"gitId":"jonasongg"},"content":"      .find(\u0027.error-message-box__failed-repo\u0027)"},{"lineNumber":34,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027have.length\u0027, 4);"},{"lineNumber":35,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":36,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.error-message-box__show-more-container \u003e a\u0027)"},{"lineNumber":37,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":38,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":39,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":40,"author":{"gitId":"jonasongg"},"content":"      .find(\u0027.error-message-box__failed-repo\u0027)"},{"lineNumber":41,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027have.length\u0027, 5);"},{"lineNumber":42,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":43,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.error-message-box__show-more-container \u003e a\u0027)"},{"lineNumber":44,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":45,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":46,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.error-message-box\u0027)"},{"lineNumber":47,"author":{"gitId":"jonasongg"},"content":"      .find(\u0027.error-message-box__failed-repo\u0027)"},{"lineNumber":48,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027have.length\u0027, 4);"},{"lineNumber":49,"author":{"gitId":"jonasongg"},"content":"  });"},{"lineNumber":50,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":30,"jonasongg":20}},{"path":"frontend/cypress/tests/chartView/chartView_zoomFeature.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"const extractDate \u003d (str) \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  const regex \u003d /\\[(.*?)\\]/g;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  const matches \u003d str.match(regex);"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  return new Date(matches[0].slice(1, -1));"},{"lineNumber":5,"author":{"gitId":"-"},"content":"};"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"describe(\u0027zoom features in code view\u0027, () \u003d\u003e {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  const zoomKey \u003d Cypress.platform \u003d\u003d\u003d \u0027darwin\u0027 ? \u0027{meta}\u0027 : \u0027{ctrl}\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  it(\u0027click on view commits button\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":11,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  it(\u0027zoom into ramp\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // clicking from the 10th px to the 50th px in the ramp"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      .click(10, 20)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      .click(50, 20);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  it(\u0027zoom into ramp when merge group\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // clicking from the 10th px to the 50th px in the ramp"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .click(10, 20)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .click(50, 20);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":47,"author":{"gitId":"-"},"content":"});"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"// Assumptions: Contributer \u0027eugenepeh\u0027 is the first result."},{"lineNumber":50,"author":{"gitId":"-"},"content":"describe(\u0027date changes in chart view should reflect in zoom\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  it(\u0027setting \\\u0027since\\\u0027 date range changes the zoom view\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      .type(\u0027eugenepeh\u0027);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .type(\u00272018-06-11\u0027);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":60,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.gte\u0027, new Date(\u00272018-06-11\u0027));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027yong24s\u0027 is the first result."},{"lineNumber":78,"author":{"gitId":"-"},"content":"  it(\u0027setting \\\u0027since\\\u0027 date again results in a different zoom view\u0027, () \u003d\u003e {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      .type(\u0027yong24s\u0027);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      .type(\u00272018-05-20\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":87,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.gte\u0027, new Date(\u00272018-05-20\u0027));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027eugenepeh\u0027 is the first result."},{"lineNumber":106,"author":{"gitId":"-"},"content":"  it(\u0027setting the \\\u0027until\\\u0027 date changes the zoom view\u0027, () \u003d\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      .type(\u0027eugenepeh\u0027);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      .type(\u00272019-08-19\u0027);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":115,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.lte\u0027, new Date(\u00272019-08-19\u0027));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027ongspxm\u0027 is the first result."},{"lineNumber":134,"author":{"gitId":"-"},"content":"  it(\u0027setting the \\\u0027until\\\u0027 date again results in a different zoom view\u0027, () \u003d\u003e {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      .type(\u0027ongspxm\u0027);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      .type(\u00272018-07-20\u0027);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":143,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.lte\u0027, new Date(\u00272018-07-20\u0027));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027eugenepeh\u0027 is the first result."},{"lineNumber":162,"author":{"gitId":"-"},"content":"  it(\u0027setting the \\\u0027until\\\u0027 and \\\u0027since\\\u0027 date changes the zoom view\u0027, () \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      .type(\u0027eugenepeh\u0027);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      .type(\u00272018-08-27\u0027);"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      .type(\u00272019-03-09\u0027);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":174,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":185,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.lte\u0027, new Date(\u00272019-03-09\u0027));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":194,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":195,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.gte\u0027, new Date(\u00272018-08-27\u0027));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027jamessspanggg\u0027 is the first result."},{"lineNumber":203,"author":{"gitId":"-"},"content":"  it(\u0027setting the \\\u0027until\\\u0027 and \\\u0027since\\\u0027 date again results in a different zoom view\u0027, () \u003d\u003e {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      .type(\u0027jamessspanggg\u0027);"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      .type(\u00272019-07-22\u0027);"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      .type(\u00272019-08-01\u0027);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":215,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":220,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":225,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.lte\u0027, new Date(\u00272019-08-01\u0027));"},{"lineNumber":229,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      .each(($element) \u003d\u003e {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        cy.wrap($element)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"          .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":236,"author":{"gitId":"-"},"content":"          .then((titleStr) \u003d\u003e {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            const date \u003d extractDate(titleStr);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            cy.wrap(date).should(\u0027be.gte\u0027, new Date(\u00272019-07-22\u0027));"},{"lineNumber":239,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":242,"author":{"gitId":"-"},"content":"});"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"describe(\u0027range changes in chartview should reflect in zoom\u0027, () \u003d\u003e {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  const zoomKey \u003d Cypress.platform \u003d\u003d\u003d \u0027darwin\u0027 ? \u0027{meta}\u0027 : \u0027{ctrl}\u0027;"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027jamessspanggg\u0027 is the first result,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  // he does not add more commits in the future,"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  // and the sort feature is working as expected."},{"lineNumber":250,"author":{"gitId":"-"},"content":"  it(\u0027selecting the initial righthand and lefthand boundary\u0027, () \u003d\u003e {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      .type(\u0027jamessspanggg\u0027);"},{"lineNumber":254,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":255,"author":{"gitId":"jonasongg"},"content":"      .type(\u00272023-12-31\u0027);"},{"lineNumber":256,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      .click(120, 20)"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      .click(250, 20);"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":264,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":267,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":268,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2021-01-04] Update `About us` page (#1393): +55 -30 lines \u0027);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":271,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2019-12-20] [#46] Show total time after batch processing (#758): +43 -0 lines \u0027);"},{"lineNumber":274,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027jamessspanggg\u0027 is the first result,"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  // he does not add more commits in the future,"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  // and the sort feature is working as expected."},{"lineNumber":279,"author":{"gitId":"-"},"content":"  it(\u0027changing the righthand boundary\u0027, () \u003d\u003e {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      .type(\u0027jamessspanggg\u0027);"},{"lineNumber":283,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":284,"author":{"gitId":"jonasongg"},"content":"      .type(\u00272023-12-31\u0027);"},{"lineNumber":285,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      .click(120, 20)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      .click(170, 20);"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":293,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":297,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2020-05-23] [#1241] Restore checked file types (#1256): +14 -1 lines \u0027);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2019-12-20] [#46] Show total time after batch processing (#758): +43 -0 lines \u0027);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027jamessspanggg\u0027 is the first result,"},{"lineNumber":306,"author":{"gitId":"-"},"content":"  // he does not add more commits in the future,"},{"lineNumber":307,"author":{"gitId":"-"},"content":"  // and the sort feature is working as expected."},{"lineNumber":308,"author":{"gitId":"-"},"content":"  it(\u0027changing the lefthand boundary\u0027, () \u003d\u003e {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":310,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":311,"author":{"gitId":"-"},"content":"      .type(\u0027jamessspanggg\u0027);"},{"lineNumber":312,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":313,"author":{"gitId":"jonasongg"},"content":"      .type(\u00272023-12-31\u0027);"},{"lineNumber":314,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":318,"author":{"gitId":"-"},"content":"      .click(170, 20)"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      .click(250, 20);"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2021-01-04] Update `About us` page (#1393): +55 -30 lines \u0027);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":329,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":330,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2020-09-27] Add optional check for quotes in diff file regex (#1330): +1 -1 lines \u0027);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"  // Assumptions: Contributer \u0027jamessspanggg\u0027 is the first result,"},{"lineNumber":335,"author":{"gitId":"-"},"content":"  // he does not add more commits in the future,"},{"lineNumber":336,"author":{"gitId":"-"},"content":"  // and the sort feature is working as expected."},{"lineNumber":337,"author":{"gitId":"-"},"content":"  it(\u0027changing the righthand and lefthand boundary\u0027, () \u003d\u003e {"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":340,"author":{"gitId":"-"},"content":"      .type(\u0027jamessspanggg\u0027);"},{"lineNumber":341,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":342,"author":{"gitId":"jonasongg"},"content":"      .type(\u00272023-12-31\u0027);"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      .click(170, 20)"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      .click(225, 20);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":351,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":355,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":356,"author":{"gitId":"-"},"content":"      .should("},{"lineNumber":357,"author":{"gitId":"-"},"content":"        \u0027eq\u0027,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        \u0027[2021-01-04] Update `About us` page (#1393): +55 -30 lines \u0027,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":363,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2020-09-27] Add optional check for quotes in diff file regex (#1330): +1 -1 lines \u0027);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":366,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":348,"jonasongg":18}},{"path":"frontend/cypress/tests/codeView/codeView.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027code view\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027at first start shows tutorial message\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tabs-wrapper\u0027)"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-empty \u003e .title\u0027).then(($ele) \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      const expected \u003d \u0027Welcome to this RepoSense report!\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        + \u0027The charts on the left show the contribution activities, grouped by repository and author.\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        + \"To view the code attributed to a specific author, click the    icon next to that author\u0027s name.\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"        + \"To view the breakdown of commits made by a specific author, click the    icon next to that author\u0027s name.\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"        + \u0027To hide the code view and show only the activity charts, click the    icon on the centre divider.\u0027"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        + \u0027See the  User Guide  to get a better understanding of how to interpret the report.\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      const message \u003d $ele.text();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"      expect(expected).to.equal(message);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  it(\u0027can be closed\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tabs-wrapper\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    cy.get(\u0027#app #tab-resize .tab-close\u0027)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tabs-wrapper\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .should(\u0027not.exist\u0027);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  it(\u0027merge group and view code for entire repository\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .check({ force: true })"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":37,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":44,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":43,"jonasongg":1}},{"path":"frontend/cypress/tests/codeView/codeView_checkFileTypes.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027check file types\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check if all files types are visible by default\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  it(\u0027uncheck all files types should show no files\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":19,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  it(\u0027uncheck file type should uncheck all option and not show legend\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":37,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"java\"]\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    cy.get(\u0027.file \u003e .title \u003e .fileTypeLabel\u0027)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain.text\u0027, \u0027java\u0027);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    cy.get(\u0027.file \u003e .title \u003e .fileTypeLabel\u0027)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      .should(\u0027contain.text\u0027, \u0027gradle\u0027);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":57,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":54,"jonasongg":3}},{"path":"frontend/cypress/tests/codeView/codeView_filterGlob.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027filter glob\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check filter glob radio button is clickable\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // click on filter glob radio button"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // filter by file type should be unchecked"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--checkbox\u0027)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  it(\u0027check no filter glob input should show all file types by default\u0027, () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":21,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // the contents of all the files should be visible"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  it(\u0027check filter glob input should be in focus after click\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":36,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // click on input box"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      .click()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      .should(\u0027have.focus\u0027);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  it(\u0027check filter glob input should have default empty value\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":52,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  it(\u0027check deleting previously searched input to filter empty input by enter should show all file types\u0027, () \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":66,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    // enter some input"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .type(\u0027an input\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // submit some input"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .type(\u0027{enter}\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    // delete previous input"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      .clear();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // enter on empty input"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .type(\u0027{enter}\u0027);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  it(\u0027check deleting previously searched input to filter empty input by clicking should show all file types\u0027, () \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":96,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      .type(\u0027an input\u0027);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    cy.get(\u0027#submit-button\u0027)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      .clear();"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // click \u0027Filter\u0027 on empty input"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    cy.get(\u0027#submit-button\u0027)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  it(\u0027check request to filter invalid glob by enter should not show any files\u0027, () \u003d\u003e {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":123,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      .type(\u0027invalid glob\u0027);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      .type(\u0027{enter}\u0027);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // no file should be shown"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  it(\u0027check request to filter invalid glob by clicking should not show any files\u0027, () \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":147,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      .type(\u0027invalid glob\u0027);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    cy.get(\u0027#submit-button\u0027)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  it(\u0027check filter glob should only show files with that extension\u0027, () \u003d\u003e {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":170,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    // try java"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      .type(\u0027*java\u0027);"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    cy.get(\u0027#submit-button\u0027)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027).then(($files) \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      // check if there is any file with .java extension"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      if ($files.hasClass(\u0027path\u0027)) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // check each file for .java extension"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        cy.get(\u0027.title \u003e .path \u003e span\u0027)"},{"lineNumber":190,"author":{"gitId":"-"},"content":"          .then(($spans) \u003d\u003e {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            $spans.toArray().forEach((span) \u003d\u003e {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"              cy.wrap(span).contains(\u0027.java\u0027);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":194,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":198,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":189,"jonasongg":9}},{"path":"frontend/cypress/tests/codeView/codeView_hideFileDetails.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027hide all file details\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check hide all file details hides the content of all the files\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    // the contents of all the files should be visible"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    // hide the details of all the files"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // the contents of all the files should be hidden"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  it(\u0027check details of one file are shown, rest are hidden\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":31,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    // should show \u0027show all file details\u0027 only"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline a\u0027)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain.text\u0027, \u0027hide all file details\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .should(\u0027contain.text\u0027, \u0027show all file details\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // open contents of the first file"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .title .caret\u0027)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // should show both \u0027show/hide all file details\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline a\u0027)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      .should(\u0027contain.text\u0027, \u0027hide all file details\u0027)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      .should(\u0027contain.text\u0027, \u0027show all file details\u0027);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // contents of the first file should be visible"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // contents of the last file should be hidden"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  it(\u0027check file can be hidden after scrolling\u0027, () \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":71,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // contents of the first file should be visible"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    // scroll some lines in the contents of the second file"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      .scrollIntoView({ offset: { top: 500, left: 0 } });"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // title of the second file should still be visible"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file .title \u0027)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    // close contents of the second file"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .title .caret\u0027)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    // contents of the second file should not be visible"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    // title of the second file should still be visible"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file .title \u0027)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    // scroll some lines up from the top of the second file"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      .scrollIntoView({ offset: { top: -500, left: 0 } });"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    // title of the first file should be visible"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file .title \u0027)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  it(\u0027check show all file details shows the content of all the files\u0027, () \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":122,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    // hide the content of all the files"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // show the content of all the files"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  it(\u0027check collapsed file persists after sort\u0027, () \u003d\u003e {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":151,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    // hide contents of the first file"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .title .caret\u0027)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .title .path\u0027)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      .invoke(\u0027text\u0027)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    // keep track of first file by file path so test doesn\u0027t rely on correctness of sort"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      .then((filePath) \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // change sort by"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          .select(\u0027Path\u0027)"},{"lineNumber":180,"author":{"gitId":"-"},"content":"          .should(\u0027have.value\u0027, \u0027path\u0027);"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // wait until loading is finished"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        cy.get(\u0027[aria-label\u003d\"Loading\"]\u0027)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // contents of file should still be hidden"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        cy.contains(\u0027#tab-authorship .file\u0027, filePath.trim())"},{"lineNumber":188,"author":{"gitId":"-"},"content":"          .children(\u0027.file-content\u0027)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // change sort order"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"          .select(\u0027Ascending\u0027)"},{"lineNumber":194,"author":{"gitId":"-"},"content":"          .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // wait until loading is finished"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        cy.get(\u0027[aria-label\u003d\"Loading\"]\u0027)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // contents of file should still be hidden"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        cy.contains(\u0027#tab-authorship .file\u0027, filePath.trim())"},{"lineNumber":202,"author":{"gitId":"-"},"content":"          .children(\u0027.file-content\u0027)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":206,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":201,"jonasongg":5}},{"path":"frontend/cypress/tests/codeView/codeView_mergeGroupBlame.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027merge group blame in code view\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027no author breakdown shown by default\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // code panel should be visible"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // author breakdown should not be visible"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      .should(\u0027not.exist\u0027);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  it(\u0027merge group for group by repos shows author breakdown for each file\u0027, () \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":31,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // code panel should be visible"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // author breakdown should exist"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .should(\u0027exist\u0027);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  it(\u0027author breakdown visible when file content hidden\u0027, () \u003d\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":57,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // hide content of all files"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // author breakdown should be visible"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  it(\u0027author breakdown contains only file authors in alphabetical order\u0027, () \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":84,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // author breakdown contains expected author count and order"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const expectedResult \u003d [\u0027eugenepeh\u0027, \u0027jamessspanggg\u0027, \u0027yamidark\u0027, \u0027yong24s\u0027];"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .eq(2)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .children(\u0027.author-breakdown__legend\u0027)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, expectedResult.length)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      .each(($el, index) \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        cy.wrap($el).should(\u0027contain\u0027, expectedResult[index]);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  it(\u0027authors are assigned the same color in all files\u0027, () \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":112,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    // check first and second occurence of same author has the same color"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .author-breakdown__legend:contains(\\\u0027jamessspanggg\\\u0027)\u0027)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        const color \u003d $el.children().first().css(\u0027color\u0027);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-authorship .author-breakdown__legend:contains(\\\u0027jamessspanggg\\\u0027)\u0027)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          .eq(1).children().first()"},{"lineNumber":123,"author":{"gitId":"-"},"content":"          .should(\u0027have.css\u0027, \u0027color\u0027, color);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  it(\u0027author name shown on segment hover for known authors\u0027, () \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":140,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    // author name in html title attribute should be shown"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .segment.active\u0027)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      .not(\u0027.untouched\u0027)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027eugenepeh\u0027);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"  it(\u0027author name shown as unknown for missing authors\u0027, () \u003d\u003e {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":165,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    // author name in html title attribute should be unknown"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .segment.untouched\u0027)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027Unknown\u0027);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"  it(\u0027code segment has same color as author legend\u0027, () \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":189,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    // segment color should be the same as author legend color"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .segment.active\u0027)"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      .not(\u0027.untouched\u0027)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        const color \u003d $el.css(\u0027border-left-color\u0027);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        const author \u003d \u0027eugenepeh\u0027;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"          .eq(2)"},{"lineNumber":202,"author":{"gitId":"-"},"content":"          .children(\u0027.author-breakdown__legend\u0027)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"          .contains(author)"},{"lineNumber":204,"author":{"gitId":"-"},"content":"          .prev()"},{"lineNumber":205,"author":{"gitId":"-"},"content":"          .should(\u0027have.css\u0027, \u0027color\u0027, color);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"  it(\u0027colors in author breakdown match assigned colors\u0027, () \u003d\u003e {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    // group summary charts by repos"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      .select(\u0027groupByRepos\u0027);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    // check merge group checkbox"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input\u0027)"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":222,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    // author breakdown contains assigned colors"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    const expectedResult \u003d [\u0027rgb(30, 144, 255)\u0027, \u0027rgb(240, 128, 128)\u0027, \u0027rgb(0, 255, 127)\u0027, \u0027rgb(255, 215, 0)\u0027];"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files .file .title .author-breakdown\u0027)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      .eq(2)"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      .children(\u0027.author-breakdown__legend\u0027)"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      .each(($el, index) \u003d\u003e {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        cy.wrap($el).children().first().should(\u0027have.css\u0027, \u0027color\u0027, expectedResult[index]);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":235,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":226,"jonasongg":9}},{"path":"frontend/cypress/tests/codeView/codeView_reload.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027reload page\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027reload page should restore all controls\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // change sort by"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .select(\u0027LoC\u0027);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // change sort order"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      .select(\u0027Descending\u0027);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // select radio-button"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes \u003e .radio-button--checkbox\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"java\"]\u0027)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027true\u0027);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes \u003e .radio-button--checkbox\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"java\"]\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":52,"jonasongg":1}},{"path":"frontend/cypress/tests/codeView/codeView_renderFilterHash.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027render filter hash\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027search: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027\u0027);"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Enter search and test URL before and after reload */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-textfield.search_box \u003e input:visible\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .type(\u0027eugene{enter}\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027search\u003deugene\u0027);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027search\u003deugene\u0027);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  it(\u0027group by: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027groupByRepos\u0027);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027groupSelect\u003dgroupByRepos\u0027);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /* Select group by none and test URL before and after reload */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .select(\u0027groupByNone\u0027);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027groupSelect\u003dgroupByNone\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027groupSelect\u003dgroupByNone\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /* Select group by authors and test URL before and after reload */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      .select(\u0027groupByAuthors\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027groupSelect\u003dgroupByAuthors\u0027);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027groupSelect\u003dgroupByAuthors\u0027);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  it(\u0027sort groups by: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027groupTitle dsc\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dgroupTitle%20dsc\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /* Select sort by group title ascending and test URL before and after reload */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      .select(\u0027groupTitle\u0027);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dgroupTitle\u0027);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dgroupTitle\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /* Select sort by contribution descending and test URL before and after reload */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .select(\u0027totalCommits dsc\u0027);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dtotalCommits%20dsc\u0027);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dtotalCommits%20dsc\u0027);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /* Select sort by contribution ascending and test URL before and after reload */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .select(\u0027totalCommits\u0027);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dtotalCommits\u0027);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dtotalCommits\u0027);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /* Select sort by variance descending and test URL before and after reload */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      .select(\u0027variance dsc\u0027);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dvariance%20dsc\u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dvariance%20dsc\u0027);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /* Select sort by variance ascending and test URL before and after reload */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      .select(\u0027variance\u0027);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dvariance\u0027);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sort\u003dvariance\u0027);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  it(\u0027sort within groups by: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027title\u0027);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtitle\u0027);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /* Select sort by group title ascending and test URL before and after reload */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      .select(\u0027title dsc\u0027);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtitle\u0027);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtitle\u0027);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /* Select sort by contribution descending and test URL before and after reload */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      .select(\u0027totalCommits dsc\u0027);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtotalCommits%20dsc\u0027);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtotalCommits%20dsc\u0027);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /* Select sort by contribution ascending and test URL before and after reload */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      .select(\u0027totalCommits\u0027);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtotalCommits\u0027);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dtotalCommits\u0027);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /* Select sort by variance descending and test URL before and after reload */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      .select(\u0027variance dsc\u0027);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dvariance%20dsc\u0027);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dvariance%20dsc\u0027);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /* Select sort by variance ascending and test URL before and after reload */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      .select(\u0027variance\u0027);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dvariance\u0027);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027sortWithin\u003dvariance\u0027);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"  it(\u0027granularity: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.granularity \u003e select:visible\u0027)"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027commit\u0027);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027timeframe\u003dcommit\u0027);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /* Select timeframe as day and test URL before and after reload */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.granularity \u003e select:visible\u0027)"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      .select(\u0027day\u0027);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027timeframe\u003dday\u0027);"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027timeframe\u003dday\u0027);"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    /* Select timeframe as week and test URL before and after reload */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    cy.get(\u0027div.mui-select.granularity \u003e select:visible\u0027)"},{"lineNumber":220,"author":{"gitId":"-"},"content":"      .select(\u0027week\u0027);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":223,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027timeframe\u003dweek\u0027);"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027timeframe\u003dweek\u0027);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"  it(\u0027since: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /* Check initial state */"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u00272018-05-03\u0027);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027since\u003d2018-05-03\u0027);"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /* Modify since date and test URL before and after reload */"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-04\u0027);"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":245,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027since\u003d2019-06-04\u0027);"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027since\u003d2019-06-04\u0027);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"  it(\u0027until: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /* Check initial state (will require dayjs for getting current date) */"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    // cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    //   .invoke(\u0027val\u0027)"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    //   .should(\u0027eq\u0027, dayjs().format(\u0027YYYY-MM-DD\u0027));"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    // cy.url()"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    //   .should(\u0027contain\u0027, \u0027date\u003d2023-07-06\u0027);"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    /* Modify since date and test URL before and after reload */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":264,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-04\u0027);"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":267,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027until\u003d2019-06-04\u0027);"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027until\u003d2019-06-04\u0027);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"  it(\u0027breakdown by file type: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027breakdown\u003dfalse\u0027);"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      .check();"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027breakdown\u003dtrue\u0027);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"  it(\u0027merge all groups: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.merge-group \u003e input:visible\u0027)"},{"lineNumber":293,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      .check();"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":297,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027mergegroup\u003dreposense%2FRepoSense%5Bcypress%5D\u0027);"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027mergegroup\u003dreposense%2FRepoSense%5Bcypress%5D\u0027);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"  it(\u0027checked file types: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"jonasongg"},"content":"    // Assumption: gradle is the first file type and yml is the last file type to appear in the list"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":311,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain\u0027, \u0027gradle\u0027);"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":314,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027yml\u0027);"},{"lineNumber":315,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary label.filter-breakdown input:visible\u0027)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":318,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"yml\"]\u0027)"},{"lineNumber":324,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":325,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027gradle\u0027);"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":330,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027yml\u0027);"},{"lineNumber":331,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":335,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":336,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":337,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"yml\"]\u0027)"},{"lineNumber":338,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":339,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      .should(\u0027contain\u0027, \u0027gradle\u0027);"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":344,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027yml\u0027);"},{"lineNumber":345,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":351,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain\u0027, \u0027gradle\u0027);"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":354,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027yml\u0027);"},{"lineNumber":355,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":359,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":360,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":361,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#summary div.fileTypes input[id\u003d\"yml\"]\u0027)"},{"lineNumber":362,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":363,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"    cy.url()"},{"lineNumber":365,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain\u0027, \u0027gradle\u0027);"},{"lineNumber":366,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":367,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":368,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027yml\u0027);"},{"lineNumber":369,"author":{"gitId":"jonasongg"},"content":"  });"},{"lineNumber":370,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":371,"author":{"gitId":"jonasongg"},"content":"  it(\u0027code panel: sort by: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":372,"author":{"gitId":"jonasongg"},"content":"    // open the code panel"},{"lineNumber":373,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":374,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":375,"author":{"gitId":"jonasongg"},"content":"      .first()"},{"lineNumber":376,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":377,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":378,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-by \u003e select:visible\u0027)"},{"lineNumber":379,"author":{"gitId":"jonasongg"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":380,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027eq\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":381,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":382,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":383,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027authorshipSortBy\u0027);"},{"lineNumber":384,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":385,"author":{"gitId":"jonasongg"},"content":"    /* Select file name and test URL before and after reload */"},{"lineNumber":386,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-by \u003e select:visible\u0027)"},{"lineNumber":387,"author":{"gitId":"jonasongg"},"content":"      .select(\u0027fileName\u0027);"},{"lineNumber":388,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":389,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":390,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipSortBy\u003dfileName\u0027);"},{"lineNumber":391,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":392,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":393,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":394,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":395,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027%23%2F\u0027);"},{"lineNumber":396,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":397,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":398,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipSortBy\u003dfileName\u0027);"},{"lineNumber":399,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":400,"author":{"gitId":"jonasongg"},"content":"    /* Select file type and test URL before and after reload */"},{"lineNumber":401,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-by \u003e select:visible\u0027)"},{"lineNumber":402,"author":{"gitId":"jonasongg"},"content":"      .select(\u0027fileType\u0027);"},{"lineNumber":403,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":404,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":405,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipSortBy\u003dfileType\u0027);"},{"lineNumber":406,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":407,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":408,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":409,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":410,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027%23%2F\u0027);"},{"lineNumber":411,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":412,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":413,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipSortBy\u003dfileType\u0027);"},{"lineNumber":414,"author":{"gitId":"jonasongg"},"content":"  });"},{"lineNumber":415,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":416,"author":{"gitId":"jonasongg"},"content":"  it(\u0027code panel: order: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":417,"author":{"gitId":"jonasongg"},"content":"    // open the code panel"},{"lineNumber":418,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":419,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":420,"author":{"gitId":"jonasongg"},"content":"      .first()"},{"lineNumber":421,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":422,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":423,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-order \u003e select:visible\u0027)"},{"lineNumber":424,"author":{"gitId":"jonasongg"},"content":"      .invoke(\u0027val\u0027)"},{"lineNumber":425,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027eq\u0027, \u0027true\u0027); // true is Descending"},{"lineNumber":426,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":427,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":428,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027reverseAuthorshipOrder\u0027);"},{"lineNumber":429,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":430,"author":{"gitId":"jonasongg"},"content":"    /* Select ascending and test URL before and after reload */"},{"lineNumber":431,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-order \u003e select:visible\u0027)"},{"lineNumber":432,"author":{"gitId":"jonasongg"},"content":"      .select(\u0027false\u0027);"},{"lineNumber":433,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":434,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":435,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027reverseAuthorshipOrder\u003dfalse\u0027);"},{"lineNumber":436,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":437,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":438,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":439,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":440,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027%23%2F\u0027);"},{"lineNumber":441,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":442,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":443,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027reverseAuthorshipOrder\u003dfalse\u0027);"},{"lineNumber":444,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":445,"author":{"gitId":"jonasongg"},"content":"    /* Select descending and test URL before and after reload */"},{"lineNumber":446,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":447,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027div.mui-select.sort-order \u003e select:visible\u0027)"},{"lineNumber":448,"author":{"gitId":"jonasongg"},"content":"      .select(\u0027true\u0027);"},{"lineNumber":449,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":450,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":451,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027reverseAuthorshipOrder\u003dtrue\u0027);"},{"lineNumber":452,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":453,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":454,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":455,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":456,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027%23%2F\u0027);"},{"lineNumber":457,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":458,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":459,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027reverseAuthorshipOrder\u003dtrue\u0027);"},{"lineNumber":460,"author":{"gitId":"jonasongg"},"content":"  });"},{"lineNumber":461,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":462,"author":{"gitId":"jonasongg"},"content":"  it(\u0027code panel: filter by glob: url params should persist after change and reload\u0027, () \u003d\u003e {"},{"lineNumber":463,"author":{"gitId":"jonasongg"},"content":"    // open the code panel"},{"lineNumber":464,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":465,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":466,"author":{"gitId":"jonasongg"},"content":"      .first()"},{"lineNumber":467,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":468,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":469,"author":{"gitId":"jonasongg"},"content":"    // click on filter glob radio button"},{"lineNumber":470,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027.radio-button--search\u0027)"},{"lineNumber":471,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":472,"author":{"gitId":"jonasongg"},"content":"      .click();"},{"lineNumber":473,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":474,"author":{"gitId":"jonasongg"},"content":"    // enter some input"},{"lineNumber":475,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":476,"author":{"gitId":"jonasongg"},"content":"      .type(\u0027README.md\u0027);"},{"lineNumber":477,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":478,"author":{"gitId":"jonasongg"},"content":"    // submit"},{"lineNumber":479,"author":{"gitId":"jonasongg"},"content":"    cy.get(\u0027#search\u0027)"},{"lineNumber":480,"author":{"gitId":"jonasongg"},"content":"      .type(\u0027{enter}\u0027);"},{"lineNumber":481,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":482,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":483,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipFilesGlob\u003dREADME.md\u0027);"},{"lineNumber":484,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":485,"author":{"gitId":"jonasongg"},"content":"    // Some bugs appear after two reloads, so reload twice here"},{"lineNumber":486,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":487,"author":{"gitId":"jonasongg"},"content":"    cy.reload();"},{"lineNumber":488,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":489,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":490,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027not.contain\u0027, \u0027%23%2F\u0027);"},{"lineNumber":491,"author":{"gitId":"jonasongg"},"content":""},{"lineNumber":492,"author":{"gitId":"jonasongg"},"content":"    cy.url()"},{"lineNumber":493,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027contain\u0027, \u0027authorshipFilesGlob\u003dREADME.md\u0027);"},{"lineNumber":494,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":495,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":339,"jonasongg":156}},{"path":"frontend/cypress/tests/codeView/codeView_switchAuthorship.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027switch authorship\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027switch authorship view should restore all default controls\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // change sort by"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .select(\u0027Path\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027path\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // change sort order"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      .select(\u0027Ascending\u0027)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // uncheck a file type"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // switch authorship view"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":26,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // check default controls"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      .should(\u0027not.have.value\u0027, \u0027path\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027true\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes \u003e .radio-button--checkbox\u0027)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"all\"]\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"gradle\"]\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"java\"]\u0027)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .fileTypes input[id\u003d\"yml\"]\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  it(\u0027switch authorship view should not retain information from previous visited tabs\u0027, () \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Assumptions:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // The first repository has more than one person listed."},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // The first displayed file which the first and last person worked on is different."},{"lineNumber":58,"author":{"gitId":"-"},"content":"    const betweenBracketsRegex \u003d /\\((.*)\\)/;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    let firstAuthor;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    let firstFilename;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    let lastAuthor;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    // open the first code panel"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-charts \u003e .summary-charts\u0027)"},{"lineNumber":66,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      .find(\u0027.fa-code\u0027)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .panel-heading \u003e .author \u003e span\u0027)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      .then(($span) \u003d\u003e {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        firstAuthor \u003d $span.text().match(betweenBracketsRegex).pop();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        cy.url()"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          .should(\u0027include\u0027, firstAuthor);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .files \u003e .file \u003e .title \u003e .path\u0027)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      .then(($span) \u003d\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        firstFilename \u003d $span.text();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // switch authorship view"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-charts \u003e .summary-charts\u0027)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      .find(\u0027.fa-code\u0027)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .panel-heading \u003e .author \u003e span\u0027)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .should(($span) \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        lastAuthor \u003d $span.text().match(betweenBracketsRegex).pop();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        expect(firstAuthor, \u0027First author to have different name from the last author\u0027)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"          .to.not.equal(lastAuthor);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      .then(() \u003d\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        cy.url()"},{"lineNumber":103,"author":{"gitId":"-"},"content":"          .should(\u0027not.include\u0027, firstAuthor)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"          .should(\u0027include\u0027, lastAuthor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship \u003e .files \u003e .file \u003e .title \u003e .path\u0027)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      .should(($span) \u003d\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        const lastFilename \u003d $span.text();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        expect(firstFilename, \u0027First displayed filenames should be different for different authors\u0027)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          .to.not.equal(lastFilename);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":115,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":112,"jonasongg":3}},{"path":"frontend/cypress/tests/general/general.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027general\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027correctly replaces report title\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    cy.title().should(\u0027eq\u0027, \u0027RepoSense Test Report\u0027);"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":""},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"  it(\u0027correctly contains given title\u0027, () \u003d\u003e {"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"    cy.get(\u0027h1\u0027).should(\u0027contain\u0027, \u0027RepoSense Intro\u0027);"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"  });"},{"lineNumber":9,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"sopa301":4,"-":5}},{"path":"frontend/cypress/tests/zoomView/zoomView_diffstat.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027diffstat\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027should render container for contribution bars\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":4,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .stacked-bar-container\u0027)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  // Assumptions: The commit selected here is @eugenepeh\u0027s"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  // `README: Fix grammatical error` with 1 insertion and 1 deletion."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  it(\u0027should render non-empty contribution bars for commits with changes\u0027, () \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":16,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .within(() \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        cy.get(\u0027.stacked-bar__contrib--bar\u0027)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          .then((element) \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            expect(element.length).to.be.equal(2);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            expect(element[0].style[\u0027background-color\u0027]).to.be.equal(\u0027limegreen\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            expect(element[0].style.width).to.be.equal(\u00270.1%\u0027);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            expect(element[1].style[\u0027background-color\u0027]).to.be.equal(\u0027red\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            expect(element[1].style.width).to.be.equal(\u00270.1%\u0027);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  // Assumptions: The commit selected here is @eugenepeh\u0027s"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  // `Merge branch \u0027new-branch` into cypress` with 0 insertions and 0 deletions."},{"lineNumber":36,"author":{"gitId":"-"},"content":"  it(\u0027should render empty contribution bars for commits with no changes\u0027, () \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":38,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      .within(() \u003d\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        cy.get(\u0027.stacked-bar__contrib--bar\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          .then((element) \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            expect(element.length).to.be.equal(2);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            expect(element[0].style[\u0027background-color\u0027]).to.be.equal(\u0027limegreen\u0027);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            expect(element[0].style.width).to.be.equal(\u00270%\u0027);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            expect(element[1].style[\u0027background-color\u0027]).to.be.equal(\u0027red\u0027);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            expect(element[1].style.width).to.be.equal(\u00270%\u0027);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  it(\u0027should render contribution bars in proportion\u0027, () \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":58,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    let insertionWidthSum \u003d 0;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    let deletionWidthSum \u003d 0;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    let widthProportion \u003d 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .stacked-bar__contrib--bar\u0027)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .then((element) \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (let i \u003d 0; i \u003c element.length; i +\u003d 1) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          const val \u003d parseFloat(element[i].style.width.split(\u0027%\u0027)[0]);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          if (element[i].style[\u0027background-color\u0027] \u003d\u003d\u003d \u0027limegreen\u0027) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            insertionWidthSum +\u003d val;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            deletionWidthSum +\u003d val;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        widthProportion \u003d insertionWidthSum / deletionWidthSum;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    let insertions \u003d 0;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    let deletions \u003d 0;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    let actualProportion \u003d 0;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    cy.get(\u0027[data-cy\u003d\"changes\"]\u0027)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      .invoke(\u0027text\u0027)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      .then((text) \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        const temp \u003d text.split(\u0027lines\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (let i \u003d 0; i \u003c temp.length - 1; i +\u003d 1) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"          insertions +\u003d parseFloat(temp[i].split(\u0027-\u0027)[0].split(\u0027+\u0027)[1].trim());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          deletions +\u003d parseFloat(temp[i].split(\u0027-\u0027)[1].trim());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        actualProportion \u003d insertions / deletions;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        expect(widthProportion.toFixed(3)).to.be.equal(actualProportion.toFixed(3));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":93,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":89,"jonasongg":4}},{"path":"frontend/cypress/tests/zoomView/zoomView_hideCommitMessages.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027hide all commit messages \u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check hide all commit messages hides the commit messages\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be visible"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be hidden"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  it(\u0027check show all commit messages show the commit messages\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":32,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be hidden"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // show the messages of all the commits"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  it(\u0027should only display hide all commit messages when none are hidden\u0027, () \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":60,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    // should only display \u0027hide all commit messages\u0027"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      .children()"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, 1);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027hide all commit details\u0027);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  it(\u0027should only display show all commit messages when all are hidden\u0027, () \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":79,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    // should only display \u0027show all commit messages\u0027"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .children()"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, 1);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027show all commit details\u0027);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  it(\u0027should display both show and hide all commit messages when some are hidden\u0027, () \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":102,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    // hide the message body of the first commit"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message \u003e a .tooltip\u0027)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // should now display both \u0027hide all \u0026 show all commit messages\u0027"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      .children()"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, 2);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      .eq(0)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027show all commit details\u0027);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027hide all commit details\u0027);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  it(\u0027check show all and hide all commit messages only toggle current commits\u0027, () \u003d\u003e {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    // Assumptions: the fifth commit (19e3294) of the first author of the first repo"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    // contains changes in only .java files."},{"lineNumber":132,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":133,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // uncheck java file type"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    // should only display \u0027show all commit messages\u0027"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      .children()"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, 1);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027show all commit details\u0027);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    // check java file type"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      .check()"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    // commit body of the merge commit should be visible"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      .eq(0)"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    // commit body of the md commit should not be visible"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    // commit body of the java commit should be visible"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      .eq(4)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      .scrollIntoView()"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    // should now display both \u0027hide all \u0026 show all commit messages\u0027"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      .children()"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      .should(\u0027have.length\u0027, 2);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      .eq(0)"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027show all commit details\u0027);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      .should(\u0027have.text\u0027, \u0027hide all commit details\u0027);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  it(\u0027check hidden commit message persists after sort\u0027, () \u003d\u003e {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":194,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    // hide the message body of the first commit"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message \u003e a .tooltip\u0027)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.visible\u0027);"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .hash\u0027)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      .invoke(\u0027text\u0027)"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    // keep track of first commit by hash so test doesn\u0027t rely on correctness of sort"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      .then((hash) \u003d\u003e {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        // change sort by"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":218,"author":{"gitId":"-"},"content":"          .select(\u0027LoC\u0027)"},{"lineNumber":219,"author":{"gitId":"-"},"content":"          .should(\u0027have.value\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // message body should still be hidden"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        cy.contains(\u0027#tab-zoom .commit-message\u0027, hash)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"          .children(\u0027.body\u0027)"},{"lineNumber":224,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        // change sort order"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"          .select(\u0027Ascending\u0027)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"          .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        // message body should still be hidden"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        cy.contains(\u0027#tab-zoom .commit-message\u0027, hash)"},{"lineNumber":233,"author":{"gitId":"-"},"content":"          .children(\u0027.body\u0027)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"          .should(\u0027not.be.visible\u0027);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":237,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":230,"jonasongg":7}},{"path":"frontend/cypress/tests/zoomView/zoomView_mergeCommits.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027include merge commits in zoom view\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027show merge commits when all file types selected\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the commits panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // check if the icon for merge commits is visible"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027.code-merge-icon\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .should(\u0027exist\u0027);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  it(\u0027hide merge commits when some file types unselected\u0027, () \u003d\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // open the commits panel"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":17,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // uncheck the java file type"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // check if the icon for merge commits is not visible"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027.code-merge-icon\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027not.exist\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":30,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":28,"jonasongg":2}},{"path":"frontend/cypress/tests/zoomView/zoomView_rampChart.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027show ramp chart for period\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  // Assumptions: The commit messages on the zoom view are"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  // correctly filtered according to the selected period."},{"lineNumber":4,"author":{"gitId":"-"},"content":"  it(\u0027show ramp chart for all commits by default\u0027, () \u003d\u003e {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":7,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    // ramp chart should be visible"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .ramp\u0027)"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // ramp chart should have the same number of slices as commits"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      .its(\u0027length\u0027).then(($length) \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"          .should(\u0027have.length\u0027, $length);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  // Assumptions: The commit messages on the zoom view are"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  // correctly filtered according to the selected period."},{"lineNumber":25,"author":{"gitId":"-"},"content":"  it(\u0027show ramp chart for selected commits when date range changed\u0027, () \u003d\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // change since date"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .type(\u00272018-06-10\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-10\u0027);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":36,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    // ramp chart should be visible"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .ramp\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // ramp chart should have the same number of slices as commits"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      .its(\u0027length\u0027).then(($length) \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          .should(\u0027have.length\u0027, $length);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  // Assumptions: The commit messages on the zoom view are"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  // correctly filtered according to the selected period."},{"lineNumber":54,"author":{"gitId":"-"},"content":"  it(\u0027show ramp chart for selected commits when zooming\u0027, () \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    const zoomKey \u003d Cypress.platform \u003d\u003d\u003d \u0027darwin\u0027 ? \u0027{meta}\u0027 : \u0027{ctrl}\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // zoom into ramp on summary panel"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    cy.get(\u0027body\u0027).type(zoomKey, { release: false })"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .get(\u0027#summary-charts .summary-chart__ramp .ramp\u0027)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .click(10, 20)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      .click(50, 20);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    // commits panel should be visible"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom\u0027)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // ramp chart should be visible"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .ramp\u0027)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    // ramp chart should have the same number of slices as commits"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      .its(\u0027length\u0027).then(($length) \u003d\u003e {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          .should(\u0027have.length\u0027, $length);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":82,"author":{"gitId":"-"},"content":"  it(\u0027ramps should be between start date and end date\u0027, () \u003d\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    // change since date"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      .type(\u00272018-06-10\u0027);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-10\u0027);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":93,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    // first ramp should be for commit after start date"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2018-06-12] Setup AppVeyor CI (#142): +19 -0 lines \u0027);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    // last ramp should be for commit before end date"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027title\u0027)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027[2019-03-25] [#622] CsvParser#parse: fix error handling of `processLine` (#623): +30 -10 lines \u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":112,"author":{"gitId":"-"},"content":"  it(\u0027ramp should have expected properties\u0027, () \u003d\u003e {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-10\u0027);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":119,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    // last ramp should have expected z-index"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      .should(\u0027have.css\u0027, \u0027z-index\u0027, \u002739\u0027);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    // last ramp should have expected width"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      .should(\u0027have.css\u0027, \u0027border-left-width\u0027, \u00277px\u0027);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  // Assumptions: The second author on the summary panel"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  // should be \u0027jamessspanggg\u0027."},{"lineNumber":136,"author":{"gitId":"-"},"content":"  it(\u0027deletes commit ramp should have expected properties\u0027, () \u003d\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    // change since date"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"since\"]:visible\u0027)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      .type(\u00272019-07-16\u0027);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      .type(\u00272019-07-29\u0027);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":147,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    // deletes commit ramp should have expected color"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    cy.get(\u0027[title\u003d\"[2019-07-24] [#828] Revert \\\\\"v_summary.js: remove redundant calls \u0027"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     + \u0027to getFiltered() (#800)\\\\\" (#832): +0 -9 lines \"]\u0027)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      .should(\u0027have.class\u0027, \u0027ramp__slice\u0027)"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      .should(\u0027have.css\u0027, \u0027border-bottom\u0027, \u002748px solid rgba(244, 67, 54, 0.7)\u0027);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":161,"author":{"gitId":"-"},"content":"  it(\u0027merge commit ramp should have expected properties\u0027, () \u003d\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      .type(\u00272024-03-04\u0027);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":168,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    // merge commit ramp should have expected color"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      .eq(1)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e $el.css(\u0027border-bottom\u0027))"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      .then((border1) \u003d\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"          .first()"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          .then(($el) \u003d\u003e $el.css(\u0027border-bottom\u0027))"},{"lineNumber":180,"author":{"gitId":"-"},"content":"          .then((border2) \u003d\u003e {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            expect(border1).to.be.eq(border2);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":184,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":188,"author":{"gitId":"-"},"content":"  it(\u0027ramps from different days should have expected relative properties\u0027, () \u003d\u003e {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-10\u0027);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":195,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    // last 2 ramps should have expected relative z-indices"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e $el.css(\u0027z-index\u0027))"},{"lineNumber":203,"author":{"gitId":"-"},"content":"      .then(parseInt) // get 1st z-index"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      .then((index1) \u003d\u003e {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"          .eq(1)"},{"lineNumber":207,"author":{"gitId":"-"},"content":"          .then(($el) \u003d\u003e $el.css(\u0027z-index\u0027))"},{"lineNumber":208,"author":{"gitId":"-"},"content":"          .then(parseInt) // get 2nd z-index"},{"lineNumber":209,"author":{"gitId":"-"},"content":"          .then((index2) \u003d\u003e {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            expect(index1).to.be.gt(index2);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    // last 2 ramps should have expected relative distances from the right"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e $el.css(\u0027right\u0027))"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      .then(parseFloat) // get 1st distance"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      .then((distance1) \u003d\u003e {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":221,"author":{"gitId":"-"},"content":"          .eq(1)"},{"lineNumber":222,"author":{"gitId":"-"},"content":"          .then(($el) \u003d\u003e $el.css(\u0027right\u0027))"},{"lineNumber":223,"author":{"gitId":"-"},"content":"          .then(parseFloat) // get 2nd distance"},{"lineNumber":224,"author":{"gitId":"-"},"content":"          .then((distance2) \u003d\u003e {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            expect(distance1).to.be.lt(distance2);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":232,"author":{"gitId":"-"},"content":"  it(\u0027ramps from the same day should have expected relative properties\u0027, () \u003d\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      .type(\u00272023-03-04\u0027);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":239,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    // last 2 ramps should have expected relative z-indices"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":245,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e $el.css(\u0027z-index\u0027))"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      .then(parseInt) // get 1st z-index"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      .then((index1) \u003d\u003e {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":250,"author":{"gitId":"-"},"content":"          .eq(1)"},{"lineNumber":251,"author":{"gitId":"-"},"content":"          .then(($el) \u003d\u003e $el.css(\u0027z-index\u0027))"},{"lineNumber":252,"author":{"gitId":"-"},"content":"          .then(parseInt) // get 2nd z-index"},{"lineNumber":253,"author":{"gitId":"-"},"content":"          .then((index2) \u003d\u003e {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            expect(index1).to.be.eq(index2);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    // last 2 ramps should have expected relative distances from the right"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      .then(($el) \u003d\u003e $el.css(\u0027right\u0027))"},{"lineNumber":262,"author":{"gitId":"-"},"content":"      .then(parseFloat) // get 1st distance"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      .then((distance1) \u003d\u003e {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":265,"author":{"gitId":"-"},"content":"          .eq(1)"},{"lineNumber":266,"author":{"gitId":"-"},"content":"          .then(($el) \u003d\u003e $el.css(\u0027right\u0027))"},{"lineNumber":267,"author":{"gitId":"-"},"content":"          .then(parseFloat) // get 2nd distance"},{"lineNumber":268,"author":{"gitId":"-"},"content":"          .then((distance2) \u003d\u003e {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            expect(distance1).to.be.gt(distance2);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":271,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":272,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"  // Assumptions: The first author on the summary panel"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  // should be \u0027eugenepeh\u0027."},{"lineNumber":276,"author":{"gitId":"-"},"content":"  it(\u0027ramp should link to commit webpage\u0027, () \u003d\u003e {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    // change until date"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    cy.get(\u0027input[name\u003d\"until\"]:visible\u0027)"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      .type(\u00272019-06-10\u0027);"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":283,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    // last ramp should have expected link"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .ramp .ramp__slice\u0027)"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      .invoke(\u0027attr\u0027, \u0027href\u0027)"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      .should(\u0027eq\u0027, \u0027https://github.com/reposense/RepoSense/commit/19e32944d4c67ed0b6bdc5697016536cc9e17ed9\u0027);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":293,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":284,"jonasongg":9}},{"path":"frontend/cypress/tests/zoomView/zoomView_reload.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027reload page\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027reload page should restore all controls\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // change sort by"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select:visible\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .select(\u0027LoC\u0027);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // change sort order"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      .select(\u0027Ascending\u0027);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"gradle\"]\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"scss\"]\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.reload();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select:visible\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"all\"]\u0027)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"gradle\"]\u0027)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"scss\"]\u0027)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":42,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":41,"jonasongg":1}},{"path":"frontend/cypress/tests/zoomView/zoomView_selectFileTypes.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027check file types \u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check if all file types are visible by default\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":4,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .zoom__day\u0027, { timeout: 90000 })"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      .should(\u0027exist\u0027);"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"all\"]\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  it(\u0027uncheck all file types should show no files\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":17,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .zoom__day\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027exist\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"all\"]\u0027)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      .uncheck();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .zoom__day\u0027)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .should(\u0027not.exist\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  it(\u0027uncheck file type should uncheck all option\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // Assumptions: the first author of the first repo"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // committed .java, .js and .gradle files."},{"lineNumber":34,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":35,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"js\"]\u0027)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"all\"]\u0027)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  it(\u0027a commit should not be seen when all of its file types are unchecked\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    // Assumptions: the third commit (19e3294) of the first author of the first repo"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // contains changes in only .java files."},{"lineNumber":54,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":55,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027.zoom__day \u003e .commit-message\u0027)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .eq(2)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .within(() \u003d\u003e {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        cy.get(\u0027.hash\u0027)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          .should(\u0027have.text\u0027, \u002719e3294\u0027);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        cy.get(\u0027.fileTypeLabel\u0027)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          .should(\u0027have.text\u0027, \u0027java\u0027);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    cy.get(\u0027.zoom__day \u003e .commit-message\u0027)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      .should(\u0027not.contain.text\u0027, \u002719e3294\u0027);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  it.only(\u0027unchecked file type label can still remain in a commit of multiple file types\u0027, () \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // Assumptions: the eighth commit (5ab0322) of the first author of the first repo"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    // contains changes in both .java and .md files."},{"lineNumber":79,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":80,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    cy.get(\u0027.zoom__day \u003e .commit-message\u0027)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      .eq(7)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      .within(() \u003d\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        cy.get(\u0027.hash\u0027)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          .should(\u0027have.text\u0027, \u00275ab0322\u0027);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        cy.get(\u0027.fileTypeLabel\u0027)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          .should(\u0027contain.text\u0027, \u0027java\u0027)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          .should(\u0027contain.text\u0027, \u0027md\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    cy.get(\u0027.zoom__day \u003e .commit-message\u0027)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    // note that the same commit is now of fourth order since other commits"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    // were filtered out"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      .eq(3)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      .within(() \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        cy.get(\u0027.hash\u0027)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"          .should(\u0027have.text\u0027, \u00275ab0322\u0027);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        cy.get(\u0027.fileTypeLabel\u0027)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"          .should(\u0027contain.text\u0027, \u0027java\u0027)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"          .should(\u0027contain.text\u0027, \u0027md\u0027);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":110,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":105,"jonasongg":5}},{"path":"frontend/cypress/tests/zoomView/zoomView_switchZoom.cy.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027switch zoom\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027switch zoom view should restore all default controls\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":5,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    // change sort by"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select:visible\u0027)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      .select(\u0027LoC\u0027)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027linesOfCode\u0027);"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // change sort order"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      .select(\u0027Ascending\u0027)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // uncheck a file type"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"gradle\"]\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .uncheck()"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      .should(\u0027not.be.checked\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // switch zoom view"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":26,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tabs-wrapper\u0027).scrollTo(\u0027top\u0027);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // check default controls"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select:visible\u0027)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      .should(\u0027not.have.value\u0027, \u0027linesOfCode\u0027)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027time\u0027);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .should(\u0027have.value\u0027, \u0027true\u0027);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"all\"]\u0027)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"gradle\"]\u0027)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"md\"]\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .fileTypes input[value\u003d\"yml\"]\u0027)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .should(\u0027be.checked\u0027);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  it(\u0027switch zoom view should not retain information from previous visited tabs\u0027, () \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // Assumptions:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // The first repository has more than one person listed."},{"lineNumber":59,"author":{"gitId":"-"},"content":"    // The first day in which the first and last person contributed is different."},{"lineNumber":60,"author":{"gitId":"-"},"content":"    const betweenBracketsRegex \u003d /\\((.*)\\)/;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    let firstAuthor;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    let firstDay;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    let lastAuthor;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-charts \u003e .summary-charts\u0027)"},{"lineNumber":68,"author":{"gitId":"jonasongg"},"content":"      .should(\u0027exist\u0027)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .find(\u0027.fa-list-ul\u0027)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .panel-heading \u003e .author \u003e span\u0027)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .then(($span) \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        firstAuthor \u003d $span.text().match(betweenBracketsRegex).pop();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        cy.url()"},{"lineNumber":79,"author":{"gitId":"-"},"content":"          .should(\u0027include\u0027, firstAuthor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .zoom__day \u003e h3\u0027)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      .then(($h3) \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        firstDay \u003d $h3.text();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // switch zoom view"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    cy.get(\u0027#summary-charts \u003e .summary-charts\u0027)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      .should(\u0027be.visible\u0027)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .find(\u0027.fa-list-ul\u0027)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      .click();"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .panel-heading \u003e .author \u003e span\u0027)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      .last()"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      .should(($span) \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        lastAuthor \u003d $span.text().match(betweenBracketsRegex).pop();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expect(firstAuthor, \u0027First author to have different name from the last author\u0027)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          .to.not.equal(lastAuthor);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      .then(() \u003d\u003e {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        cy.url()"},{"lineNumber":105,"author":{"gitId":"-"},"content":"          .should(\u0027not.include\u0027, firstAuthor)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"          .should(\u0027include\u0027, lastAuthor);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom \u003e .zoom__day \u003e h3\u0027)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      .first()"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      .should(($h3) \u003d\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        const lastDay \u003d $h3.text();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        expect(firstDay, \u0027First displayed date should be different for different authors by assumptions\u0027)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"          .to.not.equal(lastDay);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":117,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"-":114,"jonasongg":3}},{"path":"frontend/package-lock.json","fileType":"json","isIgnored":true,"lines":[],"authorContributionMap":{"sopa301":4106,"-":22724}},{"path":"frontend/package.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"name\": \"reposense\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"version\": \"1.0.0\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \"description\": \"[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense) [![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \"author\": \"\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \"scripts\": {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"serve\": \"vue-cli-service serve\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"build\": \"vue-cli-service build\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"lint\": \"eslint src/**/*.{ts,vue} cypress/tests/**/*.js cypress/support.js \u0026\u0026 stylelint ./src/**/*.{vue,scss} \u0026\u0026 npm run puglint\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"devbuild\": \"vue-cli-service build --mode development\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"lintfix\": \"eslint --fix src/**/*.{ts,vue} cypress/tests/**/*.js cypress/support.js \u0026\u0026 stylelint --fix ./src/**/*.{vue,scss}\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"puglint\": \"pug-lint-vue src\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"serveOpen\": \"vue-cli-service serve --open\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \"main\": \"index.js\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \"dependencies\": {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"@fontsource/titillium-web\": \"^4.5.3\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"@fortawesome/fontawesome-svg-core\": \"^6.0.0\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"@fortawesome/free-brands-svg-icons\": \"^6.0.0\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"@fortawesome/free-solid-svg-icons\": \"^6.0.0\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"@fortawesome/vue-fontawesome\": \"^3.0.3\","},{"lineNumber":22,"author":{"gitId":"sopa301"},"content":"    \"@types/markdown-it\": \"^13.0.7\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"@types/minimatch\": \"^5.1.2\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"@types/seedrandom\": \"^3.0.5\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"core-js\": \"^3.6.5\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"highlight.js\": \"^10.5.0\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"jszip\": \"^3.5.0\","},{"lineNumber":28,"author":{"gitId":"sopa301"},"content":"    \"markdown-it\": \"^14.0.0\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"minimatch\": \"^5.0.1\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"muicss\": \"^0.10.3\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"normalize.css\": \"^8.0.1\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"pug-lint-vue\": \"^0.4.0\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"seedrandom\": \"^3.0.5\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"vue\": \"^3.2.47\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"vue-loading-overlay\": \"^5.0.3\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"vue-observe-visibility\": \"^1.0.0\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"vue-router\": \"^4.1.6\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"vuex\": \"^4.0.2\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"zod\": \"^3.22.3\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \"devDependencies\": {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"@babel/eslint-parser\": \"^7.17.0\","},{"lineNumber":43,"author":{"gitId":"sopa301"},"content":"    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\","},{"lineNumber":44,"author":{"gitId":"sopa301"},"content":"    \"@typescript-eslint/parser\": \"^6.0.0\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"@vue/cli-plugin-babel\": \"^5.0.4\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"@vue/cli-plugin-eslint\": \"^5.0.4\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"@vue/cli-plugin-typescript\": \"^5.0.4\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"@vue/cli-service\": \"^5.0.4\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"@vue/compiler-sfc\": \"^3.2.47\","},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"@vue/eslint-config-typescript\": \"^10.0.0\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"eslint\": \"^8.33.0\","},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"eslint-config-airbnb-base\": \"^15.0.0\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"eslint-config-airbnb-typescript\": \"^17.0.0\","},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"eslint-plugin-import\": \"^2.26.0\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"eslint-plugin-vue\": \"^8.4.1\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"postcss-html\": \"^1.4.1\","},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \"pug\": \"^3.0.2\","},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"pug-plain-loader\": \"^1.1.0\","},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \"sass\": \"^1.58.0\","},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"sass-loader\": \"^12.6.0\","},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"stylelint\": \"^14.7.1\","},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"stylelint-config-recommended-scss\": \"^6.0.0\","},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \"stylelint-config-recommended-vue\": \"^1.4.0\","},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \"stylelint-order\": \"^5.0.0\","},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \"stylelint-scss\": \"^4.2.0\","},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \"stylelint-webpack-plugin\": \"^3.2.0\","},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \"typescript\": \"^4.9.5\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \"bugs\": {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    \"url\": \"https://github.com/reposense/RepoSense/issues\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \"directories\": {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \"doc\": \"docs\""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  \"homepage\": \"https://github.com/reposense/RepoSense#readme\","},{"lineNumber":76,"author":{"gitId":"-"},"content":"  \"license\": \"ISC\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"  \"repository\": {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \"type\": \"git\","},{"lineNumber":79,"author":{"gitId":"-"},"content":"    \"url\": \"git+https://github.com/reposense/RepoSense.git\""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sopa301":4,"-":77}},{"path":"src/main/java/reposense/RepoSense.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.git.GitConfig;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.RunConfigurationDecider;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":18,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":19,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":20,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.system.ReportServer;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * The main RepoSense class."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class RepoSense {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final int SERVER_PORT_NUMBER \u003d 9000;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss yyyy z\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VERSION_UNSPECIFIED \u003d \"unspecified\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * The entry point of the program."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Additional flags are provided by the user in {@code args}."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            TimeUtil.startTimer();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            CliArguments cliArguments \u003d ArgsParser.parse(args);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs \u003d null;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            if (cliArguments.isViewModeOnly()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getReportDirectoryPath().toAbsolutePath());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            configs \u003d RunConfigurationDecider.getRunConfiguration(cliArguments).getRepoConfigurations();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            reportConfig \u003d cliArguments.getReportConfiguration();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            RepoConfiguration.setZoneIdToRepoConfigs(configs, cliArguments.getZoneId());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                    cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            RepoConfiguration.setFileSizeLimitIgnoredToRepoConfigs(configs,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                    cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(configs,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                    cliArguments.isLastModifiedDateIncluded());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(configs,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                    cliArguments.isShallowCloningPerformed());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(configs,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            List\u003cString[]\u003e globalGitConfig \u003d GitConfig.getGlobalGitLfsConfig();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            if (globalGitConfig.size() !\u003d 0) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                GitConfig.setGlobalGitLfsConfig(GitConfig.SKIP_SMUDGE_CONFIG_SETTINGS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"            ReportGenerator reportGenerator \u003d new ReportGenerator();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            List\u003cPath\u003e reportFoldersAndFiles \u003d reportGenerator.generateReposReport(configs,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    cliArguments.getOutputFilePath().toAbsolutePath().toString(),"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    cliArguments.getAssetsFilePath().toAbsolutePath().toString(), reportConfig,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    formatter.format(ZonedDateTime.now(cliArguments.getZoneId())),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                    cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                    cliArguments.getNumCloningThreads(), cliArguments.getNumAnalysisThreads(),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    TimeUtil::getElapsedTime, cliArguments.getZoneId(), cliArguments.isFreshClonePerformed());"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"            FileUtil.zipFoldersAndFiles(reportFoldersAndFiles, cliArguments.getOutputFilePath().toAbsolutePath(),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                    \".json\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"            // Set back to user\u0027s initial global git lfs config"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            GitConfig.setGlobalGitLfsConfig(globalGitConfig);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.info(TimeUtil.getElapsedTimeMessage());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"            if (cliArguments.isAutomaticallyLaunching()) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        } catch (IOException | ParseException | InvalidCsvException | InvalidHeaderException e) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException e) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            // help message was printed by the ArgumentParser; it is safe to exit."},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        LogsManager.moveLogFileToOutputFolder();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static String getVersion() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String version \u003d RepoSense.class.getPackage().getImplementationVersion();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (version \u003d\u003d null || version.equals(VERSION_UNSPECIFIED)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            version \u003d System.getProperty(\"version\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return version;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":3,"-":110}},{"path":"src/main/java/reposense/authorship/FileInfoAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.authorship.analyzer.AnnotatorAnalyzer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":25,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Analyzes the target and information given in the {@link FileInfo}."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class FileInfoAnalyzer {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoAnalyzer.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_NAME_OFFSET \u003d \"author \".length();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_EMAIL_OFFSET \u003d \"author-mail \".length();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIME_OFFSET \u003d \"author-time \".length();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIMEZONE_OFFSET \u003d \"author-tz \".length();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final int FULL_COMMIT_HASH_LENGTH \u003d 40;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_MISSING \u003d \"Unable to analyze the file located at \\\"%s\\\" \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"as the file is missing from your system. Skipping this file.\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT \u003d \"Repo %s was cloned using \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"shallow cloning. As such, the \\\"last modified date\\\" values may be incorrect.\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Analyzes the lines of the file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@link Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public FileResult analyzeTextFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (FileUtil.isEmptyFile(config.getRepoRoot(), relativePath)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        aggregateBlameAuthorModifiedAndDateInfo(config, fileInfo);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AnnotatorAnalyzer.aggregateAnnotationAuthorInfo(fileInfo, config.getAuthorConfig());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!config.getAuthorList().isEmpty() \u0026\u0026 fileInfo.isAllAuthorsIgnored(config.getAuthorList())) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return generateTextFileResult(fileInfo);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Analyzes the binary file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@link Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public FileResult analyzeBinaryFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return generateBinaryFileResult(config, fileInfo);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Generates and returns a {@link FileResult} with the authorship results from {@code fileInfo} consolidated."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private FileResult generateTextFileResult(FileInfo fileInfo) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        for (LineInfo line : fileInfo.getLines()) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Author author \u003d line.getAuthor();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, authorContributionMap.getOrDefault(author, 0) + 1);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return FileResult.createTextFileResult("},{"lineNumber":105,"author":{"gitId":"-"},"content":"            fileInfo.getPath(), fileInfo.getFileType(), fileInfo.getLines(), authorContributionMap,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            fileInfo.exceedsFileLimit());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Generates and returns a {@link FileResult} with the authorship results from binary {@code fileInfo} consolidated."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Authorship results are indicated in the {@code authorContributionMap} as contributions with zero line counts."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns {@code null} if none of the {@link Author} specified in {@code config} contributed to the file in"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * {@code fileInfo}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private FileResult generateBinaryFileResult(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        List\u003cString[]\u003e authorsString \u003d GitLog.getFileAuthors(config, fileInfo.getPath());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (authorsString.size() \u003d\u003d 0) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Set\u003cAuthor\u003e authors \u003d new HashSet\u003c\u003e();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (String[] lineDetails : authorsString) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String authorName \u003d lineDetails[0];"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            String authorEmail \u003d lineDetails[1];"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            authors.add(config.getAuthor(authorName, authorEmail));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        for (Author author : authors) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, 0);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return FileResult.createBinaryFileResult(fileInfo.getPath(), fileInfo.getFileType(), authorContributionMap);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Sets the {@link Author} and {@link LocalDateTime} for each line in {@code fileInfo} based on the git blame"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * analysis of the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * The {@code config} is used to obtain the root directory for running git blame as well as other parameters used"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * in determining which author to assign to each line and whether to set the last modified date for a"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * {@code lineInfo}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void aggregateBlameAuthorModifiedAndDateInfo(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String blameResults;"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!config.isFindingPreviousAuthorsPerformed()) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            blameResults \u003d getGitBlameResult(config, fileInfo.getPath());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            blameResults \u003d getGitBlameWithPreviousAuthorsResult(config, fileInfo.getPath());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"asdfghjkxd"},"content":"        String[] blameResultLines \u003d StringsUtil.NEWLINE.split(blameResults);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Path filePath \u003d Paths.get(fileInfo.getPath());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        LocalDateTime sinceDate \u003d config.getSinceDate();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        LocalDateTime untilDate \u003d config.getUntilDate();"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        for (int lineCount \u003d 0; lineCount \u003c blameResultLines.length; lineCount +\u003d 5) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            String commitHash \u003d blameResultLines[lineCount].substring(0, FULL_COMMIT_HASH_LENGTH);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            String authorName \u003d blameResultLines[lineCount + 1].substring(AUTHOR_NAME_OFFSET);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            String authorEmail \u003d blameResultLines[lineCount + 2]"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                    .substring(AUTHOR_EMAIL_OFFSET).replaceAll(\"\u003c|\u003e\", \"\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            Long commitDateInMs \u003d Long.parseLong(blameResultLines[lineCount + 3].substring(AUTHOR_TIME_OFFSET)) * 1000;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            LocalDateTime commitDate \u003d LocalDateTime.ofInstant(Instant.ofEpochMilli(commitDateInMs),"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                    config.getZoneId());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            Author author \u003d config.getAuthor(authorName, authorEmail);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"            if (!fileInfo.isFileLineTracked(lineCount / 5) || author.isIgnoringFile(filePath)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    || CommitHash.isInsideCommitList(commitHash, config.getIgnoreCommitList())"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    || commitDate.compareTo(sinceDate) \u003c 0 || commitDate.compareTo(untilDate) \u003e 0) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                author \u003d Author.UNKNOWN_AUTHOR;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"            if (config.isLastModifiedDateIncluded()) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                if (config.isShallowCloningPerformed()) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":177,"author":{"gitId":"-"},"content":"                            MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT, config.getRepoName()));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"                fileInfo.setLineLastModifiedDate(lineCount / 5, commitDate);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            fileInfo.setLineAuthor(lineCount / 5, author);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Returns the analysis result from running git blame on {@code filePath} with reference to the root directory"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * given in {@code config}."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private String getGitBlameResult(RepoConfiguration config, String filePath) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return GitBlame.blame(config.getRepoRoot(), filePath);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Returns the analysis result from running git blame with finding previous authors enabled on {@code filePath}"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * with reference to the root directory given in {@code config}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    private String getGitBlameWithPreviousAuthorsResult(RepoConfiguration config, String filePath) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return GitBlame.blameWithPreviousAuthors(config.getRepoRoot(), filePath);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":199}},{"path":"src/main/java/reposense/authorship/FileInfoExtractor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.GitDiff;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":30,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Extracts out all the relevant {@code FileInfo} from the repository."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class FileInfoExtractor {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoExtractor.class);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_EXTRACTING_FILE_INFO \u003d \"Extracting relevant file info from %s (%s)...\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FILE_PATH \u003d \"\\\"%s\\\" is an invalid file path for current OS or \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"indicates a possible regex match issue. Skipping this directory.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_SIZE_LIMIT_EXCEEDED \u003d \"File \\\"%s\\\" has %dB size. The file size \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"limit is set at %dB. %s\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_ANALYSIS_SKIPPED \u003d \"Skipping analysis of this file...\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_EXCLUDED_FROM_REPORT \u003d \"Exact line diffs will be excluded from report...\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String DIFF_FILE_CHUNK_SEPARATOR \u003d \"\\ndiff --git \\\"?\\\u0027?a/.*\\n\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String LINE_CHUNKS_SEPARATOR \u003d \"\\n@@ \";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String LINE_INSERTED_SYMBOL \u003d \"+\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String STARTING_LINE_NUMBER_GROUP_NAME \u003d \"startingLineNumber\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String FILE_CHANGED_GROUP_NAME \u003d \"filePath\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String FILE_DELETED_SYMBOL \u003d \"dev/null\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MATCH_GROUP_FAIL_MESSAGE_FORMAT \u003d \"Failed to match the %s group for:\\n%s\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String BINARY_FILE_LINE_DIFF_RESULT \u003d \"-\\t-\\t\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final int LINE_CHANGED_HEADER_INDEX \u003d 0;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final Pattern STARTING_LINE_NUMBER_PATTERN \u003d Pattern.compile("},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \"-(\\\\d)+(,)?(\\\\d)* \\\\+(?\u003cstartingLineNumber\u003e\\\\d+)(,)?(\\\\d)* @@\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final Pattern FILE_CHANGED_PATTERN \u003d Pattern.compile(\"\\n(\\\\+){3} b?/(?\u003cfilePath\u003e.*?)\\t?\\n\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant non-binary files given in {@code config}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public List\u003cFileInfo\u003e extractTextFileInfos(RepoConfiguration config) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_START_EXTRACTING_FILE_INFO, config.getLocation(), config.getBranch()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // checks out to the latest commit of the date range to ensure the FileInfo generated correspond to the"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // git blame file analyze output"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), config.getUntilDate(),"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    config.getZoneId());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (CommitNotFoundException cnfe) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String lastCommitHash \u003d GitRevList.getCommitHashUntilDate("},{"lineNumber":77,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), config.getBranch(), config.getSinceDate(), config.getZoneId());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        fileInfos \u003d (lastCommitHash.isEmpty())"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                ? getAllFileInfo(config, false)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                : getEditedFileInfos(config, lastCommitHash);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        fileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant binary files given in {@code config}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public List\u003cFileInfo\u003e extractBinaryFileInfos(RepoConfiguration config) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d getAllFileInfo(config, true);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        binaryFileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return binaryFileInfos;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns a list of {@link FileInfo}s for all files in the repo with lines marked indicating if they were edited"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * in between the current commit and the commit given by {@code lastCommitHash}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * The repo is given by {@code config}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public List\u003cFileInfo\u003e getEditedFileInfos(RepoConfiguration config, String lastCommitHash) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String fullDiffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), lastCommitHash);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // no diff between the 2 commits, return an empty list"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (fullDiffResult.isEmpty()) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String[] fileDiffResultList \u003d fullDiffResult.split(DIFF_FILE_CHUNK_SEPARATOR);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e textFilesSet \u003d getFiles(config, false);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        for (String fileDiffResult : fileDiffResultList) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Matcher filePathMatcher \u003d FILE_CHANGED_PATTERN.matcher(fileDiffResult);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"            // diff result does not have the markers to indicate that file has any line changes, skip it"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (!filePathMatcher.find()) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"            String filePath \u003d filePathMatcher.group(FILE_CHANGED_GROUP_NAME);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"            if (filePath.equals(FILE_DELETED_SYMBOL) // file is deleted, skip it as well"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    || !isValidTextFile(filePath, textFilesSet)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                    || !config.getFileTypeManager().isInsideWhitelistedFormats(filePath)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    || FileUtil.isFileIgnoredByGlob(config, Paths.get(filePath))) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"            FileInfo currentFileInfo \u003d generateFileInfo(config, filePath);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            setLinesToTrack(currentFileInfo, fileDiffResult);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            if (currentFileInfo.isFileAnalyzed()) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                fileInfos.add(currentFileInfo);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@link Set} of non-binary files for the repo {@code repoConfig}"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * if {@code isBinaryFiles} is set to `false`."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Otherwise, returns a {@link Set} of binary files for the repo {@code repoConfig}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public Set\u003cPath\u003e getFiles(RepoConfiguration repoConfig, boolean isBinaryFile) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        List\u003cString\u003e modifiedFileList \u003d GitDiff.getModifiedFilesList(Paths.get(repoConfig.getRepoRoot()));"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // Gets rid of files with invalid directory name and filters by the {@code isBinaryFile} flag"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return modifiedFileList.stream()"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .filter(file -\u003e isBinaryFile \u003d\u003d file.startsWith(BINARY_FILE_LINE_DIFF_RESULT))"},{"lineNumber":150,"author":{"gitId":"asdfghjkxd"},"content":"                .map(file -\u003e StringsUtil.TAB.split(file)[2])"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .filter(FileUtil::isValidPathWithLogging)"},{"lineNumber":152,"author":{"gitId":"asdfghjkxd"},"content":"                .map(Paths::get)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .collect(Collectors.toCollection(HashSet::new));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Analyzes the {@code fileDiffResult} and marks each {@link LineInfo} in {@code fileInfo} on whether they were"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * inserted in between the commit range."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void setLinesToTrack(FileInfo fileInfo, String fileDiffResult) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String[] linesChangedChunk \u003d fileDiffResult.split(LINE_CHUNKS_SEPARATOR);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lineInfos \u003d fileInfo.getLines();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        int fileLinePointer \u003d 0;"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // skips the header, index starts from 1"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        for (int sectionIndex \u003d 1; sectionIndex \u003c linesChangedChunk.length; sectionIndex++) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            String linesChangedInSection \u003d linesChangedChunk[sectionIndex];"},{"lineNumber":168,"author":{"gitId":"asdfghjkxd"},"content":"            String[] linesChanged \u003d StringsUtil.NEWLINE.split(linesChangedInSection);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            int startingLineNumber \u003d getStartingLineNumber(linesChanged[LINE_CHANGED_HEADER_INDEX]);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"            // mark all untouched lines between sections as untracked"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            while (fileLinePointer \u003c startingLineNumber - 1) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"            // skips the header, index starts from 1"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            for (int lineIndex \u003d 1; lineIndex \u003c linesChanged.length; lineIndex++) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                String lineChanged \u003d linesChanged[lineIndex];"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                // set line added to be tracked"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                if (lineChanged.startsWith(LINE_INSERTED_SYMBOL)) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                    lineInfos.get(fileLinePointer++).setTracked(true);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // set all remaining lines in file that were untouched to be untracked"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        while (fileLinePointer \u003c lineInfos.size()) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Traverses each file from the repo root directory, generates the {@link FileInfo} for each relevant file found"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * based on {@code config} and inserts it into {@code fileInfos}."},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Adds binary files to {@link List} if {@code isBinaryFiles} is true. Otherwise, adds non-binary files"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * to {@link List}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    private List\u003cFileInfo\u003e getAllFileInfo(RepoConfiguration config, boolean isBinaryFiles) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e files \u003d getFiles(config, isBinaryFiles);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        for (Path relativePath : files) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            if (!config.getFileTypeManager().isInsideWhitelistedFormats(relativePath.toString())"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                    || FileUtil.isFileIgnoredByGlob(config, relativePath)) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"            FileInfo fileInfo \u003d (isBinaryFiles)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    ? new FileInfo(relativePath.toString())"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                    : generateFileInfo(config, relativePath.toString());"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"            if (fileInfo.isFileAnalyzed()) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                fileInfos.add(fileInfo);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * Returns a {@link FileInfo} with a list of {@link LineInfo} for each line content in the"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * file located in the repository given by {@code config}/{@code relativePath}."},{"lineNumber":222,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public FileInfo generateFileInfo(RepoConfiguration config, String relativePath) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return generateFileInfo(config.getRepoRoot(), relativePath, config.getFileSizeLimit(),"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            config.isFileSizeLimitIgnored(), config.isIgnoredFileAnalysisSkipped());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Returns a {@link FileInfo} with a list of {@link LineInfo} for each line content in the"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * file located at the {@link Path} given by {@code repoRoot}/{@code relativePath}. {@code fileSizeLimit} and"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code ignoreFileSizeLimit} are used to set whether the file size limit is exceeding. {@link LineInfo}s are"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * not included in {@link FileInfo} if  {@code skipIgnoredFileAnalysis} is true and file size limit is exceeding."},{"lineNumber":233,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public FileInfo generateFileInfo(String repoRoot, String relativePath, long fileSizeLimit,"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            boolean ignoreFileSizeLimit, boolean skipIgnoredFileAnalysis) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d new FileInfo(relativePath);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(repoRoot, fileInfo.getPath());"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(path.toFile()))) {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            long fileSize \u003d Files.size(path);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            fileInfo.setFileSize(fileSize);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            if (!ignoreFileSizeLimit \u0026\u0026 fileSize \u003e fileSizeLimit) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                fileInfo.setExceedsSizeLimit(true);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                if (skipIgnoredFileAnalysis) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                    logger.log(Level.WARNING, String.format(MESSAGE_FILE_SIZE_LIMIT_EXCEEDED,"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                            fileInfo.getPath(), fileSize, fileSizeLimit, MESSAGE_FILE_ANALYSIS_SKIPPED));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                    fileInfo.setFileAnalyzed(false);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                    return fileInfo;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_FILE_SIZE_LIMIT_EXCEEDED,"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                        fileInfo.getPath(), fileSize, fileSizeLimit, MESSAGE_FILE_EXCLUDED_FROM_REPORT));"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            String line;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            int lineNum \u003d 1;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                fileInfo.addLine(new LineInfo(lineNum++, line));"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        return fileInfo;"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * Returns the starting line changed number, within the file diff result, by matching the pattern inside"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * {@code linesChanged}."},{"lineNumber":267,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":268,"author":{"gitId":"-"},"content":"     * @throws AssertionError if matching line number pattern in chunk header fails."},{"lineNumber":269,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    private int getStartingLineNumber(String linesChanged) throws AssertionError {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        Matcher chunkHeaderMatcher \u003d STARTING_LINE_NUMBER_PATTERN.matcher(linesChanged);"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        if (!chunkHeaderMatcher.find()) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MATCH_GROUP_FAIL_MESSAGE_FORMAT, \"line changed\", linesChanged));"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Should not have error matching line number pattern inside chunk header!\");"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        return Integer.parseInt(chunkHeaderMatcher.group(STARTING_LINE_NUMBER_GROUP_NAME));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * Returns true if {@code filePath} is valid and the file is not in binary (i.e. part of {@code textFilesSet})."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    private boolean isValidTextFile(String filePath, Set\u003cPath\u003e textFilesSet) {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        boolean isValidFilePath;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            isValidFilePath \u003d FileUtil.isValidPathWithLogging(filePath);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_INVALID_FILE_PATH, filePath));"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            isValidFilePath \u003d false;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        return isValidFilePath \u0026\u0026 textFilesSet.contains(Paths.get(filePath));"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":4,"-":291}},{"path":"src/main/java/reposense/git/GitCatFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains git cat file related functionalities."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Git cat file provides content or type and size information for repository objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class GitCatFile {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitCatFile.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns parent commits for the commit associated with the input {@code commitHash}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws CommitNotFoundException if there is no commit associated with {@code commitHash}."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getParentCommits(String root, String commitHash) throws CommitNotFoundException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String catFileCommand \u003d \"git cat-file -p \" + commitHash;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, catFileCommand);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            List\u003cString\u003e parentCommits \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"asdfghjkxd"},"content":"            for (String line : StringsUtil.NEWLINE.split(output)) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                if (line.startsWith(\"parent\")) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    parentCommits.add(line.substring(7).trim());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return parentCommits;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (RuntimeException e) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + commitHash);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Given the input list of {@code commitHashes}, return a list of commit hashes for the parent"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * commits of all the commits."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getParentsOfCommits(String root, List\u003cString\u003e commitHashes) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentCommits \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        for (String commitHash : commitHashes) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                parentCommits.addAll(getParentCommits(root, commitHash));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } catch (CommitNotFoundException e) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                logger.warning(\"Invalid commit hash ignored: \" + commitHash);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return parentCommits;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":60}},{"path":"src/main/java/reposense/git/GitConfig.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":14,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains git config related functionalities."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Git config is used to set Git configuration values on a global or local"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * project level."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class GitConfig {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String FILTER_LFS_SMUDGE_KEY \u003d \"filter.lfs.smudge\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String FILTER_LFS_SMUDGE_VALUE \u003d \"git-lfs smudge --skip -- %f\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILTER_LFS_PROCESS_KEY \u003d \"filter.lfs.process\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILTER_LFS_PROCESS_VALUE \u003d \"git-lfs filter-process --skip\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String LIST_GLOBAL_CONFIG_COMMAND \u003d \"git config --global --list\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final List\u003cString[]\u003e SKIP_SMUDGE_CONFIG_SETTINGS \u003d Arrays.asList("},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new String[] {FILTER_LFS_SMUDGE_KEY, FILTER_LFS_SMUDGE_VALUE},"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new String[] {FILTER_LFS_PROCESS_KEY, FILTER_LFS_PROCESS_VALUE});"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitConfig.class);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the configuration values for lfs smudge and process within global git config."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return a list of string arrays where 0-index is key and 1-index is value."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static List\u003cString[]\u003e getGlobalGitLfsConfig() {"},{"lineNumber":41,"author":{"gitId":"asdfghjkxd"},"content":"        Pattern equals \u003d Pattern.compile(\"\u003d\");"},{"lineNumber":42,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            String gitConfig \u003d getGitGlobalConfig();"},{"lineNumber":45,"author":{"gitId":"asdfghjkxd"},"content":"            return Arrays.stream(StringsUtil.NEWLINE.split(gitConfig))"},{"lineNumber":46,"author":{"gitId":"asdfghjkxd"},"content":"                    .map(equals::split)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                    .filter(line -\u003e line[0].equals(FILTER_LFS_SMUDGE_KEY) || line[0].equals((FILTER_LFS_PROCESS_KEY)))"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, \"Could not get global git lfs config\", re);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Set the global git lfs configuration values. Does not run command if the configuration"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * values are already set to skip."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param lfsConfigs a list of string arrays where 0-index is key and 1-index is value."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static void setGlobalGitLfsConfig(List\u003cString[]\u003e lfsConfigs) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String command \u003d setGitLfsConfigCommand(lfsConfigs);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!command.equals(\"\")) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            CommandRunner.runCommand(Paths.get(\".\"), command);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Delete the global git lfs configuration values."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static void deleteGlobalGitLfsConfig() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String command \u003d String.format(\"git config --global --unset %s \u0026\u0026 git config --global --unset %s\","},{"lineNumber":73,"author":{"gitId":"-"},"content":"                FILTER_LFS_SMUDGE_KEY, FILTER_LFS_PROCESS_KEY);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        CommandRunner.runCommand(Paths.get(\".\"), command);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static String setGitLfsConfigCommand(List\u003cString[]\u003e lfsConfigs) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (String[] config : lfsConfigs) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            String key \u003d config[0];"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            String value \u003d config.length \u003e 1 ? config[1] : \"\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            commands.add(String.format(\"git config --global %s \\\"%s\\\"\", key, value));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return String.join(\" \u0026\u0026 \", commands);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static String getGitGlobalConfig() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return CommandRunner.runCommand(Paths.get(\".\"), LIST_GLOBAL_CONFIG_COMMAND);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":6,"-":86}},{"path":"src/main/java/reposense/git/GitDiff.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":11,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":12,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains git diff related functionalities."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Git diff is responsible for obtaining the changes between commits, commit and working tree, etc."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class GitDiff {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String CHECKED_OUT_COMMIT_REFERENCE \u003d \"HEAD\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns the git diff result of the current commit compared to {@code lastCommitHash}, without any context."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String diffCommit(String root, String lastCommitHash) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, \"git diff -U0 --ignore-submodules\u003dall \" + lastCommitHash);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns a list of committed files with the corresponding number of lines added and deleted in the repo"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * {@code repoRoot}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getModifiedFilesList(Path repoRoot) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String diffCommand \u003d String.format(\"git diff --ignore-submodules\u003dall --numstat %s %s\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"                EMPTY_TREE_HASH, CHECKED_OUT_COMMIT_REFERENCE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String diffResult \u003d runCommand(repoRoot.toAbsolutePath(), diffCommand);"},{"lineNumber":38,"author":{"gitId":"asdfghjkxd"},"content":"        return Arrays.asList(StringsUtil.NEWLINE.split(diffResult));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":4,"-":36}},{"path":"src/main/java/reposense/git/GitLog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.StringsUtil.addQuotesForFilePath;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":14,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains git log related functionalities."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Git log is responsible to obtain the commit logs and the authors\u0027 info."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class GitLog {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMIT_INFO_DELIMITER \u003d \"(?m)^\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\\\n\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String PRETTY_FORMAT_STRING \u003d"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"\\\"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c%n%H|%n|%p|%n|%aN|%n|%aE|%n|%cI|%n|%s|%n|%w(0,4,4)%b%w(0,0,0)|%n|%D|\\\"\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_EMAIL_IF_MISSING \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the git commit log info of {@code author}, in the repository specified in {@code config}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String get(RepoConfiguration config, Author author) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --full-history -i --extended-regexp \";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --shortstat\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the git commit log info of {@code author}, with the files changed, in the repository specified in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * {@code config}. Merge commits are included."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getWithFiles(RepoConfiguration config, Author author) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --full-history -i --extended-regexp \";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --numstat --shortstat\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns the authors who modified the file at {@code filePath}, in the repository specified in {@code config}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * The output is a list of length-2 arrays containing the author\u0027s name and email."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static List\u003cString[]\u003e getFileAuthors(RepoConfiguration config, String filePath) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --pretty\u003dformat:\\\"%an\\t%ae\\\" \";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        command +\u003d \" \" + addQuotesForFilePath(filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String result \u003d runCommand(rootPath, command);"},{"lineNumber":73,"author":{"gitId":"asdfghjkxd"},"content":"        return Arrays.stream(StringsUtil.NEWLINE.split(result))"},{"lineNumber":74,"author":{"gitId":"asdfghjkxd"},"content":"                .map(StringsUtil.TAB::split)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .map(authorAndEmailArray -\u003e authorAndEmailArray.length \u003d\u003d 1"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                        ? new String[] {authorAndEmailArray[0], DEFAULT_EMAIL_IF_MISSING}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                        : authorAndEmailArray)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":3,"-":77}},{"path":"src/main/java/reposense/git/GitRemote.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains git remote related functionality."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Git remote is responsible for getting remote repository information."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class GitRemote {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_FETCH_REMOTE \u003d \"origin(fetch)\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PUSH_REMOTE \u003d \"origin(push)\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitRemote.class);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Extracts remote repository information at {@code repoRoot}."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @return Map of keys of the form REMOTE_NAME(fetch) or REMOTE_NAME(push) to their corresponding remote URLs."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Map\u003cString, String\u003e getRemotes(String repoRoot) {"},{"lineNumber":32,"author":{"gitId":"asdfghjkxd"},"content":"        Pattern anyTabPattern \u003d Pattern.compile(\"[ \\\\t]+\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e remotes \u003d new HashMap\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String result;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            result \u003d CommandRunner.runCommand(Paths.get(repoRoot), \"git remote -v\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(String.format(\"Unable to run git remote command in directory: %s\", repoRoot));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return remotes;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"asdfghjkxd"},"content":"        Arrays.stream(StringsUtil.NEWLINE.split(result))"},{"lineNumber":43,"author":{"gitId":"asdfghjkxd"},"content":"                .map(anyTabPattern::split)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .forEach(l -\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    if (l.length \u003d\u003d 3) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                        // l[0]: remote name"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                        // l[1]: remote URL"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                        // l[2]: \u0027(fetch)\u0027 | \u0027(push)\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                        remotes.put(l[0] + l[2], l[1]);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return remotes;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Finds an available fetch remote location in a given {@code remoteMap}, checking first for the default fetch"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * remote (origin)."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @return an {@code Optional} of an available remote location."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Optional\u003cString\u003e getAvailableRemoteLocation(Map\u003cString, String\u003e remoteMap) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (remoteMap.size() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String remoteLocation \u003d remoteMap.containsKey(DEFAULT_FETCH_REMOTE)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                // Get default fetch remote if possible"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                ? remoteMap.get(DEFAULT_FETCH_REMOTE)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                // Get any available remote otherwise"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                : remoteMap.values().iterator().next();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Optional.of(remoteLocation);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":5,"-":70}},{"path":"src/main/java/reposense/git/GitRevList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":14,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":15,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains git rev list related functionalities."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Git rev list is responsible for showing commit objects in reverse chronological order."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class GitRevList {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String REVISION_PATH_SEPARATOR \u003d \" -- \";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the latest commit hash at {@code branchName} before {@code date}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an empty {@code String} if {@code date} is null, or there is no such commit."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param root The name of the working directory."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param branchName The name of the branch to find the commit hash in."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param date The cut-off date before which the commit hash must be found."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param zoneId The timezone of the date."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getCommitHashUntilDate(String root, String branchName, LocalDateTime date, ZoneId zoneId) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (date \u003d\u003d null) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list -1 --until\u003d\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"                + GitUtil.GIT_LOG_UNTIL_DATE_FORMAT.format(ZonedDateTime.of(date, zoneId))"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                + \" \" + branchName + REVISION_PATH_SEPARATOR;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, revListCommand);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns a list of commit hashes at the branch given by {@code branchName}, separated by newlines,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * that are within the range of {@code startHash} and {@code endHash}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * The {@code root} is the name of the working directory."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Both the {@code startHash} and {@code endHash} are guaranteed to be in the list."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static String getCommitHashInRange(String root, String branchName, String startHash, String endHash) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (startHash \u003d\u003d null \u0026\u0026 endHash \u003d\u003d null) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        } else if (startHash \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return endHash;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } else if (endHash \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return startHash;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String fromStartHash \u003d getAllCommitHashSince(root, branchName, startHash);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String fromEndHash \u003d getAllCommitHashSince(root, branchName, endHash);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // If invalid hashes were given, do not use the results obtained from rev-list"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (fromStartHash.equals(\"\") \u0026\u0026 fromEndHash.equals(\"\")) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } else if (fromStartHash.equals(\"\")) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return endHash;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        } else if (fromEndHash.equals(\"\")) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return startHash;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Perform a set difference in the list of commits to get the commits within the given range, since both lists"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // will have the list of commits starting from the given commit to HEAD, hence this removes the overlap part."},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Also ensure that both hashes are present in the final output"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (fromStartHash.length() \u003e fromEndHash.length()) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            output.append(endHash);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            output.append(fromStartHash.substring(fromEndHash.length()));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            output.append(startHash);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            output.append(fromEndHash.substring(fromStartHash.length()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return output.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Returns a list of commit hashes at the branch given by {@code branchName} separated by newlines that exist"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * since {@code hash} until HEAD."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * The {@code root} is the name of the working directory."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static String getAllCommitHashSince(String root, String branchName, String hash) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list \" + hash + \"..HEAD \" + branchName + REVISION_PATH_SEPARATOR;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return runCommand(rootPath, revListCommand) + hash;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            // An invalid commit hash was provided"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns a list of commit hashes for the root commits in the tree, with the {@link Path} given by {@code root}"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * as working directory."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getRootCommits(String root) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list --max-parents\u003d0 HEAD\";"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String output \u003d runCommand(rootPath, revListCommand);"},{"lineNumber":112,"author":{"gitId":"asdfghjkxd"},"content":"        return Arrays.asList(StringsUtil.NEWLINE.split(output));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Returns true if the repository is empty, with the {@link Path} given by {@code root} as working directory."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static boolean checkIsEmptyRepo(String root) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list -n 1 --all\";"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String output \u003d runCommand(rootPath, revListCommand);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return output \u003d\u003d null || output.trim().isEmpty();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":4,"-":120}},{"path":"src/main/java/reposense/git/GitShortlog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":16,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains git shortlog related functionalities."},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Git shortlog provides a summary of git log output."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class GitShortlog {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Extracts all the author identities from the repository and date range given in {@code config},"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * with the timezone taken into account."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static List\u003cAuthor\u003e getAuthors(RepoConfiguration config) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String summary \u003d getShortlogSummary("},{"lineNumber":30,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (summary.isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"asdfghjkxd"},"content":"        String[] lines \u003d StringsUtil.NEWLINE.split(summary);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(lines)"},{"lineNumber":38,"author":{"gitId":"asdfghjkxd"},"content":"                .map(line -\u003e new Author(StringsUtil.TAB.split(line)[1]))"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Obtains summarized version of git log from the repository at {@code root} for the date range"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * given by {@code sinceDate} and {@code untilDate}, with {@code zoneId} taken into account for both dates."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static String getShortlogSummary(String root, LocalDateTime sinceDate, LocalDateTime untilDate,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            ZoneId zoneId) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --pretty\u003dshort\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(sinceDate, untilDate, zoneId);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        command +\u003d \" | git shortlog --summary\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":3,"-":52}},{"path":"src/main/java/reposense/git/GitShow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":18,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains git show related functionalities."},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Git show shows various types of objects."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class GitShow {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitShow.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns expanded form of the {@link CommitHash} associated with the {@code shortCommitHash}, with"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * the {@link Path} given by {@code root} as the working directory."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws CommitNotFoundException if there is no commit associated with {@code shortCommitHash}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static CommitHash getExpandedCommitHash(String root, String shortCommitHash) throws CommitNotFoundException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String showCommand \u003d \"git show -s --format\u003d%H \" + shortCommitHash;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, showCommand);"},{"lineNumber":40,"author":{"gitId":"asdfghjkxd"},"content":"            List\u003cCommitHash\u003e commitHashes \u003d Arrays.stream(StringsUtil.NEWLINE.split(output))"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    .map(CommitHash::new).collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            if (commitHashes.size() \u003e 1) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                logger.warning(String.format(\"%s can be expanded to %d different commits, \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"                                + \"assuming %s refers to commit hash %s\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"                        shortCommitHash, commitHashes.size(), shortCommitHash, commitHashes.get(0)));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return commitHashes.get(0);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + shortCommitHash);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns {@link LocalDateTime} of the commit associated with commit hash, with {@link Path} given by {@code root}"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * as the working directory."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws CommitNotFoundException if no commit exists for the given {@code commitHash}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the date string for the given {@code commitHash} could not be parsed into"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * a {@link LocalDateTime} object."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static LocalDateTime getCommitDate(String root, String commitHash)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throws CommitNotFoundException, ParseException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String showCommand \u003d \"git show -s --format\u003d%ci \" + commitHash;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, showCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss Z\u0027\\n\u0027\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return LocalDateTime.parse(output, format);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + commitHash);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns {@link LocalDateTime} of the earliest commit out of the input list of commits in {@code commitHashes},"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * with the {@code root} string denoting the working directory."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws CommitNotFoundException if no commit exists for a given hash in {@code commitHashes}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * or if no date string was successfully parsed to a {@link LocalDateTime} for earliest date."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static LocalDateTime getEarliestCommitDate(String root, List\u003cString\u003e commitHashes)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throws CommitNotFoundException {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        LocalDateTime earliest \u003d null;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (String hash : commitHashes) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                LocalDateTime date \u003d getCommitDate(root, hash);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                if (earliest \u003d\u003d null || date.compareTo(earliest) \u003c 0) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    earliest \u003d date;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            } catch (CommitNotFoundException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                logger.warning(\"Commit not found: \" + hash);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            } catch (ParseException pe) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                logger.warning(\"Could not parse date for commit: \" + hash);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (earliest \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Date could not be retrieved for all input commits\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return earliest;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":101}},{"path":"src/main/java/reposense/model/Author.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.PathMatcher;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"asdfghjkxd"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a Git Author."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Author {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String NAME_NO_AUTHOR_WITH_COMMITS_FOUND \u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"NO AUTHOR WITH COMMITS FOUND WITHIN THIS PERIOD OF TIME\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String UNKNOWN_AUTHOR_GIT_ID \u003d \"-\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String STANDARD_GITHUB_EMAIL_DOMAIN \u003d \"@users.noreply.github.com\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String STANDARD_GITLAB_EMAIL_DOMAIN \u003d \"@users.noreply.gitlab.com\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNCOMMON_EMAIL_PATTERN \u003d \"The provided email, %s, uses uncommon pattern.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNCOMMON_GLOB_PATTERN \u003d \"The provided ignore glob, %s, uses uncommon pattern.\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String COMMON_EMAIL_REGEX \u003d"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"^([a-zA-Z0-9_\\\\-\\\\.\\\\+]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String COMMON_GLOB_REGEX \u003d \"^[-a-zA-Z0-9 _/\\\\\\\\*!{}\\\\[\\\\]!(),:.]*$\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Author UNKNOWN_AUTHOR \u003d new Author(UNKNOWN_AUTHOR_GIT_ID);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String gitId;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e emails;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private transient String displayName;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e authorAliases;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoreGlobList;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private transient PathMatcher ignoreGlobMatcher;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Author(String gitId) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.gitId \u003d gitId;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.emails \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.displayName \u003d gitId;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addStandardGitHostEmails(this.emails);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Author(StandaloneAuthor sa) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String gitId \u003d sa.getGitId();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(sa.getEmails());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String displayName \u003d !sa.getDisplayName().isEmpty() ? sa.getDisplayName() : sa.getGitId();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cString\u003e authorAliases \u003d sa.getAuthorNames();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d sa.getIgnoreGlobList();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.gitId \u003d gitId;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d authorAliases;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        setEmails(emails);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        setIgnoreGlobList(ignoreGlobList);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Author(Author another) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.gitId \u003d another.gitId;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.emails \u003d another.emails;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.displayName \u003d another.gitId;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d another.authorAliases;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d another.ignoreGlobList;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.ignoreGlobMatcher \u003d another.ignoreGlobMatcher;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code emails} only contains commonly used email patterns."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static void validateEmails(List\u003cString\u003e emails) throws IllegalArgumentException {"},{"lineNumber":78,"author":{"gitId":"asdfghjkxd"},"content":"        Pattern emailPattern \u003d Pattern.compile(COMMON_EMAIL_REGEX);"},{"lineNumber":79,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (String email : emails) {"},{"lineNumber":81,"author":{"gitId":"asdfghjkxd"},"content":"            if (!emailPattern.matcher(email).matches()) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_EMAIL_PATTERN, email));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code ignoreGlobList} only contains commonly used glob patterns."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static void validateIgnoreGlobs(List\u003cString\u003e ignoreGlobList) throws IllegalArgumentException {"},{"lineNumber":93,"author":{"gitId":"asdfghjkxd"},"content":"        Pattern globPattern \u003d Pattern.compile(COMMON_GLOB_REGEX);"},{"lineNumber":94,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        for (String glob : ignoreGlobList) {"},{"lineNumber":96,"author":{"gitId":"asdfghjkxd"},"content":"            if (!globPattern.matcher(glob).matches()) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_GLOB_PATTERN, glob));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public String getGitId() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return gitId;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getEmails() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return emails;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setEmails(List\u003cString\u003e emails) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        validateEmails(emails);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this.emails \u003d new ArrayList\u003c\u003e(emails);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        addStandardGitHostEmails(this.emails);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return displayName;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void setDisplayName(String displayName) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAuthorAliases() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return authorAliases;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void setAuthorAliases(List\u003cString\u003e authorAliases) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d authorAliases;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        validateIgnoreGlobs(ignoreGlobList);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d new ArrayList\u003c\u003e(ignoreGlobList);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Validates and adds {@code ignoreGlobList} into the {@link Author} class instance variable without duplicates"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * and updates the ignore glob matcher."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void importIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        validateIgnoreGlobs(ignoreGlobList);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        ignoreGlobList.forEach(ignoreGlob -\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            if (!this.ignoreGlobList.contains(ignoreGlob)) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                this.ignoreGlobList.add(ignoreGlob);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Returns true if this author is ignoring the {@code filePath} based on its ignore glob matcher."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public boolean isIgnoringFile(Path filePath) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return ignoreGlobMatcher.matches(filePath);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (!(other instanceof Author)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Author otherAuthor \u003d (Author) other;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return this.gitId.equalsIgnoreCase(otherAuthor.gitId);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return gitId !\u003d null ? gitId.toLowerCase().hashCode() : 0;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return gitId;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Updates the {@link PathMatcher} to the new ignore glob list set."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Called after a new ignore glob list is set."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private void updateIgnoreGlobMatcher() {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        String globString \u003d \"glob:{\" + String.join(\",\", ignoreGlobList) + \"}\";"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        ignoreGlobMatcher \u003d FileSystems.getDefault().getPathMatcher(globString);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Adds the standard github and gitlab emails to {@code emails} if not present."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private void addStandardGitHostEmails(List\u003cString\u003e emails) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        String standardGitHubEmail \u003d getGitId() + STANDARD_GITHUB_EMAIL_DOMAIN;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String standardGitLabEmail \u003d getGitId() + STANDARD_GITLAB_EMAIL_DOMAIN;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (!emails.contains(standardGitHubEmail)) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            emails.add(standardGitHubEmail);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        if (!emails.contains(standardGitLabEmail)) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            emails.add(standardGitLabEmail);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"asdfghjkxd":7,"-":205}},{"path":"src/main/java/reposense/model/CliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class CliArguments {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"asdfghjkxd"},"content":"    private Path outputFilePath;"},{"lineNumber":23,"author":{"gitId":"asdfghjkxd"},"content":"    private Path assetsFilePath;"},{"lineNumber":24,"author":{"gitId":"asdfghjkxd"},"content":"    private LocalDateTime sinceDate;"},{"lineNumber":25,"author":{"gitId":"asdfghjkxd"},"content":"    private LocalDateTime untilDate;"},{"lineNumber":26,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isSinceDateProvided;"},{"lineNumber":27,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isUntilDateProvided;"},{"lineNumber":28,"author":{"gitId":"asdfghjkxd"},"content":"    private List\u003cFileType\u003e formats;"},{"lineNumber":29,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isLastModifiedDateIncluded;"},{"lineNumber":30,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isShallowCloningPerformed;"},{"lineNumber":31,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isAutomaticallyLaunching;"},{"lineNumber":32,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isStandaloneConfigIgnored;"},{"lineNumber":33,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isFileSizeLimitIgnored;"},{"lineNumber":34,"author":{"gitId":"asdfghjkxd"},"content":"    private int numCloningThreads;"},{"lineNumber":35,"author":{"gitId":"asdfghjkxd"},"content":"    private int numAnalysisThreads;"},{"lineNumber":36,"author":{"gitId":"asdfghjkxd"},"content":"    private ZoneId zoneId;"},{"lineNumber":37,"author":{"gitId":"asdfghjkxd"},"content":"    private boolean isFindingPreviousAuthorsPerformed;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private boolean isTestMode \u003d ArgsParser.DEFAULT_IS_TEST_MODE;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private boolean isFreshClonePerformed \u003d ArgsParser.DEFAULT_SHOULD_FRESH_CLONE;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e locations;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private boolean isViewModeOnly;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Path reportDirectoryPath;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path configFolderPath;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Path repoConfigFilePath;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Path authorConfigFilePath;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Path groupConfigFilePath;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Path reportConfigFilePath;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private ReportConfiguration reportConfiguration;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"asdfghjkxd"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"asdfghjkxd"},"content":"     * Constructs a {@code CliArguments} object without any parameters."},{"lineNumber":55,"author":{"gitId":"asdfghjkxd"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"asdfghjkxd"},"content":"    private CliArguments() {}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ZoneId getZoneId() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Path getOutputFilePath() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return outputFilePath;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Path getAssetsFilePath() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return assetsFilePath;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public LocalDateTime getSinceDate() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public LocalDateTime getUntilDate() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean isSinceDateProvided() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return isSinceDateProvided;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean isUntilDateProvided() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return isUntilDateProvided;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return isLastModifiedDateIncluded;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return isShallowCloningPerformed;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getFormats() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return formats;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean isAutomaticallyLaunching() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return isAutomaticallyLaunching;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean isFileSizeLimitIgnored() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return isFileSizeLimitIgnored;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public int getNumCloningThreads() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return numCloningThreads;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int getNumAnalysisThreads() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return numAnalysisThreads;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean isFindingPreviousAuthorsPerformed() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return isFindingPreviousAuthorsPerformed;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean isTestMode() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return isTestMode;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean isFreshClonePerformed() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return isFreshClonePerformed;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getLocations() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return locations;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Path getReportDirectoryPath() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return reportDirectoryPath;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public Path getConfigFolderPath() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return configFolderPath;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public Path getRepoConfigFilePath() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return repoConfigFilePath;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public Path getAuthorConfigFilePath() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return authorConfigFilePath;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public Path getGroupConfigFilePath() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return groupConfigFilePath;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public Path getReportConfigFilePath() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return reportConfigFilePath;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public ReportConfiguration getReportConfiguration() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return reportConfiguration;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public boolean isViewModeOnly() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return isViewModeOnly;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (!(other instanceof CliArguments)) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        CliArguments otherCliArguments \u003d (CliArguments) other;"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return Objects.equals(this.outputFilePath, otherCliArguments.outputFilePath)"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.sinceDate, otherCliArguments.sinceDate)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.untilDate, otherCliArguments.untilDate)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isSinceDateProvided \u003d\u003d otherCliArguments.isSinceDateProvided"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isUntilDateProvided \u003d\u003d otherCliArguments.isUntilDateProvided"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.formats, otherCliArguments.formats)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isLastModifiedDateIncluded \u003d\u003d otherCliArguments.isLastModifiedDateIncluded"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isShallowCloningPerformed \u003d\u003d otherCliArguments.isShallowCloningPerformed"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isAutomaticallyLaunching \u003d\u003d otherCliArguments.isAutomaticallyLaunching"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isStandaloneConfigIgnored \u003d\u003d otherCliArguments.isStandaloneConfigIgnored"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.numCloningThreads \u003d\u003d otherCliArguments.numCloningThreads"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.numAnalysisThreads \u003d\u003d otherCliArguments.numAnalysisThreads"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.zoneId, otherCliArguments.zoneId)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isFindingPreviousAuthorsPerformed \u003d\u003d otherCliArguments.isFindingPreviousAuthorsPerformed"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isFileSizeLimitIgnored \u003d\u003d otherCliArguments.isFileSizeLimitIgnored"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isTestMode \u003d\u003d otherCliArguments.isTestMode"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isFreshClonePerformed \u003d\u003d otherCliArguments.isFreshClonePerformed"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.locations, otherCliArguments.locations)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isViewModeOnly \u003d\u003d otherCliArguments.isViewModeOnly"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.reportDirectoryPath, otherCliArguments.reportDirectoryPath)"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.repoConfigFilePath, otherCliArguments.repoConfigFilePath)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.authorConfigFilePath, otherCliArguments.authorConfigFilePath)"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.groupConfigFilePath, otherCliArguments.groupConfigFilePath)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(this.reportConfigFilePath, otherCliArguments.reportConfigFilePath);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Builder used to build CliArguments."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public static final class Builder {"},{"lineNumber":210,"author":{"gitId":"asdfghjkxd"},"content":"        private CliArguments cliArguments;"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Builder() {"},{"lineNumber":213,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments \u003d new CliArguments();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * Adds the {@code outputFilePath} to CliArguments."},{"lineNumber":218,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":219,"author":{"gitId":"-"},"content":"         * @param outputFilePath The output file path."},{"lineNumber":220,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public Builder outputFilePath(Path outputFilePath) {"},{"lineNumber":222,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.outputFilePath \u003d outputFilePath;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         * Adds the {@code assetsFilePath} to CliArguments."},{"lineNumber":228,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":229,"author":{"gitId":"-"},"content":"         * @param assetsFilePath The assets file path."},{"lineNumber":230,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public Builder assetsFilePath(Path assetsFilePath) {"},{"lineNumber":232,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.assetsFilePath \u003d assetsFilePath;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":237,"author":{"gitId":"-"},"content":"         * Adds the {@code sinceDate} to CliArguments."},{"lineNumber":238,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":239,"author":{"gitId":"-"},"content":"         * @param sinceDate The since date."},{"lineNumber":240,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public Builder sinceDate(LocalDateTime sinceDate) {"},{"lineNumber":242,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.sinceDate \u003d sinceDate;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":247,"author":{"gitId":"-"},"content":"         * Adds the {@code untilDate} to CliArguments."},{"lineNumber":248,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":249,"author":{"gitId":"-"},"content":"         * @param untilDate The until date."},{"lineNumber":250,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        public Builder untilDate(LocalDateTime untilDate) {"},{"lineNumber":252,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.untilDate \u003d untilDate;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":257,"author":{"gitId":"-"},"content":"         * Adds the {@code isSinceDateProvided} to CliArguments."},{"lineNumber":258,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":259,"author":{"gitId":"-"},"content":"         * @param isSinceDateProvided Is the since date provided."},{"lineNumber":260,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        public Builder isSinceDateProvided(boolean isSinceDateProvided) {"},{"lineNumber":262,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":267,"author":{"gitId":"-"},"content":"         * Adds the {@code isUntilDateProvided} to CliArguments."},{"lineNumber":268,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":269,"author":{"gitId":"-"},"content":"         * @param isUntilDateProvided Is the until date provided."},{"lineNumber":270,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        public Builder isUntilDateProvided(boolean isUntilDateProvided) {"},{"lineNumber":272,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":277,"author":{"gitId":"-"},"content":"         * Adds the {@code formats} to CliArguments."},{"lineNumber":278,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":279,"author":{"gitId":"-"},"content":"         * @param formats The list of {@link FileType}."},{"lineNumber":280,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        public Builder formats(List\u003cFileType\u003e formats) {"},{"lineNumber":282,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.formats \u003d formats;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"         * Adds the {@code isLastModifiedDateIncluded} to CliArguments."},{"lineNumber":288,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":289,"author":{"gitId":"-"},"content":"         * @param isLastModifiedDateIncluded Is the last modified date included."},{"lineNumber":290,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public Builder isLastModifiedDateIncluded(boolean isLastModifiedDateIncluded) {"},{"lineNumber":292,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":297,"author":{"gitId":"-"},"content":"         * Adds the {@code isShallowCloningPerformed} to CliArguments."},{"lineNumber":298,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":299,"author":{"gitId":"-"},"content":"         * @param isShallowCloningPerformed Is shallow cloning performed."},{"lineNumber":300,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        public Builder isShallowCloningPerformed(boolean isShallowCloningPerformed) {"},{"lineNumber":302,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":307,"author":{"gitId":"-"},"content":"         * Adds the {@code isAutomaticallyLaunching} to CliArguments."},{"lineNumber":308,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":309,"author":{"gitId":"-"},"content":"         * @param isAutomaticallyLaunching Is automatically launching."},{"lineNumber":310,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        public Builder isAutomaticallyLaunching(boolean isAutomaticallyLaunching) {"},{"lineNumber":312,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":317,"author":{"gitId":"-"},"content":"         * Adds the {@code isStandaloneConfigIgnored} to CliArguments."},{"lineNumber":318,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":319,"author":{"gitId":"-"},"content":"         * @param isStandaloneConfigIgnored Is standalone config ignored."},{"lineNumber":320,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        public Builder isStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"},{"lineNumber":322,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":327,"author":{"gitId":"-"},"content":"         * Adds the {@code isFileSizeLimitIgnored} to CliArguments."},{"lineNumber":328,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":329,"author":{"gitId":"-"},"content":"         * @param isFileSizeLimitIgnored Is file size limit ignored."},{"lineNumber":330,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        public Builder isFileSizeLimitIgnored(boolean isFileSizeLimitIgnored) {"},{"lineNumber":332,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":337,"author":{"gitId":"-"},"content":"         * Adds the {@code numCloningThreads} to CliArguments."},{"lineNumber":338,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":339,"author":{"gitId":"-"},"content":"         * @param numCloningThreads The number of cloning threads."},{"lineNumber":340,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        public Builder numCloningThreads(int numCloningThreads) {"},{"lineNumber":342,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.numCloningThreads \u003d numCloningThreads;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"         * Adds the {@code numAnalysisThreads} to CliArguments."},{"lineNumber":348,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":349,"author":{"gitId":"-"},"content":"         * @param numAnalysisThreads The number of analysis threads."},{"lineNumber":350,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        public Builder numAnalysisThreads(int numAnalysisThreads) {"},{"lineNumber":352,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.numAnalysisThreads \u003d numAnalysisThreads;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":357,"author":{"gitId":"-"},"content":"         * Adds the {@code zoneId} to CliArguments."},{"lineNumber":358,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":359,"author":{"gitId":"-"},"content":"         * @param zoneId The timezone Id."},{"lineNumber":360,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        public Builder zoneId(ZoneId zoneId) {"},{"lineNumber":362,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.zoneId \u003d zoneId;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":367,"author":{"gitId":"-"},"content":"         * Adds the {@code isFindingPreviousAuthorsPerformed} to CliArguments."},{"lineNumber":368,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":369,"author":{"gitId":"-"},"content":"         * @param isFindingPreviousAuthorsPerformed Is finding previous authors performed."},{"lineNumber":370,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        public Builder isFindingPreviousAuthorsPerformed(boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":372,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":377,"author":{"gitId":"-"},"content":"         * Adds the {@code isTestMode} to CliArguments."},{"lineNumber":378,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":379,"author":{"gitId":"-"},"content":"         * @param isTestMode Is test mode."},{"lineNumber":380,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        public Builder isTestMode(boolean isTestMode) {"},{"lineNumber":382,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isTestMode \u003d isTestMode;"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":387,"author":{"gitId":"-"},"content":"         * Adds the {@code isFreshClonePerformed} to CliArguments."},{"lineNumber":388,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":389,"author":{"gitId":"-"},"content":"         * @param isFreshClonePerformed Is fresh clone performed."},{"lineNumber":390,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        public Builder isFreshClonePerformed(boolean isFreshClonePerformed) {"},{"lineNumber":392,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isFreshClonePerformed \u003d isFreshClonePerformed;"},{"lineNumber":393,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":397,"author":{"gitId":"-"},"content":"         * Adds the {@code locations} to CliArguments."},{"lineNumber":398,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":399,"author":{"gitId":"-"},"content":"         * @param locations The list of locations."},{"lineNumber":400,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        public Builder locations(List\u003cString\u003e locations) {"},{"lineNumber":402,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.locations \u003d locations;"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":407,"author":{"gitId":"-"},"content":"         * Adds the {@code isViewModeOnly} to CliArguments."},{"lineNumber":408,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":409,"author":{"gitId":"-"},"content":"         * @param isViewModeOnly Is view mode only."},{"lineNumber":410,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        public Builder isViewModeOnly(boolean isViewModeOnly) {"},{"lineNumber":412,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.isViewModeOnly \u003d isViewModeOnly;"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":417,"author":{"gitId":"-"},"content":"         * Adds the {@code reportDirectoryPath} to CliArguments."},{"lineNumber":418,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":419,"author":{"gitId":"-"},"content":"         * @param reportDirectoryPath The report directory path."},{"lineNumber":420,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        public Builder reportDirectoryPath(Path reportDirectoryPath) {"},{"lineNumber":422,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.reportDirectoryPath \u003d reportDirectoryPath;"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":427,"author":{"gitId":"-"},"content":"         * Adds the {@code configFolderPath} to CliArguments. {@code configFolderPath} is utilised to configure the"},{"lineNumber":428,"author":{"gitId":"-"},"content":"         * {@code repoConfigFilePath}, {@code authorConfigFilePath}, {@code groupConfigFilePath} and"},{"lineNumber":429,"author":{"gitId":"-"},"content":"         * {@code reportConfigFilePath}."},{"lineNumber":430,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":431,"author":{"gitId":"-"},"content":"         * @param configFolderPath The config folder path."},{"lineNumber":432,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        public Builder configFolderPath(Path configFolderPath) {"},{"lineNumber":434,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.configFolderPath \u003d configFolderPath.equals(EMPTY_PATH)"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                ? configFolderPath.toAbsolutePath()"},{"lineNumber":436,"author":{"gitId":"-"},"content":"                : configFolderPath;"},{"lineNumber":437,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.repoConfigFilePath \u003d configFolderPath.resolve("},{"lineNumber":438,"author":{"gitId":"asdfghjkxd"},"content":"                    RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":439,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.authorConfigFilePath \u003d configFolderPath.resolve("},{"lineNumber":440,"author":{"gitId":"asdfghjkxd"},"content":"                    AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":441,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.groupConfigFilePath \u003d configFolderPath.resolve("},{"lineNumber":442,"author":{"gitId":"asdfghjkxd"},"content":"                    GroupConfigCsvParser.GROUP_CONFIG_FILENAME);"},{"lineNumber":443,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.reportConfigFilePath \u003d configFolderPath.resolve("},{"lineNumber":444,"author":{"gitId":"asdfghjkxd"},"content":"                    ReportConfigJsonParser.REPORT_CONFIG_FILENAME);"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":449,"author":{"gitId":"-"},"content":"         * Adds the {@code reportConfiguration} to CliArguments."},{"lineNumber":450,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":451,"author":{"gitId":"-"},"content":"         * @param reportConfiguration The report configuration."},{"lineNumber":452,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        public Builder reportConfiguration(ReportConfiguration reportConfiguration) {"},{"lineNumber":454,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments.reportConfiguration \u003d reportConfiguration;"},{"lineNumber":455,"author":{"gitId":"-"},"content":"            return this;"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":459,"author":{"gitId":"-"},"content":"         * Builds CliArguments."},{"lineNumber":460,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":461,"author":{"gitId":"-"},"content":"         * @return CliArguments"},{"lineNumber":462,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        public CliArguments build() {"},{"lineNumber":464,"author":{"gitId":"asdfghjkxd"},"content":"            CliArguments built \u003d this.cliArguments;"},{"lineNumber":465,"author":{"gitId":"asdfghjkxd"},"content":"            this.cliArguments \u003d new CliArguments();"},{"lineNumber":466,"author":{"gitId":"asdfghjkxd"},"content":"            return built;"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":56,"-":413}},{"path":"src/main/java/reposense/model/CliRunConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents RepoSense run configured by CLI."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CliRunConfiguration implements RunConfiguration {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(CliRunConfiguration.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final CliArguments cliArguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CliRunConfiguration(CliArguments cliArguments) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.cliArguments \u003d cliArguments;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a list of {@link RepoConfiguration}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if all repo locations are invalid."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public List\u003cRepoConfiguration\u003e getRepoConfigurations() throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        for (String locationString : cliArguments.getLocations()) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"asdfghjkxd"},"content":"                configs.add("},{"lineNumber":35,"author":{"gitId":"asdfghjkxd"},"content":"                        new RepoConfiguration.Builder()"},{"lineNumber":36,"author":{"gitId":"asdfghjkxd"},"content":"                                .location(new RepoLocation(locationString))"},{"lineNumber":37,"author":{"gitId":"asdfghjkxd"},"content":"                                .build()"},{"lineNumber":38,"author":{"gitId":"asdfghjkxd"},"content":"                );"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            } catch (InvalidLocationException ile) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, ile.getMessage(), ile);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (configs.isEmpty()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(\"All repository locations are invalid.\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return configs;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":7,"-":43}},{"path":"src/main/java/reposense/model/CommitHash.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a git commit hash in {@code RepoConfiguration}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommitHash {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String COMMIT_HASH_REGEX \u003d \"^[0-9a-f]+$\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String COMMIT_RANGED_HASH_REGEX \u003d \"^[0-9a-f]+\\\\.\\\\.[0-9a-f]+$\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_COMMIT_HASH_MESSAGE \u003d"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \"The provided commit hash, %s, contains illegal characters.\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private String commit;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public CommitHash(String commit) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        validateCommit(commit);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.commit \u003d commit;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return commit;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommitHash)) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommitHash otherCommit \u003d (CommitHash) other;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return this.commit.equals(otherCommit.commit);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return commit.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts all the strings in {@code commits} into {@link CommitHash} objects."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns null if {@code commits} is null."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the strings are in invalid formats."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static List\u003cCommitHash\u003e convertStringsToCommits(List\u003cString\u003e commits) throws IllegalArgumentException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (commits \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return commits.stream()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .map(CommitHash::new)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts a commit {@code entry} into either itself, or a stream of {@link CommitHash} objects if a range was"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * provided."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Uses {@code root} as the working directory and {@code branchName} as the branch from which to obtain the hashes."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Stream\u003cCommitHash\u003e getHashes(String root, String branchName, CommitHash entry) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (entry.toString().matches(COMMIT_HASH_REGEX)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Stream.of(entry);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String[] startAndEnd \u003d entry.toString().split(\"\\\\.\\\\.\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String revList \u003d GitRevList.getCommitHashInRange(root, branchName, startAndEnd[0], startAndEnd[1]);"},{"lineNumber":81,"author":{"gitId":"asdfghjkxd"},"content":"        return Arrays.stream(StringsUtil.NEWLINE.split(revList))"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .map(CommitHash::new);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Checks if {@code commitList} contains {@code commitHash}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static boolean isInsideCommitList(String commitHash, List\u003cCommitHash\u003e commitList) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return commitList.stream().map(CommitHash::toString).anyMatch(commitHash::startsWith);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code ignoreCommitList} are in valid formats."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void validateCommits(List\u003cString\u003e commits) throws IllegalArgumentException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        for (String commitHash : commits) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            validateCommit(commitHash);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Checks that {@code commitHash} is in a valid format."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code commitHash} does not meet the criteria."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static void validateCommit(String commitHash) throws IllegalArgumentException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!commitHash.matches(COMMIT_HASH_REGEX) \u0026\u0026 !commitHash.matches(COMMIT_RANGED_HASH_REGEX)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(INVALID_COMMIT_HASH_MESSAGE, commitHash));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"},{"lineNumber":114,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"asdfghjkxd":2,"-":112}},{"path":"src/main/java/reposense/model/ConfigRunConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":14,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents RepoSense run configured by config files."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ConfigRunConfiguration implements RunConfiguration {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ConfigRunConfiguration.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final CliArguments cliArguments;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public ConfigRunConfiguration(CliArguments cliArguments) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.cliArguments \u003d cliArguments;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a list of {@link RepoConfiguration}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws IOException if user-supplied csv file does not exist or is not readable."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if user-supplied repo-config csv is malformed."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws InvalidHeaderException if user-supplied csv file has header that cannot be parsed."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public List\u003cRepoConfiguration\u003e getRepoConfigurations()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Path authorConfigFilePath \u003d cliArguments.getAuthorConfigFilePath();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Path groupConfigFilePath \u003d cliArguments.getGroupConfigFilePath();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (authorConfigFilePath !\u003d null \u0026\u0026 Files.exists(authorConfigFilePath)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                RepoConfiguration.setHasAuthorConfigFileToRepoConfigs(repoConfigs, true);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } catch (IOException | InvalidCsvException e) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                // for all IO and invalid csv exceptions, log the error and continue"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (groupConfigFilePath !\u003d null \u0026\u0026 Files.exists(groupConfigFilePath)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                groupConfigs \u003d new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            } catch (IOException | InvalidCsvException e) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                // for all IO and invalid csv exceptions, log the error and continue"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return repoConfigs;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":69}},{"path":"src/main/java/reposense/model/RepoConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"asdfghjkxd"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.git.GitBranch;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":16,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.ConfigurationBuildException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents configuration information from CSV config file for a single repository."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class RepoConfiguration {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EXTRA_OUTPUT_FOLDER_NAME \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final long DEFAULT_FILE_SIZE_LIMIT \u003d 500000;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoConfiguration.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private RepoLocation location;"},{"lineNumber":30,"author":{"gitId":"asdfghjkxd"},"content":"    private String branch \u003d DEFAULT_BRANCH;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private String displayName;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private String outputFolderName;"},{"lineNumber":33,"author":{"gitId":"asdfghjkxd"},"content":"    private transient String extraOutputFolderName \u003d DEFAULT_EXTRA_OUTPUT_FOLDER_NAME;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private transient ZoneId zoneId;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private transient LocalDateTime sinceDate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private transient LocalDateTime untilDate;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private transient String repoFolderName;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"asdfghjkxd"},"content":"    private transient FileTypeManager fileTypeManager \u003d new FileTypeManager(Collections.emptyList());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoredAuthorsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private transient AuthorConfiguration authorConfig;"},{"lineNumber":43,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isStandaloneConfigIgnored \u003d false;"},{"lineNumber":44,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isFileSizeLimitIgnored \u003d false;"},{"lineNumber":45,"author":{"gitId":"asdfghjkxd"},"content":"    private transient List\u003cCommitHash\u003e ignoreCommitList \u003d Collections.emptyList();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private transient boolean isLastModifiedDateIncluded;"},{"lineNumber":47,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isShallowCloningPerformed \u003d false;"},{"lineNumber":48,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isFindingPreviousAuthorsPerformed \u003d false;"},{"lineNumber":49,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isFormatsOverriding \u003d false;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoreGlobListOverriding;"},{"lineNumber":51,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isIgnoreCommitListOverriding \u003d false;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoredAuthorsListOverriding;"},{"lineNumber":53,"author":{"gitId":"asdfghjkxd"},"content":"    private transient long fileSizeLimit \u003d DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":54,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isFileSizeLimitOverriding \u003d false;"},{"lineNumber":55,"author":{"gitId":"asdfghjkxd"},"content":"    private transient boolean isIgnoredFileAnalysisSkipped \u003d false;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"asdfghjkxd"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"asdfghjkxd"},"content":"     * Constructs an empty instance of {@code RepoConfiguration}, which is used by the {@code Builder}"},{"lineNumber":59,"author":{"gitId":"asdfghjkxd"},"content":"     * to construct new {@code RepoConfiguration} instances."},{"lineNumber":60,"author":{"gitId":"asdfghjkxd"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"asdfghjkxd"},"content":"    private RepoConfiguration() {}"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"asdfghjkxd"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"asdfghjkxd"},"content":"     * Builds the necessary configurations for RepoConfiguration."},{"lineNumber":65,"author":{"gitId":"asdfghjkxd"},"content":"     * Obeys the Builder pattern as described in {@link CliArguments}."},{"lineNumber":66,"author":{"gitId":"asdfghjkxd"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"asdfghjkxd"},"content":"    public static class Builder {"},{"lineNumber":68,"author":{"gitId":"asdfghjkxd"},"content":"        private String displayName;"},{"lineNumber":69,"author":{"gitId":"asdfghjkxd"},"content":"        private String outputFolderName;"},{"lineNumber":70,"author":{"gitId":"asdfghjkxd"},"content":"        private String repoFolderName;"},{"lineNumber":71,"author":{"gitId":"asdfghjkxd"},"content":"        private RepoConfiguration repoConfiguration;"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":74,"author":{"gitId":"asdfghjkxd"},"content":"         * Returns an empty instance of the RepoConfiguration Builder."},{"lineNumber":75,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":76,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder() {"},{"lineNumber":77,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration \u003d new RepoConfiguration();"},{"lineNumber":78,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":81,"author":{"gitId":"asdfghjkxd"},"content":"         * Processes the author configuration of the repository."},{"lineNumber":82,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":83,"author":{"gitId":"asdfghjkxd"},"content":"        private void processAuthor() {"},{"lineNumber":84,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.authorConfig \u003d new AuthorConfiguration("},{"lineNumber":85,"author":{"gitId":"asdfghjkxd"},"content":"                    this.repoConfiguration.location,"},{"lineNumber":86,"author":{"gitId":"asdfghjkxd"},"content":"                    this.repoConfiguration.branch);"},{"lineNumber":87,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":89,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":90,"author":{"gitId":"asdfghjkxd"},"content":"         * Processes the branch of the repository."},{"lineNumber":91,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":92,"author":{"gitId":"asdfghjkxd"},"content":"        private void processBranch() {"},{"lineNumber":93,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.branch \u003d this.repoConfiguration.location.isEmpty()"},{"lineNumber":94,"author":{"gitId":"asdfghjkxd"},"content":"                    ? DEFAULT_BRANCH"},{"lineNumber":95,"author":{"gitId":"asdfghjkxd"},"content":"                    : this.repoConfiguration.branch;"},{"lineNumber":96,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":98,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":99,"author":{"gitId":"asdfghjkxd"},"content":"         * Processes the relevant names of the repository configs."},{"lineNumber":100,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"asdfghjkxd"},"content":"        private void processNames() {"},{"lineNumber":102,"author":{"gitId":"asdfghjkxd"},"content":"            String repoName \u003d this.repoConfiguration.location.getRepoName();"},{"lineNumber":103,"author":{"gitId":"asdfghjkxd"},"content":"            String org \u003d this.repoConfiguration.location.getOrganization();"},{"lineNumber":104,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":105,"author":{"gitId":"asdfghjkxd"},"content":"            String defaultDisplayName \u003d repoName + \"[\" + this.repoConfiguration.branch + \"]\";"},{"lineNumber":106,"author":{"gitId":"asdfghjkxd"},"content":"            String defaultOutputFolderName \u003d repoName + \"_\" + this.repoConfiguration.branch;"},{"lineNumber":107,"author":{"gitId":"asdfghjkxd"},"content":"            String defaultRepoFolderName \u003d repoName;"},{"lineNumber":108,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":109,"author":{"gitId":"asdfghjkxd"},"content":"            if (!org.isEmpty()) {"},{"lineNumber":110,"author":{"gitId":"asdfghjkxd"},"content":"                defaultDisplayName \u003d org + \"/\" + defaultDisplayName;"},{"lineNumber":111,"author":{"gitId":"asdfghjkxd"},"content":"                defaultRepoFolderName \u003d org + \"_\" + defaultRepoFolderName;"},{"lineNumber":112,"author":{"gitId":"asdfghjkxd"},"content":"                defaultOutputFolderName \u003d org + \"_\" + defaultOutputFolderName;"},{"lineNumber":113,"author":{"gitId":"asdfghjkxd"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":115,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.displayName \u003d Optional.ofNullable(this.displayName)"},{"lineNumber":116,"author":{"gitId":"asdfghjkxd"},"content":"                    .orElse(defaultDisplayName);"},{"lineNumber":117,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.outputFolderName \u003d Optional.ofNullable(this.outputFolderName)"},{"lineNumber":118,"author":{"gitId":"asdfghjkxd"},"content":"                    .orElse(defaultOutputFolderName);"},{"lineNumber":119,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.repoFolderName \u003d Optional.ofNullable(this.repoFolderName)"},{"lineNumber":120,"author":{"gitId":"asdfghjkxd"},"content":"                    .orElse(defaultRepoFolderName);"},{"lineNumber":121,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":123,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":124,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code location} for {@code RepoConfiguration}."},{"lineNumber":125,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":126,"author":{"gitId":"asdfghjkxd"},"content":"         * @param location A repository location."},{"lineNumber":127,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object"},{"lineNumber":128,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":129,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder location(RepoLocation location) {"},{"lineNumber":130,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.location \u003d location;"},{"lineNumber":131,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":132,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":134,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":135,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code branch} for {@code RepoConfiguration}."},{"lineNumber":136,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":137,"author":{"gitId":"asdfghjkxd"},"content":"         * @param branch Branch of the repository of interest."},{"lineNumber":138,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":139,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":140,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder branch(String branch) {"},{"lineNumber":141,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.branch \u003d branch;"},{"lineNumber":142,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":143,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":145,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":146,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code displayName} for {@code RepoConfiguration}."},{"lineNumber":147,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":148,"author":{"gitId":"asdfghjkxd"},"content":"         * @param displayName Display name of the repository."},{"lineNumber":149,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":150,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":151,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder displayName(String displayName) {"},{"lineNumber":152,"author":{"gitId":"asdfghjkxd"},"content":"            this.displayName \u003d displayName;"},{"lineNumber":153,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.displayName \u003d displayName;"},{"lineNumber":154,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":155,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":157,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":158,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code outputFolderName} for {@code RepoConfiguration}."},{"lineNumber":159,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":160,"author":{"gitId":"asdfghjkxd"},"content":"         * @param outputFolderName Output folder name of the repository."},{"lineNumber":161,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":162,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":163,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder outputFolderName(String outputFolderName) {"},{"lineNumber":164,"author":{"gitId":"asdfghjkxd"},"content":"            this.outputFolderName \u003d outputFolderName;"},{"lineNumber":165,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.outputFolderName \u003d outputFolderName;"},{"lineNumber":166,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":167,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":169,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":170,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code extraOutputFolderName} for {@code RepoConfiguration}."},{"lineNumber":171,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":172,"author":{"gitId":"asdfghjkxd"},"content":"         * @param extraOutputFolderName Extra output folder name of the repository."},{"lineNumber":173,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":174,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":175,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder extraOutputFolderName(String extraOutputFolderName) {"},{"lineNumber":176,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.extraOutputFolderName \u003d extraOutputFolderName;"},{"lineNumber":177,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":178,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":180,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":181,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code zoneId} for {@code RepoConfiguration}."},{"lineNumber":182,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":183,"author":{"gitId":"asdfghjkxd"},"content":"         * @param zoneId Time-zone of the repository."},{"lineNumber":184,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":185,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":186,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder zoneId(ZoneId zoneId) {"},{"lineNumber":187,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.zoneId \u003d zoneId;"},{"lineNumber":188,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":189,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":191,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":192,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code sinceDate} for {@code RepoConfiguration}."},{"lineNumber":193,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":194,"author":{"gitId":"asdfghjkxd"},"content":"         * @param sinceDate Starting date of analysis."},{"lineNumber":195,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":196,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":197,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder sinceDate(LocalDateTime sinceDate) {"},{"lineNumber":198,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.sinceDate \u003d sinceDate;"},{"lineNumber":199,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":200,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":202,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":203,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code untilDate} for {@code RepoConfiguration}."},{"lineNumber":204,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":205,"author":{"gitId":"asdfghjkxd"},"content":"         * @param untilDate Ending date of analysis."},{"lineNumber":206,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":207,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":208,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder untilDate(LocalDateTime untilDate) {"},{"lineNumber":209,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.untilDate \u003d untilDate;"},{"lineNumber":210,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":211,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":213,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":214,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code repoFolderName} for {@code RepoConfiguration}."},{"lineNumber":215,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":216,"author":{"gitId":"asdfghjkxd"},"content":"         * @param repoFolderName Folder name of the repository."},{"lineNumber":217,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":218,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":219,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder repoFolderName(String repoFolderName) {"},{"lineNumber":220,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoFolderName \u003d repoFolderName;"},{"lineNumber":221,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.repoFolderName \u003d repoFolderName;"},{"lineNumber":222,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":223,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":225,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":226,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code fileTypeManager} for {@code RepoConfiguration}."},{"lineNumber":227,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":228,"author":{"gitId":"asdfghjkxd"},"content":"         * @param fileTypes List of file types and groupings permitted."},{"lineNumber":229,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":230,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":231,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder fileTypeManager(List\u003cFileType\u003e fileTypes) {"},{"lineNumber":232,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.fileTypeManager \u003d new FileTypeManager(fileTypes);"},{"lineNumber":233,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":234,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":236,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":237,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code ignoreGlobList} for {@code RepoConfiguration}."},{"lineNumber":238,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":239,"author":{"gitId":"asdfghjkxd"},"content":"         * @param ignoredGlobList List of glob patterns to ignore."},{"lineNumber":240,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":241,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":242,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder ignoreGlobList(List\u003cString\u003e ignoredGlobList) {"},{"lineNumber":243,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.ignoreGlobList \u003d ignoredGlobList;"},{"lineNumber":244,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":245,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":247,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":248,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code ignoredAuthorsList} for {@code RepoConfiguration}."},{"lineNumber":249,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":250,"author":{"gitId":"asdfghjkxd"},"content":"         * @param ignoredAuthorsList List of authors to ignore."},{"lineNumber":251,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":252,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":253,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder ignoredAuthorsList(List\u003cString\u003e ignoredAuthorsList) {"},{"lineNumber":254,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.ignoredAuthorsList \u003d ignoredAuthorsList;"},{"lineNumber":255,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":256,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":258,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":259,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code authorConfig} for {@code RepoConfiguration}."},{"lineNumber":260,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":261,"author":{"gitId":"asdfghjkxd"},"content":"         * @param authorConfig Author configuration information of the repository."},{"lineNumber":262,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":263,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":264,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder authorConfig(AuthorConfiguration authorConfig) {"},{"lineNumber":265,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.authorConfig \u003d authorConfig;"},{"lineNumber":266,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":267,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":269,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":270,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isStandaloneConfigIgnored} for {@code RepoConfiguration}."},{"lineNumber":271,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":272,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isStandaloneConfigIgnored Checks if standalone config is ignored."},{"lineNumber":273,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":274,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":275,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"},{"lineNumber":276,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":277,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":278,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":280,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":281,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isFileSizeLimitIgnored} for {@code RepoConfiguration}."},{"lineNumber":282,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":283,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isFileSizeLimitIgnored Checks if file size limit is ignored."},{"lineNumber":284,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":285,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":286,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isFileSizeLimitIgnored(boolean isFileSizeLimitIgnored) {"},{"lineNumber":287,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":288,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":289,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":291,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":292,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code ignoreCommitList} for {@code RepoConfiguration}."},{"lineNumber":293,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":294,"author":{"gitId":"asdfghjkxd"},"content":"         * @param ignoreCommitList List of commits to ignore."},{"lineNumber":295,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":296,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":297,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder ignoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"},{"lineNumber":298,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":299,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":300,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":302,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":303,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isLastModifiedDateIncluded} for {@code RepoConfiguration}."},{"lineNumber":304,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":305,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isLastModifiedDateIncluded Checks if last modified date is included."},{"lineNumber":306,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":307,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":308,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isLastModifiedDateIncluded(boolean isLastModifiedDateIncluded) {"},{"lineNumber":309,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":310,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":311,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":312,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":313,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":314,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isShallowCloningPerformed} for {@code RepoConfiguration}."},{"lineNumber":315,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":316,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isShallowCloningPerformed Checks if shallow cloning is performed."},{"lineNumber":317,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":318,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":319,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isShallowCloningPerformed(boolean isShallowCloningPerformed) {"},{"lineNumber":320,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":321,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":322,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":323,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":324,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":325,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isFindingPreviousAuthorsPerformed} for {@code RepoConfiguration}."},{"lineNumber":326,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":327,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isFindingPreviousAuthorsPerformed Checks if finding previous authors is performed."},{"lineNumber":328,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":329,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":330,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isFindingPreviousAuthorsPerformed(boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":331,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":332,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":333,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":335,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":336,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isFormatsOverriding} for {@code RepoConfiguration}."},{"lineNumber":337,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":338,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isFormatsOverriding Checks if file formats are overridden."},{"lineNumber":339,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":340,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":341,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isFormatsOverriding(boolean isFormatsOverriding) {"},{"lineNumber":342,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isFormatsOverriding \u003d isFormatsOverriding;"},{"lineNumber":343,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":344,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":345,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":346,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":347,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isIgnoreGlobListOverriding} for {@code RepoConfiguration}."},{"lineNumber":348,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":349,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isIgnoreGlobListOverriding Checks if the list of ignored glob is overridden."},{"lineNumber":350,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":351,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":352,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isIgnoreGlobListOverriding(boolean isIgnoreGlobListOverriding) {"},{"lineNumber":353,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isIgnoreGlobListOverriding \u003d isIgnoreGlobListOverriding;"},{"lineNumber":354,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":355,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":356,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":357,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":358,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isIgnoreCommitListOverriding} for {@code RepoConfiguration}."},{"lineNumber":359,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":360,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isIgnoreCommitListOverriding Checks if the list of ignored commits is overridden."},{"lineNumber":361,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":362,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":363,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isIgnoreCommitListOverriding(boolean isIgnoreCommitListOverriding) {"},{"lineNumber":364,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isIgnoreCommitListOverriding \u003d isIgnoreCommitListOverriding;"},{"lineNumber":365,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":366,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":367,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":368,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":369,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isFileSizeLimitOverriding} for {@code RepoConfiguration}."},{"lineNumber":370,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":371,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isIgnoredAuthorsListOverriding Checks if the list of ignored authors is overridden."},{"lineNumber":372,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":373,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":374,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isIgnoredAuthorsListOverriding(boolean isIgnoredAuthorsListOverriding) {"},{"lineNumber":375,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isIgnoredAuthorsListOverriding \u003d isIgnoredAuthorsListOverriding;"},{"lineNumber":376,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":377,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":378,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":379,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":380,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code fileSizeLimit} for {@code RepoConfiguration}."},{"lineNumber":381,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":382,"author":{"gitId":"asdfghjkxd"},"content":"         * @param fileSizeLimit File size limit of the repository."},{"lineNumber":383,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":384,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":385,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder fileSizeLimit(long fileSizeLimit) {"},{"lineNumber":386,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.fileSizeLimit \u003d fileSizeLimit;"},{"lineNumber":387,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":388,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":389,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":390,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":391,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isFileSizeLimitOverriding} for {@code RepoConfiguration}."},{"lineNumber":392,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":393,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isFileSizeLimitOverriding Checks if the file size limit is overridden."},{"lineNumber":394,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":395,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":396,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isFileSizeLimitOverriding(boolean isFileSizeLimitOverriding) {"},{"lineNumber":397,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isFileSizeLimitOverriding \u003d isFileSizeLimitOverriding;"},{"lineNumber":398,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":399,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":400,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":401,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":402,"author":{"gitId":"asdfghjkxd"},"content":"         * Updates the {@code isIgnoredFileAnalysisSkipped} for {@code RepoConfiguration}."},{"lineNumber":403,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":404,"author":{"gitId":"asdfghjkxd"},"content":"         * @param isIgnoredFileAnalysisSkipped Checks if the analysis of ignored files is skipped."},{"lineNumber":405,"author":{"gitId":"asdfghjkxd"},"content":"         * @return This builder object."},{"lineNumber":406,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":407,"author":{"gitId":"asdfghjkxd"},"content":"        public Builder isIgnoredFileAnalysisSkipped(boolean isIgnoredFileAnalysisSkipped) {"},{"lineNumber":408,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration.isIgnoredFileAnalysisSkipped \u003d isIgnoredFileAnalysisSkipped;"},{"lineNumber":409,"author":{"gitId":"asdfghjkxd"},"content":"            return this;"},{"lineNumber":410,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":411,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":412,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":413,"author":{"gitId":"asdfghjkxd"},"content":"         * Builds the {@code RepoConfiguration} object with the necessary configurations."},{"lineNumber":414,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":415,"author":{"gitId":"asdfghjkxd"},"content":"         * @return {@code RepoConfiguration}."},{"lineNumber":416,"author":{"gitId":"asdfghjkxd"},"content":"         * @throws ConfigurationBuildException if there was an issue building the {@code RepoConfiguration}"},{"lineNumber":417,"author":{"gitId":"asdfghjkxd"},"content":"         *     object."},{"lineNumber":418,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":419,"author":{"gitId":"asdfghjkxd"},"content":"        public RepoConfiguration build() {"},{"lineNumber":420,"author":{"gitId":"asdfghjkxd"},"content":"            if (!validate()) {"},{"lineNumber":421,"author":{"gitId":"asdfghjkxd"},"content":"                throw new ConfigurationBuildException();"},{"lineNumber":422,"author":{"gitId":"asdfghjkxd"},"content":"            }"},{"lineNumber":423,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":424,"author":{"gitId":"asdfghjkxd"},"content":"            this.processAuthor();"},{"lineNumber":425,"author":{"gitId":"asdfghjkxd"},"content":"            this.processBranch();"},{"lineNumber":426,"author":{"gitId":"asdfghjkxd"},"content":"            this.processNames();"},{"lineNumber":427,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":428,"author":{"gitId":"asdfghjkxd"},"content":"            // save a reference to the current built object"},{"lineNumber":429,"author":{"gitId":"asdfghjkxd"},"content":"            RepoConfiguration toReturn \u003d this.repoConfiguration;"},{"lineNumber":430,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":431,"author":{"gitId":"asdfghjkxd"},"content":"            // reset the internal reference to avoid aliasing"},{"lineNumber":432,"author":{"gitId":"asdfghjkxd"},"content":"            this.repoConfiguration \u003d new RepoConfiguration();"},{"lineNumber":433,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":434,"author":{"gitId":"asdfghjkxd"},"content":"            // return the reference to the built RepoConfiguration object"},{"lineNumber":435,"author":{"gitId":"asdfghjkxd"},"content":"            return toReturn;"},{"lineNumber":436,"author":{"gitId":"asdfghjkxd"},"content":"        }"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"asdfghjkxd"},"content":"        /**"},{"lineNumber":439,"author":{"gitId":"asdfghjkxd"},"content":"         * Checks if the current {@code RepoConfiguration} object contains all the necessary parameters"},{"lineNumber":440,"author":{"gitId":"asdfghjkxd"},"content":"         * needed to build successfully."},{"lineNumber":441,"author":{"gitId":"asdfghjkxd"},"content":"         *"},{"lineNumber":442,"author":{"gitId":"asdfghjkxd"},"content":"         * @return true if the {@code RepoConfiguration} object contains all the necessary parameters else false"},{"lineNumber":443,"author":{"gitId":"asdfghjkxd"},"content":"         */"},{"lineNumber":444,"author":{"gitId":"asdfghjkxd"},"content":"        private boolean validate() {"},{"lineNumber":445,"author":{"gitId":"asdfghjkxd"},"content":"            return Optional.ofNullable(this.repoConfiguration.location).isPresent();"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"    public static void setDatesToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            LocalDateTime sinceDate, LocalDateTime untilDate) {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":452,"author":{"gitId":"-"},"content":"            config.setSinceDate(sinceDate);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"            config.setUntilDate(untilDate);"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"    public static void setZoneIdToRepoConfigs(List\u003cRepoConfiguration\u003e configs, ZoneId zoneId) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"            config.setZoneId(zoneId);"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"    public static void setIsLastModifiedDateIncludedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":464,"author":{"gitId":"-"},"content":"                                                                  boolean isLastModifiedDateIncluded) {"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":466,"author":{"gitId":"-"},"content":"            config.setIsLastModifiedDateIncluded(isLastModifiedDateIncluded);"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"    public static void setIsShallowCloningPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":471,"author":{"gitId":"-"},"content":"                                                                 boolean isShallowCloningPerformed) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        if (isShallowCloningPerformed) {"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setIsShallowCloningPerformed(true));"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"    public static void setIsFindingPreviousAuthorsPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                                                                         boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        if (isFindingPreviousAuthorsPerformed) {"},{"lineNumber":480,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setIsFindingPreviousAuthorsPerformed(true));"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"    public static void setHasAuthorConfigFileToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                                                           boolean setHasAuthorConfigFile) {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"        configs.stream().forEach(config -\u003e config.setHasAuthorConfigFile(setHasAuthorConfigFile));"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":490,"author":{"gitId":"-"},"content":"     * Merges a {@link RepoConfiguration} from {@code repoConfigs} with an {@link AuthorConfiguration} from"},{"lineNumber":491,"author":{"gitId":"-"},"content":"     * {@code authorConfigs} if their {@link RepoLocation} and branch matches."},{"lineNumber":492,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    public static void merge(List\u003cRepoConfiguration\u003e repoConfigs, List\u003cAuthorConfiguration\u003e authorConfigs) {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        for (AuthorConfiguration authorConfig : authorConfigs) {"},{"lineNumber":495,"author":{"gitId":"-"},"content":"            if (authorConfig.getLocation().isEmpty()) {"},{"lineNumber":496,"author":{"gitId":"-"},"content":"                for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"                    repoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":498,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":499,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":500,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e locationMatchingRepoConfigs \u003d"},{"lineNumber":503,"author":{"gitId":"-"},"content":"                    getMatchingRepoConfigsByLocation(repoConfigs, authorConfig.getLocation());"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"            if (locationMatchingRepoConfigs.isEmpty()) {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":507,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\","},{"lineNumber":508,"author":{"gitId":"-"},"content":"                        authorConfig.getLocation()));"},{"lineNumber":509,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":510,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":511,"author":{"gitId":"-"},"content":"            if (authorConfig.isDefaultBranch()) {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"                locationMatchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"                    matchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":515,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":516,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":517,"author":{"gitId":"-"},"content":""},{"lineNumber":518,"author":{"gitId":"-"},"content":"            RepoConfiguration branchMatchingRepoConfig \u003d getMatchingRepoConfig(repoConfigs, authorConfig);"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":"            if (branchMatchingRepoConfig \u003d\u003d null) {"},{"lineNumber":521,"author":{"gitId":"-"},"content":"                if (!authorConfig.isDefaultBranch()) {"},{"lineNumber":522,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":523,"author":{"gitId":"-"},"content":"                            \"Repository %s (branch %s) is not found in repo-config.csv.\","},{"lineNumber":524,"author":{"gitId":"-"},"content":"                            authorConfig.getLocation(), authorConfig.getBranch()));"},{"lineNumber":525,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":526,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":527,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"            branchMatchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":534,"author":{"gitId":"-"},"content":"     * Sets the list of groups in {@code groupConfigs} to the respective {@code repoConfigs}."},{"lineNumber":535,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    public static void setGroupConfigsToRepos(List\u003cRepoConfiguration\u003e repoConfigs,"},{"lineNumber":537,"author":{"gitId":"-"},"content":"            List\u003cGroupConfiguration\u003e groupConfigs) {"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        for (GroupConfiguration groupConfig : groupConfigs) {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e matchingRepoConfigs;"},{"lineNumber":540,"author":{"gitId":"-"},"content":"            if (groupConfig.getLocation().isEmpty()) {"},{"lineNumber":541,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d repoConfigs;"},{"lineNumber":542,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d getMatchingRepoConfigsByLocation(repoConfigs,"},{"lineNumber":544,"author":{"gitId":"-"},"content":"                        groupConfig.getLocation());"},{"lineNumber":545,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":546,"author":{"gitId":"-"},"content":"            if (matchingRepoConfigs.isEmpty()) {"},{"lineNumber":547,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":548,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\", groupConfig.getLocation()));"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":550,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":551,"author":{"gitId":"-"},"content":"            matchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":552,"author":{"gitId":"-"},"content":"                matchingRepoConfig.addGroups(groupConfig.getGroupsList());"},{"lineNumber":553,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":555,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":558,"author":{"gitId":"-"},"content":"     * Iterates through {@code repoConfigs} to find a {@link RepoConfiguration} with {@link RepoLocation} and branch"},{"lineNumber":559,"author":{"gitId":"-"},"content":"     * that matches {@code authorConfig}. Returns {@code null} if no match is found."},{"lineNumber":560,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":561,"author":{"gitId":"-"},"content":"    private static RepoConfiguration getMatchingRepoConfig(List\u003cRepoConfiguration\u003e repoConfigs,"},{"lineNumber":562,"author":{"gitId":"-"},"content":"            AuthorConfiguration authorConfig) {"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        if (authorConfig.isDefaultBranch()) {"},{"lineNumber":564,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":567,"author":{"gitId":"-"},"content":"            if (repoConfig.getLocation().equals(authorConfig.getLocation())"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                    \u0026\u0026 repoConfig.getBranch().equals(authorConfig.getBranch())) {"},{"lineNumber":569,"author":{"gitId":"-"},"content":"                return repoConfig;"},{"lineNumber":570,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":573,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":576,"author":{"gitId":"-"},"content":"     * Returns a list of {@link RepoConfiguration} where the {@link RepoLocation} of a {@link RepoConfiguration}"},{"lineNumber":577,"author":{"gitId":"-"},"content":"     * in the list of {@code configs} matches {@code targetRepoLocation}."},{"lineNumber":578,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    private static List\u003cRepoConfiguration\u003e getMatchingRepoConfigsByLocation(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":580,"author":{"gitId":"-"},"content":"            RepoLocation targetRepoLocation) {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        return configs.stream().filter(config -\u003e config.getLocation().equals(targetRepoLocation))"},{"lineNumber":582,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":583,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":586,"author":{"gitId":"-"},"content":"     * Sets {@code formats} to {@link RepoConfiguration} in {@code configs} if its format list is empty."},{"lineNumber":587,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":588,"author":{"gitId":"-"},"content":"    public static void setFormatsToRepoConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cFileType\u003e formats) {"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            if (!config.fileTypeManager.hasSpecifiedFormats()) {"},{"lineNumber":591,"author":{"gitId":"-"},"content":"                config.fileTypeManager.setFormats(formats);"},{"lineNumber":592,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":594,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":597,"author":{"gitId":"-"},"content":"     * Sets each {@link RepoConfiguration} in {@code configs} to ignore its standalone config, if"},{"lineNumber":598,"author":{"gitId":"-"},"content":"     * {@code ignoreAllStandaloneConfigs} is true."},{"lineNumber":599,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    public static void setStandaloneConfigIgnoredToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":601,"author":{"gitId":"-"},"content":"            boolean ignoreAllStandaloneConfigs) {"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        if (ignoreAllStandaloneConfigs) {"},{"lineNumber":603,"author":{"gitId":"-"},"content":"            configs.forEach(config -\u003e config.setStandaloneConfigIgnored(true));"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":605,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":608,"author":{"gitId":"-"},"content":"     * Sets each {@link RepoConfiguration} in {@code configs} to ignore its filesize limit, if"},{"lineNumber":609,"author":{"gitId":"-"},"content":"     * {@code ignoreFilesizeLimit} is true."},{"lineNumber":610,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":611,"author":{"gitId":"-"},"content":"    public static void setFileSizeLimitIgnoredToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":612,"author":{"gitId":"-"},"content":"                                                            boolean ignoreFileSizeLimit) {"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        if (ignoreFileSizeLimit) {"},{"lineNumber":614,"author":{"gitId":"-"},"content":"            configs.forEach(config -\u003e config.setFileSizeLimitIgnored(true));"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":619,"author":{"gitId":"-"},"content":"     * Checks if any of the {@code configs} is finding previous authors for commit analysis."},{"lineNumber":620,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    public static boolean isAnyRepoFindingPreviousAuthors(List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        return configs.stream().anyMatch(RepoConfiguration::isFindingPreviousAuthorsPerformed);"},{"lineNumber":623,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":624,"author":{"gitId":"-"},"content":""},{"lineNumber":625,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":626,"author":{"gitId":"-"},"content":"     * Clears existing information related to this repository and its authors, and replaces it with information from"},{"lineNumber":627,"author":{"gitId":"-"},"content":"     * {@code standaloneConfig}."},{"lineNumber":628,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":629,"author":{"gitId":"-"},"content":"    public void update(StandaloneConfig standaloneConfig) {"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        // only assign the new values when all the fields in {@code standaloneConfig} pass the validations."},{"lineNumber":631,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e replacementFileTypes \u003d FileType.convertFormatStringsToFileTypes(standaloneConfig.getFormats());"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        CommitHash.validateCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"        if (!isIgnoreGlobListOverriding) {"},{"lineNumber":635,"author":{"gitId":"-"},"content":"            ignoreGlobList \u003d standaloneConfig.getIgnoreGlobList();"},{"lineNumber":636,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":637,"author":{"gitId":"-"},"content":"        if (!isFormatsOverriding) {"},{"lineNumber":638,"author":{"gitId":"-"},"content":"            fileTypeManager.setFormats(replacementFileTypes);"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        if (!isIgnoreCommitListOverriding) {"},{"lineNumber":641,"author":{"gitId":"-"},"content":"            ignoreCommitList \u003d CommitHash.convertStringsToCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        if (!isIgnoredAuthorsListOverriding) {"},{"lineNumber":644,"author":{"gitId":"-"},"content":"            ignoredAuthorsList \u003d standaloneConfig.getIgnoreAuthorList();"},{"lineNumber":645,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":646,"author":{"gitId":"-"},"content":"        if (!isFileSizeLimitOverriding) {"},{"lineNumber":647,"author":{"gitId":"-"},"content":"            fileSizeLimit \u003d standaloneConfig.getFileSizeLimit();"},{"lineNumber":648,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":649,"author":{"gitId":"-"},"content":"        authorConfig.update(standaloneConfig, ignoreGlobList);"},{"lineNumber":650,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"-"},"content":""},{"lineNumber":652,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":653,"author":{"gitId":"-"},"content":"     * Returns the matching {@link Author} given a {@code name} and an {@code email}."},{"lineNumber":654,"author":{"gitId":"-"},"content":"     * If no matching {@link Author} is found, {@link Author#UNKNOWN_AUTHOR} is returned."},{"lineNumber":655,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":656,"author":{"gitId":"-"},"content":"    public Author getAuthor(String name, String email) {"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthor(name, email);"},{"lineNumber":658,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":659,"author":{"gitId":"-"},"content":""},{"lineNumber":660,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":661,"author":{"gitId":"-"},"content":"     * Updates branch with {@code currentBranch} if default branch is specified."},{"lineNumber":662,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":663,"author":{"gitId":"-"},"content":"    public void updateBranch(String currentBranch) {"},{"lineNumber":664,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":665,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":667,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":668,"author":{"gitId":"-"},"content":""},{"lineNumber":669,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":670,"author":{"gitId":"-"},"content":"     * Gets the current branch and updates branch with current branch if default branch is specified."},{"lineNumber":671,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":672,"author":{"gitId":"-"},"content":"     * @throws GitBranchException if current branch cannot be retrieved."},{"lineNumber":673,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":674,"author":{"gitId":"-"},"content":"    public void updateBranch() throws GitBranchException {"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":676,"author":{"gitId":"-"},"content":"            String currentBranch \u003d GitBranch.getCurrentBranch(getRepoRoot());"},{"lineNumber":677,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":679,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":682,"author":{"gitId":"-"},"content":"     * Gets the path to the root folder of the repository."},{"lineNumber":683,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":684,"author":{"gitId":"-"},"content":"    public String getRepoRoot() {"},{"lineNumber":685,"author":{"gitId":"-"},"content":"        String path \u003d FileUtil.REPOS_ADDRESS + File.separator + getRepoFolderName() + File.separator;"},{"lineNumber":686,"author":{"gitId":"-"},"content":""},{"lineNumber":687,"author":{"gitId":"-"},"content":"        if (!getRepoName().isEmpty()) {"},{"lineNumber":688,"author":{"gitId":"-"},"content":"            if (!extraOutputFolderName.isEmpty()) {"},{"lineNumber":689,"author":{"gitId":"-"},"content":"                path +\u003d extraOutputFolderName + File.separator;"},{"lineNumber":690,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":"            path +\u003d getRepoName() + File.separator;"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":694,"author":{"gitId":"-"},"content":""},{"lineNumber":695,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":696,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":699,"author":{"gitId":"-"},"content":"     * Gets the name of the folder containing the cloned repository; the parent directory of the repo\u0027s root folder."},{"lineNumber":700,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":701,"author":{"gitId":"-"},"content":"    public String getRepoFolderName() {"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        return repoFolderName;"},{"lineNumber":703,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":704,"author":{"gitId":"-"},"content":""},{"lineNumber":705,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":706,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":709,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"-"},"content":"        if (!(other instanceof RepoConfiguration)) {"},{"lineNumber":713,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":714,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":715,"author":{"gitId":"-"},"content":""},{"lineNumber":716,"author":{"gitId":"-"},"content":"        RepoConfiguration otherRepoConfig \u003d (RepoConfiguration) other;"},{"lineNumber":717,"author":{"gitId":"-"},"content":""},{"lineNumber":718,"author":{"gitId":"-"},"content":"        return location.equals(otherRepoConfig.location)"},{"lineNumber":719,"author":{"gitId":"-"},"content":"                \u0026\u0026 branch.equals(otherRepoConfig.branch)"},{"lineNumber":720,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorConfig.equals(otherRepoConfig.authorConfig)"},{"lineNumber":721,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoreGlobList.equals(otherRepoConfig.ignoreGlobList)"},{"lineNumber":722,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoredAuthorsList.equals(otherRepoConfig.ignoredAuthorsList)"},{"lineNumber":723,"author":{"gitId":"-"},"content":"                \u0026\u0026 fileSizeLimit \u003d\u003d otherRepoConfig.fileSizeLimit"},{"lineNumber":724,"author":{"gitId":"-"},"content":"                \u0026\u0026 isStandaloneConfigIgnored \u003d\u003d otherRepoConfig.isStandaloneConfigIgnored"},{"lineNumber":725,"author":{"gitId":"-"},"content":"                \u0026\u0026 fileTypeManager.equals(otherRepoConfig.fileTypeManager)"},{"lineNumber":726,"author":{"gitId":"-"},"content":"                \u0026\u0026 isLastModifiedDateIncluded \u003d\u003d otherRepoConfig.isLastModifiedDateIncluded"},{"lineNumber":727,"author":{"gitId":"-"},"content":"                \u0026\u0026 isFormatsOverriding \u003d\u003d otherRepoConfig.isFormatsOverriding"},{"lineNumber":728,"author":{"gitId":"-"},"content":"                \u0026\u0026 isShallowCloningPerformed \u003d\u003d otherRepoConfig.isShallowCloningPerformed"},{"lineNumber":729,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreGlobListOverriding \u003d\u003d otherRepoConfig.isIgnoreGlobListOverriding"},{"lineNumber":730,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreCommitListOverriding \u003d\u003d otherRepoConfig.isIgnoreCommitListOverriding"},{"lineNumber":731,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoredAuthorsListOverriding \u003d\u003d otherRepoConfig.isIgnoredAuthorsListOverriding"},{"lineNumber":732,"author":{"gitId":"-"},"content":"                \u0026\u0026 isFileSizeLimitOverriding \u003d\u003d otherRepoConfig.isFileSizeLimitOverriding"},{"lineNumber":733,"author":{"gitId":"-"},"content":"                \u0026\u0026 isFileSizeLimitIgnored \u003d\u003d otherRepoConfig.isFileSizeLimitIgnored"},{"lineNumber":734,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoredFileAnalysisSkipped \u003d\u003d otherRepoConfig.isIgnoredFileAnalysisSkipped;"},{"lineNumber":735,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":736,"author":{"gitId":"-"},"content":""},{"lineNumber":737,"author":{"gitId":"-"},"content":"    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"},{"lineNumber":738,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorDisplayNameMap();"},{"lineNumber":739,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":740,"author":{"gitId":"-"},"content":""},{"lineNumber":741,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"},{"lineNumber":742,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayNameMap(authorDisplayNameMap);"},{"lineNumber":743,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":744,"author":{"gitId":"-"},"content":""},{"lineNumber":745,"author":{"gitId":"-"},"content":"    public String getBranch() {"},{"lineNumber":746,"author":{"gitId":"-"},"content":"        return branch;"},{"lineNumber":747,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":748,"author":{"gitId":"-"},"content":""},{"lineNumber":749,"author":{"gitId":"-"},"content":"    public void setBranch(String branch) {"},{"lineNumber":750,"author":{"gitId":"-"},"content":"        updateDisplayName(branch);"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        updateOutputFolderName(branch);"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        this.branch \u003d branch;"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        authorConfig.setBranch(branch);"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":755,"author":{"gitId":"-"},"content":""},{"lineNumber":756,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":757,"author":{"gitId":"-"},"content":"     * Updates the branch in the {@code displayName} to the current {@code branch}."},{"lineNumber":758,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":759,"author":{"gitId":"-"},"content":"    public void updateDisplayName(String branch) {"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName.substring(0, displayName.lastIndexOf(\u0027[\u0027) + 1) + branch + \"]\";"},{"lineNumber":761,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":764,"author":{"gitId":"-"},"content":"     * Updates the branch in the {@code outputFolderName} to the current {@code branch}."},{"lineNumber":765,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":766,"author":{"gitId":"-"},"content":"    public void updateOutputFolderName(String branch) {"},{"lineNumber":767,"author":{"gitId":"-"},"content":"        this.outputFolderName \u003d outputFolderName.substring(0, outputFolderName.lastIndexOf(\u0027_\u0027) + 1) + branch;"},{"lineNumber":768,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":769,"author":{"gitId":"-"},"content":""},{"lineNumber":770,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":772,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":773,"author":{"gitId":"-"},"content":""},{"lineNumber":774,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d ignoreGlobList;"},{"lineNumber":776,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":777,"author":{"gitId":"-"},"content":""},{"lineNumber":778,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e getIgnoreCommitList() {"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        return ignoreCommitList;"},{"lineNumber":780,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":781,"author":{"gitId":"-"},"content":""},{"lineNumber":782,"author":{"gitId":"-"},"content":"    public long getFileSizeLimit() {"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        return fileSizeLimit;"},{"lineNumber":784,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":785,"author":{"gitId":"-"},"content":""},{"lineNumber":786,"author":{"gitId":"-"},"content":"    public void setIgnoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        this.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":788,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoredAuthorsList() {"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        return this.ignoredAuthorsList;"},{"lineNumber":792,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"-"},"content":"    public void setIgnoredAuthorsList(List\u003cString\u003e ignoredAuthorsList) {"},{"lineNumber":795,"author":{"gitId":"-"},"content":"        this.ignoredAuthorsList \u003d ignoredAuthorsList;"},{"lineNumber":796,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":797,"author":{"gitId":"-"},"content":""},{"lineNumber":798,"author":{"gitId":"-"},"content":"    public boolean isIgnoredAuthorsListOverriding() {"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        return this.isIgnoredAuthorsListOverriding;"},{"lineNumber":800,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":801,"author":{"gitId":"-"},"content":""},{"lineNumber":802,"author":{"gitId":"-"},"content":"    public void setIsLastModifiedDateIncluded(boolean lastModifiedDateIncluded) {"},{"lineNumber":803,"author":{"gitId":"-"},"content":"        this.isLastModifiedDateIncluded \u003d lastModifiedDateIncluded;"},{"lineNumber":804,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":805,"author":{"gitId":"-"},"content":""},{"lineNumber":806,"author":{"gitId":"-"},"content":"    public void setIsShallowCloningPerformed(boolean isShallowCloningPerformed) {"},{"lineNumber":807,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":808,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"    public void setIsFindingPreviousAuthorsPerformed(boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        this.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":812,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":813,"author":{"gitId":"-"},"content":""},{"lineNumber":814,"author":{"gitId":"-"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        return this.isLastModifiedDateIncluded;"},{"lineNumber":816,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":817,"author":{"gitId":"-"},"content":""},{"lineNumber":818,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        return this.isShallowCloningPerformed;"},{"lineNumber":820,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":821,"author":{"gitId":"-"},"content":""},{"lineNumber":822,"author":{"gitId":"-"},"content":"    public void setIsIgnoredAuthorsListOverriding(boolean isIgnoredAuthorsListOverriding) {"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        this.isIgnoredAuthorsListOverriding \u003d isIgnoredAuthorsListOverriding;"},{"lineNumber":824,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":825,"author":{"gitId":"-"},"content":""},{"lineNumber":826,"author":{"gitId":"-"},"content":"    public void removeIgnoredAuthors() {"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        authorConfig.removeIgnoredAuthors(ignoredAuthorsList);"},{"lineNumber":828,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":829,"author":{"gitId":"-"},"content":""},{"lineNumber":830,"author":{"gitId":"-"},"content":"    public List\u003cAuthor\u003e getAuthorList() {"},{"lineNumber":831,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorList();"},{"lineNumber":832,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":833,"author":{"gitId":"-"},"content":""},{"lineNumber":834,"author":{"gitId":"-"},"content":"    public void addAuthor(Author author) {"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        authorConfig.addAuthor(author, this.getIgnoreGlobList());"},{"lineNumber":836,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"-"},"content":"    public void addAuthors(List\u003cAuthor\u003e authorList) {"},{"lineNumber":839,"author":{"gitId":"-"},"content":"        authorConfig.addAuthors(authorList, this.getIgnoreGlobList());"},{"lineNumber":840,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":841,"author":{"gitId":"-"},"content":""},{"lineNumber":842,"author":{"gitId":"-"},"content":"    public void setAuthorConfiguration(AuthorConfiguration authorConfig) {"},{"lineNumber":843,"author":{"gitId":"-"},"content":"        this.authorConfig \u003d authorConfig;"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        for (Author author : authorConfig.getAuthorList()) {"},{"lineNumber":845,"author":{"gitId":"-"},"content":"            AuthorConfiguration.propagateIgnoreGlobList(author, ignoreGlobList);"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":847,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":848,"author":{"gitId":"-"},"content":""},{"lineNumber":849,"author":{"gitId":"-"},"content":"    public boolean containsAuthor(Author author) {"},{"lineNumber":850,"author":{"gitId":"-"},"content":"        return authorConfig.containsAuthor(author);"},{"lineNumber":851,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":852,"author":{"gitId":"-"},"content":""},{"lineNumber":853,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":854,"author":{"gitId":"-"},"content":"     * Clears authors information and sets the {@code authorList} to {@link RepoConfiguration}."},{"lineNumber":855,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":856,"author":{"gitId":"-"},"content":"    public void setAuthorList(List\u003cAuthor\u003e authorList) {"},{"lineNumber":857,"author":{"gitId":"-"},"content":"        authorConfig.clear();"},{"lineNumber":858,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorList(authorList);"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        authorConfig.buildFromAuthorList();"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        authorList.forEach(author -\u003e AuthorConfiguration.propagateIgnoreGlobList(author, this.getIgnoreGlobList()));"},{"lineNumber":861,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":862,"author":{"gitId":"-"},"content":""},{"lineNumber":863,"author":{"gitId":"-"},"content":"    public void setHasAuthorConfigFile(boolean hasAuthorConfigFile) {"},{"lineNumber":864,"author":{"gitId":"-"},"content":"        authorConfig.setHasAuthorConfigFile(hasAuthorConfigFile);"},{"lineNumber":865,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":866,"author":{"gitId":"-"},"content":""},{"lineNumber":867,"author":{"gitId":"-"},"content":"    public Map\u003cString, Author\u003e getAuthorNamesToAuthorMap() {"},{"lineNumber":868,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorNamesToAuthorMap();"},{"lineNumber":869,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":870,"author":{"gitId":"-"},"content":""},{"lineNumber":871,"author":{"gitId":"-"},"content":"    public void setAuthorNamesToAuthorMap(Map\u003cString, Author\u003e authorNamesToAuthorMap) {"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorNamesToAuthorMap(authorNamesToAuthorMap);"},{"lineNumber":873,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":874,"author":{"gitId":"-"},"content":""},{"lineNumber":875,"author":{"gitId":"-"},"content":"    public Map\u003cString, Author\u003e getAuthorEmailsToAuthorMap() {"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorEmailsToAuthorMap();"},{"lineNumber":877,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":878,"author":{"gitId":"-"},"content":""},{"lineNumber":879,"author":{"gitId":"-"},"content":"    public void setAuthorEmailsToAuthorMap(Map\u003cString, Author\u003e authorEmailsToAuthorMap) {"},{"lineNumber":880,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorEmailsToAuthorMap(authorEmailsToAuthorMap);"},{"lineNumber":881,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":882,"author":{"gitId":"-"},"content":""},{"lineNumber":883,"author":{"gitId":"-"},"content":"    public void clearAuthorDetailsToAuthorMap() {"},{"lineNumber":884,"author":{"gitId":"-"},"content":"        authorConfig.clearAuthorDetailsToAuthorMap();"},{"lineNumber":885,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":886,"author":{"gitId":"-"},"content":""},{"lineNumber":887,"author":{"gitId":"-"},"content":"    public void setFormats(List\u003cFileType\u003e formats) {"},{"lineNumber":888,"author":{"gitId":"-"},"content":"        fileTypeManager.setFormats(formats);"},{"lineNumber":889,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":890,"author":{"gitId":"-"},"content":""},{"lineNumber":891,"author":{"gitId":"-"},"content":"    private void setGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":892,"author":{"gitId":"-"},"content":"        fileTypeManager.setGroups(groups);"},{"lineNumber":893,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":894,"author":{"gitId":"-"},"content":""},{"lineNumber":895,"author":{"gitId":"-"},"content":"    public void addGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":896,"author":{"gitId":"-"},"content":"        fileTypeManager.addGroups(groups);"},{"lineNumber":897,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":898,"author":{"gitId":"-"},"content":""},{"lineNumber":899,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":900,"author":{"gitId":"-"},"content":"     * Returns all format or group types (depending on whether the user has specified a custom grouping)."},{"lineNumber":901,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":902,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getAllFileTypes() {"},{"lineNumber":903,"author":{"gitId":"-"},"content":"        return fileTypeManager.getAllFileTypes();"},{"lineNumber":904,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":905,"author":{"gitId":"-"},"content":""},{"lineNumber":906,"author":{"gitId":"-"},"content":"    public FileType getFileType(String fileName) {"},{"lineNumber":907,"author":{"gitId":"-"},"content":"        return fileTypeManager.getFileType(fileName);"},{"lineNumber":908,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":909,"author":{"gitId":"-"},"content":""},{"lineNumber":910,"author":{"gitId":"-"},"content":"    public FileTypeManager getFileTypeManager() {"},{"lineNumber":911,"author":{"gitId":"-"},"content":"        return fileTypeManager;"},{"lineNumber":912,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":913,"author":{"gitId":"-"},"content":""},{"lineNumber":914,"author":{"gitId":"-"},"content":"    public LocalDateTime getSinceDate() {"},{"lineNumber":915,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":916,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":917,"author":{"gitId":"-"},"content":""},{"lineNumber":918,"author":{"gitId":"-"},"content":"    public void setSinceDate(LocalDateTime sinceDate) {"},{"lineNumber":919,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":920,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":921,"author":{"gitId":"-"},"content":""},{"lineNumber":922,"author":{"gitId":"-"},"content":"    public LocalDateTime getUntilDate() {"},{"lineNumber":923,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":924,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":925,"author":{"gitId":"-"},"content":""},{"lineNumber":926,"author":{"gitId":"-"},"content":"    public void setUntilDate(LocalDateTime untilDate) {"},{"lineNumber":927,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":928,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":929,"author":{"gitId":"-"},"content":""},{"lineNumber":930,"author":{"gitId":"-"},"content":"    public ZoneId getZoneId() {"},{"lineNumber":931,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":932,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":933,"author":{"gitId":"-"},"content":""},{"lineNumber":934,"author":{"gitId":"-"},"content":"    public void setZoneId(ZoneId zoneId) {"},{"lineNumber":935,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":936,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":937,"author":{"gitId":"-"},"content":""},{"lineNumber":938,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayName(Author author, String displayName) {"},{"lineNumber":939,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayName(author, displayName);"},{"lineNumber":940,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":941,"author":{"gitId":"-"},"content":""},{"lineNumber":942,"author":{"gitId":"-"},"content":"    public void addAuthorNamesToAuthorMapEntry(Author author, String name) {"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        authorConfig.addAuthorNamesToAuthorMapEntry(author, name);"},{"lineNumber":944,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":945,"author":{"gitId":"-"},"content":""},{"lineNumber":946,"author":{"gitId":"-"},"content":"    public void addAuthorNamesToAuthorMapEntry(Author author, List\u003cString\u003e names) {"},{"lineNumber":947,"author":{"gitId":"-"},"content":"        authorConfig.addAuthorNamesToAuthorMapEntry(author, names);"},{"lineNumber":948,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":949,"author":{"gitId":"-"},"content":""},{"lineNumber":950,"author":{"gitId":"-"},"content":"    public void addAuthorEmailsToAuthorMapEntry(Author author, List\u003cString\u003e emails) {"},{"lineNumber":951,"author":{"gitId":"-"},"content":"        authorConfig.addAuthorEmailsToAuthorMapEntry(author, emails);"},{"lineNumber":952,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":953,"author":{"gitId":"-"},"content":""},{"lineNumber":954,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":955,"author":{"gitId":"-"},"content":"        return displayName;"},{"lineNumber":956,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":957,"author":{"gitId":"-"},"content":""},{"lineNumber":958,"author":{"gitId":"-"},"content":"    public String getRepoName() {"},{"lineNumber":959,"author":{"gitId":"-"},"content":"        return location.getRepoName();"},{"lineNumber":960,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":961,"author":{"gitId":"-"},"content":""},{"lineNumber":962,"author":{"gitId":"-"},"content":"    public String getOutputFolderName() {"},{"lineNumber":963,"author":{"gitId":"-"},"content":"        return outputFolderName;"},{"lineNumber":964,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":965,"author":{"gitId":"-"},"content":""},{"lineNumber":966,"author":{"gitId":"-"},"content":"    public void setStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":968,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":969,"author":{"gitId":"-"},"content":""},{"lineNumber":970,"author":{"gitId":"-"},"content":"    public void setFileSizeLimitIgnored(boolean isFileSizeLimitIgnored) {"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        this.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":972,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"    public RepoLocation getLocation() {"},{"lineNumber":975,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":976,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":977,"author":{"gitId":"-"},"content":""},{"lineNumber":978,"author":{"gitId":"-"},"content":"    public String getOrganization() {"},{"lineNumber":979,"author":{"gitId":"-"},"content":"        return location.getOrganization();"},{"lineNumber":980,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":981,"author":{"gitId":"-"},"content":""},{"lineNumber":982,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":983,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":984,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":985,"author":{"gitId":"-"},"content":""},{"lineNumber":986,"author":{"gitId":"-"},"content":"    public boolean isFileSizeLimitIgnored() {"},{"lineNumber":987,"author":{"gitId":"-"},"content":"        return isFileSizeLimitIgnored;"},{"lineNumber":988,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":989,"author":{"gitId":"-"},"content":""},{"lineNumber":990,"author":{"gitId":"-"},"content":"    public boolean isIgnoredFileAnalysisSkipped() {"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        return isIgnoredFileAnalysisSkipped;"},{"lineNumber":992,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":993,"author":{"gitId":"-"},"content":""},{"lineNumber":994,"author":{"gitId":"-"},"content":"    public boolean isFormatsOverriding() {"},{"lineNumber":995,"author":{"gitId":"-"},"content":"        return isFormatsOverriding;"},{"lineNumber":996,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":997,"author":{"gitId":"-"},"content":""},{"lineNumber":998,"author":{"gitId":"-"},"content":"    public boolean isIgnoreGlobListOverriding() {"},{"lineNumber":999,"author":{"gitId":"-"},"content":"        return isIgnoreGlobListOverriding;"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1001,"author":{"gitId":"-"},"content":""},{"lineNumber":1002,"author":{"gitId":"-"},"content":"    public boolean isIgnoreCommitListOverriding() {"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"        return isIgnoreCommitListOverriding;"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1005,"author":{"gitId":"-"},"content":""},{"lineNumber":1006,"author":{"gitId":"-"},"content":"    public boolean isFileSizeLimitOverriding() {"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"        return isFileSizeLimitOverriding;"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1009,"author":{"gitId":"-"},"content":""},{"lineNumber":1010,"author":{"gitId":"-"},"content":"    public boolean isFindingPreviousAuthorsPerformed() {"},{"lineNumber":1011,"author":{"gitId":"-"},"content":"        return isFindingPreviousAuthorsPerformed;"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1013,"author":{"gitId":"-"},"content":""},{"lineNumber":1014,"author":{"gitId":"-"},"content":"    public AuthorConfiguration getAuthorConfig() {"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"        return authorConfig;"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":400,"-":617}},{"path":"src/main/java/reposense/model/RepoLocation.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.FileUtil.isValidPath;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.net.URI;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.git.GitRemote;"},{"lineNumber":15,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents a repository location."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class RepoLocation {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected static final String UNSUPPORTED_DOMAIN_NAME \u003d \"NOT_RECOGNIZED\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_LOCATION \u003d \"%s is an invalid location.\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_REMOTE_URL \u003d \"%s is an invalid remote URL.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String REPO_NAME_REGEX \u003d \"(?\u003crepoName\u003e[^/]+?)(/?\\\\.git)?/?\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String PATH_TO_REPO_REGEX \u003d \"(?\u003cpath\u003e.*?)/?\" + REPO_NAME_REGEX;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern GIT_REPOSITORY_LOCATION_PATTERN \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            Pattern.compile(\"^(ssh|git|https?|ftps?)://(?\u003cdomain\u003e[^/]*?)/\" + PATH_TO_REPO_REGEX + \"$\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Pattern SCP_LIKE_SSH_REPOSITORY_LOCATION_PATTERN \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Pattern.compile(\"^(.*@)?(?\u003cdomain\u003e.*?):(?\u003cpath\u003e[^/].*?)??/??\" + REPO_NAME_REGEX + \"$\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Pattern LOCAL_REPOSITORY_NON_WINDOWS_LOCATION_PATTERN \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            Pattern.compile(\"^(file://)?\" + PATH_TO_REPO_REGEX + \"$\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Pattern LOCAL_REPOSITORY_WINDOWS_LOCATION_PATTERN \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            Pattern.compile(\"^\" + PATH_TO_REPO_REGEX.replaceAll(\"/\", \"\\\\\\\\\\\\\\\\\") + \"$\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Pattern DOMAIN_NAME_PATTERN \u003d Pattern.compile(\"^(ww.\\\\.)?+(.*@)?(?\u003cdomainName\u003e[^.]+)\\\\..+$\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String GROUP_REPO_NAME \u003d \"repoName\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String GROUP_PATH \u003d \"path\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String GROUP_DOMAIN_NAME \u003d \"domainName\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String GROUP_DOMAIN \u003d \"domain\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String PATH_SEPARATOR_REPLACEMENT \u003d \"-\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Used for remote link generation (serialized)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final String location;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private final String repoName;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private final String organization;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private final String domainName;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Used for generation of local repository report output directory"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final transient String outputFolderRepoName;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final transient String outputFolderOrganization;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates {@link RepoLocation} based on the {@code location}, which is represented by a {@code URL}"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * or {@link Path}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} cannot be represented by a {@code URL} or {@link Path}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public RepoLocation(String location) throws InvalidLocationException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            location \u003d StringsUtil.removeTrailingBackslash(location);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.location \u003d location;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String[] remoteRepoNameAndOrg;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String[] outputFolderRepoNameAndOrg;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (location.isEmpty()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            remoteRepoNameAndOrg \u003d new String[] {\"\", \"\", UNSUPPORTED_DOMAIN_NAME};"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            outputFolderRepoNameAndOrg \u003d remoteRepoNameAndOrg;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        } else if (isLocalRepo(location)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            outputFolderRepoNameAndOrg \u003d getLocalRepoNameAndOrg(location);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Map\u003cString, String\u003e remotes \u003d GitRemote.getRemotes(location);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            String newLocation \u003d GitRemote.getAvailableRemoteLocation(remotes).orElse(location);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"            remoteRepoNameAndOrg \u003d remotes.size() \u003d\u003d 0"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                ? outputFolderRepoNameAndOrg"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                : getRemoteRepoNameAndOrg(newLocation);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            remoteRepoNameAndOrg \u003d getRemoteRepoNameAndOrg(location);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            outputFolderRepoNameAndOrg \u003d remoteRepoNameAndOrg;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.repoName \u003d remoteRepoNameAndOrg[0];"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.organization \u003d remoteRepoNameAndOrg[1];"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.domainName \u003d remoteRepoNameAndOrg[2];"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.outputFolderRepoName \u003d outputFolderRepoNameAndOrg[0];"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.outputFolderOrganization \u003d outputFolderRepoNameAndOrg[1];"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean isEmpty() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return location.isEmpty();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String getRepoName() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return outputFolderRepoName;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String getOrganization() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return outputFolderOrganization;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public String getDomainName() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return domainName;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Returns true if {@code repoArgument} is a valid local repository argument."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * This implementation follows directly from the {@code git clone}"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * \u003ca href\u003d\"https://git-scm.com/docs/git-clone#_git_urls\"\u003especification\u003c/a\u003e."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static boolean isLocalRepo(String repoArgument) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!repoArgument.contains(\":\")) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        boolean hasSlashBeforeFirstColon \u003d repoArgument.split(\":\", 2)[0].contains(\"/\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (hasSlashBeforeFirstColon) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // checks if it is a URL file protocol"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String urlProtocol \u003d repoArgument.split(\"://\", 2)[0];"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (urlProtocol.equals(\"file\")) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // catch disk drive arguments such as C:\\"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows() \u0026\u0026 isValidPath(repoArgument)) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Returns a best-guess repo name and organization from the given local repo {@code location}."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * The return is a length-3 string array with the repo name at index 0, organization at index 1"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * and domain name (unsupported domain) at index 2."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if the location specified is not a proper local repository."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private String[] getLocalRepoNameAndOrg(String location) throws InvalidLocationException {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        boolean isWindows \u003d SystemUtil.isWindows();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (isWindows) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            location \u003d location.replaceAll(\"file://\", \"\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            location \u003d location.replaceAll(\"/\", \"\\\\\\\\\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            location \u003d location.replaceAll(\"[|:]\", \"-\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Pattern localRepoPattern \u003d isWindows"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                ? LOCAL_REPOSITORY_WINDOWS_LOCATION_PATTERN"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                : LOCAL_REPOSITORY_NON_WINDOWS_LOCATION_PATTERN;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Matcher localRepoMatcher \u003d localRepoPattern.matcher(location);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (!localRepoMatcher.matches()) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_LOCATION, location));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new InvalidLocationException(String.format(MESSAGE_INVALID_LOCATION, location));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String tempRepoName \u003d localRepoMatcher.group(GROUP_REPO_NAME);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        String tempOrganization \u003d getOrganizationFromMatcher(localRepoMatcher);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return new String[] {tempRepoName, tempOrganization, UNSUPPORTED_DOMAIN_NAME};"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Returns a best-guess repo name, organization and domain name from the given remote repo"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * {@code location}. The return is a length-3 string array with the repo name at index 0,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * organization at index 1 and domain name at index 2."},{"lineNumber":176,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if the location specified is not a proper remote repository."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private String[] getRemoteRepoNameAndOrg(String location) throws InvalidLocationException {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Matcher remoteRepoMatcher \u003d GIT_REPOSITORY_LOCATION_PATTERN.matcher(location);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Matcher sshRepoMatcher \u003d SCP_LIKE_SSH_REPOSITORY_LOCATION_PATTERN.matcher(location);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        boolean isNormalUrl \u003d remoteRepoMatcher.matches();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        if (isNormalUrl) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                new URI(location);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            } catch (URISyntaxException e) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                throw new InvalidLocationException(String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        boolean isValidRemoteRepoUrl \u003d remoteRepoMatcher.matches() || sshRepoMatcher.matches();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        if (!isValidRemoteRepoUrl) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            throw new InvalidLocationException(String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // priority for standard URL matches over SSH as SSH matcher will normally also match standard URL"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Matcher actualMatcher \u003d remoteRepoMatcher.matches() ? remoteRepoMatcher : sshRepoMatcher;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        String tempRepoName \u003d actualMatcher.group(GROUP_REPO_NAME);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String tempOrganization \u003d getOrganizationFromMatcher(actualMatcher);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return new String[] {tempRepoName, tempOrganization,"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                getDomainNameFromDomain(actualMatcher.group(GROUP_DOMAIN))};"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Returns the organization string from the {@code matcher} if one exists."},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * If no match was found for it, returns an empty string instead."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    private static String getOrganizationFromMatcher(Matcher matcher) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return Optional.ofNullable(matcher.group(GROUP_PATH))"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                .map(s -\u003e Paths.get(s).normalize().toString())"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                .map(s -\u003e s.replaceAll(Pattern.quote(FileSystems.getDefault().getSeparator()),"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                        PATH_SEPARATOR_REPLACEMENT))"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                .orElse(\"\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * Returns the domain name of the URL from the {@code matcher} if it is one of the recognised ones."},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Returns {@code UNRECOGNISED_DOMAIN_NAME} if it is a local repo or not recognised."},{"lineNumber":224,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if the domain specified is not a proper domain name."},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public static String getDomainNameFromDomain(String domain) throws InvalidLocationException {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Matcher domainNameMatcher \u003d DOMAIN_NAME_PATTERN.matcher(domain);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        if (!domainNameMatcher.matches()) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            throw new InvalidLocationException(MESSAGE_INVALID_REMOTE_URL);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        String domainName \u003d domainNameMatcher.group(GROUP_DOMAIN_NAME);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return isSupportedDomainName(domainName)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                ? domainName"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                : UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    private static boolean isSupportedDomainName(String domainName) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return SupportedDomainUrlMap.isSupportedDomainName(domainName);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        if (!(other instanceof RepoLocation)) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        RepoLocation otherLocation \u003d (RepoLocation) other;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        return this.location.equals(otherLocation.location)"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.repoName.equals(otherLocation.repoName)"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.organization.equals(otherLocation.organization)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.domainName.equals(otherLocation.domainName)"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.outputFolderRepoName.equals(otherLocation.outputFolderRepoName)"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.outputFolderOrganization.equals(otherLocation.outputFolderOrganization);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return location.hashCode();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":271}},{"path":"src/main/java/reposense/model/RunConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":7,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":8,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Interface to get configurations for current RepoSense run."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface RunConfiguration {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    List\u003cRepoConfiguration\u003e getRepoConfigurations()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            throws ParseException, IOException, InvalidCsvException, InvalidHeaderException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":3,"-":15}},{"path":"src/main/java/reposense/parser/ArgsParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.ArgumentParsers;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.HelpArgumentAction;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.VersionArgumentAction;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentGroup;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.FeatureControl;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.MutuallyExclusiveGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Namespace;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":31,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.AlphanumericArgumentType;"},{"lineNumber":33,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.AnalysisThreadsArgumentType;"},{"lineNumber":34,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.AssetsFolderArgumentType;"},{"lineNumber":35,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.CloningThreadsArgumentType;"},{"lineNumber":36,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.ConfigFolderArgumentType;"},{"lineNumber":37,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.OutputFolderArgumentType;"},{"lineNumber":38,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.PeriodArgumentType;"},{"lineNumber":39,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.ReportFolderArgumentType;"},{"lineNumber":40,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.SinceDateArgumentType;"},{"lineNumber":41,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.UntilDateArgumentType;"},{"lineNumber":42,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.ZoneIdArgumentType;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted date to a {@link CliArguments} object."},{"lineNumber":48,"author":{"gitId":"-"},"content":" */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class ArgsParser {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_REPORT_NAME \u003d \"reposense-report\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final int DEFAULT_NUM_CLONING_THREADS \u003d 4;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final int DEFAULT_NUM_ANALYSIS_THREADS \u003d Runtime.getRuntime().availableProcessors();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final boolean DEFAULT_IS_TEST_MODE \u003d false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final boolean DEFAULT_SHOULD_FRESH_CLONE \u003d false;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String[] HELP_FLAGS \u003d new String[] {\"--help\", \"-h\"};"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String[] CONFIG_FLAGS \u003d new String[] {\"--config\", \"-c\"};"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String[] REPO_FLAGS \u003d new String[] {\"--repo\", \"--repos\", \"-r\"};"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String[] VIEW_FLAGS \u003d new String[] {\"--view\", \"-v\"};"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String[] OUTPUT_FLAGS \u003d new String[] {\"--output\", \"-o\"};"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String[] ASSETS_FLAGS \u003d new String[] {\"--assets\", \"-a\"};"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String[] SINCE_FLAGS \u003d new String[] {\"--since\", \"-s\"};"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String[] UNTIL_FLAGS \u003d new String[] {\"--until\", \"-u\"};"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String[] PERIOD_FLAGS \u003d new String[] {\"--period\", \"-p\"};"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String[] SHALLOW_CLONING_FLAGS \u003d new String[] {\"--shallow-cloning\", \"-S\"};"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String[] FORMAT_FLAGS \u003d new String[] {\"--formats\", \"-f\"};"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String[] IGNORE_CONFIG_FLAGS \u003d new String[] {\"--ignore-standalone-config\", \"-i\"};"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String[] IGNORE_SIZELIMIT_FLAGS \u003d new String[] {\"--ignore-filesize-limit\", \"-I\"};"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String[] TIMEZONE_FLAGS \u003d new String[] {\"--timezone\", \"-t\"};"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String[] VERSION_FLAGS \u003d new String[] {\"--version\", \"-V\"};"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String[] LAST_MODIFIED_DATE_FLAGS \u003d new String[] {\"--last-modified-date\", \"-l\"};"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String[] FIND_PREVIOUS_AUTHORS_FLAGS \u003d new String[] {\"--find-previous-authors\", \"-F\"};"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String[] CLONING_THREADS_FLAG \u003d new String[] {\"--cloning-threads\"};"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String[] ANALYSIS_THREADS_FLAG \u003d new String[] {\"--analysis-threads\"};"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String[] TEST_MODE_FLAG \u003d new String[] {\"--test-mode\"};"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String[] FRESH_CLONING_FLAG \u003d new String[] {\"--fresh-cloning\"};"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ArgsParser.class);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_USAGE \u003d \"java -jar RepoSense.jar\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_DESCRIPTION \u003d"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \"RepoSense is a contribution analysis tool for Git repositories.\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HEADER_MUTEX \u003d \"mutual exclusive arguments\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HEADER_TESTING \u003d \"test mode arguments\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD \u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\", \\\"Until Date\\\", and \\\"Period\\\" cannot be applied together.\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_USING_DEFAULT_CONFIG_PATH \u003d"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            \"Config path not provided, using the config folder as default.\";"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_PATH \u003d \"%s is malformed.\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the report config provided.\";"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_D1_WITH_PERIOD \u003d \"You may be using --since d1 with the --period flag. \""},{"lineNumber":94,"author":{"gitId":"-"},"content":"            + \"This may result in an incorrect date range being analysed.\";"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\".\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE \u003d"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" must not be later than today\u0027s date.\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_CONFIG_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_ASSETS_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            + File.separator + \"assets\" + File.separator);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private static ArgumentParser getArgumentParser() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ArgumentParser parser \u003d ArgumentParsers"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .newFor(PROGRAM_USAGE)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .addHelp(false)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .build()"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .description(PROGRAM_DESCRIPTION);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser \u003d parser"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser2 \u003d parser"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        ArgumentGroup argumentGroup \u003d parser"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .addArgumentGroup(MESSAGE_HEADER_TESTING);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // Boolean flags"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        parser.addArgument(HELP_FLAGS)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .help(\"Show help message.\")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .action(new HelpArgumentAction());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        parser.version(\"RepoSense \" + RepoSense.getVersion());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        parser.addArgument(VERSION_FLAGS)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .help(\"Show the version of RepoSense.\")"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .action(new VersionArgumentAction());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        parser.addArgument(IGNORE_CONFIG_FLAGS)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .dest(IGNORE_CONFIG_FLAGS[0])"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .help(\"A flag to ignore the standalone config file in the repo.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        parser.addArgument(IGNORE_SIZELIMIT_FLAGS)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .dest(IGNORE_SIZELIMIT_FLAGS[0])"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .help(\"A flag to ignore the filesize limit for analyzed files.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        parser.addArgument(VIEW_FLAGS)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .dest(VIEW_FLAGS[0])"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .nargs(\"?\")"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .type(new ReportFolderArgumentType())"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .setConst(EMPTY_PATH)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .help(\"Starts a server to display the report in the provided directory. \""},{"lineNumber":150,"author":{"gitId":"-"},"content":"                        + \"If used as a flag (with no argument), \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                        + \"generates a report and automatically displays the report.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        parser.addArgument(OUTPUT_FLAGS)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .dest(OUTPUT_FLAGS[0])"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .type(new OutputFolderArgumentType())"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .setDefault(Paths.get(ArgsParser.DEFAULT_REPORT_NAME))"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .help(\"The directory to output the report folder, reposense-report. \""},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        + \"If not provided, the report folder will be created in the current working directory.\");"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        parser.addArgument(ASSETS_FLAGS)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .dest(ASSETS_FLAGS[0])"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                .type(new AssetsFolderArgumentType())"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_ASSETS_PATH)"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                .help(\"The directory to place assets files to customize report generation. \""},{"lineNumber":167,"author":{"gitId":"-"},"content":"                        + \"If not provided, the assets folder in the current working directory will be used.\");"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        parser.addArgument(SINCE_FLAGS)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                .dest(SINCE_FLAGS[0])"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                .type(new SinceDateArgumentType())"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .help(\"The date to start filtering.\");"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        parser.addArgument(UNTIL_FLAGS)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .dest(UNTIL_FLAGS[0])"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .type(new UntilDateArgumentType())"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                .help(\"The date to stop filtering.\");"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        parser.addArgument(PERIOD_FLAGS)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                .dest(PERIOD_FLAGS[0])"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                .metavar(\"PERIOD\")"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .type(new PeriodArgumentType())"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                .help(\"The number of days of the filtering window.\");"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        parser.addArgument(FORMAT_FLAGS)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                .dest(FORMAT_FLAGS[0])"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                .nargs(\"*\")"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                .metavar(\"FORMAT\")"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                .type(new AlphanumericArgumentType())"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                .setDefault(Collections.emptyList())"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .help(\"The alphanumeric file formats to process.\\n\""},{"lineNumber":197,"author":{"gitId":"-"},"content":"                        + \"If not provided, default file formats will be used.\\n\""},{"lineNumber":198,"author":{"gitId":"-"},"content":"                        + \"Please refer to userguide for more information.\");"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        parser.addArgument(TIMEZONE_FLAGS)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                .dest(TIMEZONE_FLAGS[0])"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                .metavar(\"ZONE_ID[±hh[mm]]\")"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                .type(new ZoneIdArgumentType())"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                .setDefault(ZoneId.systemDefault())"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                .help(\"The timezone to use for the generated report. \""},{"lineNumber":206,"author":{"gitId":"-"},"content":"                        + \"One kind of valid timezones is relative to UTC. E.g. UTC, UTC+08, UTC-1030. \\n\""},{"lineNumber":207,"author":{"gitId":"-"},"content":"                        + \"If not provided, system default timezone will be used.\");"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        parser.addArgument(FIND_PREVIOUS_AUTHORS_FLAGS)"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                .dest(FIND_PREVIOUS_AUTHORS_FLAGS[0])"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                .help(\"A flag to make RepoSense utilize Git blame\u0027s ignore revisions functionality, RepoSense \""},{"lineNumber":213,"author":{"gitId":"-"},"content":"                        + \"will attempt to blame the line changes caused by commits in the ignore commit list to the \""},{"lineNumber":214,"author":{"gitId":"-"},"content":"                        + \"previous authors who altered those lines (if available)\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        // Mutex flags - these will always be the last parameters in help message."},{"lineNumber":217,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(CONFIG_FLAGS)"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                .dest(CONFIG_FLAGS[0])"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                .type(new ConfigFolderArgumentType())"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_CONFIG_PATH)"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                .help(\"The directory containing the config files.\""},{"lineNumber":223,"author":{"gitId":"-"},"content":"                        + \"If not provided, the config files will be obtained from the config folder.\");"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(REPO_FLAGS)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                .nargs(\"+\")"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                .dest(REPO_FLAGS[0])"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                .metavar(\"LOCATION\")"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                .help(\"The remote Git host URLs or local directories to clone the repositories from.\");"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(LAST_MODIFIED_DATE_FLAGS)"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                .dest(LAST_MODIFIED_DATE_FLAGS[0])"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                .help(\"A flag to keep track of the last modified date of each line of code.\");"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(SHALLOW_CLONING_FLAGS)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                .dest(SHALLOW_CLONING_FLAGS[0])"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                .help(\"A flag to make RepoSense employ Git\u0027s shallow cloning functionality, which can significantly \""},{"lineNumber":240,"author":{"gitId":"-"},"content":"                        + \"reduce the time taken to clone large repositories. This flag should not be used for \""},{"lineNumber":241,"author":{"gitId":"-"},"content":"                        + \"smaller repositories, where the .git file is smaller than 500 MB.\");"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"        parser.addArgument(CLONING_THREADS_FLAG)"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                .dest(CLONING_THREADS_FLAG[0])"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                .type(new CloningThreadsArgumentType())"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_NUM_CLONING_THREADS)"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                .help(FeatureControl.SUPPRESS);"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"        parser.addArgument(ANALYSIS_THREADS_FLAG)"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                .dest(ANALYSIS_THREADS_FLAG[0])"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                .type(new AnalysisThreadsArgumentType())"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_NUM_ANALYSIS_THREADS)"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                .help(FeatureControl.SUPPRESS);"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"        // Testing flags"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        argumentGroup.addArgument(TEST_MODE_FLAG)"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                .dest(TEST_MODE_FLAG[0])"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                .help(\"Enables testing mode.\");"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"        argumentGroup.addArgument(FRESH_CLONING_FLAG)"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                .dest(FRESH_CLONING_FLAG[0])"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                .help(\"Enables fresh cloning. Requires testing mode to be enabled.\");"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return parser;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Parses the given string {@code args} to a {@link CliArguments} object."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":272,"author":{"gitId":"-"},"content":"     * @throws HelpScreenException if given args contain the --help flag. Help message will be printed out"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * by the {@link ArgumentParser} hence this is to signal to the caller that the program is safe to exit."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given string arguments fails to parse to a {@link CliArguments} object."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    public static CliArguments parse(String[] args) throws HelpScreenException, ParseException {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        ArgumentParser parser \u003d getArgumentParser();"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        Namespace results;"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            results \u003d parser.parseArgs(args);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException hse) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            throw hse;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        } catch (ArgumentParserException ape) {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            throw new ParseException(getArgumentParser().formatUsage() + ape.getMessage() + \"\\n\");"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"        Path configFolderPath \u003d results.get(CONFIG_FLAGS[0]);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        Path reportFolderPath \u003d results.get(VIEW_FLAGS[0]);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Path outputFolderPath \u003d results.get(OUTPUT_FLAGS[0]);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        ZoneId zoneId \u003d results.get(TIMEZONE_FLAGS[0]);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        Path assetsFolderPath \u003d results.get(ASSETS_FLAGS[0]);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        List\u003cString\u003e locations \u003d results.get(REPO_FLAGS[0]);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes(results.get(FORMAT_FLAGS[0]));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        boolean isStandaloneConfigIgnored \u003d results.get(IGNORE_CONFIG_FLAGS[0]);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        boolean isFileSizeLimitIgnored \u003d results.get(IGNORE_SIZELIMIT_FLAGS[0]);"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        boolean shouldIncludeLastModifiedDate \u003d results.get(LAST_MODIFIED_DATE_FLAGS[0]);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        boolean shouldPerformShallowCloning \u003d results.get(SHALLOW_CLONING_FLAGS[0]);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        boolean shouldFindPreviousAuthors \u003d results.get(FIND_PREVIOUS_AUTHORS_FLAGS[0]);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        boolean isTestMode \u003d results.get(TEST_MODE_FLAG[0]);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        int numCloningThreads \u003d results.get(CLONING_THREADS_FLAG[0]);"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        int numAnalysisThreads \u003d results.get(ANALYSIS_THREADS_FLAG[0]);"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"        CliArguments.Builder cliArgumentsBuilder \u003d new CliArguments.Builder()"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                .configFolderPath(configFolderPath)"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                .reportDirectoryPath(reportFolderPath)"},{"lineNumber":307,"author":{"gitId":"-"},"content":"                .outputFilePath(outputFolderPath)"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                .zoneId(zoneId)"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                .assetsFilePath(assetsFolderPath)"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                .locations(locations)"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                .formats(formats)"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                .isStandaloneConfigIgnored(isStandaloneConfigIgnored)"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                .isFileSizeLimitIgnored(isFileSizeLimitIgnored)"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                .isLastModifiedDateIncluded(shouldIncludeLastModifiedDate)"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                .isShallowCloningPerformed(shouldPerformShallowCloning)"},{"lineNumber":316,"author":{"gitId":"-"},"content":"                .isFindingPreviousAuthorsPerformed(shouldFindPreviousAuthors)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                .numCloningThreads(numCloningThreads)"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                .numAnalysisThreads(numAnalysisThreads)"},{"lineNumber":319,"author":{"gitId":"-"},"content":"                .isTestMode(isTestMode);"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"        LogsManager.setLogFolderLocation(outputFolderPath);"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        if (locations \u003d\u003d null \u0026\u0026 configFolderPath.equals(DEFAULT_CONFIG_PATH)) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            logger.info(MESSAGE_USING_DEFAULT_CONFIG_PATH);"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"        addReportConfigToBuilder(cliArgumentsBuilder, results);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        addAnalysisDatesToBuilder(cliArgumentsBuilder, results);"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"        boolean isViewModeOnly \u003d reportFolderPath !\u003d null"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                \u0026\u0026 configFolderPath.equals(DEFAULT_CONFIG_PATH)"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                \u0026\u0026 locations \u003d\u003d null;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        cliArgumentsBuilder.isViewModeOnly(isViewModeOnly);"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"        boolean isAutomaticallyLaunching \u003d reportFolderPath !\u003d null;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        if (isAutomaticallyLaunching \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH) \u0026\u0026 !isViewModeOnly) {"},{"lineNumber":338,"author":{"gitId":"-"},"content":"            logger.info(String.format(\"Ignoring argument \u0027%s\u0027 for --view.\", reportFolderPath.toString()));"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        cliArgumentsBuilder.isAutomaticallyLaunching(isAutomaticallyLaunching);"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        boolean shouldPerformFreshCloning \u003d isTestMode"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                ? results.get(FRESH_CLONING_FLAG[0])"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                : DEFAULT_SHOULD_FRESH_CLONE;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        cliArgumentsBuilder.isFreshClonePerformed(shouldPerformFreshCloning);"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"        return cliArgumentsBuilder.build();"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":352,"author":{"gitId":"-"},"content":"     * Adds the reportConfig field to the given {@code builder}."},{"lineNumber":353,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * @param builder Builder to be supplied with the reportConfig field."},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * @param results Parsed results of the user-supplied CLI arguments."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private static void addReportConfigToBuilder(CliArguments.Builder builder, Namespace results) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        List\u003cString\u003e locations \u003d results.get(REPO_FLAGS[0]);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        Path configFolderPath \u003d results.get(CONFIG_FLAGS[0]);"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"        // Report config is ignored if --repos is provided"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        if (locations \u003d\u003d null) {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            Path reportConfigFilePath \u003d configFolderPath.resolve(ReportConfigJsonParser.REPORT_CONFIG_FILENAME);"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"                reportConfig \u003d new ReportConfigJsonParser().parse(reportConfigFilePath);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            } catch (JsonSyntaxException jse) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                logger.warning(String.format(MESSAGE_INVALID_CONFIG_PATH, reportConfigFilePath));"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            } catch (IllegalArgumentException iae) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON, iae.getMessage()));"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            } catch (IOException ioe) {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                // IOException thrown as report-config.json is not found."},{"lineNumber":374,"author":{"gitId":"-"},"content":"                // Ignore exception as the file is optional."},{"lineNumber":375,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        builder.reportConfiguration(reportConfig);"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":381,"author":{"gitId":"-"},"content":"     * Adds the sinceDate and untilDate fields for analysis to the given {@code builder}."},{"lineNumber":382,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":383,"author":{"gitId":"-"},"content":"     * @param builder Builder to be supplied with the sinceDate and untilDate fields"},{"lineNumber":384,"author":{"gitId":"-"},"content":"     * @param results Parsed results of the user-supplied CLI arguments."},{"lineNumber":385,"author":{"gitId":"-"},"content":"     * @throws ParseException if all of sinceDate, untilDate and (analysis) period is provided"},{"lineNumber":386,"author":{"gitId":"-"},"content":"     * or if the sinceDate is invalid."},{"lineNumber":387,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    private static void addAnalysisDatesToBuilder(CliArguments.Builder builder, Namespace results)"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        ZoneId zoneId \u003d results.get(TIMEZONE_FLAGS[0]);"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        Optional\u003cLocalDateTime\u003e cliSinceDate \u003d results.get(SINCE_FLAGS[0]);"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        Optional\u003cLocalDateTime\u003e cliUntilDate \u003d results.get(UNTIL_FLAGS[0]);"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        Optional\u003cInteger\u003e cliPeriod \u003d results.get(PERIOD_FLAGS[0]);"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"        boolean isSinceDateProvided \u003d cliSinceDate.isPresent();"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        boolean isUntilDateProvided \u003d cliUntilDate.isPresent();"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        boolean isPeriodProvided \u003d cliPeriod.isPresent();"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        if (isSinceDateProvided \u0026\u0026 isUntilDateProvided \u0026\u0026 isPeriodProvided) {"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD);"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"        LocalDateTime sinceDate;"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        LocalDateTime untilDate;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        boolean isUsingArbitraryDate \u003d false;"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        LocalDateTime currentDate \u003d TimeUtil.getCurrentDate(zoneId);"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"        if (isSinceDateProvided) {"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            sinceDate \u003d TimeUtil.getSinceDate(cliSinceDate.get());"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            // For --since d1, need to adjust the arbitrary date based on timezone"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            if (TimeUtil.isEqualToArbitraryFirstDateUtc(sinceDate)) {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                isUsingArbitraryDate \u003d true;"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                sinceDate \u003d TimeUtil.getArbitraryFirstCommitDateConverted(zoneId);"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        } else if (isUntilDateProvided) {"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            sinceDate \u003d isPeriodProvided"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                    ? TimeUtil.getDateMinusNDays(cliUntilDate.get(), cliPeriod.get())"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                    : TimeUtil.getDateMinusAMonth(cliUntilDate.get());"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"            sinceDate \u003d isPeriodProvided"},{"lineNumber":421,"author":{"gitId":"-"},"content":"                    ? TimeUtil.getDateMinusNDays(currentDate, cliPeriod.get())"},{"lineNumber":422,"author":{"gitId":"-"},"content":"                    : TimeUtil.getDateMinusAMonth(currentDate);"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"        if (isPeriodProvided \u0026\u0026 isUsingArbitraryDate) {"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            logger.warning(MESSAGE_SINCE_D1_WITH_PERIOD);"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"        if (isUntilDateProvided) {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            untilDate \u003d TimeUtil.getUntilDate(cliUntilDate.get());"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"            untilDate \u003d (isSinceDateProvided \u0026\u0026 isPeriodProvided)"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                    ? TimeUtil.getDatePlusNDays(cliSinceDate.get(), cliPeriod.get())"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                    : currentDate;"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"        untilDate \u003d untilDate.compareTo(currentDate) \u003c 0"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                ? untilDate"},{"lineNumber":439,"author":{"gitId":"-"},"content":"                : currentDate;"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"        if (sinceDate.compareTo(currentDate) \u003e 0) {"},{"lineNumber":442,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"        if (sinceDate.compareTo(untilDate) \u003e 0) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"        builder.sinceDate(sinceDate)"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                .isSinceDateProvided(isSinceDateProvided)"},{"lineNumber":451,"author":{"gitId":"-"},"content":"                .untilDate(untilDate)"},{"lineNumber":452,"author":{"gitId":"-"},"content":"                .isUntilDateProvided(isUntilDateProvided);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":12,"-":442}},{"path":"src/main/java/reposense/parser/AuthorConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":14,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code author-config.csv} file."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AuthorConfigCsvParser extends CsvParser\u003cAuthorConfiguration\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String AUTHOR_CONFIG_FILENAME \u003d \"author-config.csv\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in author-config.csv config file."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String[] BRANCH_HEADER \u003d {\"Branch\"};"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String[] GIT_ID_HEADERS \u003d {\"Author\u0027s Git Host ID\", \"Author\u0027s GitHub ID\"};"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String[] EMAIL_HEADER \u003d {\"Author\u0027s Emails\"};"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String[] DISPLAY_NAME_HEADER \u003d {\"Author\u0027s Display Name\"};"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String[] ALIAS_HEADER \u003d {\"Author\u0027s Git Author Name\"};"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_GLOB_LIST_HEADER \u003d {\"Ignore Glob List\"};"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AuthorConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                GIT_ID_HEADERS,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                LOCATION_HEADER, BRANCH_HEADER, EMAIL_HEADER, DISPLAY_NAME_HEADER, ALIAS_HEADER,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                IGNORE_GLOB_LIST_HEADER,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Processes the csv {@code record} line by line and add created {@link AuthorConfiguration} into {@code results}"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * but skips {@code author} already exists in a {@link AuthorConfiguration} that has same {@code location}"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * and {@code branch}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    protected void processLine(List\u003cAuthorConfiguration\u003e results, CSVRecord record) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cString\u003e locationsWithBranches \u003d getAsListOrDefault(record, LOCATION_HEADER);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String branch \u003d getOrDefault(record, BRANCH_HEADER, AuthorConfiguration.DEFAULT_BRANCH);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String gitId \u003d get(record, GIT_ID_HEADERS);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emails \u003d getAsList(record, EMAIL_HEADER);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String displayName \u003d get(record, DISPLAY_NAME_HEADER);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        List\u003cString\u003e aliases \u003d getAsList(record, ALIAS_HEADER);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d getAsList(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        for (String locationWithBranches : locationsWithBranches) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            List\u003cString\u003e parsedLocationWithBranches \u003d AuthorConfigLocationParser"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    .parseLocation(locationWithBranches, branch);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"            String currLocation \u003d parsedLocationWithBranches.get(0);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            for (int i \u003d 1; i \u003c parsedLocationWithBranches.size(); i++) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                String currBranch \u003d parsedLocationWithBranches.get(i);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                registerLocationAndBranch(results, gitId, emails, displayName, aliases,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                        ignoreGlobList, currLocation, currBranch);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Registers an author for a single location and branch with the information"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * provided by each line."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} is invalid."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void registerLocationAndBranch(List\u003cAuthorConfiguration\u003e results, String gitId,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                                              List\u003cString\u003e emails, String displayName,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                                              List\u003cString\u003e aliases, List\u003cString\u003e ignoreGlobList,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                                              String currLocation, String currBranch) throws InvalidLocationException {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d findMatchingAuthorConfiguration(results, currLocation, currBranch);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(gitId);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (config.containsAuthor(author)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(String.format("},{"lineNumber":102,"author":{"gitId":"-"},"content":"                    \"Skipping author as %s already in repository %s %s\","},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    author.getGitId(), config.getLocation(), config.getBranch()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        author.setEmails(new ArrayList\u003c\u003e(emails));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        author.setDisplayName(!displayName.isEmpty() ? displayName : author.getGitId());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!aliases.isEmpty()) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            author.setAuthorAliases(aliases);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!ignoreGlobList.isEmpty()) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            author.setIgnoreGlobList(ignoreGlobList);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        config.addAuthor(author);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Gets an existing {@link AuthorConfiguration} from {@code results} if {@code location} and {@code branch} matches."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Otherwise, adds a newly created {@link AuthorConfiguration} into {@code results} and returns it."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} is invalid."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private static AuthorConfiguration findMatchingAuthorConfiguration(List\u003cAuthorConfiguration\u003e results,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String location, String branch) throws InvalidLocationException {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d new AuthorConfiguration(new RepoLocation(location), branch);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (AuthorConfiguration authorConfig : results) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            if (authorConfig.getLocation().equals(config.getLocation())"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                    \u0026\u0026 authorConfig.getBranch().equals(config.getBranch())) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                return authorConfig;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":136}},{"path":"src/main/java/reposense/parser/ConfigurationBuildException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":3,"author":{"gitId":"asdfghjkxd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"asdfghjkxd"},"content":" * Signals that there was an issue building a Configuration (missing parameters, etc.)."},{"lineNumber":5,"author":{"gitId":"asdfghjkxd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"asdfghjkxd"},"content":"public class ConfigurationBuildException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":8,"author":{"gitId":"asdfghjkxd"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":8}},{"path":"src/main/java/reposense/parser/CsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.StringJoiner;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":28,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":29,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains CSV parsing related functionalities."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public abstract class CsvParser\u003cT\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    protected static final String COLUMN_VALUES_SEPARATOR \u003d \";\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    protected static final Logger logger \u003d LogsManager.getLogger(CsvParser.class);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String OVERRIDE_KEYWORD \u003d \"override:\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_LINE \u003d \"[EMPTY LINE]\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNABLE_TO_READ_CSV_FILE \u003d \"Unable to read the supplied CSV file.\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_LINE_FORMAT \u003d \"Line %d in CSV file, %s, is malformed.\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Content: %s\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_PARSE_EXCEPTION_FORMAT \u003d \"Error parsing line %d in CSV file, %s.\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Content: %s\\n\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Error: %s\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_CSV_FORMAT \u003d \"The CSV file, %s, is empty.\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MANDATORY_HEADER_MISSING \u003d \"Required column header, %s, not found in \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"CSV file, %s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_DUPLICATE_COLUMN_HEADER \u003d \"Duplicate columns are present in CSV file, %s.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COLUMNS_RECOGNIZED \u003d \"Parsed header of CSV file, %s, and recognized columns: \""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + \"%s\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ZERO_VALID_CONFIGS \u003d \"No valid configurations in the %s.\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNKNOWN_COLUMN \u003d \"Unknown column(s) found: %s (%s)\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private Path csvFilePath;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private Map\u003cString, Integer\u003e headerMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private int numOfLinesBeforeFirstRecord \u003d 0;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates {@link CsvParser} with given {@code csvFilepath}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @throws FileNotFoundException if the csv file cannot be found in the provided {@code csvFilePath}."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public CsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (csvFilePath \u003d\u003d null || !Files.exists(csvFilePath)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new FileNotFoundException(\"Csv file does not exist at the given path.\\n\""},{"lineNumber":69,"author":{"gitId":"-"},"content":"                    + \"Use \u0027-help\u0027 to list all the available subcommands and some concept guides.\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.csvFilePath \u003d csvFilePath;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses the csv file associated with this instance of the {@link CsvParser} and returns a {@link List}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * containing the records in this file."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws IOException if there are errors accessing the given csv file."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the csv is malformed."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws InvalidHeaderException if header of csv file cannot be read."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public List\u003cT\u003e parse() throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        List\u003cT\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Iterable\u003cCSVRecord\u003e records;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try (BufferedReader csvReader \u003d new BufferedReader(new FileReader(csvFilePath.toFile()))) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            String[] header \u003d getHeader(csvReader);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                records \u003d CSVFormat.Builder.create(CSVFormat.DEFAULT).setIgnoreEmptyLines(false).setHeader(header)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                        .setTrim(true).setIgnoreHeaderCase(true).build().parse(csvReader);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            } catch (IllegalArgumentException iae) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException("},{"lineNumber":94,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_DUPLICATE_COLUMN_HEADER, csvFilePath.getFileName()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"            for (CSVRecord record : records) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                if (isLineMalformed(record)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                    processLine(results, record);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                } catch (ParseException pe) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    logger.warning(String.format(MESSAGE_LINE_PARSE_EXCEPTION_FORMAT, getLineNumber(record),"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                            csvFilePath.getFileName(), getRowContentAsRawString(record), pe.getMessage()));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                } catch (IllegalArgumentException iae) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                    logger.log(Level.WARNING, iae.getMessage(), iae);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IOException(MESSAGE_UNABLE_TO_READ_CSV_FILE, ioe);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (results.isEmpty()) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new InvalidCsvException(String.format(MESSAGE_ZERO_VALID_CONFIGS, csvFilePath.getFileName()));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return results;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Returns the header of a CSV file, which is assumed to be the first non-empty / non-whitespace line in the file"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * read by {@code reader}."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * The line is split into an array of {@code String}s, using the comma symbol as delimiter."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @throws IOException if there is an error accessing the file."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the file has only empty or blank lines."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @throws InvalidHeaderException if header of csv file cannot be read."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private String[] getHeader(BufferedReader reader) throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String currentLine \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // read from file until we encounter a line that is neither blank nor empty"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        while (currentLine.isEmpty()) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            currentLine \u003d Optional.ofNullable(reader.readLine())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    .map(String::trim)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    .orElseThrow(() -\u003e new InvalidCsvException(String.format("},{"lineNumber":137,"author":{"gitId":"-"},"content":"                            MESSAGE_EMPTY_CSV_FORMAT, csvFilePath.getFileName())));"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"            numOfLinesBeforeFirstRecord++;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String[] header \u003d currentLine.split(\",\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        validateHeader(header);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return header;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Returns true if {@code record} does not contain the same number of columns as the header or contains missing"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * values at the mandatory columns in CSV format."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private boolean isLineMalformed(CSVRecord record) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (!record.isConsistent()) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        for (String[] equivalentHeaders : mandatoryHeaders()) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            boolean isLineFormatMalformed \u003d"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    Arrays.stream(equivalentHeaders).allMatch(header -\u003e get(record, header).isEmpty());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            if (isLineFormatMalformed) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                        csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column with the header {@code header}."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected String get(final CSVRecord record, String header) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return headerMap.containsKey(header) ? record.get(headerMap.get(header)).trim() : EMPTY_STRING;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders}."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    protected String get(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        for (String header : equivalentHeaders) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            if (headerMap.containsKey(header)) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                return record.get(headerMap.get(header)).trim();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return EMPTY_STRING;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} if present, or returns {@code defaultValue} otherwise."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    protected String getOrDefault(final CSVRecord record, String[] equivalentHeaders, String defaultValue) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String value \u003d get(record, equivalentHeaders);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return value.isEmpty() ? defaultValue : value;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} as a {@link List} if it is in {@code record} and not empty."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * The column is delimited by {@code COLUMN_VALUES_SEPARATOR}."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * Returns an empty {@link List} otherwise."},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsList(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        String value \u003d get(record, equivalentHeaders);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        if (value.isEmpty()) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return Arrays.stream(value.split(COLUMN_VALUES_SEPARATOR))"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                .map(String::trim)"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at {@code colNum} as a {@code List},"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * delimited by {@code COLUMN_VALUES_SEPARATOR} if it is in {@code record} and not empty, or"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * returns a single element List containing the empty string otherwise."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsListOrDefault(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        List\u003cString\u003e list \u003d getAsList(record, equivalentHeaders);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return list.isEmpty() ? Collections.singletonList(\"\") : list;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Returns the values in {@code record} as a list with the {@link CsvParser#OVERRIDE_KEYWORD} prefix removed."},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Returns an empty list if {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} is empty."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsListWithoutOverridePrefix(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        List\u003cString\u003e data \u003d getAsList(record, equivalentHeaders);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        if (isElementOverridingStandaloneConfig(record, equivalentHeaders)) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            data.set(0, data.get(0).replaceFirst(OVERRIDE_KEYWORD, \"\"));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            data.removeIf(String::isEmpty);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return data;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    private long getLineNumber(final CSVRecord record) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return record.getRecordNumber() + numOfLinesBeforeFirstRecord;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * Returns true if the {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} is prefixed with the override keyword."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    protected boolean isElementOverridingStandaloneConfig(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return get(record, equivalentHeaders).startsWith(OVERRIDE_KEYWORD);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Returns the contents of {@code record} as a raw string."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    private String getRowContentAsRawString(final CSVRecord record) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        StringJoiner inputRowString \u003d new StringJoiner(\",\");"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        for (String value : record) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            inputRowString.add(value);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        String contentAsString \u003d inputRowString.toString();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        return (contentAsString.trim().isEmpty()) ? MESSAGE_EMPTY_LINE : contentAsString;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * Generates map of column header to position number for input {@code possibleHeader}."},{"lineNumber":268,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if {@code possibleHeader} does not contain all the mandatory headers."},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * @throws InvalidHeaderException if a column in {@code possibleHeader} cannot be parsed."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    private void validateHeader(String[] possibleHeader) throws InvalidCsvException, InvalidHeaderException {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        int headerSize \u003d possibleHeader.length;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e knownColumns \u003d new HashSet\u003c\u003e();"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e unknownColumns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parsedHeaders \u003d mandatoryAndOptionalHeaders();"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c headerSize; i++) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            String possible \u003d possibleHeader[i].trim();"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            for (String parsedHeader : parsedHeaders) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                if (possible.equalsIgnoreCase(parsedHeader)) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                    headerMap.put(parsedHeader, i);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                    knownColumns.add(possible);"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"            if (!knownColumns.contains(possible)) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                unknownColumns.add(possible);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        if (unknownColumns.size() \u003e 0) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            String errorMessage \u003d String.join(\", \", unknownColumns);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            throw new InvalidHeaderException("},{"lineNumber":296,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_UNKNOWN_COLUMN, errorMessage, csvFilePath.toString()));"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"        for (String[] equivalentHeaders : mandatoryHeaders()) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            boolean isAnyEquivalentHeaderPresent \u003d"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                    Arrays.stream(equivalentHeaders).anyMatch(header -\u003e headerMap.containsKey(header));"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"            if (!isAnyEquivalentHeaderPresent) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException(String.format("},{"lineNumber":305,"author":{"gitId":"-"},"content":"                        MESSAGE_MANDATORY_HEADER_MISSING, Arrays.toString(equivalentHeaders),"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                        csvFilePath.getFileName()));"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COLUMNS_RECOGNIZED, csvFilePath.getFileName(),"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                String.join(\",  \", headerMap.keySet())));"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":316,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    protected abstract String[][] mandatoryHeaders();"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":320,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":321,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    protected abstract String[][] optionalHeaders();"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":325,"author":{"gitId":"-"},"content":"     * Gets the list of all mandatory and optional headers that can be parsed."},{"lineNumber":326,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e mandatoryAndOptionalHeaders() {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        return Stream.concat(Arrays.stream(mandatoryHeaders()), Arrays.stream(optionalHeaders()))"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                .flatMap(Stream::of)"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":334,"author":{"gitId":"-"},"content":"     * Processes the csv file line by line."},{"lineNumber":335,"author":{"gitId":"-"},"content":"     * All {@link CsvParser}s must use {@link CsvParser#get}, {@link CsvParser#getOrDefault},"},{"lineNumber":336,"author":{"gitId":"-"},"content":"     * {@link CsvParser#getAsList} or {@link CsvParser#getAsListWithoutOverridePrefix} to read contents in"},{"lineNumber":337,"author":{"gitId":"-"},"content":"     * {@code record} and add created objects into {@code results}."},{"lineNumber":338,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * @throws ParseException if any line does not get read successfully."},{"lineNumber":340,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    protected abstract void processLine(List\u003cT\u003e results, final CSVRecord record) throws ParseException;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":3,"-":339}},{"path":"src/main/java/reposense/parser/GroupConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":12,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code group-config.csv} file."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class GroupConfigCsvParser extends CsvParser\u003cGroupConfiguration\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String GROUP_CONFIG_FILENAME \u003d \"group-config.csv\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in group-config.csv config file"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String[] GROUP_NAME_HEADER \u003d {\"Group Name\"};"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String[] FILES_GLOB_HEADER \u003d {\"Globs\"};"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public GroupConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                GROUP_NAME_HEADER, FILES_GLOB_HEADER,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                LOCATION_HEADER,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Processes the csv {@code record} line by line and adds created {@link GroupConfiguration} into {@code results}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected void processLine(List\u003cGroupConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String location \u003d get(record, LOCATION_HEADER);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String groupName \u003d get(record, GROUP_NAME_HEADER);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cString\u003e globList \u003d getAsList(record, FILES_GLOB_HEADER);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GroupConfiguration groupConfig \u003d null;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        groupConfig \u003d findMatchingGroupConfiguration(results, location);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        FileType group \u003d new FileType(groupName, globList);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (groupConfig.containsGroup(group)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            logger.warning(String.format("},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    \"Skipping group as %s has already been specified for the repository %s\","},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    group.toString(), groupConfig.getLocation()));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        groupConfig.addGroup(group);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Gets an existing {@link GroupConfiguration} from {@code results} if {@code location} matches."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Otherwise, adds a newly created {@link GroupConfiguration} into {@code results} and returns it."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} is invalid."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static GroupConfiguration findMatchingGroupConfiguration(List\u003cGroupConfiguration\u003e results,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            String location) throws InvalidLocationException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        GroupConfiguration config \u003d new GroupConfiguration(new RepoLocation(location));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (GroupConfiguration groupConfig : results) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            if (groupConfig.getLocation().equals(config.getLocation())) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                return groupConfig;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":92}},{"path":"src/main/java/reposense/parser/RepoConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":13,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code repo-config.csv} file."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class RepoConfigCsvParser extends CsvParser\u003cRepoConfiguration\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String REPO_CONFIG_FILENAME \u003d \"repo-config.csv\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String IGNORE_STANDALONE_CONFIG_KEYWORD \u003d \"yes\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String IGNORE_FILESIZE_LIMIT_KEYWORD \u003d \"yes\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String SKIP_IGNORED_FILE_ANALYSIS_KEYWORD \u003d \"yes\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String SHALLOW_CLONING_CONFIG_KEYWORD \u003d \"yes\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FIND_PREVIOUS_AUTHORS_KEYWORD \u003d \"yes\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in repo-config.csv config file"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String[] BRANCH_HEADER \u003d {\"Branch\"};"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String[] FILE_FORMATS_HEADER \u003d {\"File formats\"};"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_GLOB_LIST_HEADER \u003d {\"Ignore Glob List\"};"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_STANDALONE_CONFIG_HEADER \u003d {\"Ignore Standalone Config\"};"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_FILESIZE_LIMIT_HEADER \u003d {\"Ignore File Size Limit\"};"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_COMMIT_LIST_CONFIG_HEADER \u003d {\"Ignore Commits List\"};"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_AUTHOR_LIST_CONFIG_HEADER \u003d {\"Ignore Authors List\"};"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String[] SKIP_IGNORED_FILE_ANALYSIS_HEADER \u003d {\"Skip Ignored File Analysis\"};"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String[] SHALLOW_CLONING_CONFIG_HEADER \u003d {\"Shallow Cloning\"};"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String[] FIND_PREVIOUS_AUTHORS_CONFIG_HEADER \u003d {\"Find Previous Authors\"};"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String[] FILESIZE_LIMIT_HEADER \u003d {\"File Size Limit\"};"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public RepoConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                LOCATION_HEADER,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                BRANCH_HEADER, FILE_FORMATS_HEADER, IGNORE_GLOB_LIST_HEADER, IGNORE_STANDALONE_CONFIG_HEADER,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                IGNORE_FILESIZE_LIMIT_HEADER, IGNORE_COMMIT_LIST_CONFIG_HEADER, IGNORE_AUTHOR_LIST_CONFIG_HEADER,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                SHALLOW_CLONING_CONFIG_HEADER, FIND_PREVIOUS_AUTHORS_CONFIG_HEADER, FILESIZE_LIMIT_HEADER,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                SKIP_IGNORED_FILE_ANALYSIS_HEADER"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Processes the csv {@code record} line by line and add created {@link RepoConfiguration} into {@code results} but"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * ignores duplicated {@link RepoConfiguration} if there exists one that has same {@code location} and"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code branch}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if the location represented in {@code record} is invalid."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    protected void processLine(List\u003cRepoConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // The variable expansion is performed to simulate running the same location from command line."},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // This helps to support things like tilde expansion and other Bash/CMD features."},{"lineNumber":82,"author":{"gitId":"-"},"content":"        RepoLocation location \u003d new RepoLocation(FileUtil.getVariableExpandedFilePath(get(record, LOCATION_HEADER)));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String branch \u003d getOrDefault(record, BRANCH_HEADER, RepoConfiguration.DEFAULT_BRANCH);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        boolean isFormatsOverriding \u003d isElementOverridingStandaloneConfig(record, FILE_FORMATS_HEADER);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":87,"author":{"gitId":"-"},"content":"                getAsListWithoutOverridePrefix(record, FILE_FORMATS_HEADER));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        boolean isIgnoreGlobListOverriding \u003d isElementOverridingStandaloneConfig(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d getAsListWithoutOverridePrefix(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        boolean isIgnoreCommitListOverriding \u003d"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                isElementOverridingStandaloneConfig(record, IGNORE_COMMIT_LIST_CONFIG_HEADER);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e ignoreCommitList \u003d CommitHash.convertStringsToCommits("},{"lineNumber":95,"author":{"gitId":"-"},"content":"                getAsListWithoutOverridePrefix(record, IGNORE_COMMIT_LIST_CONFIG_HEADER));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        boolean isIgnoredAuthorsListOverriding \u003d"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                isElementOverridingStandaloneConfig(record, IGNORE_AUTHOR_LIST_CONFIG_HEADER);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoredAuthorsList \u003d getAsListWithoutOverridePrefix(record, IGNORE_AUTHOR_LIST_CONFIG_HEADER);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        boolean isFileSizeLimitIgnored \u003d matchValueAndKeyword(record, IGNORE_FILESIZE_LIMIT_HEADER,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                IGNORE_FILESIZE_LIMIT_KEYWORD);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        boolean isIgnoredFileAnalysisSkipped \u003d matchValueAndKeyword(record, SKIP_IGNORED_FILE_ANALYSIS_HEADER,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                SKIP_IGNORED_FILE_ANALYSIS_KEYWORD);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (isFileSizeLimitIgnored \u0026\u0026 isIgnoredFileAnalysisSkipped) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            logger.warning(\"Ignoring skip ignored file analysis column since file size limit is ignored\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            isIgnoredFileAnalysisSkipped \u003d false;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        boolean isFileSizeLimitOverriding \u003d isElementOverridingStandaloneConfig(record, FILESIZE_LIMIT_HEADER);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        List\u003cString\u003e fileSizeLimitStringList \u003d getAsListWithoutOverridePrefix(record, FILESIZE_LIMIT_HEADER);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        long fileSizeLimit \u003d RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // If file diff limit is specified"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (fileSizeLimitStringList.size() \u003e 0) {"},{"lineNumber":118,"author":{"gitId":"asdfghjkxd"},"content":"            String fileSizeLimitString \u003d fileSizeLimitStringList.get(0).trim();"},{"lineNumber":119,"author":{"gitId":"asdfghjkxd"},"content":"            int parseValue;"},{"lineNumber":120,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"            if (isFileSizeLimitIgnored) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                logger.warning(\"Ignoring file size limit column since file size limit is ignored\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                isFileSizeLimitOverriding \u003d false;"},{"lineNumber":124,"author":{"gitId":"asdfghjkxd"},"content":"            } else if (!StringsUtil.isNumeric(fileSizeLimitString)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    || (parseValue \u003d Integer.parseInt(fileSizeLimitString)) \u003c\u003d 0) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                logger.warning(String.format(\"Values in \\\"%s\\\" column should be positive integers.\","},{"lineNumber":127,"author":{"gitId":"-"},"content":"                        FILESIZE_LIMIT_HEADER[0]));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                isFileSizeLimitOverriding \u003d false;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                fileSizeLimit \u003d parseValue;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        boolean isStandaloneConfigIgnored \u003d matchValueAndKeyword(record, IGNORE_STANDALONE_CONFIG_HEADER,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                IGNORE_STANDALONE_CONFIG_KEYWORD);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        boolean isShallowCloningPerformed \u003d matchValueAndKeyword(record, SHALLOW_CLONING_CONFIG_HEADER,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                SHALLOW_CLONING_CONFIG_KEYWORD);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        boolean isFindingPreviousAuthorsPerformed \u003d matchValueAndKeyword(record, FIND_PREVIOUS_AUTHORS_CONFIG_HEADER,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                FIND_PREVIOUS_AUTHORS_KEYWORD);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        addConfig(results, location, branch, isFormatsOverriding, formats, isIgnoreGlobListOverriding, ignoreGlobList,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                isIgnoreCommitListOverriding, ignoreCommitList, isIgnoredAuthorsListOverriding, ignoredAuthorsList,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                isFileSizeLimitIgnored, isIgnoredFileAnalysisSkipped, isFileSizeLimitOverriding, fileSizeLimit,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                isStandaloneConfigIgnored, isShallowCloningPerformed, isFindingPreviousAuthorsPerformed);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns true if value from {@code record}, that matches any of the equivalent headers in"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders}, is the same as the given {@code keyword}, else false."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private boolean matchValueAndKeyword(CSVRecord record, String[] equivalentHeaders, String keyword) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String value \u003d get(record, equivalentHeaders);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        boolean isIgnored \u003d value.equalsIgnoreCase(keyword);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (!isIgnored \u0026\u0026 !value.isEmpty()) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(String.format(\"Ignoring unknown value %s in %s column.\", value, keyword.toLowerCase()));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return isIgnored;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Creates a new {@link RepoConfiguration} with the supplied inputs and attempts to add it to {@code results}."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Does nothing if the repo already exists in {@code results}."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private void addConfig(List\u003cRepoConfiguration\u003e results, RepoLocation location, String branch,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            boolean isFormatsOverriding, List\u003cFileType\u003e formats, boolean isIgnoreGlobListOverriding,"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            List\u003cString\u003e ignoreGlobList, boolean isIgnoreCommitListOverriding, List\u003cCommitHash\u003e ignoreCommitList,"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            boolean isIgnoredAuthorsListOverriding, List\u003cString\u003e ignoredAuthorsList, boolean isFileSizeLimitIgnored,"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            boolean isIgnoredFileAnalysisSkipped, boolean isFileSizeLimitOverriding, long fileSizeLimit,"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            boolean isStandaloneConfigIgnored, boolean isShallowCloningPerformed,"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":175,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration config \u003d new RepoConfiguration.Builder()"},{"lineNumber":176,"author":{"gitId":"asdfghjkxd"},"content":"                .location(location)"},{"lineNumber":177,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(branch)"},{"lineNumber":178,"author":{"gitId":"asdfghjkxd"},"content":"                .fileTypeManager(formats)"},{"lineNumber":179,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoreGlobList(ignoreGlobList)"},{"lineNumber":180,"author":{"gitId":"asdfghjkxd"},"content":"                .fileSizeLimit(fileSizeLimit)"},{"lineNumber":181,"author":{"gitId":"asdfghjkxd"},"content":"                .isStandaloneConfigIgnored(isStandaloneConfigIgnored)"},{"lineNumber":182,"author":{"gitId":"asdfghjkxd"},"content":"                .isFileSizeLimitIgnored(isFileSizeLimitIgnored)"},{"lineNumber":183,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoreCommitList(ignoreCommitList)"},{"lineNumber":184,"author":{"gitId":"asdfghjkxd"},"content":"                .isFormatsOverriding(isFormatsOverriding)"},{"lineNumber":185,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoreGlobListOverriding(isIgnoreGlobListOverriding)"},{"lineNumber":186,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoreCommitListOverriding(isIgnoreCommitListOverriding)"},{"lineNumber":187,"author":{"gitId":"asdfghjkxd"},"content":"                .isFileSizeLimitOverriding(isFileSizeLimitOverriding)"},{"lineNumber":188,"author":{"gitId":"asdfghjkxd"},"content":"                .isShallowCloningPerformed(isShallowCloningPerformed)"},{"lineNumber":189,"author":{"gitId":"asdfghjkxd"},"content":"                .isFindingPreviousAuthorsPerformed(isFindingPreviousAuthorsPerformed)"},{"lineNumber":190,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoredFileAnalysisSkipped(isIgnoredFileAnalysisSkipped)"},{"lineNumber":191,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoredAuthorsList(ignoredAuthorsList)"},{"lineNumber":192,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoredAuthorsListOverriding(isIgnoredAuthorsListOverriding)"},{"lineNumber":193,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (results.contains(config)) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            logger.warning(\"Ignoring duplicated repository \" + location + \" \" + branch);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":24,"-":178}},{"path":"src/main/java/reposense/parser/exceptions/InvalidCsvException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that there is a major error in a CSV file (e.g. wrong number of columns, zero valid records)."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class InvalidCsvException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public InvalidCsvException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":9}},{"path":"src/main/java/reposense/parser/exceptions/InvalidHeaderException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that there is a problem in the header of csv config file."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class InvalidHeaderException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public InvalidHeaderException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":9}},{"path":"src/main/java/reposense/parser/exceptions/InvalidLocationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that location cannot be represented by {@code URL} or {@code Path}."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class InvalidLocationException extends ParseException {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public InvalidLocationException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":9}},{"path":"src/main/java/reposense/parser/exceptions/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that there is an exception when parsing a string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class ParseException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":9}},{"path":"src/main/java/reposense/parser/types/AlphanumericArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents an alphanumeric type {@code String} argument."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AlphanumericArgumentType implements ArgumentType\u003cString\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC \u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Invalid format. It must be in alphanumeric.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final Pattern ALPHANUMERIC_PATTERN \u003d Pattern.compile(\"[A-Za-z0-9]+\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public String convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        if (!ALPHANUMERIC_PATTERN.matcher(value).matches()) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException("},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    String.format(PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC, value), parser);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":26}},{"path":"src/main/java/reposense/parser/types/AnalysisThreadsArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted integer to an {@link Integer} object."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AnalysisThreadsArgumentType implements ArgumentType\u003cInteger\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Integer convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        return Integer.parseInt(value);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":14}},{"path":"src/main/java/reposense/parser/types/AssetsFolderArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Checks the argument of {@code --assets} flag."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AssetsFolderArgumentType implements ArgumentType\u003cPath\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // Piggyback on library methods to do file existence checks"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanRead().convert(parser, arg, value);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return Paths.get(value);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":21}},{"path":"src/main/java/reposense/parser/types/CloningThreadsArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted integer to an {@link Integer} object."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CloningThreadsArgumentType implements ArgumentType\u003cInteger\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Integer convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        return Integer.parseInt(value);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":14}},{"path":"src/main/java/reposense/parser/types/ConfigFolderArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":12,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Checks the argument of {@code --config} flag."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ConfigFolderArgumentType implements ArgumentType\u003cPath\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_MISSING_REQUIRED_CONFIG_FILES \u003d"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \"The required config file %s is not found in the specified folder.\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // Piggyback on library methods to do file existence checks"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanRead().convert(parser, arg, value);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        if (Files.exists(Paths.get(value).resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME))) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return Paths.get(value);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        throw new ArgumentParserException(String.format(PARSE_EXCEPTION_MESSAGE_MISSING_REQUIRED_CONFIG_FILES,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                RepoConfigCsvParser.REPO_CONFIG_FILENAME), parser);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":31}},{"path":"src/main/java/reposense/parser/types/DateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted date to a {@link LocalDateTime} object."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class DateArgumentType implements ArgumentType\u003cOptional\u003cLocalDateTime\u003e\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT \u003d \"Invalid Date: %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throws ArgumentParserException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return Optional.of(TimeUtil.parseDate(value));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (java.text.ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT, value), parser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":27}},{"path":"src/main/java/reposense/parser/types/OutputFolderArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":11,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Checks the argument of {@code --output} flag."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class OutputFolderArgumentType implements ArgumentType\u003cPath\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // Piggyback on library methods to do file existence checks"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanWrite()"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .or()"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                .verifyNotExists().convert(parser, arg, value);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return Paths.get(value).resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":23}},{"path":"src/main/java/reposense/parser/types/PeriodArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted period to an integer."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PeriodArgumentType implements ArgumentType\u003cOptional\u003cInteger\u003e\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NOT_IN_NUMERIC \u003d"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \"Invalid format. Period must be in the format of nd (n days) or nw (n weeks), \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"where n is a number greater than 0.\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_SMALLER_THAN_ZERO \u003d"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"Invalid format. Period must be greater than 0.\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NUMBER_TOO_LARGE \u003d"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"Invalid format. Input number may be too large.\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Pattern PERIOD_PATTERN \u003d Pattern.compile(\"[0-9]+[dw]\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Optional\u003cInteger\u003e convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return parse(value);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException(pe.getMessage(), parser);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses a {@code period} String and returns an {@link Integer} representing the number of days."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if period format or number is invalid."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Optional\u003cInteger\u003e parse(String period) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!PERIOD_PATTERN.matcher(period).matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_NOT_IN_NUMERIC, period));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        int multiplier \u003d period.substring(period.length() - 1).equals(\"d\") ? 1 : 7;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            int convertedValue \u003d Integer.parseInt(period.substring(0, period.length() - 1)) * multiplier;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            if (convertedValue \u003c\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_SMALLER_THAN_ZERO, period));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.of(convertedValue);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_NUMBER_TOO_LARGE, period));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":55}},{"path":"src/main/java/reposense/parser/types/ReportFolderArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Checks the argument of {@code --view} flag."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ReportFolderArgumentType implements ArgumentType\u003cPath\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // Piggyback on library methods to do file existence checks"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanRead().convert(parser, arg, value);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return Paths.get(value);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":21}},{"path":"src/main/java/reposense/parser/types/SinceDateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted since date to a {@link LocalDateTime} object."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class SinceDateArgumentType extends DateArgumentType {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * When user specifies \"d1\", arbitrary first commit date will be returned."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * This date is equivalent to 1970-01-01 00:00:00 in UTC time."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Then, ReportGenerator will replace the arbitrary since date with the earliest commit date."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String FIRST_COMMIT_DATE_SHORTHAND \u003d \"d1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final ZonedDateTime ARBITRARY_FIRST_COMMIT_DATE_UTC \u003d ZonedDateTime.ofInstant("},{"lineNumber":25,"author":{"gitId":"-"},"content":"            Instant.ofEpochMilli(0), ZoneId.of(\"Z\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final LocalDateTime ARBITRARY_FIRST_COMMIT_DATE_LOCAL \u003d ARBITRARY_FIRST_COMMIT_DATE_UTC"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .toLocalDateTime();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns an arbitrary year {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_LOCAL} if user specifies"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND} in {@code value}, or attempts to return the"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * desired date otherwise."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ArgumentParserException if the given date cannot be parsed."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throws ArgumentParserException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (FIRST_COMMIT_DATE_SHORTHAND.equals(value)) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return Optional.of(ARBITRARY_FIRST_COMMIT_DATE_LOCAL);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String sinceDate \u003d TimeUtil.extractDate(value);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return super.convert(parser, arg, sinceDate + \" 00:00:00\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_LOCAL}, which is the"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@link LocalDateTime} of {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_UTC}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateLocal() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return ARBITRARY_FIRST_COMMIT_DATE_LOCAL;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_UTC} adjusted for the time zone based on"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code toZoneId} and converted to a {@link LocalDateTime} object."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateConverted(ZoneId toZoneId) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(toZoneId).toLocalDateTime();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":60}},{"path":"src/main/java/reposense/parser/types/UntilDateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted until date to a {@link LocalDateTime} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class UntilDateArgumentType extends DateArgumentType {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            throws ArgumentParserException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String untilDate \u003d TimeUtil.extractDate(value);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return super.convert(parser, arg, untilDate + \" 23:59:59\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":21}},{"path":"src/main/java/reposense/parser/types/ZoneIdArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"asdfghjkxd"},"content":"package reposense.parser.types;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted zone id to a {@link ZoneId} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ZoneIdArgumentType implements ArgumentType\u003cZoneId\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_TIMEZONE_INVALID \u003d"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"The timezone provided is invalid, please use a more widely accepted format. E.g. UTC[±hh[mm]]\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ZoneId convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            return ZoneId.of(value);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException(MESSAGE_TIMEZONE_INVALID, parser);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":25}},{"path":"src/main/java/reposense/report/ReportGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.concurrent.ExecutorService;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.authorship.AuthorshipReporter;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.authorship.model.AuthorshipSummary;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.commits.CommitsReporter;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.git.GitRevParse;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.git.GitShortlog;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import reposense.parser.StandaloneConfigJsonParser;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import reposense.report.exception.NoAuthorsWithCommitsFoundException;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import reposense.util.ProgressTracker;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":57,"author":{"gitId":"-"},"content":" * Contains report generation related functionalities."},{"lineNumber":58,"author":{"gitId":"-"},"content":" */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"public class ReportGenerator {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    // zip file which contains all the report template files"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by %s (%s).\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CREATING_DIRECTORY \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \"Error has occurred while creating repo directory for %s (%s), will skip this repo.\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_STANDALONE_CONFIG \u003d \"%s (%s) does not contain a standalone config file.\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_IGNORING_STANDALONE_CONFIG \u003d \"Ignoring standalone config file in %s (%s).\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_STANDALONE_CONFIG \u003d \"%s/%s/%s is malformed for %s (%s).\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_SPECIFIED \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"%s (%s) has no authors specified, using all authors by default.\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            \"No authors found with commits for %s (%s).\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_ANALYSIS \u003d \"Analyzing %s (%s)...\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPLETE_ANALYSIS \u003d \"Analysis of %s (%s) completed!\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_REPORT_GENERATED \u003d \"The report is generated at %s\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_BRANCH_DOES_NOT_EXIST \u003d \"Branch %s does not exist in %s! Analysis terminated.\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MISSING_TEMPLATE \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            \"Unable to find template file. Proceeding to generate report...\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING \u003d \"Failed to clone from %s\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_EXPANDING_COMMIT \u003d \"Cannot expand %s, it shall remain unexpanded\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_DOES_NOT_EXIST \u003d \"Branch \\\"%s\\\" does not exist.\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING_OR_BRANCHING \u003d \"Exception met while cloning or checking out.\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final String LOG_UNEXPECTED_ERROR \u003d \"Unexpected error stack trace for %s:\\n\u003e%s\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e assetsFilesWhiteList \u003d"},{"lineNumber":90,"author":{"gitId":"sopa301"},"content":"            Collections.unmodifiableList(Arrays.asList(new String[] {\"favicon.ico\", \"title.md\"}));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private LocalDateTime earliestSinceDate \u003d null;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private ProgressTracker progressTracker \u003d null;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param configs The list of repos to analyze."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param outputPath The location at which to save the report."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @param assetsPath The location at which assets for generating the report are stored."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param reportConfig The config for the output report."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param generationDate The time at which the report was generated."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param cliSinceDate The date-time from which to start analyzing commits."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param untilDate The cut-off date-time for analyzing commits."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param isSinceDateProvided The boolean variable for whether client provided a sinceDate."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param isUntilDateProvided The boolean variable for whether client provided an untilDate."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param numCloningThreads The number of threads to use to clone the repos."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param numAnalysisThreads The number of threads to use to analyze the repos."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param reportGenerationTimeProvider Supplier for time taken to generate the report."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @param zoneId The timezone to adjust all date-times to."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @param shouldFreshClone The boolean variable for whether to clone a repo again during tests."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @return the list of file paths that were generated."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig, String generationDate, LocalDateTime cliSinceDate,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            LocalDateTime untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            int numAnalysisThreads, Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            boolean shouldFreshClone) throws IOException {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        prepareTemplateFile(outputPath);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (Files.exists(Paths.get(assetsPath))) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            FileUtil.copyDirectoryContents(assetsPath, outputPath, assetsFilesWhiteList);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        earliestSinceDate \u003d null;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        progressTracker \u003d new ProgressTracker(configs.size());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e reportFoldersAndFiles \u003d cloneAndAnalyzeRepos(configs, outputPath,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                numCloningThreads, numAnalysisThreads, shouldFreshClone);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        LocalDateTime reportSinceDate \u003d (TimeUtil.isEqualToArbitraryFirstDateConverted(cliSinceDate, zoneId))"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                ? earliestSinceDate : cliSinceDate;"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Optional\u003cPath\u003e summaryPath \u003d FileUtil.writeJsonFile("},{"lineNumber":136,"author":{"gitId":"-"},"content":"                new SummaryJson(configs, reportConfig, generationDate,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                        reportSinceDate, untilDate, isSinceDateProvided,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                        isUntilDateProvided, RepoSense.getVersion(), ErrorSummary.getInstance().getErrorSet(),"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                        reportGenerationTimeProvider.get(), zoneId),"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                getSummaryResultPath(outputPath));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        summaryPath.ifPresent(reportFoldersAndFiles::add);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_REPORT_GENERATED, outputPath));"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return reportFoldersAndFiles;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Copies the template file to the specified {@code outputPath} for the repo report to be generated."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @throws IOException if I/O error encountered while copying template file."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void prepareTemplateFile(String outputPath) throws IOException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (is !\u003d null) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            FileUtil.copyTemplate(is, outputPath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(MESSAGE_MISSING_TEMPLATE);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Groups {@link RepoConfiguration} with the same {@link RepoLocation} together so that they are only cloned once."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e groupConfigsByRepoLocation("},{"lineNumber":166,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            RepoLocation location \u003d config.getLocation();"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"            if (!repoLocationMap.containsKey(location)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                repoLocationMap.put(location, new ArrayList\u003c\u003e());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            repoLocationMap.get(location).add(config);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return repoLocationMap;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Clone, analyze and generate the report for repositories in {@code repoLocationMap}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Performs cloning and analysis of each repository in parallel, and generates the report."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Also removes any configs that failed to clone or analyze from {@code configs}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * By default, runs in multi-threaded mode with {@code numCloningThreads} threads for cloning"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * and {@code numAnalysisThreads} threads for analysis."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * To turn off multi-threading, run the program with the flags"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * {@code --cloning-threads 1 --analysis-threads 1}."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":188,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for each repository."},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private List\u003cPath\u003e cloneAndAnalyzeRepos(List\u003cRepoConfiguration\u003e configs, String outputPath,"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            int numCloningThreads, int numAnalysisThreads, boolean shouldFreshClone) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d groupConfigsByRepoLocation(configs);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e repoLocationList \u003d new ArrayList\u003c\u003e(repoLocationMap.keySet());"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // Fixed thread pools are used to limit the number of threads used by cloning and analysis jobs at any one time"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        ExecutorService cloneExecutor \u003d Executors.newFixedThreadPool(numCloningThreads);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        ExecutorService analyzeExecutor \u003d Executors.newFixedThreadPool(numAnalysisThreads);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        List\u003cCompletableFuture\u003cAnalyzeJobOutput\u003e\u003e analyzeJobFutures \u003d new ArrayList\u003c\u003e();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        for (RepoLocation location : repoLocationList) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configsToAnalyze \u003d repoLocationMap.get(location);"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"            // The `CompletableFuture.supplyAsync` method is used to clone the repo in parallel."},{"lineNumber":205,"author":{"gitId":"-"},"content":"            // Note that the `cloneExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            // for cloning is no more than `numCloningThreads`."},{"lineNumber":207,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cCloneJobOutput\u003e cloneFuture \u003d CompletableFuture.supplyAsync(() -\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                    cloneRepo(configsToAnalyze.get(0), location, shouldFreshClone), cloneExecutor);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"            // The `thenApplyAsync` method is used to analyze the cloned repo in parallel."},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // This ensures that the analysis job for each repo will only be run after the repo has been cloned."},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // Note that the `analyzeExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // for analysis is no more than `numAnalysisThreads`."},{"lineNumber":214,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cAnalyzeJobOutput\u003e analyzeFuture \u003d cloneFuture.thenApplyAsync("},{"lineNumber":215,"author":{"gitId":"-"},"content":"                    cloneJobOutput -\u003e analyzeRepos(outputPath, configsToAnalyze, cloneJobOutput), analyzeExecutor);"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"            analyzeJobFutures.add(analyzeFuture);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // Next, we collect the list of outputs from all the analyze jobs"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        List\u003cAnalyzeJobOutput\u003e jobOutputs \u003d analyzeJobFutures.stream()"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                .map(CompletableFuture::join)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        // Finally, the ExecutorService objects are shut down to prevent memory leaks"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        cloneExecutor.shutdown();"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        analyzeExecutor.shutdown();"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d jobOutputs"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getFiles().stream())"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e cloneFailLocations \u003d jobOutputs"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                .filter(jobOutput -\u003e !jobOutput.isCloneSuccessful())"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                .map(jobOutput -\u003e jobOutput.getLocation())"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        cloneFailLocations.forEach(location -\u003e handleCloningFailed(configs, location));"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d jobOutputs"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getAnalyseErrors().stream())"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        analysisErrors.forEach(errorInfo -\u003e"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, errorInfo.getFailedConfig(), errorInfo.getErrorMessage()));"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        repoCloner.cleanup();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Clones repo specified by {@code config} at {@code location}."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * @return A {@link CloneJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * successful, and the {@code defaultBranch} of the repo."},{"lineNumber":259,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    private CloneJobOutput cloneRepo(RepoConfiguration config, RepoLocation location, boolean shouldFreshClone) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(config, shouldFreshClone);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        if (clonedRepoLocation !\u003d null) {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            String defaultBranch \u003d repoCloner.getCurrentRepoDefaultBranch();"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location, defaultBranch);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location);"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Analyzes all repos in {@code configsToAnalyze} and generates their report at {@code outputPath}."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * Uses {@code cloneJobOutput} to find repo location, default branch and whether cloning was successful."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":276,"author":{"gitId":"-"},"content":"     * @return An {@link AnalyzeJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":277,"author":{"gitId":"-"},"content":"     * successful, the list of {@code generatedFiles} by the analysis and a list of {@code analysisErrors} encountered."},{"lineNumber":278,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    private AnalyzeJobOutput analyzeRepos(String outputPath, List\u003cRepoConfiguration\u003e configsToAnalyze,"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            CloneJobOutput cloneJobOutput) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        RepoLocation location \u003d cloneJobOutput.getLocation();"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        boolean cloneSuccessful \u003d cloneJobOutput.isCloneSuccessful();"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        if (!cloneSuccessful) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configsToAnalyze.iterator();"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            progressTracker.incrementProgress();"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            RepoConfiguration configToAnalyze \u003d itr.next();"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            configToAnalyze.updateBranch(cloneJobOutput.getDefaultBranch());"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"            Path repoReportDirectory \u003d Paths.get(outputPath, configToAnalyze.getOutputFolderName());"},{"lineNumber":298,"author":{"gitId":"-"},"content":"            logger.info("},{"lineNumber":299,"author":{"gitId":"-"},"content":"                    String.format(progressTracker.getProgress() + \" \""},{"lineNumber":300,"author":{"gitId":"-"},"content":"                            + MESSAGE_START_ANALYSIS, configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                GitRevParse.assertBranchExists(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                GitClone.cloneFromBareAndUpdateBranch(Paths.get(\".\"), configToAnalyze);"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"                FileUtil.createDirectory(repoReportDirectory);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(analyzeRepo(configToAnalyze, repoReportDirectory.toString()));"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            } catch (IOException ioe) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                String logMessage \u003d String.format(MESSAGE_ERROR_CREATING_DIRECTORY,"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch());"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, logMessage, ioe);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            } catch (GitBranchException gbe) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, String.format(MESSAGE_BRANCH_DOES_NOT_EXIST,"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                        configToAnalyze.getBranch(), configToAnalyze.getLocation()), gbe);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                        String.format(LOG_BRANCH_DOES_NOT_EXIST, configToAnalyze.getBranch())));"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            } catch (GitCloneException gce) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze, LOG_ERROR_CLONING_OR_BRANCHING));"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            } catch (NoAuthorsWithCommitsFoundException nafe) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND,"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(generateEmptyRepoReport(repoReportDirectory.toString(),"},{"lineNumber":322,"author":{"gitId":"-"},"content":"                        Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND));"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                generateEmptyRepoReport(repoReportDirectory.toString(), Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"                StringWriter sw \u003d new StringWriter();"},{"lineNumber":326,"author":{"gitId":"-"},"content":"                e.printStackTrace(new PrintWriter(sw));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, sw.toString());"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                        String.format(LOG_UNEXPECTED_ERROR, configToAnalyze.getLocation(), sw.toString())));"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":337,"author":{"gitId":"-"},"content":"     * Analyzes repo specified by {@code config} and generates the report at {@code repoReportDirectory}."},{"lineNumber":338,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for the repo specified by {@code config}."},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * @throws NoAuthorsWithCommitsFoundException if there are no authors with commits found for the repo."},{"lineNumber":341,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    private List\u003cPath\u003e analyzeRepo(RepoConfiguration config, String repoReportDirectory)"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        // preprocess the config and repo"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        updateRepoConfig(config);"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        updateAuthorList(config);"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        updateIgnoreCommitList(config);"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"        if (config.isFindingPreviousAuthorsPerformed()) {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"            generateIgnoreRevsFile(config);"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        AuthorshipReporter authorshipReporter \u003d new AuthorshipReporter();"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        AuthorshipSummary authorshipSummary \u003d authorshipReporter.generateAuthorshipSummary(config);"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"        CommitsReporter commitsReporter \u003d new CommitsReporter();"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        CommitContributionSummary commitSummary \u003d commitsReporter.generateCommitSummary(config);"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        earliestSinceDate \u003d commitSummary.getEarliestSinceDate();"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d generateIndividualRepoReport(repoReportDirectory, commitSummary, authorshipSummary);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COMPLETE_ANALYSIS, config.getLocation(), config.getBranch()));"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":366,"author":{"gitId":"-"},"content":"     * Updates {@code config} with configuration provided by repository if exists."},{"lineNumber":367,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":368,"author":{"gitId":"-"},"content":"     * @throws AssertionError if there is a problem with the file existence check."},{"lineNumber":369,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    public void updateRepoConfig(RepoConfiguration config) throws AssertionError {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        Path configJsonPath \u003d"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"        if (!Files.exists(configJsonPath)) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"        if (config.isStandaloneConfigIgnored()) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_IGNORING_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":381,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"            config.update(standaloneConfig);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        } catch (JsonSyntaxException jse) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_STANDALONE_CONFIG, config.getDisplayName(),"},{"lineNumber":389,"author":{"gitId":"-"},"content":"                    REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE, config.getLocation(), config.getBranch()));"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":391,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON,"},{"lineNumber":392,"author":{"gitId":"-"},"content":"                    iae.getMessage(), config.getLocation(), config.getBranch()));"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":395,"author":{"gitId":"-"},"content":"                    \"This exception should not happen as we have performed the file existence check.\");"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * Find and update {@code config} with all the author identities if author list is empty."},{"lineNumber":401,"author":{"gitId":"-"},"content":"     * Also removes ignored authors from author list."},{"lineNumber":402,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":403,"author":{"gitId":"-"},"content":"     * @throws NoAuthorsWithCommitsFoundException if there are no authors with commits found for the repo."},{"lineNumber":404,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    private void updateAuthorList(RepoConfiguration config) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        if (config.getAuthorList().isEmpty()) {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_AUTHORS_SPECIFIED, config.getLocation(), config.getBranch()));"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"            if (authorList.isEmpty()) {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                throw new NoAuthorsWithCommitsFoundException();"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"            config.setAuthorList(authorList);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        config.removeIgnoredAuthors();"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":420,"author":{"gitId":"-"},"content":"     * Updates {@code config} with the exact list of commits if commit ranges are provided."},{"lineNumber":421,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    private void updateIgnoreCommitList(RepoConfiguration config) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e updatedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":424,"author":{"gitId":"-"},"content":"                .flatMap(x -\u003e CommitHash.getHashes(config.getRepoRoot(), config.getBranch(), x))"},{"lineNumber":425,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(updatedIgnoreCommitList);"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":430,"author":{"gitId":"-"},"content":"     * Adds {@code configs} that were not successfully cloned from {@code failedRepoLocation}"},{"lineNumber":431,"author":{"gitId":"-"},"content":"     * into the list of errors in the summary report and removes them from the list of {@code configs}."},{"lineNumber":432,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    private void handleCloningFailed(List\u003cRepoConfiguration\u003e configs, RepoLocation failedRepoLocation) {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e failedConfigs \u003d configs.stream()"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                .filter(config -\u003e config.getLocation().equals(failedRepoLocation))"},{"lineNumber":436,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, failedConfigs, String.format(LOG_ERROR_CLONING, failedRepoLocation));"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":441,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfig} that failed analysis into the list of errors in the summary report along with"},{"lineNumber":442,"author":{"gitId":"-"},"content":"     * an {@code errorMessage} and removes {@code failedConfig} from the list of {@code configs}."},{"lineNumber":443,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    private void handleAnalysisFailed(List\u003cRepoConfiguration\u003e configs, RepoConfiguration failedConfig,"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            String errorMessage) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, Collections.singletonList(failedConfig), errorMessage);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":450,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfigs} that failed cloning/analysis into the list of errors in the summary report along"},{"lineNumber":451,"author":{"gitId":"-"},"content":"     * with an {@code errorMessage} and removes {@code failedConfigs} from the list of {@code configs}."},{"lineNumber":452,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    private void handleFailedConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cRepoConfiguration\u003e failedConfigs,"},{"lineNumber":454,"author":{"gitId":"-"},"content":"            String errorMessage) {"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configs.iterator();"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":457,"author":{"gitId":"-"},"content":"            RepoConfiguration config \u003d itr.next();"},{"lineNumber":458,"author":{"gitId":"-"},"content":"            if (failedConfigs.contains(config)) {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"                ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), errorMessage);"},{"lineNumber":460,"author":{"gitId":"-"},"content":"                itr.remove();"},{"lineNumber":461,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":466,"author":{"gitId":"-"},"content":"     * Generates an empty report at the {@code repoReportDirectory}, with the author display name"},{"lineNumber":467,"author":{"gitId":"-"},"content":"     * as {@code displayName}."},{"lineNumber":468,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":469,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this empty report."},{"lineNumber":470,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    private List\u003cPath\u003e generateEmptyRepoReport(String repoReportDirectory, String displayName) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson(displayName);"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":476,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":481,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":484,"author":{"gitId":"-"},"content":"     * Generates a report for a single repository at {@code repoReportDirectory} based on {@code commitSummary}"},{"lineNumber":485,"author":{"gitId":"-"},"content":"     * and {@code authorshipSummary}."},{"lineNumber":486,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":487,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this report."},{"lineNumber":488,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    private List\u003cPath\u003e generateIndividualRepoReport(String repoReportDirectory,"},{"lineNumber":490,"author":{"gitId":"-"},"content":"            CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":495,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":497,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":502,"author":{"gitId":"-"},"content":"     * Creates the .git-blame-ignore-revs file containing the contents of {@code ignoreCommitList}"},{"lineNumber":503,"author":{"gitId":"-"},"content":"     * in the repo root directory of {@code config}."},{"lineNumber":504,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":505,"author":{"gitId":"-"},"content":"    private void generateIgnoreRevsFile(RepoConfiguration config) {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":507,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":508,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":509,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":510,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(config.getRepoRoot(), commitHash);"},{"lineNumber":511,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"                        logger.warning(String.format(LOG_ERROR_EXPANDING_COMMIT, commitHash));"},{"lineNumber":513,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":515,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":516,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":517,"author":{"gitId":"-"},"content":""},{"lineNumber":518,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(expandedIgnoreCommitList);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(getIgnoreRevsFilePath(config.getRepoRoot()), config.getIgnoreCommitList());"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"    private String getSummaryResultPath(String targetFileLocation) {"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        return targetFileLocation + \"/\" + SummaryJson.SUMMARY_JSON_FILE_NAME;"},{"lineNumber":524,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":"    private String getIgnoreRevsFilePath(String targetFileLocation) {"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        return targetFileLocation + GitBlame.IGNORE_COMMIT_LIST_FILE_NAME;"},{"lineNumber":528,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"    private String getIndividualAuthorshipPath(String repoReportDirectory) {"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/authorship.json\";"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"    private String getIndividualCommitsPath(String repoReportDirectory) {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/commits.json\";"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public void setEarliestSinceDate(LocalDateTime newEarliestSinceDate) {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        if (earliestSinceDate \u003d\u003d null || newEarliestSinceDate.compareTo(earliestSinceDate) \u003c 0) {"},{"lineNumber":540,"author":{"gitId":"-"},"content":"            earliestSinceDate \u003d newEarliestSinceDate;"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":542,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":543,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sopa301":1,"-":542}},{"path":"src/main/java/reposense/util/StringsUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Contains strings related utilities."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class StringsUtil {"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"    public static final Pattern NEWLINE \u003d Pattern.compile(\"\\n\");"},{"lineNumber":10,"author":{"gitId":"asdfghjkxd"},"content":"    public static final Pattern TAB \u003d Pattern.compile(\"\\t\");"},{"lineNumber":11,"author":{"gitId":"asdfghjkxd"},"content":"    public static final Pattern NUMERIC \u003d Pattern.compile(\"^\\\\d+$\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final Pattern SPECIAL_SYMBOLS \u003d Pattern.compile(\"[@;:\u0026/\\\\\\\\!\u003c\u003e{}%#\\\"\\\\-\u003d\u0027()\\\\[\\\\].+*?^$|]\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Filters the {@code text}, returning only the lines that matches the given {@code regex}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static String filterText(String text, String regex) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"asdfghjkxd"},"content":"        Pattern regexPattern \u003d Pattern.compile(regex);"},{"lineNumber":20,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":21,"author":{"gitId":"asdfghjkxd"},"content":"        for (String line: NEWLINE.split(text)) {"},{"lineNumber":22,"author":{"gitId":"asdfghjkxd"},"content":"            if (regexPattern.matcher(line).matches()) {"},{"lineNumber":23,"author":{"gitId":"asdfghjkxd"},"content":"                sb.append(line).append(\"\\n\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Converts all special symbol characters inside {@code regexString} to the {@code replacementCharacter}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String replaceSpecialSymbols(String regexString, String replacementCharacter) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return SPECIAL_SYMBOLS.matcher(regexString).replaceAll(replacementCharacter);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Adds quotes to the string."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static String addQuotes(String original) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return \"\\\"\" + original + \"\\\"\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Adds the appropriate quotation marks for a file path depending on the OS."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static String addQuotesForFilePath(String filePath) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return \"\\\"\" + filePath + \"\\\"\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c filePath.length(); i++) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                char c \u003d filePath.charAt(i);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                if (c \u003d\u003d \u0027\\\u0027\u0027) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    sb.append(\"\u0027\\\"\u0027\\\"\u0027\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                    sb.append(c);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return \u0027\\\u0027\u0027 + sb.toString() + \u0027\\\u0027\u0027;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Removes quotes at the start and end of {@code original}, if exists."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static String removeQuote(String original) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return (original.startsWith(\"\\\"\") \u0026\u0026 original.endsWith(\"\\\"\"))"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                ? original.substring(1, original.length() - 1)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                : original;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Removes trailing backslashes from a {@code string}, if it exists."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static String removeTrailingBackslash(String string) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (string.isEmpty()) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return string;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        int lastCharIndex \u003d string.length() - 1;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String editedString \u003d string;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        boolean isLastCharBackslash \u003d string.charAt(lastCharIndex) \u003d\u003d \u0027\\\\\u0027;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        while (isLastCharBackslash) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            editedString \u003d editedString.substring(0, lastCharIndex--);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            boolean isStringEmpty \u003d editedString.length() \u003d\u003d 0;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            isLastCharBackslash \u003d !isStringEmpty \u0026\u0026 editedString.charAt(lastCharIndex) \u003d\u003d \u0027\\\\\u0027;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return editedString;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Returns true iff {@code string} is purely numeric."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static boolean isNumeric(String string) {"},{"lineNumber":95,"author":{"gitId":"asdfghjkxd"},"content":"        return NUMERIC.matcher(string).matches();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":9,"-":88}},{"path":"src/main/java/reposense/util/TimeUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.SinceDateArgumentType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains time related functionalities."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class TimeUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static Long startTime;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String DATE_FORMAT_REGEX \u003d"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \"^((0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[012])\\\\/(19|2[0-9])[0-9]{2})\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // \"uuuu\" is used for year since \"yyyy\" does not work with ResolverStyle.STRICT"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter CLI_ARGS_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm:ss\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String EARLIEST_VALID_DATE \u003d \"1970-01-01T00:00:00\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String LATEST_VALID_DATE \u003d \"2099-12-31T23:59:59\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_EARLIER_THAN_EARLIEST_VALID_DATE \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"Date of %s must not be earlier than \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + String.format(\"%s, resetting it to earliest valid date\", EARLIEST_VALID_DATE);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNTIL_DATE_LATER_THAN_LATEST_VALID_DATE \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \"Date of %s must not be later than \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + String.format(\"%s, resetting it to latest valid date\", LATEST_VALID_DATE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(TimeUtil.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Sets the {@code startTime} to be the current time."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void startTimer() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        startTime \u003d System.nanoTime();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static String getElapsedTime() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        long endTime \u003d System.nanoTime();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        double elapsedTime \u003d (double) (endTime - startTime) / 1_000_000_000.0;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int elapsedHours \u003d (int) elapsedTime / 3600;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        int elapsedMinutes \u003d (int) (elapsedTime % 3600) / 60;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        double elapsedSeconds \u003d elapsedTime % 60;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String formattedElapsedTime \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (elapsedHours \u003e 0) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d hour(s)\", elapsedHours);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (elapsedMinutes \u003e 0) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d minute(s)\", elapsedMinutes);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        formattedElapsedTime +\u003d String.format(\" %.2f second(s)\", elapsedSeconds);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return formattedElapsedTime;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * with an additional explanatory string."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String getElapsedTimeMessage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return \"Elapsed processing time:\" + getElapsedTime();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns a valid {@link LocalDateTime} that is set to midnight for the given {@code sinceDate}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static LocalDateTime getSinceDate(LocalDateTime sinceDate) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return getValidDate(sinceDate).withHour(0).withMinute(0).withSecond(0);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns a valid {@link LocalDateTime} that is set to 23:59:59 for the given {@code untilDate}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static LocalDateTime getUntilDate(LocalDateTime untilDate) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return getValidDate(untilDate).withHour(23).withMinute(59).withSecond(59);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Returns a valid {@link LocalDateTime} that is within {@value EARLIEST_VALID_DATE} and {@value LATEST_VALID_DATE}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Resets {@code date} passed the closest valid date if it exceeds the date range."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static LocalDateTime getValidDate(LocalDateTime date) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (date.isBefore(LocalDateTime.parse(EARLIEST_VALID_DATE))) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_SINCE_DATE_EARLIER_THAN_EARLIEST_VALID_DATE, date));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return LocalDateTime.parse(EARLIEST_VALID_DATE);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (date.isAfter(LocalDateTime.parse(LATEST_VALID_DATE))) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_UNTIL_DATE_LATER_THAN_LATEST_VALID_DATE, date));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return LocalDateTime.parse(LATEST_VALID_DATE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return date;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is one month before {@code cliUntilDate} (if present) or one month"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * before report generation date otherwise."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDateMinusAMonth(LocalDateTime cliUntilDate) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return getSinceDate(cliUntilDate.minusMonths(1));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} before {@code cliUntilDate} (if present) or one month"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * before report generation date otherwise."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDateMinusNDays(LocalDateTime cliUntilDate, int numOfDays) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return getSinceDate(cliUntilDate.minusDays(numOfDays));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} after {@code cliSinceDate} (if present)."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDatePlusNDays(LocalDateTime cliSinceDate, int numOfDays) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return getUntilDate(cliSinceDate.plusDays(numOfDays));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Returns current date with time set to 23:59:59. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static LocalDateTime getCurrentDate(ZoneId zoneId) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return LocalDateTime.now(zoneId).withHour(23).withMinute(59).withSecond(59).withNano(0);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} in the UTC time zone."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateLocal() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateLocal();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} adjusted for the time zone based on"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * {@code toZoneId}."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateConverted(ZoneId toZoneId) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateConverted(toZoneId);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in UTC time."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static boolean isEqualToArbitraryFirstDateUtc(LocalDateTime dateTime) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateLocal());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in the time zone given by"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * {@code zoneId}."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static boolean isEqualToArbitraryFirstDateConverted(LocalDateTime dateTime, ZoneId zoneId) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateConverted(zoneId));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Extracts the first substring of {@code date} string that matches the {@code DATE_FORMAT_REGEX}."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public static String extractDate(String date) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d Pattern.compile(DATE_FORMAT_REGEX).matcher(date);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String extractedDate \u003d date;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        if (matcher.find()) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            extractedDate \u003d matcher.group(1);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return extractedDate;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Parses the given {@code date} string as a {@link LocalDateTime} based on the {@code CLI_ARGS_DATE_FORMAT}."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Uses {@link ResolverStyle#STRICT} to avoid unexpected dates like 31/02/2020."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * @throws java.text.ParseException if date cannot be parsed by the required format."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public static LocalDateTime parseDate(String date) throws java.text.ParseException {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return LocalDateTime.parse(date, CLI_ARGS_DATE_FORMAT.withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            throw new java.text.ParseException(String.format("},{"lineNumber":189,"author":{"gitId":"-"},"content":"                    \"Exception message: %s\\n\", e.getMessage()), e.getErrorIndex());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":191}},{"path":"src/systemtest/java/reposense/ConfigSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.Execution;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.ExecutionMode;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.SupportedDomainUrlMap;"},{"lineNumber":18,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.SinceDateArgumentType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.util.SystemTestUtil;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@Execution(ExecutionMode.SAME_THREAD)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ConfigSystemTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String TEST_TIME_ZONE \u003d \"Asia/Singapore\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String OUTPUT_DIRECTORY \u003d \"ft_temp\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path REPORT_DIRECTORY_PATH \u003d Paths.get(OUTPUT_DIRECTORY, \"reposense-report\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static boolean didNotCloneRepoNormally \u003d true;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        SupportedDomainUrlMap.clearAccessedSet();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRange() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .addUntilDate(\"2/3/2019\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, false,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/sinceBeginningDateRange/expected\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDate() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder().addUntilDate(\"1/11/2017\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, false,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/30daysFromUntilDate/expected\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * System test with a specified since date and until date, with the last modified date time in each"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * line of code."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void testDateRangeWithModifiedDateTimeInLines() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .addSinceDate(\"1/9/2017\")"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/10/2017\")"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .addLastModifiedDateFlags();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, false,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/dateRangeWithModifiedDateTimeInLines/expected\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using shallow cloning."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithShallowCloning() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .addUntilDate(\"2/3/2019\")"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .addShallowCloning();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, true,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/sinceBeginningDateRangeWithShallowCloning/expected\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithShallowCloning() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .addUntilDate(\"1/11/2017\")"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .addShallowCloning();"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, true,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/30daysFromUntilDateWithShallowCloning/expected\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using find previous authors."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithFindPreviousAuthors() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .addUntilDate(\"2/3/2019\")"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .addFindPreviousAuthors();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, true,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/sinceBeginningDateRangeFindPreviousAuthors/expected\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithFindPreviousAuthors() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d initInputBuilder()"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .addUntilDate(\"1/11/2017\")"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .addFindPreviousAuthors();"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, true,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                \"ConfigSystemTest/30daysFromUntilDateFindPreviousAuthors/expected\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns a {@link InputBuilder} that is initialized with some default values."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eConfig Folder Path: {@code ConfigSystemTest}"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eFormats: {@link ConfigSystemTest#TESTING_FILE_FORMATS TESTING_FILE_FORMATS}"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eTimezone: {@link ConfigSystemTest#TEST_TIME_ZONE TEST_TIME_ZONE}"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eOutput Folder Path: {@link ConfigSystemTest#OUTPUT_DIRECTORY OUTPUT_DIRECTORY}"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eTest Mode: {@code Enabled}"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private InputBuilder initInputBuilder() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path configFolder \u003d loadResource(getClass(), \"ConfigSystemTest\");"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return new InputBuilder().addConfig(configFolder)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .addTimezone(TEST_TIME_ZONE)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .addTestMode()"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Generates the testing report and compares it with the expected report."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Re-generates a normal report after the testing finished if the first report is shallow-cloned."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @param inputBuilder The input builder that contains the command line input specified by user."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @param shouldFreshClone Boolean for whether to clone repo again if it has been cloned before."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @param pathToResource The location at which files generated during the test are stored."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void runTest(InputBuilder inputBuilder, boolean shouldFreshClone, String pathToResource) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (shouldFreshClone || didNotCloneRepoNormally) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addFreshCloning();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        RepoSense.main(translateCommandline(inputBuilder.build()));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), pathToResource);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        SystemTestUtil.verifyReportJsonFiles(actualFiles, REPORT_DIRECTORY_PATH);"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        didNotCloneRepoNormally \u003d inputBuilder.isShallowCloning();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":171}},{"path":"src/systemtest/java/reposense/LocalRepoSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterAll;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.Execution;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.ExecutionMode;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.SupportedDomainUrlMap;"},{"lineNumber":20,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.SinceDateArgumentType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.SystemTestUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"@Execution(ExecutionMode.SAME_THREAD)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LocalRepoSystemTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_ONE_PARENT \u003d \"parent1\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_TWO_PARENT \u003d \"parent2\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_ONE \u003d \"parent1/test-repo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_TWO \u003d \"parent2/test-repo\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String LAST_COMMIT_DATE \u003d \"31/01/2023\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String OUTPUT_DIRECTORY \u003d \"local-test\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TIME_ZONE \u003d \"UTC+08\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path REPORT_DIRECTORY_PATH \u003d Paths.get(OUTPUT_DIRECTORY, \"reposense-report\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void setupLocalRepos() throws Exception {"},{"lineNumber":42,"author":{"gitId":"asdfghjkxd"},"content":"        TestRepoCloner.clone("},{"lineNumber":43,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":44,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\"))"},{"lineNumber":45,"author":{"gitId":"asdfghjkxd"},"content":"                        .build(),"},{"lineNumber":46,"author":{"gitId":"asdfghjkxd"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_ONE"},{"lineNumber":47,"author":{"gitId":"asdfghjkxd"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"asdfghjkxd"},"content":"        TestRepoCloner.clone("},{"lineNumber":49,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":50,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\"))"},{"lineNumber":51,"author":{"gitId":"asdfghjkxd"},"content":"                        .build(),"},{"lineNumber":52,"author":{"gitId":"asdfghjkxd"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_TWO"},{"lineNumber":53,"author":{"gitId":"asdfghjkxd"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setupLocalTest() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        SupportedDomainUrlMap.clearAccessedSet();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void deleteReportDirectory() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @AfterAll"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static void deleteClonedLocalRepos() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_ONE_PARENT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_TWO_PARENT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void testSameFinalDirectory() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder()"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .addRepos(LOCAL_DIRECTORY_ONE, LOCAL_DIRECTORY_TWO)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .addUntilDate(LAST_COMMIT_DATE)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .addOutput(Paths.get(OUTPUT_DIRECTORY))"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .addTimezone(TIME_ZONE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, \"LocalRepoSystemTest/testSameFinalDirectory\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void testRelativePathing() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String relativePathForTesting \u003d \"parent1/../parent1/./test-repo\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .addRepos(relativePathForTesting)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .addUntilDate(LAST_COMMIT_DATE)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .addOutput(Paths.get(OUTPUT_DIRECTORY))"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .addTimezone(TIME_ZONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, \"LocalRepoSystemTest/testRelativePathing\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Runs RepoSense with {@code inputBuilder} and tests it against the expected"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * files in {@code expectedFilesPathString}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void runTest(InputBuilder inputBuilder, String expectedFilesPathString) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        RepoSense.main(translateCommandline(inputBuilder.build()));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path expectedFilesPath \u003d loadResource(getClass(), expectedFilesPathString);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        SystemTestUtil.verifyReportJsonFiles(expectedFilesPath, REPORT_DIRECTORY_PATH);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":13,"-":95}},{"path":"src/systemtest/java/reposense/util/SystemTestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"asdfghjkxd"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.google.gson.JsonParser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for system tests."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SystemTestUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String[] JSON_FIELDS_TO_IGNORE \u003d new String[]"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            {\"repoSenseVersion\", \"reportGeneratedTime\", \"reportGenerationTime\"};"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Verifies that all JSON files in the {@code actualDirectory} matches those at the {@code expectedDirectory}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void verifyReportJsonFiles(Path expectedDirectory, Path actualDirectory) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            for (Path file : pathStream.collect(Collectors.toList())) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                Path expectedFilePath \u003d expectedDirectory.resolve(file.getFileName());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                Path actualFilePath \u003d actualDirectory.resolve(file.getFileName());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                if (Files.isDirectory(file)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    verifyReportJsonFiles(expectedFilePath, actualFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                } else if (file.toString().endsWith(\".json\")) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    if (file.getFileName().toString().equals(\"summary.json\")) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                        assertSummaryJson(expectedFilePath, actualFilePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                    } else {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                        assertJson(expectedFilePath, actualFilePath);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            ioe.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void assertSummaryJson(Path expectedSummaryJsonPath, Path actualSummaryJsonPath)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try (FileReader fileReaderExpected \u003d new FileReader(expectedSummaryJsonPath.toFile());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                FileReader fileReaderActual \u003d new FileReader(actualSummaryJsonPath.toFile())) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            JsonObject jsonExpected \u003d JsonParser.parseReader(fileReaderExpected).getAsJsonObject();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            JsonObject jsonActual \u003d JsonParser.parseReader(fileReaderActual).getAsJsonObject();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            for (String ignoredKey : JSON_FIELDS_TO_IGNORE) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                jsonExpected.remove(ignoredKey);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                jsonActual.remove(ignoredKey);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Assertions.assertEquals(jsonExpected, jsonActual);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Asserts that the contents in the given JSON file at {@code actualJsonPath} is the same as the JSON file"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * at {@code expectedJsonPath}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static void assertJson(Path expectedJsonPath, Path actualJsonPath) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.exists(actualJsonPath));"},{"lineNumber":67,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":68,"author":{"gitId":"asdfghjkxd"},"content":"        try (FileReader fileReaderExpected \u003d new FileReader(expectedJsonPath.toFile());"},{"lineNumber":69,"author":{"gitId":"asdfghjkxd"},"content":"                FileReader fileReaderActual \u003d new FileReader(actualJsonPath.toFile())) {"},{"lineNumber":70,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":71,"author":{"gitId":"asdfghjkxd"},"content":"            JsonElement jsonExpected \u003d JsonParser.parseReader(fileReaderExpected);"},{"lineNumber":72,"author":{"gitId":"asdfghjkxd"},"content":"            JsonElement jsonActual \u003d JsonParser.parseReader(fileReaderActual);"},{"lineNumber":73,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":74,"author":{"gitId":"asdfghjkxd"},"content":"            Assertions.assertEquals(jsonExpected, jsonActual);"},{"lineNumber":75,"author":{"gitId":"asdfghjkxd"},"content":"        } catch (IOException ex) {"},{"lineNumber":76,"author":{"gitId":"asdfghjkxd"},"content":"            Assertions.fail(ex.getMessage());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":11,"-":68}},{"path":"src/test/java/reposense/git/GitBranchTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class GitBranchTest extends GitTestTemplate {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION \u003d"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"https://github.com/reposense/testrepo-UncommonDefaultBranch.git\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private RepoConfiguration config;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        config \u003d configs.get();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void getCurrentBranch_masterBranch_success() throws Exception {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String currentBranch \u003d GitBranch.getCurrentBranch(config.getRepoRoot());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"master\", currentBranch);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void getCurrentBranch_uncommonDefaultBranch_success() throws Exception {"},{"lineNumber":34,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration uncommonDefaultConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":35,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION))"},{"lineNumber":36,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(RepoConfiguration.DEFAULT_BRANCH)"},{"lineNumber":37,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uncommonDefaultConfig.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(uncommonDefaultConfig);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String currentBranch \u003d GitBranch.getCurrentBranch(uncommonDefaultConfig.getRepoRoot());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"uncommon\", currentBranch);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":4,"-":39}},{"path":"src/test/java/reposense/model/RepoConfigurationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.lang.reflect.Method;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"asdfghjkxd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"asdfghjkxd"},"content":"import java.time.ZoneId;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":21,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.ConfigurationBuildException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class RepoConfigurationTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_TEST_CONFIG_FILES \u003d"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_ignoreStandAlone_test\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_ignoreStandAloneKeyword_test\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path FORMATS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_formats_test\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path WITHOUT_FORMATS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_withoutformats_test\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path GROUPS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_groups_test\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path OVERRIDE_STANDALONE_TEST_CONFIG_FILE \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_overrideStandAlone_test\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_AUTHORS_TEST_CONFIG_FILE \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreAuthors_test\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreStandaloneOverrideCsv_test\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_FILESIZE_LIMIT_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreFileSizeLimit_test\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_FILESIZE_LIMIT_OVERRIDE_CSV_TEST_CONFIG_FILES \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreFileSizeLimitOverrideCsv_test\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Path SHALLOW_CLONING_TEST_CONFIG_FILES \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_shallowCloning_test\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final Path SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES \u003d"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_shallowCloningOverrideCsv_test\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final Path FIND_PREVIOUS_AUTHORS_TEST_CONFIG_FILES \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_findPreviousAuthors_test\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final Path FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES \u003d"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_findPreviousAuthorsOverrideCsv_test\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_MINIMAL_STANDALONE_CONFIG \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \"https://github.com/reposense/testrepo-minimalstandaloneconfig.git\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"lithiumlkid\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"codeeong\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final Author THIRD_AUTHOR \u003d new Author(\"jordancjq\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final Author FOURTH_AUTHOR \u003d new Author(\"lohtianwei\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_ALIASES \u003d Collections.singletonList(\"Ahmad Syafiq\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Collections.emptyList();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_AUTHOR_ALIASES \u003d Collections.singletonList(\"Jordan Chong\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FOURTH_AUTHOR_ALIASES \u003d Collections.singletonList(\"Tianwei\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Arrays.asList(\"*.aa1\", \"**.aa2\", \"**.java\", \"collated**\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"\", \"collated**\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**[!(.md)]\", \"collated**\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FOURTH_AUTHOR_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e CONFIG_FORMATS \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \"java\", \"adoc\", \"md\"));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e FIRST_CONFIG_GROUPS \u003d Arrays.asList("},{"lineNumber":88,"author":{"gitId":"-"},"content":"            new FileType(\"test\", Collections.singletonList(\"src/test**\")),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            new FileType(\"code\", Collections.singletonList(\"**.java\")),"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e SECOND_CONFIG_GROUPS \u003d Arrays.asList("},{"lineNumber":92,"author":{"gitId":"-"},"content":"            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e CLI_FORMATS \u003d Arrays.asList(\"css\", \"html\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static RepoConfiguration repoDeltaStandaloneConfig;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private ReportGenerator reportGenerator \u003d new ReportGenerator();"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static void setUp() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setAuthorAliases(FIRST_AUTHOR_ALIASES);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        THIRD_AUTHOR.setAuthorAliases(THIRD_AUTHOR_ALIASES);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        FOURTH_AUTHOR.setAuthorAliases(FOURTH_AUTHOR_ALIASES);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        THIRD_AUTHOR.setIgnoreGlobList(THIRD_AUTHOR_GLOB_LIST);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        FOURTH_AUTHOR.setIgnoreGlobList(FOURTH_AUTHOR_GLOB_LIST);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FIRST_AUTHOR);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        expectedAuthors.add(SECOND_AUTHOR);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        expectedAuthors.add(THIRD_AUTHOR);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FOURTH_AUTHOR);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"asdfghjkxd"},"content":"        repoDeltaStandaloneConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":117,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":118,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":119,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorList(expectedAuthors);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.addAuthorNamesToAuthorMapEntry(FIRST_AUTHOR, FIRST_AUTHOR_ALIASES);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.addAuthorNamesToAuthorMapEntry(FOURTH_AUTHOR, FOURTH_AUTHOR_ALIASES);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Ahm\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Cod\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(THIRD_AUTHOR, \"Jor\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(FOURTH_AUTHOR, \"Loh\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setEmails(Arrays.asList(\"codeeong@gmail.com\", \"33129797+codeeong@users.noreply.github.com\"));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (Author author : expectedAuthors) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            repoDeltaStandaloneConfig.addAuthorEmailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void repoConfig_usesStandaloneConfig_success() throws Exception {"},{"lineNumber":139,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":140,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":141,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":142,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoresStandaloneConfig_success() throws Exception {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(FIRST_AUTHOR);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedAuthors.add(author);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":157,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":158,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":159,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        expectedConfig.addAuthorNamesToAuthorMapEntry(author, FIRST_AUTHOR_ALIASES);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_TEST_CONFIG_FILES)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoresStandaloneConfigInCli_success() throws Exception {"},{"lineNumber":189,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":190,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":191,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":192,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RunConfigurationDecider"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                .getRunConfiguration(cliArguments)"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoreStandaloneConfigInCli_overrideCsv() throws Exception {"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":220,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":221,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":222,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":225,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":226,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":227,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":228,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST)"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoreFileSizeLimit_success() throws Exception {"},{"lineNumber":252,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":253,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":254,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":255,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        expectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_FILESIZE_LIMIT_TEST_CONFIG_FILES)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoreFileSizeLimitInCli_overrideCsv() throws Exception {"},{"lineNumber":280,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":281,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":282,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":283,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":287,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":288,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":289,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":290,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_FILESIZE_LIMIT_OVERRIDE_CSV_TEST_CONFIG_FILES)"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                .addIgnoreFilesizeLimit()"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFileSizeLimitIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutIgnoreStandaloneConfigInCli_useCsv() throws Exception {"},{"lineNumber":316,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":317,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":318,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":319,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST).build();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":326,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, repoDeltaActualConfig);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    public void repoConfig_wrongKeywordUseStandaloneConfig_success() throws Exception {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES)"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloning_success() throws Exception {"},{"lineNumber":360,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":361,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":362,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":363,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        expectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_TEST_CONFIG_FILES)"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloningInCli_success() throws Exception {"},{"lineNumber":388,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":389,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":390,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":391,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        expectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":399,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":400,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RunConfigurationDecider"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                .getRunConfiguration(cliArguments)"},{"lineNumber":404,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloningInCli_overrideCsv() throws Exception {"},{"lineNumber":419,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":420,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":421,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":422,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":426,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":427,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":428,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":429,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES)"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":440,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":450,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":454,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutShallowCloningInInCli_useCsv() throws Exception {"},{"lineNumber":455,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":456,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":457,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":458,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":462,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":463,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":464,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":465,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":471,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthors_success() throws Exception {"},{"lineNumber":488,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":489,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":490,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":491,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        expectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_TEST_CONFIG_FILES)"},{"lineNumber":499,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":505,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":513,"author":{"gitId":"-"},"content":""},{"lineNumber":514,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthorsInCli_success() throws Exception {"},{"lineNumber":516,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":517,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":518,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":519,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        expectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":526,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":527,"author":{"gitId":"-"},"content":"                .addFindPreviousAuthors()"},{"lineNumber":528,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":529,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RunConfigurationDecider"},{"lineNumber":531,"author":{"gitId":"-"},"content":"                .getRunConfiguration(cliArguments)"},{"lineNumber":532,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":536,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":543,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":546,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthorsInCli_overrideCsv() throws Exception {"},{"lineNumber":547,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":548,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":549,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":550,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":554,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":555,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":556,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":557,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":560,"author":{"gitId":"-"},"content":""},{"lineNumber":561,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES)"},{"lineNumber":562,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":563,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":566,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":569,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":575,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":576,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":577,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFindPreviousAuthorsInCli_useCsv() throws Exception {"},{"lineNumber":583,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":584,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":585,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":586,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":588,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":590,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":591,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":592,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":593,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":597,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":598,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":599,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":602,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":603,"author":{"gitId":"-"},"content":""},{"lineNumber":604,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":612,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":613,"author":{"gitId":"-"},"content":""},{"lineNumber":614,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    public void repoConfig_userEnvironmentCannotRunFindPreviousAuthors_setFindPreviousAuthorsToFalseInAllRepoConfigs()"},{"lineNumber":616,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":617,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":618,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA))"},{"lineNumber":619,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":620,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":621,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":623,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":624,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":625,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":626,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":632,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":633,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":635,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":644,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":645,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":648,"author":{"gitId":"-"},"content":"    public void repoConfig_withFormats_ignoreCliFormats() throws Exception {"},{"lineNumber":649,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FORMATS_TEST_CONFIG_FILES)"},{"lineNumber":651,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":652,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":654,"author":{"gitId":"-"},"content":""},{"lineNumber":655,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":658,"author":{"gitId":"-"},"content":""},{"lineNumber":659,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(CONFIG_FORMATS, actualConfigs.get(0).getFileTypeManager().getFormats());"},{"lineNumber":661,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":662,"author":{"gitId":"-"},"content":""},{"lineNumber":663,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFormats_useCliFormats() throws Exception {"},{"lineNumber":665,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES)"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":668,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":670,"author":{"gitId":"-"},"content":""},{"lineNumber":671,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":673,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":674,"author":{"gitId":"-"},"content":""},{"lineNumber":675,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e actualFormats \u003d actualConfigs.get(0).getFileTypeManager().getFormats();"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FileType.convertFormatStringsToFileTypes(CLI_FORMATS), actualFormats);"},{"lineNumber":679,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":682,"author":{"gitId":"-"},"content":"    public void repoConfig_withCustomGroups_useCustomGroups() throws Exception {"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(GROUPS_TEST_CONFIG_FILES).build();"},{"lineNumber":684,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":685,"author":{"gitId":"-"},"content":""},{"lineNumber":686,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":687,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":688,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d"},{"lineNumber":689,"author":{"gitId":"-"},"content":"                new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"},{"lineNumber":690,"author":{"gitId":"-"},"content":""},{"lineNumber":691,"author":{"gitId":"-"},"content":"        RepoConfiguration.setGroupConfigsToRepos(actualConfigs, groupConfigs);"},{"lineNumber":692,"author":{"gitId":"-"},"content":""},{"lineNumber":693,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FIRST_CONFIG_GROUPS, actualConfigs.get(0).getFileTypeManager().getGroups());"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(SECOND_CONFIG_GROUPS, actualConfigs.get(1).getFileTypeManager().getGroups());"},{"lineNumber":696,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":699,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFormatsAndCliFormats_useAllFormats() throws Exception {"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES).build();"},{"lineNumber":701,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":702,"author":{"gitId":"-"},"content":""},{"lineNumber":703,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":704,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":705,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":706,"author":{"gitId":"-"},"content":""},{"lineNumber":707,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, actualConfigs.get(0).getFileTypeManager()"},{"lineNumber":709,"author":{"gitId":"-"},"content":"                .getFormats());"},{"lineNumber":710,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":713,"author":{"gitId":"-"},"content":"    public void repoConfig_emptyLocationDifferentBranch_equal() throws Exception {"},{"lineNumber":714,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration emptyLocationEmptyBranchRepoConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":715,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(\"\"))"},{"lineNumber":716,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"\")"},{"lineNumber":717,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":718,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration emptyLocationDefaultBranchRepoConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":719,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(\"\")).build();"},{"lineNumber":720,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration emptyLocationWithBranchRepoConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":721,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(\"\"))"},{"lineNumber":722,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":723,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":724,"author":{"gitId":"-"},"content":""},{"lineNumber":725,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(emptyLocationDefaultBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"},{"lineNumber":726,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(emptyLocationWithBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"},{"lineNumber":727,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":728,"author":{"gitId":"-"},"content":""},{"lineNumber":729,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":730,"author":{"gitId":"-"},"content":"    public void repoConfig_sameLocationDifferentBranch_notEqual() throws Exception {"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        RepoConfiguration validLocationValidBranchRepoConfig \u003d"},{"lineNumber":732,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":733,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":734,"author":{"gitId":"asdfghjkxd"},"content":"                        .branch(\"master\")"},{"lineNumber":735,"author":{"gitId":"asdfghjkxd"},"content":"                        .build();"},{"lineNumber":736,"author":{"gitId":"-"},"content":"        RepoConfiguration validLocationDefaultBranchRepoConfig \u003d"},{"lineNumber":737,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder().location(new RepoLocation(TEST_REPO_DELTA)).build();"},{"lineNumber":738,"author":{"gitId":"-"},"content":""},{"lineNumber":739,"author":{"gitId":"-"},"content":"        Assertions.assertNotEquals(validLocationDefaultBranchRepoConfig, validLocationValidBranchRepoConfig);"},{"lineNumber":740,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":743,"author":{"gitId":"-"},"content":"    public void repoConfig_overrideStandaloneConfig_success() throws Exception {"},{"lineNumber":744,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":745,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":746,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":747,"author":{"gitId":"asdfghjkxd"},"content":"                .fileTypeManager(Collections.emptyList())"},{"lineNumber":748,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoreGlobList(Collections.emptyList())"},{"lineNumber":749,"author":{"gitId":"asdfghjkxd"},"content":"                .fileSizeLimit(RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT)"},{"lineNumber":750,"author":{"gitId":"asdfghjkxd"},"content":"                .isStandaloneConfigIgnored(false)"},{"lineNumber":751,"author":{"gitId":"asdfghjkxd"},"content":"                .isFileSizeLimitIgnored(false)"},{"lineNumber":752,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoreCommitList(Collections.emptyList())"},{"lineNumber":753,"author":{"gitId":"asdfghjkxd"},"content":"                .isFormatsOverriding(true)"},{"lineNumber":754,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoreGlobListOverriding(true)"},{"lineNumber":755,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoreCommitListOverriding(true)"},{"lineNumber":756,"author":{"gitId":"asdfghjkxd"},"content":"                .isFileSizeLimitOverriding(false)"},{"lineNumber":757,"author":{"gitId":"asdfghjkxd"},"content":"                .isShallowCloningPerformed(false)"},{"lineNumber":758,"author":{"gitId":"asdfghjkxd"},"content":"                .isFindingPreviousAuthorsPerformed(false)"},{"lineNumber":759,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoredFileAnalysisSkipped(false)"},{"lineNumber":760,"author":{"gitId":"asdfghjkxd"},"content":"                .ignoredAuthorsList(Arrays.asList(\"lithiumlkid\"))"},{"lineNumber":761,"author":{"gitId":"asdfghjkxd"},"content":"                .isIgnoredAuthorsListOverriding(true)"},{"lineNumber":762,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":763,"author":{"gitId":"-"},"content":""},{"lineNumber":764,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        Author[] authors \u003d new Author[]{FIRST_AUTHOR, SECOND_AUTHOR, THIRD_AUTHOR, FOURTH_AUTHOR};"},{"lineNumber":766,"author":{"gitId":"-"},"content":"        for (Author author : authors) {"},{"lineNumber":767,"author":{"gitId":"-"},"content":"            Author expectedAuthor \u003d new Author(author);"},{"lineNumber":768,"author":{"gitId":"-"},"content":"            List\u003cString\u003e expectedAuthorIgnoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":769,"author":{"gitId":"-"},"content":"            expectedAuthorIgnoreGlobList.addAll(author.getIgnoreGlobList());"},{"lineNumber":770,"author":{"gitId":"-"},"content":""},{"lineNumber":771,"author":{"gitId":"-"},"content":"            // Authors\u0027 original ignoreGlobList contains values from StandaloneConfig repo level, thus need to remove"},{"lineNumber":772,"author":{"gitId":"-"},"content":"            expectedAuthorIgnoreGlobList.removeAll(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":773,"author":{"gitId":"-"},"content":"            expectedAuthor.setIgnoreGlobList(expectedAuthorIgnoreGlobList);"},{"lineNumber":774,"author":{"gitId":"-"},"content":"            expectedAuthorList.add(expectedAuthor);"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":776,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthorList);"},{"lineNumber":777,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayNameMap(repoDeltaStandaloneConfig.getAuthorDisplayNameMap());"},{"lineNumber":778,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorNamesToAuthorMap(repoDeltaStandaloneConfig.getAuthorNamesToAuthorMap());"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorEmailsToAuthorMap(repoDeltaStandaloneConfig.getAuthorEmailsToAuthorMap());"},{"lineNumber":780,"author":{"gitId":"-"},"content":""},{"lineNumber":781,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":782,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(OVERRIDE_STANDALONE_TEST_CONFIG_FILE)"},{"lineNumber":783,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":784,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":785,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":786,"author":{"gitId":"-"},"content":""},{"lineNumber":787,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":788,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":795,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":796,"author":{"gitId":"-"},"content":""},{"lineNumber":797,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":798,"author":{"gitId":"-"},"content":"    public void repoConfig_minimalStandaloneConfig_fieldsAssignedDefaultValues() throws Exception {"},{"lineNumber":799,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":800,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":801,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":802,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":803,"author":{"gitId":"-"},"content":""},{"lineNumber":804,"author":{"gitId":"-"},"content":"        Author firstAuthor \u003d new Author(\"bluein-green\");"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        Author secondAuthor \u003d new Author(\"jylee-git\");"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d Arrays.asList(firstAuthor, secondAuthor);"},{"lineNumber":807,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":808,"author":{"gitId":"-"},"content":""},{"lineNumber":809,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(Collections.emptyList());"},{"lineNumber":810,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(Collections.emptyList());"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreCommitList(Collections.emptyList());"},{"lineNumber":812,"author":{"gitId":"-"},"content":""},{"lineNumber":813,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":814,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":815,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":816,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":817,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":818,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":819,"author":{"gitId":"-"},"content":""},{"lineNumber":820,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":821,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":822,"author":{"gitId":"-"},"content":""},{"lineNumber":823,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":824,"author":{"gitId":"-"},"content":"    public void repoConfig_removeIgnoredAuthors_success() throws Exception {"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(FIRST_AUTHOR);"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":828,"author":{"gitId":"-"},"content":"        expectedAuthors.add(author);"},{"lineNumber":829,"author":{"gitId":"-"},"content":""},{"lineNumber":830,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":831,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_DELTA))"},{"lineNumber":832,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":833,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        expectedConfig.addAuthorNamesToAuthorMapEntry(author, FIRST_AUTHOR_ALIASES);"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":839,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":840,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":841,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoredAuthorsList(Arrays.asList(\"jordancjq\", \"Eugene Peh\"));"},{"lineNumber":842,"author":{"gitId":"-"},"content":""},{"lineNumber":843,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_AUTHORS_TEST_CONFIG_FILE)"},{"lineNumber":845,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":846,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":847,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":848,"author":{"gitId":"-"},"content":""},{"lineNumber":849,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":852,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":853,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":854,"author":{"gitId":"-"},"content":""},{"lineNumber":855,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":857,"author":{"gitId":"-"},"content":"        reportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":858,"author":{"gitId":"-"},"content":"        Method updateAuthorList \u003d ReportGenerator.class.getDeclaredMethod(\"updateAuthorList\", RepoConfiguration.class);"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        updateAuthorList.setAccessible(true);"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        updateAuthorList.invoke(reportGenerator, actualConfig);"},{"lineNumber":861,"author":{"gitId":"-"},"content":""},{"lineNumber":862,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":863,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":864,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":865,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":866,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_displayName_success() throws Exception {"},{"lineNumber":867,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":868,"author":{"gitId":"asdfghjkxd"},"content":"                .displayName(\"CS3281\")"},{"lineNumber":869,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":870,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":871,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":872,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":873,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getDisplayName(), \"CS3281\");"},{"lineNumber":874,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":875,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":876,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":877,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_outputFolderName_success() throws Exception {"},{"lineNumber":878,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":879,"author":{"gitId":"asdfghjkxd"},"content":"                .outputFolderName(\"CS3281 Folder\")"},{"lineNumber":880,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":881,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":882,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":883,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":884,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getOutputFolderName(), \"CS3281 Folder\");"},{"lineNumber":885,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":886,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":887,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":888,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_repoFolderName_success() throws Exception {"},{"lineNumber":889,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":890,"author":{"gitId":"asdfghjkxd"},"content":"                .repoFolderName(\"CS3281 Folder\")"},{"lineNumber":891,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":892,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":893,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":894,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":895,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getRepoFolderName(), \"CS3281 Folder\");"},{"lineNumber":896,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":897,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":898,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":899,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_zoneID_success() throws Exception {"},{"lineNumber":900,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":901,"author":{"gitId":"asdfghjkxd"},"content":"                .zoneId(ZoneId.systemDefault())"},{"lineNumber":902,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":903,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":904,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":905,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":906,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getZoneId(), ZoneId.systemDefault());"},{"lineNumber":907,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":908,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":909,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":910,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_sinceDate_success() throws Exception {"},{"lineNumber":911,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":912,"author":{"gitId":"asdfghjkxd"},"content":"                .sinceDate(LocalDateTime.of(2024, 1, 1, 12, 0, 0))"},{"lineNumber":913,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":914,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":915,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":916,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":917,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getSinceDate(),"},{"lineNumber":918,"author":{"gitId":"asdfghjkxd"},"content":"                LocalDateTime.of(2024, 1, 1, 12, 0, 0));"},{"lineNumber":919,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":920,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":921,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":922,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_untilDate_success() throws Exception {"},{"lineNumber":923,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":924,"author":{"gitId":"asdfghjkxd"},"content":"                .untilDate(LocalDateTime.of(2024, 1, 1, 12, 0, 0))"},{"lineNumber":925,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":926,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":927,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":928,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":929,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getUntilDate(),"},{"lineNumber":930,"author":{"gitId":"asdfghjkxd"},"content":"                LocalDateTime.of(2024, 1, 1, 12, 0, 0));"},{"lineNumber":931,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":932,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":933,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":934,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_authorConfig_success() throws Exception {"},{"lineNumber":935,"author":{"gitId":"asdfghjkxd"},"content":"        RepoLocation loc \u003d new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG);"},{"lineNumber":936,"author":{"gitId":"asdfghjkxd"},"content":"        String branch \u003d \"master\";"},{"lineNumber":937,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":938,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":939,"author":{"gitId":"asdfghjkxd"},"content":"                .authorConfig(new AuthorConfiguration(loc, branch))"},{"lineNumber":940,"author":{"gitId":"asdfghjkxd"},"content":"                .location(loc)"},{"lineNumber":941,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(branch)"},{"lineNumber":942,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":943,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":944,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertEquals(actualConfig.getAuthorConfig(),"},{"lineNumber":945,"author":{"gitId":"asdfghjkxd"},"content":"                new AuthorConfiguration(loc, branch));"},{"lineNumber":946,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":947,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":948,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":949,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_isLastModifiedDateIncluded_success() throws Exception {"},{"lineNumber":950,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":951,"author":{"gitId":"asdfghjkxd"},"content":"                .isLastModifiedDateIncluded(true)"},{"lineNumber":952,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG))"},{"lineNumber":953,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":954,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":955,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":956,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertTrue(actualConfig.isLastModifiedDateIncluded());"},{"lineNumber":957,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":958,"author":{"gitId":"asdfghjkxd"},"content":""},{"lineNumber":959,"author":{"gitId":"asdfghjkxd"},"content":"    @Test"},{"lineNumber":960,"author":{"gitId":"asdfghjkxd"},"content":"    public void repoBuilder_buildWithInvalid_failure() {"},{"lineNumber":961,"author":{"gitId":"asdfghjkxd"},"content":"        Assertions.assertThrows(ConfigurationBuildException.class, () -\u003e new RepoConfiguration.Builder().build());"},{"lineNumber":962,"author":{"gitId":"asdfghjkxd"},"content":"    }"},{"lineNumber":963,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":244,"-":719}},{"path":"src/test/java/reposense/model/RepoLocationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.model.RepoLocation.UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.model.RepoLocation.getDomainNameFromDomain;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.model.RepoLocation.isLocalRepo;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.AssertUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class RepoLocationTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_ONE \u003d \"repo\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_TWO \u003d \"../path/to/repo\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_THREE \u003d \"/path/to/repo\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_VALID_WITH_DOT_GIT_ONE \u003d \"path/to/repo/.git\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_VALID_WITH_DOT_GIT_TWO \u003d \"file://path/to/repo.git\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_FILE_URL_ONE \u003d \"file://path/to/repo\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_FILE_URL_TWO \u003d \"file:///path/to/repo\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_ONE \u003d \"path\\\\to\\\\repo\\\\\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_TWO \u003d \"..\\\\path\\\\to\\\\repo\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITH_DOT_GIT_ONE \u003d \"path\\\\to\\\\repo\\\\.git\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_DISK_DRIVE \u003d \"C:\\\\path\\\\to\\\\repo.git\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_MIXED_ONE \u003d \"..\\\\path/to\\\\repo\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_MIXED_TWO \u003d \"file://path\\\\to\\\\repo.git\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String LOCAL_REPO_WINDOWS_DISK_DRIVE_MIXED \u003d \"C:\\\\path/to/repo.git\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_REPO_NAME \u003d \"repo\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_ORGANIZATION \u003d \"path-to\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_DOMAIN_NAME \u003d \"github\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_UNRECOGNISED_DOMAIN_NAME \u003d UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void repoLocation_parseEmptyString_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        RepoLocation repoLocation \u003d new RepoLocation(\"\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void isLocalRepo_validLocalRepos_success() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(isLocalRepo(LOCAL_REPO_VALID_WITH_DOT_GIT_ONE));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(isLocalRepo(LOCAL_REPO_WINDOWS_VALID_MIXED_ONE));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(isLocalRepo(\"./abc:def\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void isLocalRepo_remoteRepos_returnsFalse() throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(isLocalRepo(\"https://github.com/reposense/RepoSense.git/\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(isLocalRepo(\"git@github.com:reposense/RepoSense.git/\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void repoLocation_parseLocalRepoLocation_success() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // local paths not containing \".git\" should be valid"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_ONE,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // relative pathing should be considered part of the \u0027organization\u0027 for differentiation"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_TWO,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_THREE,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // local paths containing \".git\" should also be valid"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITH_DOT_GIT_ONE,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITH_DOT_GIT_TWO,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // file-type url protocol (file://) is accepted by git clone"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_FILE_URL_ONE,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_FILE_URL_TWO,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void repoLocation_parseWindowsLocalRepoLocation_success() throws Exception {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Assumptions.assumeTrue(SystemUtil.isWindows());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // repeated tests but with windows file separators"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_ONE,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_TWO,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITH_DOT_GIT_ONE,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_DISK_DRIVE,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"C--\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_MIXED_ONE,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_MIXED_TWO,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_DISK_DRIVE_MIXED,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"C--\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void repoLocation_parseValidRemoteRepoUrl_success() throws Exception {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // valid url without specifying branch"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta.git\","},{"lineNumber":107,"author":{"gitId":"-"},"content":"                \"testrepo-Beta\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Delta.git\","},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \"testrepo-Delta\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://gitlab.com/reposense/RepoSense.git\","},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \"RepoSense\", \"reposense\", \"gitlab\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense.git\","},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // valid url to parse for obtaining repo and organization, just not a valid git clone target"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/.git\","},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // valid url from other domains"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://bitbucket.org/reposense/RepoSense.git\","},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \"RepoSense\", \"reposense\", \"bitbucket\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // valid url from unsupported domain with longer path to git directory than the standard organization/reponame"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://opensource.ncsa.illinois.edu/bitbucket/scm/u3d/3dutilities.git\","},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \"3dutilities\", \"bitbucket-scm-u3d\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // treated as valid but will be caught when git clone fails"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta/tree/add-config-json\","},{"lineNumber":127,"author":{"gitId":"-"},"content":"                \"add-config-json\", \"reposense-testrepo-Beta-tree\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta.git/tree/add-config-json\","},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \"add-config-json\", \"reposense-testrepo-Beta.git-tree\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // URLs without \".git\" should be accepted as git clone works even without it"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense\","},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/RepoSense\","},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // Test against other types of URL protocols that are valid for git clone"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"ssh://git@github.com/path/to/repo.git/\","},{"lineNumber":139,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_DOMAIN_NAME);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"git://github.com/path/to/repo.git\","},{"lineNumber":141,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_DOMAIN_NAME);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://host.xz:9000/path/to/repo.git\","},{"lineNumber":143,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // Test against the conventional ssh protocol used for GitHub, e.g. git@github.com:reposense/RepoSense.git"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"repo@organization.com:path/to/repo.git/\","},{"lineNumber":147,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"git@github.com:reposense/RepoSense.git\","},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void repoLocation_parseNormalizableRepoLocations_success() throws Exception {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"https://github.com/reposense/redundant/directories/../../RepoSense.git\","},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"/path/with/redundant/directories/../.././../to/repo\","},{"lineNumber":157,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // Tests if there is an additional \u0027../\u0027 it is not consumed by accident"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParsableLocation(\"path/with/redundant/directories/../../../../../to/repo\","},{"lineNumber":161,"author":{"gitId":"-"},"content":"                EXPECTED_REPO_NAME, \"..-to\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void repoLocation_parseInvalidRemoteRepo_throwsInvalidLocationException() throws Exception {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // Invalid URL protocol"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertUnparsableLocation(\"ttp://github.com/reposense.RepoSense.git\");"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertUnparsableLocation(\"not-valid-protocol://abc.com/reposense/RepoSense.git\");"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // URL contains illegal characters"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertUnparsableLocation(\"https://github.com/contains-illegal-chars/^\\\\/\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void getDomainNameFromMatcher_parseValidDomain_success() throws Exception {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"github\", getDomainNameFromDomain(\"www.github.com\"));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"github\", getDomainNameFromDomain(\"github.com\"));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"gitlab\", getDomainNameFromDomain(\"www.gitlab.org\"));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"bitbucket\", getDomainNameFromDomain(\"ww2.bitbucket.com\"));"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // valid but unsupported"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(UNSUPPORTED_DOMAIN_NAME, getDomainNameFromDomain(\"opensource.ncsa.illinois.edu\"));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void getDomainNameFromMatcher_parseInvalidDomain_throwsInvalidLocationException() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no top level domain specified"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"www.github\"));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"github\"));"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // has a dot but still no top level domain specified"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"github.\"));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Compares the information of {@code rawLocation} parsed by the RepoLocation model with {@code expectedRepoName}"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * and {@code expectedOrganization}."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void assertParsableLocation(String rawLocation, String expectedRepoName,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            String expectedOrganization, String expectedDomainName) throws Exception {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        RepoLocation repoLocation \u003d new RepoLocation(rawLocation);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedRepoName, repoLocation.getRepoName());"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedOrganization, repoLocation.getOrganization());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedDomainName, repoLocation.getDomainName());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    private void assertUnparsableLocation(String rawLocation) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e new RepoLocation(rawLocation));"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":207}},{"path":"src/test/java/reposense/parser/ArgsParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.Month;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.RunConfigurationDecider;"},{"lineNumber":29,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.types.SinceDateArgumentType;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class ArgsParserTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path PROJECT_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"cli_location_test\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"output\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_RELATIVE \u003d PROJECT_DIRECTORY.relativize(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_RELATIVE \u003d PROJECT_DIRECTORY.relativize(OUTPUT_DIRECTORY_ABSOLUTE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_CSV_FILE \u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_CSV_FILE \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String NONEXISTENT_DIRECTORY \u003d \"some_non_existent_dir/\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final InputBuilder DEFAULT_INPUT_BUILDER \u003d new InputBuilder();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_REPOSENSE \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_TIME_ZONE_STRING \u003d \"Asia/Singapore\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final ZoneId DEFAULT_TIME_ZONE_ID \u003d TestUtil.getZoneId(DEFAULT_TIME_ZONE_STRING);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void before() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        DEFAULT_INPUT_BUILDER.reset().addConfig(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY).toString());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_d1CorrectTimeZone_success() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":84,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":86,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TimeUtil.getArbitraryFirstCommitDateConverted(DEFAULT_TIME_ZONE_ID);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputs_success() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .addFormats(\"java adoc html css js\")"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .addIgnoreFilesizeLimit()"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":110,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":112,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":114,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":122,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parse_help_throwsHelpScreenException() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        String input \u003d \"--help\";"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(HelpScreenException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputsAlias_success() throws Exception {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String input \u003d String.format("},{"lineNumber":140,"author":{"gitId":"-"},"content":"                \"-c \\\"%s\\\" -o \\\"%s\\\" -s 01/07/2017 -u 30/11/2017 -f java adoc html css js -i -I -v -t %s\","},{"lineNumber":141,"author":{"gitId":"-"},"content":"                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE, DEFAULT_TIME_ZONE_STRING);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":144,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":146,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":148,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":156,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parse_withExtraWhitespaces_success() throws Exception {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).addWhiteSpace(5)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE).addWhiteSpace(4)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\").addWhiteSpace(3)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\").addWhiteSpace(6)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .addFormats(\"java   adoc  html      css js   \")"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig().addWhiteSpace(1)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .addIgnoreFilesizeLimit().addWhiteSpace(2)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .addView().addWhiteSpace(4)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING).addWhiteSpace(5)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":179,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":181,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":183,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("},{"lineNumber":191,"author":{"gitId":"-"},"content":"                \"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void parse_configFolderOnly_success() throws Exception {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":205,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":207,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate());"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ArgsParser.DEFAULT_REPORT_NAME,"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE).build();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":220,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":222,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ArgsParser.DEFAULT_REPORT_NAME,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ZoneId.systemDefault(), cliArguments.getZoneId());"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void parse_viewOnly_success() throws Exception {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView(OUTPUT_DIRECTORY_ABSOLUTE).build();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":238,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE, cliArguments.getReportDirectoryPath()));"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public void parse_withIgnore_success() throws Exception {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        String inputWithAlias \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                .add(\"-i\")"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsWithAlias \u003d ArgsParser.parse(translateCommandline(inputWithAlias));"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArgumentsWithAlias.isStandaloneConfigIgnored());"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.equals(cliArgumentsWithAlias));"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(cliArguments, cliArgumentsWithAlias);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public void parse_withoutIgnore_success() throws Exception {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    public void parse_viewOnlyWithoutArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView().build();"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(CONFIG_DIRECTORY.toString(), ("},{"lineNumber":275,"author":{"gitId":"-"},"content":"                cliArguments).getConfigFolderPath().toString());"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndOutputDirectory_success() throws Exception {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d OUTPUT_DIRECTORY_RELATIVE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        Path expectedAbsoluteOutputDirectoryPath \u003d OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_RELATIVE)"},{"lineNumber":286,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":289,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":291,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile(expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":299,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":301,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile(expectedAbsoluteOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithouthArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":313,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":315,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":319,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":324,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":326,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":334,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":338,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, cliArguments.getRepoConfigFilePath()));"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":340,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, cliArguments.getAuthorConfigFilePath()));"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    public void sinceDate_correctFormat_success() throws Exception {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    public void untilDate_correctFormat_success() throws Exception {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":361,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    public void sinceDate_withExtraDate_success() throws Exception {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                .addSinceDate(\"\\\"01/07/2017 01/07/2018\\\"\")"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    public void untilDate_withExtraTime_success() throws Exception {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                .addUntilDate(\"\\\"30/11/2017 10:10:10\\\"\")"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    public void period_inDaysWithSinceDate_success() throws Exception {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":396,"author":{"gitId":"-"},"content":"                .addPeriod(\"2d\")"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.JULY.getValue(), 3);"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    public void period_inWeeksWithUntilDate_success() throws Exception {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                .addUntilDate(\"14/07/2017\")"},{"lineNumber":409,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                .addPeriod(\"2w\")"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JUNE.getValue(), 30);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    public void formats_inAlphanumeric_success() throws Exception {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\"java js css 7z\").build();"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":424,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"js\", \"css\", \"7z\"));"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":426,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    public void numCloningThreads_default_success() throws Exception {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.build();"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d ArgsParser.DEFAULT_NUM_CLONING_THREADS;"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumCloningThreads());"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    public void numCloningThreads_isNumeric_success() throws Exception {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":440,"author":{"gitId":"-"},"content":"                .addNumCloningThreads(2)"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        System.out.println(input);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d 2;"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumCloningThreads());"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    public void numAnalysisThreads_default_success() throws Exception {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.build();"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d ArgsParser.DEFAULT_NUM_ANALYSIS_THREADS;"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumAnalysisThreads());"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":459,"author":{"gitId":"-"},"content":"    public void numAnalysisThreads_isNumeric_success() throws Exception {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":461,"author":{"gitId":"-"},"content":"                .addNumAnalysisThreads(2)"},{"lineNumber":462,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d 2;"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumAnalysisThreads());"},{"lineNumber":467,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    public void parse_validGitRepoLocations_repoConfigurationListCorrectSize() throws Exception {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d RunConfigurationDecider"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                .getRunConfiguration(cliArguments)"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, repoConfigs.size());"},{"lineNumber":477,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndView_returnsLocationCliArguments() throws Exception {"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedLocations, cliArguments.getLocations());"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsOnly_success() throws Exception {"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedLocations, cliArguments.getLocations());"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":502,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndViewWithArgs_returnsLocationsCliArguments() throws Exception {"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":505,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":507,"author":{"gitId":"-"},"content":""},{"lineNumber":508,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":510,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedLocations, cliArguments.getLocations());"},{"lineNumber":511,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":514,"author":{"gitId":"-"},"content":"    public void parse_configOrLocationsSimilar_success() throws Exception {"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        CliArguments configCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualRepoConfigs \u003d RunConfigurationDecider"},{"lineNumber":518,"author":{"gitId":"-"},"content":"                .getRunConfiguration(configCliArguments)"},{"lineNumber":519,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addRepos(TEST_REPO_BETA, TEST_REPO_CHARLIE, TEST_REPO_DELTA).build();"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        CliArguments locationCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedRepoConfigs \u003d RunConfigurationDecider"},{"lineNumber":524,"author":{"gitId":"-"},"content":"                .getRunConfiguration(locationCliArguments)"},{"lineNumber":525,"author":{"gitId":"-"},"content":"                .getRepoConfigurations();"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(actualRepoConfigs, expectedRepoConfigs);"},{"lineNumber":528,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    public void emptyArgs_defaultConfigFolderPath() throws Exception {"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(new String[]{});"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(CONFIG_DIRECTORY.toString(), cliArguments.getConfigFolderPath().toString());"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public void parse_repoAliases_sameResult() throws Exception {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_BETA).build();"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        CliArguments repoAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().add(String.format(\"--repos %s\", TEST_REPO_BETA)).build();"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        CliArguments reposAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(repoAliasCliArguments, reposAliasCliArguments);"},{"lineNumber":546,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":547,"author":{"gitId":"-"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":549,"author":{"gitId":"-"},"content":"    public void absoluteConfigFolder_withoutRequiredConfigFiles_throwsParseException() {"},{"lineNumber":550,"author":{"gitId":"-"},"content":"        Path absDirectory \u003d PROJECT_DIRECTORY.getParent().toAbsolutePath();"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absDirectory).build();"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":556,"author":{"gitId":"-"},"content":"    public void relativeConfigFolder_withoutRequiredConfigFiles_throwsParseException() {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        Path relDirectory \u003d PROJECT_DIRECTORY.getParent();"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(relDirectory).build();"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":563,"author":{"gitId":"-"},"content":"    public void parse_notExistsConfigFolder_throwsParseException() {"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        Path absConfigFolder \u003d PROJECT_DIRECTORY.resolve(\"non_existing_random_folder\");"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absConfigFolder).build();"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":567,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":568,"author":{"gitId":"-"},"content":""},{"lineNumber":569,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":570,"author":{"gitId":"-"},"content":"    public void parse_configCsvFileAsConfigFolder_throwsParseException() {"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(REPO_CONFIG_CSV_FILE).build();"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":573,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    public void parse_missingConfigValue_throwsParseException() {"},{"lineNumber":577,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(new File(\"\").toPath()).build();"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    public void outputPath_nonExistentDirectory_success() throws Exception {"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        Path nonExistentDirectory \u003d PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY);"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d nonExistentDirectory.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addOutput(nonExistentDirectory).build();"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":589,"author":{"gitId":"-"},"content":"                expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":590,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":591,"author":{"gitId":"-"},"content":""},{"lineNumber":592,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":593,"author":{"gitId":"-"},"content":"    public void sinceDate_unsupportedFormats_throwsParseException() {"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01 July 17\").build();"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":596,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":599,"author":{"gitId":"-"},"content":"    public void untilDate_unsupportedFormats_throwsParseException() {"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"11/31/2017\").build();"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":602,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":603,"author":{"gitId":"-"},"content":""},{"lineNumber":604,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":605,"author":{"gitId":"-"},"content":"    public void sinceDate_laterThanUntilDate_throwsParseException() {"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01/12/2017\")"},{"lineNumber":607,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":608,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":610,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":611,"author":{"gitId":"-"},"content":""},{"lineNumber":612,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":613,"author":{"gitId":"-"},"content":"    public void sinceDate_laterThanCurrentDate_throwsParseException() {"},{"lineNumber":614,"author":{"gitId":"-"},"content":"        LocalDateTime tomorrowDateTime \u003d LocalDateTime.now()"},{"lineNumber":615,"author":{"gitId":"-"},"content":"                .plusDays(1L);"},{"lineNumber":616,"author":{"gitId":"-"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":617,"author":{"gitId":"-"},"content":"        String tomorrow \u003d tomorrowDateTime.format(formatter);"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":""},{"lineNumber":620,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(tomorrow)"},{"lineNumber":621,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":623,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":624,"author":{"gitId":"-"},"content":""},{"lineNumber":625,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":626,"author":{"gitId":"-"},"content":"    public void sinceDate_beforeUntilDateAndLaterThanCurrentDate_throwsParseException() {"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        LocalDateTime tomorrowDateTime \u003d LocalDateTime.now()"},{"lineNumber":628,"author":{"gitId":"-"},"content":"                .plusDays(1L);"},{"lineNumber":629,"author":{"gitId":"-"},"content":"        LocalDateTime dayAfterDateTime \u003d LocalDateTime.now()"},{"lineNumber":630,"author":{"gitId":"-"},"content":"                .plusDays(2L);"},{"lineNumber":631,"author":{"gitId":"-"},"content":""},{"lineNumber":632,"author":{"gitId":"-"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":633,"author":{"gitId":"-"},"content":"        String tomorrow \u003d tomorrowDateTime.format(formatter);"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        String dayAfter \u003d dayAfterDateTime.format(formatter);"},{"lineNumber":635,"author":{"gitId":"-"},"content":""},{"lineNumber":636,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(tomorrow)"},{"lineNumber":637,"author":{"gitId":"-"},"content":"                .addUntilDate(dayAfter)"},{"lineNumber":638,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":640,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":641,"author":{"gitId":"-"},"content":""},{"lineNumber":642,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":643,"author":{"gitId":"-"},"content":"    public void period_withBothSinceDateAndUntilDate_throwsParseException() {"},{"lineNumber":644,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"18d\")"},{"lineNumber":645,"author":{"gitId":"-"},"content":"                .addSinceDate(\"30/11/2017\")"},{"lineNumber":646,"author":{"gitId":"-"},"content":"                .addUntilDate(\"01/12/2017\")"},{"lineNumber":647,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":648,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":649,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":650,"author":{"gitId":"-"},"content":""},{"lineNumber":651,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":652,"author":{"gitId":"-"},"content":"    public void period_notNumeric_throwsParseExcpetion() {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"abcd\").build();"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":655,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":656,"author":{"gitId":"-"},"content":""},{"lineNumber":657,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":658,"author":{"gitId":"-"},"content":"    public void period_isZero_throwsParseExcpetion() {"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"0w\").build();"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":661,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":662,"author":{"gitId":"-"},"content":""},{"lineNumber":663,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    public void formats_notInAlphanumeric_throwsParseException() {"},{"lineNumber":665,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\".java\").build();"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":667,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":668,"author":{"gitId":"-"},"content":""},{"lineNumber":669,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":670,"author":{"gitId":"-"},"content":"    public void parse_mutuallyExclusiveArgumentsConfigAndReposTogether_throwsParseException() {"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                .addRepos(TEST_REPO_REPOSENSE)"},{"lineNumber":673,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":675,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    public void parse_extraArgumentForIgnore_throwsParseException() {"},{"lineNumber":679,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addIgnoreStandaloneConfig().add(\"true\").build();"},{"lineNumber":680,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":681,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":682,"author":{"gitId":"-"},"content":""},{"lineNumber":683,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":684,"author":{"gitId":"-"},"content":"    public void parse_withTimezone_success() throws Exception {"},{"lineNumber":685,"author":{"gitId":"-"},"content":"        String zoneId \u003d \"UTC+11\";"},{"lineNumber":686,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":690,"author":{"gitId":"-"},"content":""},{"lineNumber":691,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC-1030\";"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":694,"author":{"gitId":"-"},"content":""},{"lineNumber":695,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":696,"author":{"gitId":"-"},"content":""},{"lineNumber":697,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC\";"},{"lineNumber":698,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":699,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":705,"author":{"gitId":"-"},"content":"    public void parse_incorrectTimezone_throwsParseException() {"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"UTC+\").build();"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));;"},{"lineNumber":708,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":711,"author":{"gitId":"-"},"content":"    public void parse_timezoneWithoutArgument_throwsParseException() {"},{"lineNumber":712,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"\").build();"},{"lineNumber":713,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":714,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":715,"author":{"gitId":"-"},"content":""},{"lineNumber":716,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":717,"author":{"gitId":"-"},"content":"    public void parse_shallowCloning_success() throws Exception {"},{"lineNumber":718,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":719,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":720,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":721,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":722,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(false, cliArguments.isShallowCloningPerformed());"},{"lineNumber":723,"author":{"gitId":"-"},"content":""},{"lineNumber":724,"author":{"gitId":"-"},"content":"        String inputShallow \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":725,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":726,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":727,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":728,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsShallow \u003d ArgsParser.parse(translateCommandline(inputShallow));"},{"lineNumber":729,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(true, cliArgumentsShallow.isShallowCloningPerformed());"},{"lineNumber":730,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":731,"author":{"gitId":"-"},"content":""},{"lineNumber":732,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":733,"author":{"gitId":"-"},"content":"     * Ensures that {@code actualSinceDate} is exactly one month before {@code untilDate}."},{"lineNumber":734,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":735,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualSinceDate} is not one month before {@code untilDate}."},{"lineNumber":736,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":737,"author":{"gitId":"-"},"content":"    private void assertDateDiffOneMonth(LocalDateTime actualSinceDate, LocalDateTime untilDate) {"},{"lineNumber":738,"author":{"gitId":"-"},"content":"        LocalDateTime oneMonthBeforeUntilDate \u003d untilDate.withHour(0).withMinute(0).withSecond(0).minusMonths(1);"},{"lineNumber":739,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(actualSinceDate.equals(oneMonthBeforeUntilDate));"},{"lineNumber":740,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":743,"author":{"gitId":"-"},"content":"     * Ensures that {@code actualUntilDate} falls on the date of report generation with time at 23:59:59."},{"lineNumber":744,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":745,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualUntilDate} does not fall on the date of report generation"},{"lineNumber":746,"author":{"gitId":"-"},"content":"     * with time at 23:59:59."},{"lineNumber":747,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":748,"author":{"gitId":"-"},"content":"    private void assertDateDiffEndOfDay(LocalDateTime actualUntilDate) {"},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"        LocalDateTime currentDate \u003d LocalDateTime.now().withHour(23).withMinute(59).withSecond(59).withNano(0);"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(actualUntilDate.equals(currentDate));"},{"lineNumber":752,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":753,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":751}},{"path":"src/test/java/reposense/parser/AuthorConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.AbstractMap.SimpleEntry;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":20,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":21,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AuthorConfigParserTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_emptyLocation_test.csv\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_CONFIG_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/require_trailing_whitespaces/authorconfig_emptyConfig_test.csv\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_specialCharacter_test.csv\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_commasAndDoubleQuotes_test.csv\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleEmails_test.csv\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_differentColumnOrder_test.csv\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_MANDATORY_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_UNKNOWN_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_unknownHeaders_test.csv\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_GITHUB_ID_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_gitHubIdHeader_test.csv\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_GIT_HOST_ID_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_gitHostIdHeader_test.csv\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleReposInRow_test.csv\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_SINGLE_BRANCH_PER_REPO_FILE \u003d loadResource("},{"lineNumber":51,"author":{"gitId":"-"},"content":"            AuthorConfigParserTest.class,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleReposInRowSingleBranchPerRepo_test.csv\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_MULTIPLE_BRANCH_PER_REPO_FILE \u003d loadResource("},{"lineNumber":55,"author":{"gitId":"-"},"content":"            AuthorConfigParserTest.class,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleReposInRowMultipleBranchPerRepo_test.csv\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Arrays.asList(FIRST_AUTHOR, SECOND_AUTHOR);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("},{"lineNumber":70,"author":{"gitId":"-"},"content":"            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final Author FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"ProcessedCooked\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final Author SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"codeeong\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final Author THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"jordancjq\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"Tay Fan Gao, Douya\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final String SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"\\\"\\\"Tora, S/O,\\\" Doyua, T.\\\"\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final String THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"jordancjq\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Collections.singletonList(\"Tay Fan Gao, Douya \\\"SOC, Y2S1\\\"\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d Collections.emptyList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Arrays.asList(\"Borex T\\\"ony Tong\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, List\u003cString\u003e\u003e AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR, FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR, SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS))"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, String\u003e AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                            FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                            SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME))"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_EMAIL_LIST \u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Arrays.asList(\"nbr@example.com\", \"nbriannl@test.net\", \"nbriannl@users.noreply.github.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    \"nbriannl@users.noreply.gitlab.com\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void authorConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyLocation_success() throws Exception {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        AuthorConfiguration expectedConfig \u003d new AuthorConfiguration(new RepoLocation(\"\"));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d authorConfigCsvParser.parse();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        AuthorConfiguration authorConfig \u003d authorConfigs.get(0);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, authorConfigs.size());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedConfig.getLocation(), authorConfig.getLocation());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), authorConfig.getBranch());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, authorConfig.getAuthorList());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyConfig_throwsInvalidCsvException() throws Exception {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_CONFIG_FILE);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void authorConfig_specialCharacter_success() throws Exception {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleEmails_success() throws Exception {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Author actualAuthor \u003d config.getAuthorList().get(0);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FIRST_AUTHOR_EMAIL_LIST.size(), actualAuthor.getEmails().size());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(actualAuthor.getEmails().containsAll(FIRST_AUTHOR_EMAIL_LIST));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void authorConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void authorConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, config.getAuthorList().size());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void authorConfig_newGitHostIdHeader_success() throws Exception {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser;"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_GIT_HOST_ID_HEADER);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configsWithGitHostIdHeader \u003d authorConfigCsvParser.parse();"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_GITHUB_ID_HEADER);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configsWithGitHubIdHeader \u003d authorConfigCsvParser.parse();"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(configsWithGitHubIdHeader, configsWithGitHostIdHeader);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void authorConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_MANDATORY_HEADER);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public void authorConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_UNKNOWN_HEADER);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void parse_multipleColumnsWithCommasAndDoubleQuotes_success() throws Exception {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP, config.getAuthorDisplayNameMap());"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.size(), config.getAuthorList().size());"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        config.getAuthorList().forEach(author -\u003e {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            Assertions.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.get(author), author.getAuthorAliases());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleReposInRow_success() throws Exception {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser("},{"lineNumber":241,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_FILE);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        String defaultSpecifiedBranch \u003d \"master\";"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, configs.size());"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"https://github.com/reposense/reposense.git\"), config.getLocation());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(defaultSpecifiedBranch, config.getBranch());"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"        config \u003d configs.get(1);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"https://github.com/markbind/markbind.git\"), config.getLocation());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(defaultSpecifiedBranch, config.getBranch());"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"        config \u003d configs.get(2);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"https://github.com/TEAMMATES/teammates.git\"), config.getLocation());"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(defaultSpecifiedBranch, config.getBranch());"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        config \u003d configs.get(3);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"https://github.com/CATcher-org/CATcher.git\"), config.getLocation());"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(defaultSpecifiedBranch, config.getBranch());"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleReposInRowSingleBranchPerRepo_success() throws Exception {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser("},{"lineNumber":267,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_SINGLE_BRANCH_PER_REPO_FILE);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, configs.size());"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        config \u003d configs.get(1);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"add-config-json\", config.getBranch());"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        config \u003d configs.get(2);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"https://github.com/reposense/RepoSense.git\"), config.getLocation());"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"release\", config.getBranch());"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        config \u003d configs.get(3);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"/Users/sikai/RepoSense\"), config.getLocation());"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"master\", config.getBranch());"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleReposInRowMultipleBranchPerRepo_success() throws Exception {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser("},{"lineNumber":292,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_MULTIPLE_REPO_IN_ROW_MULTIPLE_BRANCH_PER_REPO_FILE);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(5, configs.size());"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"add-config-json\", config.getBranch());"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"        config \u003d configs.get(1);"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"        config \u003d configs.get(2);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"/Users/sikai/RepoSense\"), config.getLocation());"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"master\", config.getBranch());"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"        config \u003d configs.get(3);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"/Users/sikai/RepoSense\"), config.getLocation());"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"release\", config.getBranch());"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        config \u003d configs.get(4);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(\"/Users/sikai/RepoSense\"), config.getLocation());"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"gh-pages\", config.getBranch());"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":315}},{"path":"src/test/java/reposense/parser/GroupConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":15,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":16,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class GroupConfigParserTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MULTI_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_multipleLocation_test.csv\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_emptyLocation_test.csv\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_differentColumnOrder_test.csv\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_unknownHeader_test.csv\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_GROUPS \u003d Arrays.asList("},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new FileType(\"Code\", Arrays.asList(\"**/*.java\", \"**/*.py\")),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new FileType(\"Docs\", Collections.singletonList(\"docs/**\")));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_GROUPS \u003d Arrays.asList("},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new FileType(\"Main\", Collections.singletonList(\"src/main/**\")),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new FileType(\"Test\", Arrays.asList(\"src/test/**\", \"src/systest/**\")));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void groupConfig_emptyLocation_success() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        GroupConfiguration actualReposenseConfig \u003d groupConfigs.get(0);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, actualReposenseConfig.getGroupsList().size());"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        GroupConfiguration actualEmptyLocationConfig \u003d groupConfigs.get(1);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, actualEmptyLocationConfig.getGroupsList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void groupConfig_multipleLocations_success() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MULTI_LOCATION_FILE);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void groupConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void groupConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, groupConfigs.size());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, groupConfigs.get(0).getGroupsList().size());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void groupConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":101,"author":{"gitId":"-"},"content":"                GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e groupConfigCsvParser.parse());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void groupConfig_unknownHeader_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":108,"author":{"gitId":"-"},"content":"                GROUP_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e groupConfigCsvParser.parse());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":2,"-":109}},{"path":"src/test/java/reposense/parser/RepoConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.model.RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":22,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidCsvException;"},{"lineNumber":23,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidHeaderException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class RepoConfigParserTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path TEST_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class, \"repoconfig_merge_test\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Path TEST_EMPTY_BRANCH_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"repoconfig_empty_branch_test\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OVERRIDE_KEYWORD_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_overrideKeyword_test.csv\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_REDUNDANT_LINES_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/require_trailing_whitespaces/repoconfig_redundantLines_test.csv\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_unrecognizedValuesForYesKeywordHeaders_test.csv\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseSensitive_test.csv\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseInsensitive_test.csv\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_differentColumnOrder_test.csv\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final Path MERGE_EMPTY_LOCATION_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_merge_empty_location_test\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_unknownHeaders_test.csv\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_INVALID_FILE_SIZE_LIMIT \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_invalidFileSizeLimit_test.csv\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_IGNORE_FILE_SIZE_LIMIT \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_ignoreFileSizeLimit_test.csv\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_ZERO_VALID_RECORDS \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \"CsvParserTest/repoconfig_zeroValidRecords_test.csv\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH \u003d \"add-config-json\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_BRANCH \u003d \"HEAD\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_FORMATS \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"fxml\"));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_CONFIG_FORMATS \u003d"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"adoc\", \"md\"));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_IGNORED_COMMITS \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            Arrays.asList(\"abcde12345\", \"67890fdecba\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final int FILE_SIZE_LIMIT_VALUE \u003d 100000;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_LOCATION \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_BRANCH \u003d \"HEAD\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Arrays.asList(\"Zachary Tang\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Arrays.asList(\"collated**\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.java\", \"collated**\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.doc\", \"collated**\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void repoConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(config.getFileSizeLimit(), FILE_SIZE_LIMIT_VALUE);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isShallowCloningPerformed());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFileSizeLimitOverriding());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFileSizeLimitIgnored());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isIgnoredFileAnalysisSkipped());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void merge_twoRepoConfigs_success() throws Exception {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FIRST_AUTHOR);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        expectedAuthors.add(SECOND_AUTHOR);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration firstRepo \u003d new RepoConfiguration.Builder()"},{"lineNumber":131,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA_LOCATION))"},{"lineNumber":132,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(TEST_REPO_BETA_MASTER_BRANCH)"},{"lineNumber":133,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorList(expectedAuthors);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        firstRepo.addAuthorNamesToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        firstRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration secondRepo \u003d new RepoConfiguration.Builder()"},{"lineNumber":141,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA_LOCATION))"},{"lineNumber":142,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH)"},{"lineNumber":143,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorList(Arrays.asList(SECOND_AUTHOR));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        secondRepo.addAuthorNamesToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        secondRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_CONFIG_FOLDER).build();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(firstRepo, actualConfigs.get(0));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(secondRepo, actualConfigs.get(1));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void merge_emptyLocation_success() throws Exception {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedBetaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(SECOND_AUTHOR);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedDeltaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        expectedDeltaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedBetaConfig \u003d"},{"lineNumber":177,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":178,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(TEST_REPO_BETA_LOCATION))"},{"lineNumber":179,"author":{"gitId":"asdfghjkxd"},"content":"                        .branch(TEST_REPO_BETA_MASTER_BRANCH)"},{"lineNumber":180,"author":{"gitId":"asdfghjkxd"},"content":"                        .build();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorList(expectedBetaAuthors);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        expectedBetaConfig.addAuthorNamesToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedDeltaConfig \u003d"},{"lineNumber":189,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":190,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(TEST_REPO_DELTA_LOCATION))"},{"lineNumber":191,"author":{"gitId":"asdfghjkxd"},"content":"                        .branch(TEST_REPO_DELTA_BRANCH)"},{"lineNumber":192,"author":{"gitId":"asdfghjkxd"},"content":"                        .build();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorList(expectedDeltaAuthors);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setFormats(TEST_REPO_DELTA_FORMATS);"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedConfigs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedBetaConfig);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedDeltaConfig);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(MERGE_EMPTY_LOCATION_FOLDER).build();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedConfigs, actualConfigs);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(0), actualConfigs.get(0));"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(1), actualConfigs.get(1));"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void repoConfig_defaultBranch_success() throws Exception {"},{"lineNumber":220,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":221,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_BETA_LOCATION))"},{"lineNumber":222,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(RepoConfiguration.DEFAULT_BRANCH)"},{"lineNumber":223,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_EMPTY_BRANCH_CONFIG_FOLDER).build();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), actualConfigs.get(0).getBranch());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), authorConfigs.get(0).getBranch());"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public void repoConfig_overrideKeyword_success() throws Exception {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OVERRIDE_KEYWORD_FILE);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isStandaloneConfigIgnored());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS),"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                config.getIgnoreCommitList());"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(FILE_SIZE_LIMIT_VALUE, config.getFileSizeLimit());"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isFormatsOverriding());"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isIgnoreGlobListOverriding());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isIgnoreCommitListOverriding());"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isFileSizeLimitOverriding());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    public void repoConfig_redundantLines_success() throws Exception {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_REDUNDANT_LINES_FILE);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, configs.size());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        RepoConfiguration betaConfig \u003d configs.get(0);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        RepoConfiguration charlieConfig \u003d configs.get(1);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        RepoConfiguration deltaConfig \u003d configs.get(2);"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), betaConfig.getLocation());"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, betaConfig.getBranch());"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_CHARLIE_LOCATION), charlieConfig.getLocation());"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_CHARLIE_BRANCH, charlieConfig.getBranch());"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_DELTA_LOCATION), deltaConfig.getLocation());"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_BRANCH, deltaConfig.getBranch());"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(deltaConfig.isStandaloneConfigIgnored());"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    public void repoConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public void repoConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(DEFAULT_FILE_SIZE_LIMIT, config.getFileSizeLimit());"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(config.isFileSizeLimitOverriding());"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    public void repoConfig_withUnrecognizedValuesForYesKeywordHeaders_valuesIgnored() throws Exception {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isStandaloneConfigIgnored());"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isShallowCloningPerformed());"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isFindingPreviousAuthorsPerformed());"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitIgnored());"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isIgnoredFileAnalysisSkipped());"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public void repoConfig_invalidFileSizeLimit_valueIgnored() throws Exception {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_INVALID_FILE_SIZE_LIMIT);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(configs.get(0).getFileSizeLimit(), DEFAULT_FILE_SIZE_LIMIT);"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitOverriding());"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoreFileSizeLimit_ignoreFileSizeColumns() throws Exception {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":352,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_IGNORE_FILE_SIZE_LIMIT);"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(configs.get(0).isFileSizeLimitIgnored());"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitOverriding());"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(configs.get(0).isIgnoredFileAnalysisSkipped());"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public void repoConfig_mandatoryHeaderMissing_throwsInvalidCsvException() throws Exception {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    public void repoConfig_zeroValidRecords_throwsInvalidCsvException() throws Exception {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_ZERO_VALID_RECORDS);"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseSensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":375,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseInsensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE);"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    public void repoConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":389,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":22,"-":370}},{"path":"src/test/java/reposense/parser/StandaloneConfigJsonParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class StandaloneConfigJsonParserTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_MALFORMED_CONFIG \u003d loadResource("},{"lineNumber":26,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class, \"StandaloneConfigJsonParserTest/standaloneConfig_malformedJson.json\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_UNKNOWN_PROPERTY_CONFIG \u003d loadResource("},{"lineNumber":29,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_unknownPropertyInJson.json\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_FULL \u003d loadResource("},{"lineNumber":33,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_full.json\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_EMPTY_TEXT_FILE \u003d loadResource("},{"lineNumber":37,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_emptyText.json\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_EMPTY_JSON_FILE \u003d loadResource("},{"lineNumber":41,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_emptyJson.json\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_GITHUBID_ONLY \u003d loadResource("},{"lineNumber":45,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_githubId_only.json\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TEST_DUMMY_LOCATION \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static RepoConfiguration expectedGithubIdOnlyRepoconfig;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static RepoConfiguration expectedFullRepoConfig;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static void setUp() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"yong24s\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(\"Yong Hao TENG\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Arrays.asList(\"**.css\", \"**.html\", \"**.jade\", \"**.js\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"asdfghjkxd"},"content":"        expectedGithubIdOnlyRepoconfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":60,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_DUMMY_LOCATION)).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.setAuthorList(Arrays.asList(new Author(\"yong24s\")));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.addAuthorEmailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"asdfghjkxd"},"content":"        expectedFullRepoConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":66,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_DUMMY_LOCATION)).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setFormats(FileType.convertFormatStringsToFileTypes("},{"lineNumber":68,"author":{"gitId":"-"},"content":"                Arrays.asList(\"gradle\", \"jade\", \"java\", \"js\", \"md\", \"scss\", \"yml\")));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoreCommitList(Arrays.asList(new CommitHash("},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \"7b96c563eb2d3612aa5275364333664a18f01491\")));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoreGlobList(Arrays.asList(\"**.adoc\", \"collate**\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoredAuthorsList(Arrays.asList(\"yong24s\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setAuthorList(Arrays.asList(author));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setAuthorDisplayName(author, \"Yong Hao\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorNamesToAuthorMapEntry(author, Arrays.asList(author.getGitId()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorNamesToAuthorMapEntry(author, author.getAuthorAliases());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorEmailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void standaloneConfig_parseEmptyTextFile_success() throws Exception {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_TEXT_FILE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void standaloneConfig_parseEmptyJsonFile_success() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_JSON_FILE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void standaloneConfig_ignoresUnknownProperty_success() throws Exception {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_UNKNOWN_PROPERTY_CONFIG);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void standaloneConfig_correctConfig_success() throws Exception {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_FULL);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertSameConfig(expectedFullRepoConfig, config);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void standaloneConfig_githubIdOnlyConfig_success() throws Exception {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_GITHUBID_ONLY);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertSameConfig(expectedGithubIdOnlyRepoconfig, config);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void standaloneConfig_malformedJsonFile_throwsJsonSyntaxException() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(JsonSyntaxException.class, () -\u003e new StandaloneConfigJsonParser()"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .parse(STANDALONE_MALFORMED_CONFIG));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void assertSameConfig(RepoConfiguration expectedRepoConfig, StandaloneConfig actualStandaloneConfig)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":115,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration actualRepoConfig \u003d new RepoConfiguration.Builder()"},{"lineNumber":116,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_DUMMY_LOCATION)).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        actualRepoConfig.update(actualStandaloneConfig);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedRepoConfig, actualRepoConfig);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":6,"-":114}},{"path":"src/test/java/reposense/report/ErrorSummaryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":7,"author":{"gitId":"asdfghjkxd"},"content":"import reposense.parser.exceptions.InvalidLocationException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ErrorSummaryTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void errorSummary_addRepeatedErrorMessage_containsNoDuplicates() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        String invalidLocation1 \u003d \"ttp://github.com/reposense.RepoSense.git\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String invalidLocation2 \u003d \"https://github.com/contains-illegal-chars/^\\\\/\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String invalidLocation3 \u003d \"not-valid-protocol://abc.com/reposense/RepoSense.git\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        ErrorSummary errorSummaryInstance \u003d ErrorSummary.getInstance();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        errorSummaryInstance.clearErrorSet();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            // not relevant to the test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            // not relevant to the test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new RepoLocation(invalidLocation2);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            // not relevant to the test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            // not relevant to the test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            new RepoLocation(invalidLocation3);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            // not relevant to the test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":1,"-":53}},{"path":"src/test/java/reposense/report/RepoClonerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class RepoClonerTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_EMPTY_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Empty.git\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path REPOCLONE_LOCAL_TEST_PATH \u003d"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Paths.get(FileUtil.REPOS_ADDRESS, \"repoclone test/dummy-repo\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void repoCloner_emptyRepo_failsGracefully() throws Exception {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        RepoConfiguration emptyRepositoryRepoConfig \u003d"},{"lineNumber":25,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":26,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(TEST_REPO_EMPTY_GIT_LOCATION)).build();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(emptyRepositoryRepoConfig);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertNull(clonedRepoLocation);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void repoCloner_validRepoLocationWithRelativePathingAndSpaces_success() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // Clones a test repository into the test directory for testing of relative pathing"},{"lineNumber":38,"author":{"gitId":"asdfghjkxd"},"content":"        RepoConfiguration tempRemoteConfiguration \u003d new RepoConfiguration.Builder()"},{"lineNumber":39,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_GIT_LOCATION)).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneBare(tempRemoteConfiguration, Paths.get(\".\"), REPOCLONE_LOCAL_TEST_PATH.toString());"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        RepoConfiguration repoWithRelativePathingAndSpacesAndEndingBackslash \u003d"},{"lineNumber":43,"author":{"gitId":"asdfghjkxd"},"content":"                new RepoConfiguration.Builder()"},{"lineNumber":44,"author":{"gitId":"asdfghjkxd"},"content":"                        .location(new RepoLocation(REPOCLONE_LOCAL_TEST_PATH.toString())).build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(repoWithRelativePathingAndSpacesAndEndingBackslash);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(Files.exists(REPOCLONE_LOCAL_TEST_PATH));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":6,"-":43}},{"path":"src/test/java/reposense/template/GitTestTemplate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.template;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoAnalyzer;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoExtractor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains templates for git testing."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class GitTestTemplate {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    protected static final String IGNORE_REVS_FILE_NAME \u003d \".git-blame-ignore-revs\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH \u003d \"1565-find-previous-authors\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected static final String ROOT_COMMIT_HASH \u003d \"fd425072e12004b71d733a58d819d845509f8db3\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_LONG \u003d \"2fb6b9b2dd9fa40bf0f9815da2cb0ae8731436c7\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_PARENT \u003d \"c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected static final String UNCONVENTIONAL_AUTHOR_NAME \u003d \"-unconventional_author-\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected static final String WHITESPACE_AUTHOR_NAME \u003d \"whitespace author\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected static final String IGNORED_AUTHOR_NAME \u003d \"FH-30\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected static final String MINGYI_AUTHOR_NAME \u003d \"myteo\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected static final String JAMES_AUTHOR_NAME \u003d \"jamessspanggg\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected static final String JAMES_ALTERNATIVE_AUTHOR_NAME \u003d \"James Pang\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected static final String JINYAO_AUTHOR_NAME \u003d \"jylee-git\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected static final String CHENGYU_AUTHOR_NAME \u003d \"HCY123902\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH \u003d \"abbd5888d5cd4e411c6a8e58e661b0eafdae1335\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH_PARENT \u003d \"f768b9b1d9d1478f8ac8cf3b4c7f868479edc07a\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected static final String AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            \"1d29339e7d16eb5b2bc8fb542e08acedd3d4b0eb\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    protected static final CommitHash AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021 \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \"7d7584fc204922cc5ff3bd5ca073cad6bed2c46a\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING \u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING \u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            \"8e4ca1da5d413e9ab84a1e8d1474918afa97f7a1\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING \u003d"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018 \u003d Arrays.asList("},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING),"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021 \u003d Collections.singletonList("},{"lineNumber":92,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    protected static final ZoneId TIME_ZONE_ID \u003d ZoneId.of(\"Asia/Singapore\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    protected static final Author MAIN_AUTHOR \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    protected static final Author FAKE_AUTHOR \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    protected static final Author UNCONVENTIONAL_AUTHOR \u003d new Author(UNCONVENTIONAL_AUTHOR_NAME);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    protected static final Author WHITESPACE_AUTHOR \u003d new Author(WHITESPACE_AUTHOR_NAME);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    protected static ThreadLocal\u003cRepoConfiguration\u003e configs \u003d ThreadLocal.withInitial(() -\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return newRepoConfiguration();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private static final Supplier\u003cString\u003e EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER \u003d () -\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            String.valueOf(Thread.currentThread().getId());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private FileInfoExtractor fileInfoExtractor \u003d new FileInfoExtractor();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private FileInfoAnalyzer fileInfoAnalyzer \u003d new FileInfoAnalyzer();"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d newRepoConfiguration();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        config.setIsLastModifiedDateIncluded(false);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        configs.set(config);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void beforeClass() throws Exception {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d newRepoConfiguration();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        configs.set(config);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(config, EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER.get());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(configs.get().getRepoRoot(), \"master\");"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private static RepoConfiguration newRepoConfiguration() throws Exception {"},{"lineNumber":141,"author":{"gitId":"asdfghjkxd"},"content":"        return new RepoConfiguration.Builder()"},{"lineNumber":142,"author":{"gitId":"asdfghjkxd"},"content":"                .location(new RepoLocation(TEST_REPO_GIT_LOCATION))"},{"lineNumber":143,"author":{"gitId":"asdfghjkxd"},"content":"                .branch(\"master\")"},{"lineNumber":144,"author":{"gitId":"asdfghjkxd"},"content":"                .extraOutputFolderName(EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER.get())"},{"lineNumber":145,"author":{"gitId":"asdfghjkxd"},"content":"                .build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Generates the .git-blame-ignore-revs file containing {@link CommitHash}es"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * from {@code toIgnore} for the test repo."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e createTestIgnoreRevsFile(List\u003cCommitHash\u003e toIgnore) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String repoRoot \u003d configs.get().getRepoRoot();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d toIgnore.stream()"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(repoRoot, commitHash);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        String fileLocation \u003d repoRoot + IGNORE_REVS_FILE_NAME;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(fileLocation, expandedIgnoreCommitList);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return expandedIgnoreCommitList;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void removeTestIgnoreRevsFile() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String fileLocation \u003d configs.get().getRepoRoot() + IGNORE_REVS_FILE_NAME;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        new File(fileLocation).delete();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * For each line in {@link FileResult}, assert that it is attributed to the expected author provided by"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * {@code expectedLineAuthors}."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void assertFileAnalysisCorrectness(FileResult fileResult, List\u003cAuthor\u003e expectedLineAuthors) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lines \u003d fileResult.getLines();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expectedLineAuthors.size(), lines.size());"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Iterator\u003cAuthor\u003e lineAuthorsItr \u003d expectedLineAuthors.iterator();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Iterator\u003cLineInfo\u003e linesItr \u003d lines.iterator();"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        while (linesItr.hasNext() \u0026\u0026 lineAuthorsItr.hasNext()) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            assertEquals(lineAuthorsItr.next(), linesItr.next().getAuthor());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public FileResult getFileResult(String relativePath) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d fileInfoExtractor.generateFileInfo(configs.get(), relativePath);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        return fileInfoAnalyzer.analyzeTextFile(configs.get(), fileInfo);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Returns a {@link Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * will be filtered out in the `git log` command."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    protected Author getAlphaAllAliasAuthor() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":5,"-":200}},{"path":"src/test/java/reposense/util/TestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains testing related functionalities."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final int[] END_OF_DAY_TIME \u003d {23, 59, 59};"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final int[] START_OF_DAY_TIME \u003d {0, 0, 0};"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPARING_FILES \u003d \"Comparing files %s \u0026 %s\\n\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_CONTENT_DIFFERENT \u003d \"Content different at line number %d:\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"\u003c\u003c %s\\n\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"\u003e\u003e %s\\n\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINES_LENGTH_DIFFERENT \u003d \"The files\u0027 lines count do not match.\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final int STAT_FILE_PATH_INDEX \u003d 2;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if the contents of the files at {@code expected} and {@code actual} are the same."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * else prints out the first line of content difference (if any)."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual) throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return compareFileContents(expected, actual, 1);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns true if the contents of the files at {@code expected} and {@code actual} are the same."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * else prints out maximum {@code maxTraceCounts} lines of content difference (if any)."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual, int maxTraceCounts) throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        int traceCounts \u003d 0;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        System.out.println(String.format(MESSAGE_COMPARING_FILES, expected, actual));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"asdfghjkxd"},"content":"        String[] expectedContent \u003d StringsUtil.NEWLINE.split(new String(Files.readAllBytes(expected))"},{"lineNumber":57,"author":{"gitId":"asdfghjkxd"},"content":"                .replace(\"\\r\", \"\"));"},{"lineNumber":58,"author":{"gitId":"asdfghjkxd"},"content":"        String[] actualContent \u003d StringsUtil.NEWLINE.split(new String(Files.readAllBytes(actual))"},{"lineNumber":59,"author":{"gitId":"asdfghjkxd"},"content":"                .replace(\"\\r\", \"\"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c Math.min(expectedContent.length, actualContent.length); i++) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            if (!expectedContent[i].equals(actualContent[i])) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                System.out.println("},{"lineNumber":64,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_LINE_CONTENT_DIFFERENT, i + 1, expectedContent[i], actualContent[i]));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                if (++traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (expectedContent.length !\u003d actualContent.length) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            System.out.println(MESSAGE_LINES_LENGTH_DIFFERENT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } else if (traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if {@code expected} directory has all files with same content as {@code actual} directory."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static boolean compareDirectories(Path expected, Path actual) throws Exception {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e expectedPaths \u003d Files.walk(expected)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e actualPaths \u003d Files.walk(actual)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (expectedPaths.size() !\u003d actualPaths.size()) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedPaths.size(); i++) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            if (!(Files.isDirectory(expectedPaths.get(i)) || Files.isDirectory(actualPaths.get(i)))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !TestUtil.compareFileContents(expectedPaths.get(i), actualPaths.get(i))) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Creates and returns a {@link LocalDateTime} object with the specified {@code year}, {@code month}, {@code day}"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * and {@code time}."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDate(int year, int month, int date, int[] time) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return LocalDateTime.of(year, month, date, time[0], time[1], time[2], 0);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get since date with time 00:00:00"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * from the parameters {@code year}, {@code month}, {@code date}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static LocalDateTime getSinceDate(int year, int month, int date) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, START_OF_DAY_TIME);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get until date with time 23:59:59"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * from the parameters {@code year}, {@code month}, {@code date}."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static LocalDateTime getUntilDate(int year, int month, int date) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, END_OF_DAY_TIME);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Returns a {@link ZoneId} object for the specified {@code timezone}."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static ZoneId getZoneId(String timezone) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return ZoneId.of(timezone);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedRepoConfig} and {@code actualRepoConfig}."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void compareRepoConfig(RepoConfiguration expectedRepoConfig, RepoConfiguration actualRepoConfig) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedRepoConfig, actualRepoConfig);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedRepoConfig.getAuthorList().size(); i++) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            compareAuthor(expectedRepoConfig.getAuthorList().get(i), actualRepoConfig.getAuthorList().get(i));"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedAuthor} and {@code actualAuthor}, with exception of it\u0027s display name."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * The display name is not compared as it varies with object construction."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * It is a transient value and it is not needed for object matching."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public static void compareAuthor(Author expectedAuthor, Author actualAuthor) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthor.getGitId(), actualAuthor.getGitId());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthor.getIgnoreGlobList(), actualAuthor.getIgnoreGlobList());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthor.getAuthorAliases(), actualAuthor.getAuthorAliases());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberCommits} is equal to the expected number of commits captured in"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static boolean compareNumberExpectedCommitsToGitLogLines(int expectedNumberCommits, String gitLogResult) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no commits"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return expectedNumberCommits \u003d\u003d 0;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // (actualSplitGitLogResilt - 1) as the 1st token is always empty."},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return expectedNumberCommits \u003d\u003d (gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER).length - 1);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberFilesChanged} is equal to the actual number of files changed in"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public static boolean compareNumberFilesChanged(int expectedNumberFilesChanged, String gitLogResult) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no files changed"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return expectedNumberFilesChanged \u003d\u003d 0;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String[] changesLogged \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        HashSet\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // start from index 1 as index 0 is always empty."},{"lineNumber":188,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c changesLogged.length; i++) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            filesChanged.addAll(getFilesChangedInCommit(changesLogged[i]));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return filesChanged.size() \u003d\u003d expectedNumberFilesChanged;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Returns the {@link Set} of files changed in the commit {@code rawCommitInfo}."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private static Set\u003cString\u003e getFilesChangedInCommit(String rawCommitInfo) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":199,"author":{"gitId":"asdfghjkxd"},"content":"        String[] commitInfo \u003d StringsUtil.NEWLINE.split(rawCommitInfo.replaceAll(\"\\n+$\", \"\"));"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        int fileChangedNum \u003d Integer.parseInt(commitInfo[commitInfo.length - 1].trim().split(\" \")[0]);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        for (int fileNum \u003d 0; fileNum \u003c fileChangedNum; fileNum++) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            filesChanged.add(getFileChanged(commitInfo[commitInfo.length - 2 - fileNum]));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return filesChanged;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Returns the file changed given a {@code rawFileChangedString}."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    private static String getFileChanged(String rawFileChangedString) {"},{"lineNumber":211,"author":{"gitId":"asdfghjkxd"},"content":"        String fileChanged \u003d StringsUtil.TAB.split(rawFileChangedString)[STAT_FILE_PATH_INDEX].trim();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        if (fileChanged.contains(MOVED_FILE_INDICATION)) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            fileChanged \u003d fileChanged.substring(fileChanged.indexOf(MOVED_FILE_INDICATION)"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    + MOVED_FILE_INDICATION.length());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return fileChanged;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * Returns true if the test environment is on Windows OS."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public static boolean isWindows() {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * Returns the {@link Path} to a resource given by {@code pathToResource} string, using {@code classForLoading}."},{"lineNumber":228,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static Path loadResource(Class\u003c?\u003e classForLoading, String pathToResource) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        ClassLoader classLoader \u003d classForLoading.getClassLoader();"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        URL url \u003d classLoader.getResource(pathToResource);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Path path \u003d null;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            path \u003d Paths.get(url.toURI());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            System.out.println(\"URL format does not follow required standard\");"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"asdfghjkxd":6,"-":234}}]
