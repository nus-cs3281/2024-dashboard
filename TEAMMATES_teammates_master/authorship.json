[{"path":"docs/_markbind/layouts/default.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"{% include \"_markbind/layouts/header.md\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\" class\u003d\"fixed-header-padding\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* About TEAMMATES :expanded:"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  * [Introduction]({{ baseUrl }}/index.html)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  * [Overview]({{ baseUrl }}/overview.html)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Getting Started :expanded:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/setting-up.html)"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* [Contributing]({{ baseUrl }}/contributing-doc.html)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Workflow :expanded:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * [Issues]({{ baseUrl }}/issues.html)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * [Process]({{ baseUrl }}/process.html)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * [Development]({{ baseUrl }}/development.html)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* [Design]({{ baseUrl }}/design.html)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Best Practices :expanded:"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * [Coding]({{ baseUrl }}/best-practices/coding.html)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  * [Testing]({{ baseUrl }}/best-practices/testing.html)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  * [Data Migration]({{ baseUrl }}/best-practices/data-migration.html)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * [UI Design]({{ baseUrl }}/best-practices/ui-design.html)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  * [Accessibility]({{ baseUrl }}/best-practices/accessibility.html)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  * [Mobile-Friendliness]({{ baseUrl }}/best-practices/mobile-friendliness.html)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* How-to :expanded:"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * [Captcha]({{ baseUrl }}/captcha.html)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  * [Documentation]({{ baseUrl }}/documentation.html)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  * [Emails]({{ baseUrl }}/emails.html)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * [Unit Testing]({{ baseUrl }}/unit-testing.html)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [End-to-End Testing]({{ baseUrl }}/e2e-testing.html)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [Performance Testing]({{ baseUrl }}/performance-testing.html)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [Accessibility Testing]({{ baseUrl }}/axe-testing.html)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * [Search]({{ baseUrl }}/search.html)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  * [Snapshot Testing]({{ baseUrl }}/snapshot-testing.html)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Static Analysis]({{ baseUrl }}/static-analysis.html)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* [Troubleshooting Guide]({{ baseUrl }}/troubleshooting-guide.html)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [Glossary]({{ baseUrl }}/glossary.html)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\" class\u003d\"fixed-header-padding\"\u003e"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"    \u003cbreadcrumb/\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    {{ content }}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\" class\u003d\"fixed-header-padding\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"{% include \"_markbind/layouts/footer.md\" %}"}],"authorContributionMap":{"jingting1412":3,"-":50}},{"path":"docs/_markbind/layouts/footer.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"\u003cfooter\u003e"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"\u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"\u003cdiv class\u003d\"text-center\"\u003e"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"  \u003csmall\u003e[Generated by {{MarkBind}} on {{timestamp}}]\u003c/small\u003e"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"\u003c/div\u003e"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"\u003c/footer\u003e"}],"authorContributionMap":{"jingting1412":6}},{"path":"docs/_markbind/layouts/header.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"\u003chead-bottom\u003e"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{ baseUrl }}/stylesheets/main.css\"\u003e"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"\u003c/head-bottom\u003e"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":""},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"\u003cheader sticky\u003e"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"  \u003cnavbar type\u003d\"inverse\"\u003e"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{ baseUrl }}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003e"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"      \u003cpic src\u003d\"{{ baseUrl }}/images/teammateslogo.png\" width\u003d\"150\" alt\u003d\"Logo\" caption\u003d\"\"/\u003e"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"      \u003cspan style\u003d\"font-style:italic;font-size:small\"\u003e[dev docs]\u003c/span\u003e"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"    \u003c/a\u003e"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{ baseUrl }}/index.html\" class\u003d\"nav-link\"\u003eHome\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{ baseUrl }}/contributing-doc.html\" class\u003d\"nav-link\"\u003eContributing\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://teammatesv4.appspot.com/\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003eProduct Website \u003cmd\u003e:glyphicon-share-alt:\u003c/md\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/TEAMMATES/teammates\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e\u003c/li\u003e"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"  \u003cli slot\u003d\"right\"\u003e"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"    \u003cform class\u003d\"navbar-form\"\u003e"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"      \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"    \u003c/form\u003e"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"  \u003c/li\u003e"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"  \u003c/navbar\u003e"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"\u003c/header\u003e"}],"authorContributionMap":{"jingting1412":21}},{"path":"docs/design.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  title: \"Design\""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"# Design"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Architecture"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/highlevelArchitecture.puml\"/\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"TEAMMATES is a Web application that runs on Google App Engine (GAE). Given above is an overview of the main components."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"- **UI (Browser)**: The UI seen by users consists of Web pages containing HTML, CSS (for styling) and JavaScript (for client-side interactions such as sorting, input validation, etc.). This UI is a single HTML page generated by Angular framework. The initial page request is sent to the server over HTTP, and requests for data are sent asynchronously with AJAX."},{"lineNumber":14,"author":{"gitId":"-"},"content":"- **UI (Server)**: The entry point for the application back end logic is designed as a REST-ful controller."},{"lineNumber":15,"author":{"gitId":"-"},"content":"- **Logic**: The main logic of the application is in POJOs (Plain Old Java Objects)."},{"lineNumber":16,"author":{"gitId":"-"},"content":"- **Storage**: The storage layer of the application uses the persistence framework provided by **Google Cloud Datastore**, a NoSQL database."},{"lineNumber":17,"author":{"gitId":"-"},"content":"- **Test Driver**: TEAMMATES makes heavy use of automated regression testing. Test data is transmitted using JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":"  - `TestNG` is used for Java testing (all levels) and `Jest` for JavaScript unit-testing."},{"lineNumber":19,"author":{"gitId":"-"},"content":"- **E2E**: The E2E (end-to-end) component is used to interact with the application as a whole with Web browsers. Its primary function is for E2E tests."},{"lineNumber":20,"author":{"gitId":"-"},"content":"  - `Selenium (Java)` is used to automate E2E testing with actual Web browsers."},{"lineNumber":21,"author":{"gitId":"-"},"content":"- **Client**: The Client component can connect to the back end directly without using a Web browser. It is used for administrative purposes, e.g. migrating data to a new schema."},{"lineNumber":22,"author":{"gitId":"-"},"content":"- **Common**: The Common component contains utility code (data transfer objects, helper classes, etc.) used across the application."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"The diagram below shows how the code in each component is organized into packages and the dependencies between them."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/packageDiagram.puml\"/\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Notes:"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"- `[logic] - [ui::website] - [ui::webapi]` represent an application of `Model-View-Controller` pattern."},{"lineNumber":31,"author":{"gitId":"-"},"content":"  - `ui::website` is not a real package; it is a conceptual package representing the front-end of the application."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## UI Component"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"The diagram below shows the object structure of the UI component."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/UiComponent.puml\"/\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"Notes:"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"- `ui::website` is not a Java package. It is written in Angular framework and consists of HTML, SCSS, and TypeScript files. The framework will build those files into HTML, CSS and JavaScript files ready to be used by standard Web browsers."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"The UI component is the first stop for 99% of all requests that are received by the application."},{"lineNumber":44,"author":{"gitId":"-"},"content":"Such a request will go through the following steps:"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Request received by the GAE server."},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Custom filters are applied according to the order specified in `web.xml`, e.g. `OriginCheckFilter`."},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Request forwarded to a `*Servlet` object as specified in `web.xml` for further processing, depending on the type of request."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"There are two general types of requests: user-invoked requests and automated (GAE server-invoked) requests, which are processed differently."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"### User-invoked requests"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"User-invoked requests are all requests made by the users of the application, typically from the Web browser (i.e. by navigating to a particular URL of the application)."},{"lineNumber":55,"author":{"gitId":"-"},"content":"The request will be processed as follows:"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/UiWorkflow.puml\"/\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"The initial request for the web page will be processed as follows:"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. Request forwarded to `WebPageServlet`."},{"lineNumber":62,"author":{"gitId":"-"},"content":"1. `WebPageServlet` returns the built single web page (`index.html`)."},{"lineNumber":63,"author":{"gitId":"-"},"content":"1. The browser will render the page and execute the page scripts, most of the time requiring AJAX requests to the server."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"Subsequent AJAX requests sent to the server will be processed as follows:"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. Request forwarded to the `WebApiServlet`."},{"lineNumber":68,"author":{"gitId":"-"},"content":"1. `WebApiServlet` uses the `ActionFactory` to generate the matching `Action` object, e.g. `GetFeedbackSessionsAction`."},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. `WebApiServlet` executes the action."},{"lineNumber":70,"author":{"gitId":"-"},"content":"   1. The `Action` object checks the access rights of the user. If the action is allowed, it will be performed, interacting with the `Logic` component as necessary."},{"lineNumber":71,"author":{"gitId":"-"},"content":"   1. The `Action` packages and processes the result into an `ActionResult` object. The most common format is `JsonResult` (requests for obtaining data or processing existing data) and other formats can be defined as necessary."},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. `WebApiServlet` sends the result back to the browser which will then process it on the front-end."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Requests for static asset files (e.g. CSS, JS files, images) are served directly without going through `web.xml` configuration at all."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"The Web API is protected by two layers of access control check:"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"- Origin check: This mitigates [CSRF attack](https://owasp.org/www-community/attacks/csrf)."},{"lineNumber":79,"author":{"gitId":"-"},"content":"- Authentication and authorization check: This checks if the logged in user (or lack thereof) has sufficient privileges to trigger the API\u0027s actions."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"Special keys (`csrf key` and `backdoor key`) can be used to bypass each of the checks, typically for testing purpose. Those keys are strings known only to the person who deployed the application (typically, the administrator)."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"### Automated requests"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Automated requests are all requests sent automatically by the GAE server during specific periods of time."},{"lineNumber":86,"author":{"gitId":"-"},"content":"This type of request will be processed as follows:"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"1. The source of the request will be checked for administrator privilege. If this privilege is absent (e.g. non-administrator users trying to invoke the automated actions), the request will be dropped and a `403 Forbidden` status will be returned."},{"lineNumber":89,"author":{"gitId":"-"},"content":"   - Requests generated by the GAE server are equipped with this privilege."},{"lineNumber":90,"author":{"gitId":"-"},"content":"   - Administrators can manually invoke these requests; this is particularly useful in testing the actions associated with those requests."},{"lineNumber":91,"author":{"gitId":"-"},"content":"1. Request forwarded to the `WebApiServlet` and subsequent actions are the same as user-invoked AJAX requests."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"GAE server sends such automated requests through two different configurations:"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"- Cron jobs: These are jobs that are automatically scheduled for a specified period of time, e.g. scheduling feedback session opening reminders. It is configured in `cron.yaml`."},{"lineNumber":96,"author":{"gitId":"-"},"content":"- Task queue workers: These are hybrids of user-invoked and GAE-invoked in that they are queued by users (i.e. users request for the tasks to be added to queue), but executed by GAE (i.e. GAE determines when and which tasks in the queue are executed at any point of time). This is typically used for tasks that may take a long time to finish and might be blocking user\u0027s interaction. It is configured in `queue.yaml` as well as the `TaskQueue` nested class of the [Const](https://github.com/TEAMMATES/teammates/blob/master/src/main/java/teammates/common/util/Const.java) class."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Template Method pattern"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"- Since the high-level workflow of processing a request is same for any request (differing by the two request types only), we use the [Template Method pattern](http://en.wikipedia.org/wiki/Template_method_pattern) to abstract the process flow into the `Action` classes."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"### Policies"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"On designing API endpoints (for AJAX requests):"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"- Design endpoints for resources. For example, `FeedbackSession` is a resource. The corresponding endpoint is `/session`. We use `GET`, `POST`, `PUT`, `DELETE` HTTP methods to get, create, update and delete the resource respectively."},{"lineNumber":107,"author":{"gitId":"-"},"content":"- Prefer multiple REST calls over single RPC (Remote Procedure Call) calls."},{"lineNumber":108,"author":{"gitId":"-"},"content":"  - Reason 1: REST paradigm promotes reuse of many business logic and is not dependent of the structure of the requesting web page (or any other type of requesting agent)."},{"lineNumber":109,"author":{"gitId":"-"},"content":"  - Reason 2: Multiple REST calls can be parallelized which will improve performance."},{"lineNumber":110,"author":{"gitId":"-"},"content":"- Separate access control logic and execution logic completely."},{"lineNumber":111,"author":{"gitId":"-"},"content":"  - In the case that an endpoint serves multiple purposes, we use `Intent` to distinguish the intent for the request. For example, instructors can access `/session` with intent `INSTRUCTOR_SUBMISSION` or `FULL_DETAIL`. Some `Intent` will naturally require stricter access rights."},{"lineNumber":112,"author":{"gitId":"-"},"content":"- Prefer HTTP request body over URL parameters (key-value) to contain data for `POST` and `PUT` requests."},{"lineNumber":113,"author":{"gitId":"-"},"content":"  - Reason 1: The URL parameters are used to identify a specific resource for an endpoint, not what should be done to them."},{"lineNumber":114,"author":{"gitId":"-"},"content":"  - Reason 2: Request body is not limited to key-value format which allows proper design and validation."},{"lineNumber":115,"author":{"gitId":"-"},"content":"  - Data Transfer Objects (DTOs) which represent different API requests and responses are defined in `request` and `output` package respectively."},{"lineNumber":116,"author":{"gitId":"-"},"content":"- Preprocess data sent/received by the server to hide complexities. For example, timestamp is passed as UNIX epoch milliseconds in the output while it is represented as `Instant` in the back-end."},{"lineNumber":117,"author":{"gitId":"-"},"content":"  - Some constructors in the `output` package contain logic to hide \"hacks\" in the backend."},{"lineNumber":118,"author":{"gitId":"-"},"content":"  - Some getters/setters in the `request` package contain logic to cater the conventions in the backend."},{"lineNumber":119,"author":{"gitId":"-"},"content":"  - Some fields are required be hidden in the API response, mostly for data privacy purposes. Whenever required, there should be methods in the request output objects catered for this."},{"lineNumber":120,"author":{"gitId":"-"},"content":"- API endpoints should not be concerned with how data is presented."},{"lineNumber":121,"author":{"gitId":"-"},"content":"  - Case study 1: some endpoint will pass timezone information via two information: timezone ID and UNIX epoch milliseconds. It is up to the front-end on how to make use of those two pieces of information."},{"lineNumber":122,"author":{"gitId":"-"},"content":"  - Case study 2: CSV file for session result or student list is just a different way of presenting the same information in the web page. Due to this, when downloading CSV, the web page will request the same information as that used when displaying in web page and do the necessary conversion to CSV."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"On data exchange between front-end and back-end:"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"- Back-end is the single source of truth for all data format and the code used by front-end is generated from this."},{"lineNumber":127,"author":{"gitId":"-"},"content":"  - Some important constants (including API endpoints information) are synced to `api-const.ts`."},{"lineNumber":128,"author":{"gitId":"-"},"content":"  - The schemas of the DTOs defined in `output` and `request` packages are synced to `api-output.ts` and `api-request.ts` in the frontend."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"On handling exceptions:"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"- The UI component is responsible for catching all exceptions and transforming them to properly formed, user-friendly output format. It includes the status message shown to user as well as the HTTP status code."},{"lineNumber":133,"author":{"gitId":"-"},"content":"  - As a consequence, the UI component cannot throw any exception, because there is no layer which will catch those exceptions if it does."},{"lineNumber":134,"author":{"gitId":"-"},"content":"- In order to streamline the process, custom runtime exception classes which correspond to different HTTP status codes are used. For example, there is `EntityNotFoundException` which corresponds to HTTP 404, `UnauthorizedAccessException` which corresponds to HTTP 403, etc."},{"lineNumber":135,"author":{"gitId":"-"},"content":"  - It is highly preferred to throw these custom exceptions instead of setting the HTTP status manually in the action class, as the API layer has been configured to automatically log the exception and assign the correct status code to the HTTP response."},{"lineNumber":136,"author":{"gitId":"-"},"content":"- All `4XX` responses must be accompanied with logging at `warning` level or above. `5XX` responses must be accompanied with `severe` level logging."},{"lineNumber":137,"author":{"gitId":"-"},"content":"  - `502` (Bad Gateway) responses may skip the `severe` level logging if the upstream components (where the error happened) already did the `severe` level logging."},{"lineNumber":138,"author":{"gitId":"-"},"content":"- We use the HTTP status codes as close to their standard definition in [RFC7231](https://tools.ietf.org/html/rfc7231) as possible."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"## Logic Component"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Logic` component handles the business logic of TEAMMATES. In particular, it is responsible for:"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"- Managing relationships between entities, e.g. cascade logic for create/update/delete."},{"lineNumber":145,"author":{"gitId":"-"},"content":"- Managing transactions, e.g. ensuring atomicity of a transaction."},{"lineNumber":146,"author":{"gitId":"-"},"content":"- Sanitizing input values received from the UI component."},{"lineNumber":147,"author":{"gitId":"-"},"content":"- Connecting to GCP or third-party services, e.g. for adding tasks to the task queue and for sending emails with third-party providers."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/LogicComponent.puml\"/\u003e"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Package overview:"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"- **`logic.api`**: Provides the API of the component to be accessed by the UI."},{"lineNumber":154,"author":{"gitId":"-"},"content":"- **`logic.core`**: Contains the core logic of the system."},{"lineNumber":155,"author":{"gitId":"-"},"content":"- **`logic.external`**: Holds the logic of external services such as task queue service."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"### Logic API"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"Represented by these classes:"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"- `Logic`: A [Facade class](http://en.wikipedia.org/wiki/Facade_pattern) which connects to the several `*Logic` classes to handle the logic related to various types of data and to access data from the `Storage` component."},{"lineNumber":162,"author":{"gitId":"-"},"content":"- `UserProvision`: Retrieves user information (based on request cookies)."},{"lineNumber":163,"author":{"gitId":"-"},"content":"- `EmailGenerator`: Generates emails to be sent."},{"lineNumber":164,"author":{"gitId":"-"},"content":"- `EmailSender`: Sends email with the provider chosen based on the build configuration."},{"lineNumber":165,"author":{"gitId":"-"},"content":"- `TaskQueuer`: Adds tasks to the task queue, i.e. to be executed at a later time."},{"lineNumber":166,"author":{"gitId":"-"},"content":"- `LogsProcessor`: For more advanced usage of logging that cannot be captured by the standard logger class."},{"lineNumber":167,"author":{"gitId":"-"},"content":"- `RecaptchaVerifier`: For verification of the reCAPTCHA token."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"Many classes in this layer make use of proxy pattern, i.e. they only connect to production services such as Google Cloud Tasks in the staging/production server."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"### Policies"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Access control:"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"+ Although this component provides methods that are relevant to access control (e.g. providing user information), the access control check itself does not happen in this component. The UI is expected to check access control (using `GateKeeper` class) before calling a method in the logic component."},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"API for creating entities:"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"+ Null parameters: Causes an assertion failure."},{"lineNumber":180,"author":{"gitId":"-"},"content":"+ Invalid parameters: Throws `InvalidParametersException`."},{"lineNumber":181,"author":{"gitId":"-"},"content":"+ Entity already exists: Throws `EntityAlreadyExistsException` (escalated from Storage level)."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"API for retrieving entities:"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"+ Attempting to retrieve objects using `null` parameters: Causes an assertion failure."},{"lineNumber":186,"author":{"gitId":"-"},"content":"+ Entity not found:"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  - Returns `null` if the target entity not found. This way, read operations can be used easily for checking the existence of an entity."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"API for updating entities:"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"+ Update is done using `*UpdateOptions` inside every `*Attributes`. The `UpdateOptions` will specify what is used to identify the entity to update and what will be updated."},{"lineNumber":192,"author":{"gitId":"-"},"content":"+ Entity not found: Throws `EntityDoesNotExistException`."},{"lineNumber":193,"author":{"gitId":"-"},"content":"+ Invalid parameters: Throws `InvalidParametersException`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"API for deleting entities:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"+ FailDeleteSilentlyPolicy: In general, delete operation do not throw exceptions if the target entity does not exist. This is because if it does not exist, it is as good as deleted."},{"lineNumber":198,"author":{"gitId":"-"},"content":"+ Cascade policy:   When a parent entity is deleted, entities that have referential integrity with the deleted entity should also be deleted."},{"lineNumber":199,"author":{"gitId":"-"},"content":"  Refer to the API for the cascade logic."},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"## Storage Component"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"The `Storage` component performs CRUD (Create, Read, Update, Delete) operations on data entities individually."},{"lineNumber":204,"author":{"gitId":"-"},"content":"It contains minimal logic beyond what is directly relevant to CRUD operations."},{"lineNumber":205,"author":{"gitId":"-"},"content":"In particular, it is reponsible for:"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"- Validating data inside entities before creating/updating them, to ensure they are in a valid state."},{"lineNumber":208,"author":{"gitId":"-"},"content":"- Hiding the complexities of the database from the `Logic` component."},{"lineNumber":209,"author":{"gitId":"-"},"content":"- Hiding the persistable objects: Classes in the `storage::entity` package are not visible outside this component to hide information specific to data persistence."},{"lineNumber":210,"author":{"gitId":"-"},"content":"  - Instead, a corresponding non-persistent [data transfer object](http://en.wikipedia.org/wiki/Data_transfer_object) named `*Attributes` (e.g., `CourseAttributes` is the data transfer object for `Course` entities) object is returned. These datatransfer classes are in `common::datatransfer` package, to be explained later."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"The `Storage` component does not perform any cascade delete/create operations. Cascade logic is handled by the `Logic` component."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/StorageComponent.puml\"/\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Package overview:"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"+ **`storage.api`**: Provides the API of the component to be accessed by the logic component."},{"lineNumber":219,"author":{"gitId":"-"},"content":"+ **`storage.entity`**: Classes that represent persistable entities."},{"lineNumber":220,"author":{"gitId":"-"},"content":"+ **`storage.search`**: Classes for dealing with searching and indexing."},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\"/\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"Note that the navigability of the association links between entity objects appear to be in the reverse direction of what we see in a normal OOP design."},{"lineNumber":225,"author":{"gitId":"-"},"content":"This is because we want to keep the data schema flexible so that new entity types can be added later with minimal modifications to existing elements."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Storage API"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"Represented by the `*Db` classes. These classes act as the bridge to the database."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"### Policies"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"Add and Delete operations try to wait until data is persisted in the database before returning. This is not enough to compensate for eventual consistency involving multiple servers in the Google Cloud Datastore environment. However, it is expected to avoid test failures caused by eventual consistency in dev server and reduce such problems in the live server."},{"lineNumber":234,"author":{"gitId":"-"},"content":"Note: \u0027Eventual consistency\u0027 here means it takes some time for a database operation to propagate across all replicas of the Google Cloud Datastore. As a result, the data may be in an inconsistent states for short periods of time although things should become consistent \u0027eventually\u0027. For example, an object we deleted may appear to still exist for a short while."},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Implementation of Transaction Control has been minimized due to limitations of Google Cloud Datastore environment and the nature of our data schema."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"API for creating:"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"+ Attempt to create an entity that already exists: Throws `EntityAlreadyExistsException`."},{"lineNumber":241,"author":{"gitId":"-"},"content":"+ Attempt to create an entity with invalid data: Throws `InvalidParametersException`."},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"API for retrieving:"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"+ Attempt to retrieve an entity that does not exist: Returns `null`."},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"API for updating:"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"+ Attempt to update an entity that does not exist: Throws `EntityDoesNotExistException`."},{"lineNumber":250,"author":{"gitId":"-"},"content":"+ Attempt to update an entity with invalid data: Throws `InvalidParametersException`."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"API for deleting:"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"+ Attempt to delete an entity that does not exist: Fails silently."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"## Common Component"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"The Common component contains common utilities used across TEAMMATES."},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/CommonComponent.puml\"/\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"Package overview:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"- **`common.util`**: Contains utility classes."},{"lineNumber":265,"author":{"gitId":"-"},"content":"- **`common.exceptions`**: Contains custom exceptions."},{"lineNumber":266,"author":{"gitId":"-"},"content":"- **`common.datatransfer`**: Contains data transfer objects."},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"`common.datatransfer` package contains lightweight \"data transfer object\" classes for transferring data among components. They can be combined in various ways to transfer structured data between components. Given below are three examples."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/DataTransferClasses.puml\"/\u003e"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"1. `Test Driver` can use the `DataBundle` in this manner to send an arbitrary number of objects to be persisted in the database."},{"lineNumber":273,"author":{"gitId":"-"},"content":"1. This structure can be used to transfer search results of a student or instructor or response comments."},{"lineNumber":274,"author":{"gitId":"-"},"content":"1. This structure can be used to send results of a feedback session (e.g., when showing a feedback session report to an instructor)."},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Some of these classes are methodless (and thus more of a data structure rather than a class); these classes use public variables for data for easy access."},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"## Test Driver Component"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"This component automates the testing of TEAMMATES."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/TestDriverComponent.puml\"/\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"The test driver component\u0027s package structure follows the corresponding production package structure\u0027s exactly,"},{"lineNumber":285,"author":{"gitId":"-"},"content":"e.g. `teammates.logic.core.*` will contain the test cases for the production code inside `teammates.logic.core` package."},{"lineNumber":286,"author":{"gitId":"-"},"content":"In the same spirit, for the front end, each `*.component.ts` will have the corresponding `*.component.spec.ts` in the same folder (similarly for `*.service.ts`, `*.pipe.ts`, etc.)."},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"The test driver component introduces the following additional packages:"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"- **`architecture`**: Contains test cases used by one of the lint tools to check for architectural integrity."},{"lineNumber":291,"author":{"gitId":"-"},"content":"- **`test`**: Contains infrastructure and helpers needed for running the tests. Also contains the test cases for the said infrastructure/helpers."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"Notes:"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"- Component tests: Some of these are pure unit tests (i.e. testing one component in isolation) while others are integration tests that test units as well as integration of units with each other."},{"lineNumber":296,"author":{"gitId":"-"},"content":"- Front-end files (particularly TypeScript) are tested separately with `Jest`. The test cases are found in `*.spec.ts` files."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"This is how TEAMMATES testing maps to standard types of testing."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"```"},{"lineNumber":301,"author":{"gitId":"-"},"content":"Normal"},{"lineNumber":302,"author":{"gitId":"-"},"content":"|-----acceptance tests-----|-------------------system tests-------------------|-----integration tests-----|-----unit tests-----|"},{"lineNumber":303,"author":{"gitId":"-"},"content":"|--------manual testing--------|------automated E2E tests------|-------------------automated component tests-------------------|"},{"lineNumber":304,"author":{"gitId":"-"},"content":"TEAMMATES"},{"lineNumber":305,"author":{"gitId":"-"},"content":"```"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"## E2E Component"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"The E2E component has no knowledge of the internal workings of the application and can only interact either with Web browser (as a whole application) or REST API calls (for the back-end logic). Its primary function is for E2E tests."},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/E2EComponent.puml\"/\u003e"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"Package overview:"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"- **`e2e.util`**: Contains helpers needed for running E2E tests. Also contains the test cases for the said infrastructure/helpers."},{"lineNumber":316,"author":{"gitId":"-"},"content":"- **`e2e.pageobjects`**: Contains abstractions of the pages as they appear on a Browser (i.e. SUTs)."},{"lineNumber":317,"author":{"gitId":"-"},"content":"- **`e2e.cases`**: Contains system test cases for testing the application as a whole."},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Client Component"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"The Client component contains scripts that can connect directly to the application back-end for administrative purposes, such as migrating data to a new schema and calculating statistics."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"jingting1412"},"content":"\u003cpuml src\u003d\"diagrams/ClientComponent.puml\"/\u003e"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"Package overview:"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"- **`client.util`**: Contains helpers needed for client scripts."},{"lineNumber":328,"author":{"gitId":"-"},"content":"- **`client.connector`**: Classes needed to connect to the back end directly."},{"lineNumber":329,"author":{"gitId":"-"},"content":"- **`client.scripts`**: Scripts that deal with the back end data for administrative purposes."}],"authorContributionMap":{"jingting1412":12,"-":317}},{"path":"src/e2e/java/teammates/e2e/cases/AdminNotificationsPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.AdminNotificationsPage;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#ADMIN_NOTIFICATIONS_PAGE}."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AdminNotificationsPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"    private Notification[] notifications \u003d new Notification[2];"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/AdminNotificationsPageE2ETest.json\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"        sqlTestData \u003d removeAndRestoreSqlDataBundle("},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"            loadSqlDataBundle(\"/AdminNotificationsPageE2ETest_SqlEntities.json\"));"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"        notifications[0] \u003d sqlTestData.notifications.get(\"notification1\");"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"        notifications[1] \u003d sqlTestData.notifications.get(\"notification2\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ______TS(\"verify loaded data\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        AppUrl url \u003d createFrontendUrl(Const.WebPageURIs.ADMIN_NOTIFICATIONS_PAGE);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AdminNotificationsPage notificationsPage \u003d loginAdminToPage(url, AdminNotificationsPage.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Only validates that the notifications are present in the notifications table instead of checking every row"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // This is because the page will display all notifications in the database, which is not predictable"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotificationsTableRow(notifications[0]);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotificationsTableRow(notifications[1]);"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        NotificationData notif \u003d BACKDOOR.getNotificationData(notifications[0].getId().toString());"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getNotificationId(), notifications[0].getId().toString());"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getMessage(), notifications[0].getMessage());"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getTitle(), notifications[0].getTitle());"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        notif \u003d BACKDOOR.getNotificationData(notifications[1].getId().toString());"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getNotificationId(), notifications[1].getId().toString());"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getMessage(), notifications[1].getMessage());"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getTitle(), notifications[1].getTitle());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ______TS(\"add new notification\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        int currentYear \u003d LocalDate.now().getYear();"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"        Notification newNotification \u003d new Notification("},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":"                LocalDateTime.of(currentYear + 5, 2, 2, 12, 0).atZone(ZoneId.of(\"UTC\")).toInstant(),"},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"                LocalDateTime.of(currentYear + 5, 2, 3, 12, 0).atZone(ZoneId.of(\"UTC\")).toInstant(),"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"                NotificationStyle.INFO,"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"                NotificationTargetUser.STUDENT,"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"                \"New E2E test notification 1\","},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":"                \"\u003cp\u003eNew E2E test notification message\u003c/p\u003e\""},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"                );"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        notificationsPage.addNotification(newNotification);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        notificationsPage.verifyStatusMessage(\"Notification created successfully.\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Replace placeholder ID with actual ID of created notification"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        notificationsPage.sortNotificationsTableByDescendingCreateTime();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String newestNotificationId \u003d notificationsPage.getFirstRowNotificationId();"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        newNotification.setId(UUID.fromString(newestNotificationId));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Checks that notification is in the database first"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // so that newNotification is updated with the created time before checking table row"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":"        notif \u003d BACKDOOR.getNotificationData(newestNotificationId);"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getNotificationId(), newestNotificationId);"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getMessage(), newNotification.getMessage());"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"        assertEquals(notif.getTitle(), newNotification.getTitle());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotificationsTableRow(newNotification);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ______TS(\"edit notification\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        newNotification.setStartTime(LocalDateTime.of(currentYear + 7, 2, 2, 12, 0).atZone(ZoneId.of(\"UTC\")).toInstant());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        newNotification.setEndTime(LocalDateTime.of(currentYear + 7, 2, 3, 12, 0).atZone(ZoneId.of(\"UTC\")).toInstant());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        newNotification.setStyle(NotificationStyle.DANGER);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        newNotification.setTargetUser(NotificationTargetUser.INSTRUCTOR);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        newNotification.setTitle(\"Edited E2E test notification 1\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        newNotification.setMessage(\"\u003cp\u003eEdited E2E test notification message\u003c/p\u003e\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        notificationsPage.editNotification(newNotification);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        notificationsPage.verifyStatusMessage(\"Notification updated successfully.\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotificationsTableRow(newNotification);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // verify that notification is present in database by reloading"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        notificationsPage.reloadPage();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotificationsTableRow(newNotification);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        ______TS(\"delete notification\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        notificationsPage.deleteNotification(newNotification);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        notificationsPage.verifyStatusMessage(\"Notification has been deleted.\");"},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        notif \u003d BACKDOOR.getNotificationData(newestNotificationId);"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":"        assertNull(notif);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void classTeardown() {"},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"        for (Notification notification : sqlTestData.notifications.values()) {"},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":"            BACKDOOR.deleteNotification(notification.getId().toString());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":33,"-":79}},{"path":"src/e2e/java/teammates/e2e/cases/AdminSearchPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.AdminSearchPage;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#ADMIN_SEARCH_PAGE}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AdminSearchPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/AdminSearchPageE2ETest.json\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        putDocuments(testData);"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"        sqlTestData \u003d loadSqlDataBundle(\"/AdminSearchPageE2ETest_SqlEntities.json\");"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"        removeAndRestoreSqlDataBundle(sqlTestData);"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"        putSqlDocuments(sqlTestData);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AppUrl url \u003d createFrontendUrl(Const.WebPageURIs.ADMIN_SEARCH_PAGE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AdminSearchPage searchPage \u003d loginAdminToPage(url, AdminSearchPage.class);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CourseAttributes course \u003d testData.courses.get(\"typicalCourse1\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d testData.students.get(\"student1InCourse1\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d testData.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        AccountRequest accountRequest \u003d sqlTestData.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Search student email\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String searchContent \u003d student.getEmail();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String studentDetails \u003d getExpectedStudentDetails(student);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String studentManageAccountLink \u003d getExpectedStudentManageAccountLink(student);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String studentHomePageLink \u003d getExpectedStudentHomePageLink(student);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int numExpandedRows \u003d getExpectedNumExpandedRows(student);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentRowContent(student, course, studentDetails, studentManageAccountLink,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                studentHomePageLink);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentExpandedLinks(student, numExpandedRows);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Reset student google id\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        searchPage.resetStudentGoogleId(student);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        student.setGoogleId(null);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        studentManageAccountLink \u003d getExpectedStudentManageAccountLink(student);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        studentHomePageLink \u003d getExpectedStudentHomePageLink(student);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentRowContent(student, course, studentDetails, studentManageAccountLink,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                studentHomePageLink);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Regenerate registration key for a course student\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        searchPage.clickExpandStudentLinks();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String originalJoinLink \u003d searchPage.getStudentJoinLink(student);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        searchPage.regenerateStudentKey(student);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        searchPage.verifyRegenerateStudentKey(student, originalJoinLink);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        searchPage.waitForPageToLoad();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Search for instructor email\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        searchContent \u003d instructor.getEmail();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String instructorManageAccountLink \u003d getExpectedInstructorManageAccountLink(instructor);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String instructorHomePageLink \u003d getExpectedInstructorHomePageLink(instructor);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        searchPage.verifyInstructorRowContent(instructor, course, instructorManageAccountLink,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                instructorHomePageLink);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        searchPage.verifyInstructorExpandedLinks(instructor);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Reset instructor google id\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        searchPage.resetInstructorGoogleId(instructor);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        instructor.setGoogleId(null);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        instructorManageAccountLink \u003d getExpectedInstructorManageAccountLink(instructor);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        instructorHomePageLink \u003d getExpectedInstructorHomePageLink(instructor);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        searchPage.verifyInstructorRowContent(instructor, course, instructorManageAccountLink,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                instructorHomePageLink);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Regenerate registration key for an instructor\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        searchPage.clickExpandInstructorLinks();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        originalJoinLink \u003d searchPage.getInstructorJoinLink(instructor);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        searchPage.regenerateInstructorKey(instructor);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        searchPage.verifyRegenerateInstructorKey(instructor, originalJoinLink);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        searchPage.waitForPageToLoad();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Search for account request by email\");"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        searchContent \u003d accountRequest.getEmail();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        searchPage.verifyAccountRequestRowContent(accountRequest);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        searchPage.verifyAccountRequestExpandedLinks(accountRequest);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Search common search key\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        searchContent \u003d \"Course1\";"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentRowContent(student, course, studentDetails, studentManageAccountLink,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                studentHomePageLink);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        searchPage.verifyInstructorRowContent(instructor, course, instructorManageAccountLink,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                instructorHomePageLink);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        searchPage.verifyAccountRequestRowContent(accountRequest);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Expand and collapse links\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        searchPage.verifyLinkExpansionButtons(student, instructor, accountRequest);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Reset account request successful\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        searchContent \u003d accountRequest.getEmail();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        searchPage.clickResetAccountRequestButton(accountRequest);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertNull(BACKDOOR.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()).getRegisteredAt());"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case: Delete account request successful\");"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"        accountRequest \u003d sqlTestData.accountRequests.get(\"unregisteredInstructor1\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        searchContent \u003d accountRequest.getEmail();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        searchPage.clickDeleteAccountRequestButton(accountRequest);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertNull(BACKDOOR.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private String getExpectedStudentDetails(StudentAttributes student) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return String.format(\"%s [%s] (%s)\", student.getCourse(),"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                student.getSection() \u003d\u003d null ? Const.DEFAULT_SECTION : student.getSection(), student.getTeam());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private String getExpectedStudentHomePageLink(StudentAttributes student) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return student.isRegistered() ? createFrontendUrl(Const.WebPageURIs.STUDENT_HOME_PAGE)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .withUserId(student.getGoogleId())"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .toAbsoluteString()"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                : \"\";"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private String getExpectedStudentManageAccountLink(StudentAttributes student) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return student.isRegistered() ? createFrontendUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .withParam(Const.ParamsNames.INSTRUCTOR_ID, student.getGoogleId())"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .toAbsoluteString()"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                : \"\";"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private int getExpectedNumExpandedRows(StudentAttributes student) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        int expectedNumExpandedRows \u003d 2;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        for (FeedbackSessionAttributes sessions : testData.feedbackSessions.values()) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            if (sessions.getCourseId().equals(student.getCourse())) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                expectedNumExpandedRows +\u003d 1;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                if (sessions.getResultsVisibleFromTime().isBefore(Instant.now())) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                    expectedNumExpandedRows +\u003d 1;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return expectedNumExpandedRows;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private String getExpectedInstructorHomePageLink(InstructorAttributes instructor) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String googleId \u003d instructor.isRegistered() ? instructor.getGoogleId() : \"\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .withUserId(googleId)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    private String getExpectedInstructorManageAccountLink(InstructorAttributes instructor) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String googleId \u003d instructor.isRegistered() ? instructor.getGoogleId() : \"\";"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return createFrontendUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId)"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"    @AfterClass"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"    public void classTeardown() {"},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"        for (AccountRequest request : sqlTestData.accountRequests.values()) {"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":"            BACKDOOR.deleteAccountRequest(request.getEmail(), request.getInstitute());"},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":14,"-":186}},{"path":"src/e2e/java/teammates/e2e/cases/BaseE2ETestCase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.ITestContext;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountAttributes;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.DeadlineExtensionAttributes;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.exception.HttpRequestFailedException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.AppPage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.Browser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.DevServerLoginPage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.HomePage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.e2e.util.BackDoor;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.e2e.util.EmailAccount;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCaseWithDatabaseAccess;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.test.FileHelper;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.test.ThreadHelper;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Base class for all browser tests."},{"lineNumber":41,"author":{"gitId":"-"},"content":" *"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis type of test has no knowledge of the workings of the application,"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * and can only communicate via the UI or via {@link BackDoor} to obtain/transmit data."},{"lineNumber":44,"author":{"gitId":"-"},"content":" */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public abstract class BaseE2ETestCase extends BaseTestCaseWithDatabaseAccess {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Backdoor used to call APIs."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected static final BackDoor BACKDOOR \u003d BackDoor.getInstance();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Data to be used in the test."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected DataBundle testData;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sql Data to be used in the test."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    protected SqlDataBundle sqlTestData;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private Browser browser;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void baseClassSetup() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        prepareTestData();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        prepareBrowser();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Prepares the browser used for the current test."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    protected void prepareBrowser() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        browser \u003d new Browser();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Prepares the test data used for the current test."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    protected abstract void prepareTestData();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Contains all the tests for the page."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis approach is chosen so that setup and teardown are only needed once per test page,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * thereby saving time. While it necessitates failed tests to be restarted from the beginning,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * test failures are rare and thus not causing significant overhead."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    protected abstract void testAll();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void baseClassTearDown(ITestContext context) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (browser \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        boolean isSuccess \u003d context.getFailedTests().getAllMethods()"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .noneMatch(method -\u003e method.getConstructorOrMethod().getMethod().getDeclaringClass() \u003d\u003d this.getClass());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (isSuccess || TestProperties.CLOSE_BROWSER_ON_FAILURE) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            browser.close();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * The base URL will be the value of test.app.frontend.url in test.properties."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * {@code relativeUrl} must start with a \"/\"."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    protected static AppUrl createFrontendUrl(String relativeUrl) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new AppUrl(TestProperties.TEAMMATES_FRONTEND_URL + relativeUrl);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * The base URL will be the value of test.app.backend.url in test.properties."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * {@code relativeUrl} must start with a \"/\"."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    protected static AppUrl createBackendUrl(String relativeUrl) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new AppUrl(TestProperties.TEAMMATES_BACKEND_URL + relativeUrl);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Logs in to a page using the given credentials."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T loginToPage(AppUrl url, Class\u003cT\u003e typeOfPage, String userId) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // When not using dev server, Google blocks log in by automation."},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // To work around that, we inject the user cookie directly into the browser session."},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!TestProperties.isDevServer()) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            // In order for the cookie injection to work, we need to be in the domain."},{"lineNumber":135,"author":{"gitId":"-"},"content":"            // Use the home page to minimize the page load time."},{"lineNumber":136,"author":{"gitId":"-"},"content":"            browser.goToUrl(TestProperties.TEAMMATES_FRONTEND_URL);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String cookieValue \u003d BACKDOOR.getUserCookie(userId);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            browser.addCookie(Const.SecurityConfig.AUTH_COOKIE_NAME, cookieValue, true, true);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return getNewPageInstance(url, typeOfPage);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // This will be redirected to the dev server login page."},{"lineNumber":145,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        DevServerLoginPage loginPage \u003d AppPage.getNewPageInstance(browser, DevServerLoginPage.class);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        loginPage.loginAsUser(userId);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return getNewPageInstance(url, typeOfPage);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Logs in to a page using admin credentials."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T loginAdminToPage(AppUrl url, Class\u003cT\u003e typeOfPage) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return loginToPage(url, typeOfPage, TestProperties.TEST_ADMIN);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Equivalent to clicking the \u0027logout\u0027 link in the top menu of the page."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    protected void logout() {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        AppUrl url \u003d createBackendUrl(Const.WebPageURIs.LOGOUT);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (!TestProperties.TEAMMATES_FRONTEND_URL.equals(TestProperties.TEAMMATES_BACKEND_URL)) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            url \u003d url.withParam(\"frontendUrl\", TestProperties.TEAMMATES_FRONTEND_URL);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        AppPage.getNewPageInstance(browser, HomePage.class).waitForPageToLoad();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Deletes file with fileName from the downloads folder."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    protected void deleteDownloadsFile(String fileName) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String filePath \u003d TestProperties.TEST_DOWNLOADS_FOLDER + fileName;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        FileHelper.deleteFile(filePath);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Verifies downloaded file has correct fileName and contains expected content."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    protected void verifyDownloadedFile(String expectedFileName, List\u003cString\u003e expectedContent) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        String filePath \u003d TestProperties.TEST_DOWNLOADS_FOLDER + expectedFileName;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        int retryLimit \u003d TestProperties.TEST_TIMEOUT;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        boolean actual \u003d Files.exists(Paths.get(filePath));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        while (!actual \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(1000);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            actual \u003d Files.exists(Paths.get(filePath));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertTrue(actual);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            String actualContent \u003d FileHelper.readFile(filePath);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            for (String content : expectedContent) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                assertTrue(actualContent.contains(content));"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Visits the URL and gets the page object representation of the visited web page in the browser."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T getNewPageInstance(AppUrl url, Class\u003cT\u003e typeOfPage) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return AppPage.getNewPageInstance(browser, typeOfPage);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Verifies that email with subject is found in inbox."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Email used must be an authentic gmail account."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    protected void verifyEmailSent(String email, String subject) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (TestProperties.isDevServer() || !TestProperties.INCLUDE_EMAIL_VERIFICATION) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (!TestProperties.TEST_EMAIL.equals(email)) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            fail(\"Email verification is allowed only on preset test email.\");"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        EmailAccount emailAccount \u003d new EmailAccount(email);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            emailAccount.getUserAuthenticated();"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            int retryLimit \u003d 5;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            boolean actual \u003d emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            while (!actual \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                retryLimit--;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                ThreadHelper.waitFor(1000);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                actual \u003d emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            assertTrue(actual);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            fail(\"Failed to verify email sent:\" + e);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    AccountAttributes getAccount(String googleId) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return BACKDOOR.getAccount(googleId);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    protected AccountAttributes getAccount(AccountAttributes account) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        return getAccount(account.getGoogleId());"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    CourseAttributes getCourse(String courseId) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return BACKDOOR.getCourse(courseId);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    protected CourseAttributes getCourse(CourseAttributes course) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        return getCourse(course.getId());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    CourseAttributes getArchivedCourse(String instructorId, String courseId) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return BACKDOOR.getArchivedCourse(instructorId, courseId);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    FeedbackQuestionAttributes getFeedbackQuestion(String courseId, String feedbackSessionName, int qnNumber) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackQuestion(courseId, feedbackSessionName, qnNumber);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    protected FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq) {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        return getFeedbackQuestion(fq.getCourseId(), fq.getFeedbackSessionName(), fq.getQuestionNumber());"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    FeedbackResponseCommentAttributes getFeedbackResponseComment(String feedbackResponseId) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackResponseComment(feedbackResponseId);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    protected FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        return getFeedbackResponseComment(frc.getFeedbackResponseId());"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"    FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giver, String recipient) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackResponse(feedbackQuestionId, giver, recipient);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    protected FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        return getFeedbackResponse(fr.getFeedbackQuestionId(), fr.getGiver(), fr.getRecipient());"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    FeedbackSessionAttributes getFeedbackSession(String courseId, String feedbackSessionName) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackSession(courseId, feedbackSessionName);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    protected FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        return getFeedbackSession(fs.getCourseId(), fs.getFeedbackSessionName());"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    FeedbackSessionAttributes getSoftDeletedSession(String feedbackSessionName, String instructorId) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        return BACKDOOR.getSoftDeletedSession(feedbackSessionName, instructorId);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    InstructorAttributes getInstructor(String courseId, String instructorEmail) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        return BACKDOOR.getInstructor(courseId, instructorEmail);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    protected InstructorAttributes getInstructor(InstructorAttributes instructor) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        return getInstructor(instructor.getCourseId(), instructor.getEmail());"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * Gets registration key for a given instructor."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    protected String getKeyForInstructor(String courseId, String instructorEmail) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        return getInstructor(courseId, instructorEmail).getKey();"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    protected StudentAttributes getStudent(StudentAttributes student) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        return BACKDOOR.getStudent(student.getCourse(), student.getEmail());"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":324,"author":{"gitId":"-"},"content":"     * Gets registration key for a given student."},{"lineNumber":325,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    protected String getKeyForStudent(StudentAttributes student) {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        return getStudent(student).getKey();"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    protected AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return BACKDOOR.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    NotificationAttributes getNotification(String notificationId) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        return BACKDOOR.getNotification(notificationId);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    protected NotificationAttributes getNotification(NotificationAttributes notification) {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        return getNotification(notification.getNotificationId());"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    protected DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes deadlineExtension) {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return BACKDOOR.getDeadlineExtension("},{"lineNumber":347,"author":{"gitId":"-"},"content":"                deadlineExtension.getCourseId(), deadlineExtension.getFeedbackSessionName(),"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                deadlineExtension.getUserEmail(), deadlineExtension.getIsInstructor());"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    protected boolean doRemoveAndRestoreDataBundle(DataBundle testData) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            BACKDOOR.removeAndRestoreDataBundle(testData);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    protected SqlDataBundle doRemoveAndRestoreSqlDataBundle(SqlDataBundle testData) {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":365,"author":{"gitId":"-"},"content":"            return BACKDOOR.removeAndRestoreSqlDataBundle(testData);"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    protected boolean doPutDocuments(DataBundle testData) {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            BACKDOOR.putDocuments(testData);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":383,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":384,"author":{"gitId":"domoberzin"},"content":"    protected boolean doPutDocumentsSql(SqlDataBundle testData) {"},{"lineNumber":385,"author":{"gitId":"domoberzin"},"content":"        try {"},{"lineNumber":386,"author":{"gitId":"domoberzin"},"content":"            BACKDOOR.putSqlDocuments(testData);"},{"lineNumber":387,"author":{"gitId":"domoberzin"},"content":"            return true;"},{"lineNumber":388,"author":{"gitId":"domoberzin"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":389,"author":{"gitId":"domoberzin"},"content":"            e.printStackTrace();"},{"lineNumber":390,"author":{"gitId":"domoberzin"},"content":"            return false;"},{"lineNumber":391,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":392,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":11,"-":382}},{"path":"src/e2e/java/teammates/e2e/cases/InstructorNotificationsPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dishenggg"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorNotificationsPage;"},{"lineNumber":14,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":16,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.output.AccountData;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_NOTIFICATIONS_PAGE}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class InstructorNotificationsPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/InstructorNotificationsPageE2ETest.json\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":27,"author":{"gitId":"dishenggg"},"content":"        sqlTestData \u003d removeAndRestoreSqlDataBundle("},{"lineNumber":28,"author":{"gitId":"dishenggg"},"content":"                loadSqlDataBundle(\"/InstructorNotificationsPageE2ETest_SqlEntities.json\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":"        Account account \u003d sqlTestData.accounts.get(\"INotifs.instr\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        AppUrl notificationsPageUrl \u003d createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_NOTIFICATIONS_PAGE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        InstructorNotificationsPage notificationsPage \u003d loginToPage(notificationsPageUrl, InstructorNotificationsPage.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                account.getGoogleId());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ______TS(\"verify that only active notifications with correct target user are shown\");"},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":"        Notification[] notShownNotifications \u003d {"},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"notification2\"),"},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"expiredNotification1\"),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"        Notification[] shownNotifications \u003d {"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"notification1\"),"},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"notification3\"),"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"notification4\"),"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":"        Notification[] readNotifications \u003d {"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"                sqlTestData.notifications.get(\"notification4\"),"},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"        Set\u003cString\u003e readNotificationsIds \u003d Stream.of(readNotifications)"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":"                .map(readNotification -\u003e readNotification.getId().toString())"},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        notificationsPage.verifyNotShownNotifications(notShownNotifications);"},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        notificationsPage.verifyShownNotifications(shownNotifications, readNotificationsIds);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        ______TS(\"mark notification as read\");"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"        Notification notificationToMarkAsRead \u003d sqlTestData.notifications.get(\"notification3\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        notificationsPage.markNotificationAsRead(notificationToMarkAsRead);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        notificationsPage.verifyStatusMessage(\"Notification marked as read.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Verify that account\u0027s readNotifications attribute is updated"},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"        AccountData accountFromDb \u003d BACKDOOR.getAccountData(account.getGoogleId());"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"        assertTrue(accountFromDb.getReadNotifications().containsKey(notificationToMarkAsRead.getId().toString()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ______TS(\"notification banner is not visible\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(notificationsPage.isBannerVisible());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void classTeardown() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (NotificationAttributes notification : testData.notifications.values()) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            BACKDOOR.deleteNotification(notification.getNotificationId());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":28,"-":53}},{"path":"src/e2e/java/teammates/e2e/cases/InstructorSearchPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorCourseStudentDetailsEditPage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorCourseStudentDetailsViewPage;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorSearchPage;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorStudentRecordsPage;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SEARCH_PAGE}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class InstructorSearchPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        sqlTestData \u003d removeAndRestoreSqlDataBundle("},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"                loadSqlDataBundle(\"/InstructorSearchPageE2ETest_SqlEntities.json\"));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/InstructorSearchPageE2ETest.json\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        putDocuments(testData);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        String instructorId \u003d sqlTestData.accounts.get(\"instructor1OfCourse1\").getGoogleId();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AppUrl searchPageUrl \u003d createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_SEARCH_PAGE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        InstructorSearchPage searchPage \u003d loginToPage(searchPageUrl, InstructorSearchPage.class, instructorId);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ______TS(\"cannot click search button if no search term is entered\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        searchPage.search(\"\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ______TS(\"search with no result\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        searchPage.search(\"thiswillnothitanything\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        searchPage.verifyStatusMessage(\"No results found.\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        ______TS(\"search for students\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        searchPage.search(\"student2\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CourseAttributes course1 \u003d testData.courses.get(\"typicalCourse1\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        CourseAttributes course2 \u003d testData.courses.get(\"typicalCourse2\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        StudentAttributes[] studentsInCourse1 \u003d {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                testData.students.get(\"student2.2InCourse1\"),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                testData.students.get(\"student2InCourse1\"),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        StudentAttributes[] studentsInCourse2 \u003d {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                testData.students.get(\"student2.2InCourse2\"),"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                testData.students.get(\"student2InCourse2\"),"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Map\u003cString, StudentAttributes[]\u003e courseIdToStudents \u003d new HashMap\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        courseIdToStudents.put(course1.getId(), studentsInCourse1);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        courseIdToStudents.put(course2.getId(), studentsInCourse2);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Map\u003cString, CourseAttributes\u003e courseIdToCourse \u003d new HashMap\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        courseIdToCourse.put(course1.getId(), course1);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        courseIdToCourse.put(course2.getId(), course2);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentDetails(courseIdToCourse, courseIdToStudents);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ______TS(\"link: view student details page\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        StudentAttributes studentToView \u003d testData.students.get(\"student2.2InCourse1\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String studentEmail \u003d studentToView.getEmail();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        InstructorCourseStudentDetailsViewPage studentDetailsViewPage \u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                searchPage.clickViewStudent(course1, studentEmail);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        studentDetailsViewPage.verifyIsCorrectPage(course1.getId(), studentEmail);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        studentDetailsViewPage.closeCurrentWindowAndSwitchToParentWindow();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ______TS(\"link: edit student details page\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        InstructorCourseStudentDetailsEditPage studentDetailsEditPage \u003d"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                searchPage.clickEditStudent(course1, studentEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        studentDetailsEditPage.verifyIsCorrectPage(course1.getId(), studentEmail);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        studentDetailsEditPage.closeCurrentWindowAndSwitchToParentWindow();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ______TS(\"link: view all records page\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        InstructorStudentRecordsPage studentRecordsPage \u003d"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                searchPage.clickViewAllRecords(course1, studentEmail);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        studentRecordsPage.verifyIsCorrectPage(course1.getId(), studentToView.getName());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        studentRecordsPage.closeCurrentWindowAndSwitchToParentWindow();"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ______TS(\"action: delete student\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        StudentAttributes studentToDelete \u003d testData.students.get(\"student2InCourse2\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        searchPage.deleteStudent(course2, studentToDelete.getEmail());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        StudentAttributes[] studentsAfterDelete \u003d {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                testData.students.get(\"student2.2InCourse2\"),"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        searchPage.verifyStudentDetails(course2, studentsAfterDelete);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        verifyAbsentInDatabase(studentToDelete);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":3,"-":118}},{"path":"src/e2e/java/teammates/e2e/cases/NotificationBannerE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.StudentHomePage;"},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.output.AccountData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * SUT: The reusable notification banner, which can be displayed across many pages."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * {@link Const.WebPageURIs#STUDENT_HOME_PAGE} is used to test the behaviour of the banner in this case,"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * {@link Const.WebPageURIs#STUDENT_NOTIFICATIONS_PAGE}"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class NotificationBannerE2ETest extends BaseE2ETestCase {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/NotificationBannerE2ETest.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"        sqlTestData \u003d removeAndRestoreSqlDataBundle("},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":"                loadSqlDataBundle(\"/NotificationBannerE2ETest_SqlEntities.json\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    protected void testAll() {"},{"lineNumber":30,"author":{"gitId":"yuanxi1"},"content":"        Account account \u003d sqlTestData.accounts.get(\"NotifBanner.student\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        AppUrl studentHomePageUrl \u003d createFrontendUrl(Const.WebPageURIs.STUDENT_HOME_PAGE);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StudentHomePage studentHomePage \u003d loginToPage(studentHomePageUrl, StudentHomePage.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                account.getGoogleId());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ______TS(\"verify active notification with correct information is shown\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(studentHomePage.isBannerVisible());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ______TS(\"close notification\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // After user closes a notification banner, it should not appear till user refreshes page"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        studentHomePage.clickCloseNotificationBannerButton();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(studentHomePage.isBannerVisible());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        studentHomePage.reloadPage();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(studentHomePage.isBannerVisible());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ______TS(\"mark notification as read\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        studentHomePage.reloadPage();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(studentHomePage.isBannerVisible());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"        String notificationId \u003d studentHomePage.getNotificationId();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        studentHomePage.clickMarkAsReadButton();"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"        AccountData accountFromDb \u003d BACKDOOR.getAccountData(account.getGoogleId());"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        studentHomePage.verifyStatusMessage(\"Notification marked as read.\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(studentHomePage.isBannerVisible());"},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":"        assertTrue(accountFromDb.getReadNotifications().containsKey(notificationId));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void classTeardown() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        for (NotificationAttributes notification : testData.notifications.values()) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            BACKDOOR.deleteNotification(notification.getNotificationId());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":9,"-":56}},{"path":"src/e2e/java/teammates/e2e/cases/axe/AdminSearchPageAxeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases.axe;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.deque.html.axecore.results.Results;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.AdminSearchPage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#ADMIN_SEARCH_PAGE}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AdminSearchPageAxeTest extends BaseAxeTestCase {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/AdminSearchPageE2ETest.json\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        putDocuments(testData);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        sqlTestData \u003d loadSqlDataBundle(\"/AdminSearchPageE2ETest_SqlEntities.json\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        removeAndRestoreSqlDataBundle(sqlTestData);"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        putSqlDocuments(sqlTestData);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        AppUrl url \u003d createFrontendUrl(Const.WebPageURIs.ADMIN_SEARCH_PAGE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AdminSearchPage searchPage \u003d loginAdminToPage(url, AdminSearchPage.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        searchPage.inputSearchContent(testData.students.get(\"student1InCourse1\").getEmail());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Results results \u003d getAxeBuilder().analyze(searchPage.getBrowser().getDriver());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(formatViolations(results), results.violationFree());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":1,"-":47}},{"path":"src/e2e/java/teammates/e2e/cases/axe/InstructorSearchPageAxeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases.axe;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import com.deque.html.axecore.results.Results;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.InstructorSearchPage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SEARCH_PAGE}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class InstructorSearchPageAxeTest extends BaseAxeTestCase {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"        sqlTestData \u003d loadSqlDataBundle(\"/InstructorSearchPageE2ETest_SqlEntities.json\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        testData \u003d loadDataBundle(\"/InstructorSearchPageE2ETest.json\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        putDocuments(testData);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void testAll() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        AppUrl searchPageUrl \u003d createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_SEARCH_PAGE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        InstructorSearchPage searchPage \u003d loginToPage(searchPageUrl, InstructorSearchPage.class,"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"                sqlTestData.accounts.get(\"instructor1OfCourse1\").getGoogleId());"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        searchPage.search(\"student2\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Results results \u003d getAxeBuilder().analyze(searchPage.getBrowser().getDriver());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(formatViolations(results), results.violationFree());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":2,"-":45}},{"path":"src/e2e/java/teammates/e2e/cases/sql/AdminSearchPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.e2e.pageobjects.AdminSearchPage;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link Const.WebPageURIs#ADMIN_SEARCH_PAGE}."},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"public class AdminSearchPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    protected void prepareTestData() {"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        testData \u003d removeAndRestoreDataBundle(loadSqlDataBundle(\"/AdminSearchPageE2ESqlTest.json\"));"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"        putDocuments(testData);"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"    public void testAll() {"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        if (!TestProperties.INCLUDE_SEARCH_TESTS) {"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"        AppUrl url \u003d createFrontendUrl(Const.WebPageURIs.ADMIN_SEARCH_PAGE);"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"        AdminSearchPage searchPage \u003d loginAdminToPage(url, AdminSearchPage.class);"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d testData.courses.get(\"typicalCourse1\");"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":"        Student student \u003d testData.students.get(\"student1InCourse1\");"},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"        Instructor instructor \u003d testData.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"        AccountRequest accountRequest \u003d testData.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Search student email\");"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        String searchContent \u003d student.getEmail();"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        String studentDetails \u003d getExpectedStudentDetails(student);"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"        String studentManageAccountLink \u003d getExpectedStudentManageAccountLink(student);"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        String studentHomePageLink \u003d getExpectedStudentHomePageLink(student);"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"        int numExpandedRows \u003d getExpectedNumExpandedRows(student);"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyStudentRowContent(student, course, studentDetails, studentManageAccountLink,"},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"                studentHomePageLink);"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyStudentExpandedLinks(student, numExpandedRows);"},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Reset student google id\");"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"        searchPage.resetStudentGoogleId(student);"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"        student.setGoogleId(null);"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyStudentRowContentAfterReset(student, course);"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Regenerate registration key for a course student\");"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickExpandStudentLinks();"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":"        String originalJoinLink \u003d searchPage.getStudentJoinLink(student);"},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        searchPage.regenerateStudentKey(student);"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyRegenerateStudentKey(student, originalJoinLink);"},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        searchPage.waitForPageToLoad();"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Search for instructor email\");"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"        searchContent \u003d instructor.getEmail();"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":"        String instructorManageAccountLink \u003d getExpectedInstructorManageAccountLink(instructor);"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"        String instructorHomePageLink \u003d getExpectedInstructorHomePageLink(instructor);"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyInstructorRowContent(instructor, course, instructorManageAccountLink,"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"                instructorHomePageLink);"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyInstructorExpandedLinks(instructor);"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Reset instructor google id\");"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":"        searchPage.resetInstructorGoogleId(instructor);"},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyInstructorRowContentAfterReset(instructor, course);"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Regenerate registration key for an instructor\");"},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickExpandInstructorLinks();"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"        originalJoinLink \u003d searchPage.getInstructorJoinLink(instructor);"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"        searchPage.regenerateInstructorKey(instructor);"},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyRegenerateInstructorKey(instructor, originalJoinLink);"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"        searchPage.waitForPageToLoad();"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Search for account request by email\");"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"        searchContent \u003d accountRequest.getEmail();"},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyAccountRequestRowContent(accountRequest);"},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyAccountRequestExpandedLinks(accountRequest);"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Search common search key\");"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        searchContent \u003d \"Course1\";"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyStudentRowContentAfterReset(student, course);"},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyInstructorRowContentAfterReset(instructor, course);"},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyAccountRequestRowContent(accountRequest);"},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Expand and collapse links\");"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":"        searchPage.verifyLinkExpansionButtons(student, instructor, accountRequest);"},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Reset account request successful\");"},{"lineNumber":114,"author":{"gitId":"domoberzin"},"content":"        searchContent \u003d \"ASearch.instructor1@gmail.tmt\";"},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickResetAccountRequestButton(accountRequest);"},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"        assertNull(BACKDOOR.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()).getRegisteredAt());"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case: Delete account request successful\");"},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":"        accountRequest \u003d testData.accountRequests.get(\"unregisteredInstructor1\");"},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"        searchContent \u003d accountRequest.getEmail();"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"        searchPage.clearSearchBox();"},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":"        searchPage.inputSearchContent(searchContent);"},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickSearchButton();"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"        searchPage.clickDeleteAccountRequestButton(accountRequest);"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"        assertNull(BACKDOOR.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()));"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"    private String getExpectedStudentDetails(Student student) {"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":"        return String.format(\"%s [%s] (%s)\", student.getCourse().getId(),"},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"                student.getSection() \u003d\u003d null"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"                ? Const.DEFAULT_SECTION"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":"                : student.getSection().getName(), student.getTeam().getName());"},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"    private String getExpectedStudentHomePageLink(Student student) {"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":"        return student.isRegistered() ? createFrontendUrl(Const.WebPageURIs.STUDENT_HOME_PAGE)"},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"                .withUserId(student.getGoogleId())"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"                .toAbsoluteString()"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"                : \"\";"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"    private String getExpectedStudentManageAccountLink(Student student) {"},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"        return student.isRegistered() ? createFrontendUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)"},{"lineNumber":147,"author":{"gitId":"domoberzin"},"content":"                .withParam(Const.ParamsNames.INSTRUCTOR_ID, student.getGoogleId())"},{"lineNumber":148,"author":{"gitId":"domoberzin"},"content":"                .toAbsoluteString()"},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":"                : \"\";"},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":152,"author":{"gitId":"domoberzin"},"content":"    private int getExpectedNumExpandedRows(Student student) {"},{"lineNumber":153,"author":{"gitId":"domoberzin"},"content":"        int expectedNumExpandedRows \u003d 2;"},{"lineNumber":154,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackSession sessions : testData.feedbackSessions.values()) {"},{"lineNumber":155,"author":{"gitId":"domoberzin"},"content":"            if (sessions.getCourse().equals(student.getCourse())) {"},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":"                expectedNumExpandedRows +\u003d 1;"},{"lineNumber":157,"author":{"gitId":"domoberzin"},"content":"                if (sessions.getResultsVisibleFromTime().isBefore(Instant.now())) {"},{"lineNumber":158,"author":{"gitId":"domoberzin"},"content":"                    expectedNumExpandedRows +\u003d 1;"},{"lineNumber":159,"author":{"gitId":"domoberzin"},"content":"                }"},{"lineNumber":160,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"domoberzin"},"content":"        return expectedNumExpandedRows;"},{"lineNumber":163,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":165,"author":{"gitId":"domoberzin"},"content":"    private String getExpectedInstructorHomePageLink(Instructor instructor) {"},{"lineNumber":166,"author":{"gitId":"domoberzin"},"content":"        String googleId \u003d instructor.isRegistered() ? instructor.getGoogleId() : \"\";"},{"lineNumber":167,"author":{"gitId":"domoberzin"},"content":"        return createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE)"},{"lineNumber":168,"author":{"gitId":"domoberzin"},"content":"                .withUserId(googleId)"},{"lineNumber":169,"author":{"gitId":"domoberzin"},"content":"                .toAbsoluteString();"},{"lineNumber":170,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":172,"author":{"gitId":"domoberzin"},"content":"    private String getExpectedInstructorManageAccountLink(Instructor instructor) {"},{"lineNumber":173,"author":{"gitId":"domoberzin"},"content":"        String googleId \u003d instructor.isRegistered() ? instructor.getGoogleId() : \"\";"},{"lineNumber":174,"author":{"gitId":"domoberzin"},"content":"        return createFrontendUrl(Const.WebPageURIs.ADMIN_ACCOUNTS_PAGE)"},{"lineNumber":175,"author":{"gitId":"domoberzin"},"content":"                .withParam(Const.ParamsNames.INSTRUCTOR_ID, googleId)"},{"lineNumber":176,"author":{"gitId":"domoberzin"},"content":"                .toAbsoluteString();"},{"lineNumber":177,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":179,"author":{"gitId":"domoberzin"},"content":"    @AfterClass"},{"lineNumber":180,"author":{"gitId":"domoberzin"},"content":"    public void classTeardown() {"},{"lineNumber":181,"author":{"gitId":"domoberzin"},"content":"        for (AccountRequest request : testData.accountRequests.values()) {"},{"lineNumber":182,"author":{"gitId":"domoberzin"},"content":"            BACKDOOR.deleteAccountRequest(request.getEmail(), request.getInstitute());"},{"lineNumber":183,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":185}},{"path":"src/e2e/java/teammates/e2e/cases/sql/BaseE2ETestCase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.ITestContext;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.HttpRequestFailedException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.AppPage;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.Browser;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.DevServerLoginPage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.e2e.pageobjects.HomePage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.e2e.util.BackDoor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.e2e.util.EmailAccount;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.test.FileHelper;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.test.ThreadHelper;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackQuestionData;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponseData;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Base class for all browser tests."},{"lineNumber":35,"author":{"gitId":"-"},"content":" *"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis type of test has no knowledge of the workings of the application,"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * and can only communicate via the UI or via {@link BackDoor} to obtain/transmit data."},{"lineNumber":38,"author":{"gitId":"-"},"content":" */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public abstract class BaseE2ETestCase extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Backdoor used to call APIs."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected static final BackDoor BACKDOOR \u003d BackDoor.getInstance();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * DataBundle used in tests."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected SqlDataBundle testData;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private Browser browser;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void baseClassSetup() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        prepareTestData();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        prepareBrowser();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Prepares the browser used for the current test."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    protected void prepareBrowser() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        browser \u003d new Browser();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Prepares the test data used for the current test."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    protected abstract void prepareTestData();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Contains all the tests for the page."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis approach is chosen so that setup and teardown are only needed once per test page,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * thereby saving time. While it necessitates failed tests to be restarted from the beginning,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * test failures are rare and thus not causing significant overhead."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected abstract void testAll();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void baseClassTearDown(ITestContext context) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (browser \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        boolean isSuccess \u003d context.getFailedTests().getAllMethods()"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .noneMatch(method -\u003e method.getConstructorOrMethod().getMethod().getDeclaringClass() \u003d\u003d this.getClass());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (isSuccess || TestProperties.CLOSE_BROWSER_ON_FAILURE) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            browser.close();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * The base URL will be the value of test.app.frontend.url in test.properties."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * {@code relativeUrl} must start with a \"/\"."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    protected static AppUrl createFrontendUrl(String relativeUrl) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new AppUrl(TestProperties.TEAMMATES_FRONTEND_URL + relativeUrl);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Creates an {@link AppUrl} for the supplied {@code relativeUrl} parameter."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * The base URL will be the value of test.app.backend.url in test.properties."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * {@code relativeUrl} must start with a \"/\"."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    protected static AppUrl createBackendUrl(String relativeUrl) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new AppUrl(TestProperties.TEAMMATES_BACKEND_URL + relativeUrl);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Logs in to a page using the given credentials."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T loginToPage(AppUrl url, Class\u003cT\u003e typeOfPage, String userId) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // When not using dev server, Google blocks log in by automation."},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // To work around that, we inject the user cookie directly into the browser session."},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!TestProperties.isDevServer()) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            // In order for the cookie injection to work, we need to be in the domain."},{"lineNumber":124,"author":{"gitId":"-"},"content":"            // Use the home page to minimize the page load time."},{"lineNumber":125,"author":{"gitId":"-"},"content":"            browser.goToUrl(TestProperties.TEAMMATES_FRONTEND_URL);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String cookieValue \u003d BACKDOOR.getUserCookie(userId);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            browser.addCookie(Const.SecurityConfig.AUTH_COOKIE_NAME, cookieValue, true, true);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return getNewPageInstance(url, typeOfPage);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // This will be redirected to the dev server login page."},{"lineNumber":134,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        DevServerLoginPage loginPage \u003d AppPage.getNewPageInstance(browser, DevServerLoginPage.class);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        loginPage.loginAsUser(userId);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return getNewPageInstance(url, typeOfPage);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Logs in to a page using admin credentials."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T loginAdminToPage(AppUrl url, Class\u003cT\u003e typeOfPage) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return loginToPage(url, typeOfPage, TestProperties.TEST_ADMIN);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Equivalent to clicking the \u0027logout\u0027 link in the top menu of the page."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    protected void logout() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        AppUrl url \u003d createBackendUrl(Const.WebPageURIs.LOGOUT);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (!TestProperties.TEAMMATES_FRONTEND_URL.equals(TestProperties.TEAMMATES_BACKEND_URL)) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            url \u003d url.withParam(\"frontendUrl\", TestProperties.TEAMMATES_FRONTEND_URL);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        AppPage.getNewPageInstance(browser, HomePage.class).waitForPageToLoad();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Deletes file with fileName from the downloads folder."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    protected void deleteDownloadsFile(String fileName) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        String filePath \u003d TestProperties.TEST_DOWNLOADS_FOLDER + fileName;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        FileHelper.deleteFile(filePath);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Verifies downloaded file has correct fileName and contains expected content."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected void verifyDownloadedFile(String expectedFileName, List\u003cString\u003e expectedContent) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        String filePath \u003d TestProperties.TEST_DOWNLOADS_FOLDER + expectedFileName;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        int retryLimit \u003d TestProperties.TEST_TIMEOUT;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        boolean actual \u003d Files.exists(Paths.get(filePath));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        while (!actual \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(1000);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            actual \u003d Files.exists(Paths.get(filePath));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertTrue(actual);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            String actualContent \u003d FileHelper.readFile(filePath);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            for (String content : expectedContent) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                assertTrue(actualContent.contains(content));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Visits the URL and gets the page object representation of the visited web page in the browser."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    protected \u003cT extends AppPage\u003e T getNewPageInstance(AppUrl url, Class\u003cT\u003e typeOfPage) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        browser.goToUrl(url.toAbsoluteString());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return AppPage.getNewPageInstance(browser, typeOfPage);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Verifies that email with subject is found in inbox."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * Email used must be an authentic gmail account."},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    protected void verifyEmailSent(String email, String subject) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        if (TestProperties.isDevServer() || !TestProperties.INCLUDE_EMAIL_VERIFICATION) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (!TestProperties.TEST_EMAIL.equals(email)) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            fail(\"Email verification is allowed only on preset test email.\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        EmailAccount emailAccount \u003d new EmailAccount(email);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            emailAccount.getUserAuthenticated();"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            int retryLimit \u003d 5;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            boolean actual \u003d emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            while (!actual \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                retryLimit--;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                ThreadHelper.waitFor(1000);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                actual \u003d emailAccount.isRecentEmailWithSubjectPresent(subject, TestProperties.TEST_SENDER_EMAIL);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            assertTrue(actual);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            fail(\"Failed to verify email sent:\" + e);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Removes and restores the databundle using BACKDOOR."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    protected SqlDataBundle doRemoveAndRestoreDataBundle(SqlDataBundle testData) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return BACKDOOR.removeAndRestoreSqlDataBundle(testData);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    FeedbackQuestionData getFeedbackQuestion(String courseId, String feedbackSessionName, int qnNumber) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackQuestionData(courseId, feedbackSessionName, qnNumber);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    protected FeedbackQuestionData getFeedbackQuestion(FeedbackQuestion fq) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        return getFeedbackQuestion(fq.getCourseId(), fq.getFeedbackSession().getName(), fq.getQuestionNumber());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    FeedbackResponseData getFeedbackResponse(String questionId, String giver, String recipient) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        return BACKDOOR.getFeedbackResponseData(questionId, giver, recipient);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    protected FeedbackResponseData getFeedbackResponse(FeedbackResponse fr) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        return getFeedbackResponse(fr.getFeedbackQuestion().getId().toString(), fr.getGiver(), fr.getRecipient());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    StudentData getStudent(String courseId, String studentEmailAddress) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        return BACKDOOR.getStudentData(courseId, studentEmailAddress);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    protected StudentData getStudent(Student student) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return getStudent(student.getCourseId(), student.getEmail());"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":269,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"domoberzin"},"content":"     * Puts the documents in the database using BACKDOOR."},{"lineNumber":271,"author":{"gitId":"domoberzin"},"content":"     * @param dataBundle the data to be put in the database"},{"lineNumber":272,"author":{"gitId":"domoberzin"},"content":"     * @return the result of the operation"},{"lineNumber":273,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":274,"author":{"gitId":"domoberzin"},"content":"    protected String putDocuments(SqlDataBundle dataBundle) {"},{"lineNumber":275,"author":{"gitId":"domoberzin"},"content":"        try {"},{"lineNumber":276,"author":{"gitId":"domoberzin"},"content":"            return BACKDOOR.putSqlDocuments(dataBundle);"},{"lineNumber":277,"author":{"gitId":"domoberzin"},"content":"        } catch (HttpRequestFailedException e) {"},{"lineNumber":278,"author":{"gitId":"domoberzin"},"content":"            e.printStackTrace();"},{"lineNumber":279,"author":{"gitId":"domoberzin"},"content":"            return null;"},{"lineNumber":280,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":14,"-":268}},{"path":"src/e2e/java/teammates/e2e/cases/sql/FeedbackMcqQuestionE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dishenggg"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":3,"author":{"gitId":"dishenggg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":7,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":9,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;"},{"lineNumber":10,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqResponseDetails;"},{"lineNumber":11,"author":{"gitId":"dishenggg"},"content":"import teammates.e2e.pageobjects.FeedbackSubmitPage;"},{"lineNumber":12,"author":{"gitId":"dishenggg"},"content":"import teammates.e2e.pageobjects.InstructorFeedbackEditPage;"},{"lineNumber":13,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":14,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":16,"author":{"gitId":"dishenggg"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"dishenggg"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SESSION_EDIT_PAGE},"},{"lineNumber":18,"author":{"gitId":"dishenggg"},"content":" * {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}"},{"lineNumber":19,"author":{"gitId":"dishenggg"},"content":" * specifically for MCQ questions."},{"lineNumber":20,"author":{"gitId":"dishenggg"},"content":" */"},{"lineNumber":21,"author":{"gitId":"dishenggg"},"content":"public class FeedbackMcqQuestionE2ETest extends BaseFeedbackQuestionE2ETest {"},{"lineNumber":22,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":23,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"dishenggg"},"content":"    protected void prepareTestData() {"},{"lineNumber":25,"author":{"gitId":"dishenggg"},"content":"        testData \u003d removeAndRestoreDataBundle(loadSqlDataBundle(\"/FeedbackMcqQuestionE2ESqlTest.json\"));"},{"lineNumber":26,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":27,"author":{"gitId":"dishenggg"},"content":"        instructor \u003d testData.instructors.get(\"instructor\");"},{"lineNumber":28,"author":{"gitId":"dishenggg"},"content":"        course \u003d testData.courses.get(\"course\");"},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"        feedbackSession \u003d testData.feedbackSessions.get(\"openSession\");"},{"lineNumber":30,"author":{"gitId":"dishenggg"},"content":"        student \u003d testData.students.get(\"alice.tmms@FMcqQn.CS2104\");"},{"lineNumber":31,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":33,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"dishenggg"},"content":"    public void testAll() {"},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"        testEditPage();"},{"lineNumber":37,"author":{"gitId":"dishenggg"},"content":"        logout();"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":"        testSubmitPage();"},{"lineNumber":39,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":"    protected void testEditPage() {"},{"lineNumber":43,"author":{"gitId":"dishenggg"},"content":"        InstructorFeedbackEditPage feedbackEditPage \u003d loginToFeedbackEditPage();"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion loadedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"        FeedbackMcqQuestionDetails questionDetails \u003d (FeedbackMcqQuestionDetails) loadedQuestion"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"                .getQuestionDetailsCopy();"},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMcqQuestionDetails(1, questionDetails);"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"add new question\");"},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"        // add new question exactly like loaded question"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":"        loadedQuestion.setQuestionNumber(2);"},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.addMcqQuestion(loadedQuestion);"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMcqQuestionDetails(2, questionDetails);"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":58,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"copy question\");"},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion copiedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForSecondSession\");"},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":"        questionDetails \u003d (FeedbackMcqQuestionDetails) copiedQuestion.getQuestionDetailsCopy();"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.copyQuestion(copiedQuestion.getCourseId(),"},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":"                copiedQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":64,"author":{"gitId":"dishenggg"},"content":"        copiedQuestion.setFeedbackSession(feedbackSession);"},{"lineNumber":65,"author":{"gitId":"dishenggg"},"content":"        copiedQuestion.setQuestionNumber(3);"},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMcqQuestionDetails(3, questionDetails);"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(copiedQuestion);"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"edit question\");"},{"lineNumber":71,"author":{"gitId":"dishenggg"},"content":"        questionDetails \u003d (FeedbackMcqQuestionDetails) loadedQuestion.getQuestionDetailsCopy();"},{"lineNumber":72,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setHasAssignedWeights(false);"},{"lineNumber":73,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMcqWeights(new ArrayList\u003c\u003e());"},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setOtherEnabled(false);"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setQuestionDropdownEnabled(false);"},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMcqOtherWeight(0);"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"        List\u003cString\u003e choices \u003d questionDetails.getMcqChoices();"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":"        choices.add(\"Edited choice\");"},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMcqChoices(choices);"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"        loadedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\").makeDeepCopy(feedbackSession);"},{"lineNumber":81,"author":{"gitId":"dishenggg"},"content":"        loadedQuestion.setQuestionDetails(questionDetails);"},{"lineNumber":82,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.editMcqQuestion(2, questionDetails);"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.waitForPageToLoad();"},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMcqQuestionDetails(2, questionDetails);"},{"lineNumber":86,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":89,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"dishenggg"},"content":"    protected void testSubmitPage() {"},{"lineNumber":91,"author":{"gitId":"dishenggg"},"content":"        FeedbackSubmitPage feedbackSubmitPage \u003d loginToFeedbackSubmitPage();"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":93,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":94,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion question \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":95,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.verifyMcqQuestion(1, \"\","},{"lineNumber":96,"author":{"gitId":"dishenggg"},"content":"                (FeedbackMcqQuestionDetails) question.getQuestionDetailsCopy());"},{"lineNumber":97,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":98,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify question with generated options\");"},{"lineNumber":99,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.verifyGeneratedMcqQuestion(3, \"\", getGeneratedStudentOptions());"},{"lineNumber":100,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":101,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"submit response\");"},{"lineNumber":102,"author":{"gitId":"dishenggg"},"content":"        FeedbackResponse response \u003d getResponse(question, false, \"UI\");"},{"lineNumber":103,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.fillMcqResponse(1, \"\", response);"},{"lineNumber":104,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":105,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":106,"author":{"gitId":"dishenggg"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":107,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":108,"author":{"gitId":"dishenggg"},"content":"        // ______TS(\"check previous response\");"},{"lineNumber":109,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":110,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.verifyMcqResponse(1, \"\", response);"},{"lineNumber":111,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":112,"author":{"gitId":"dishenggg"},"content":"        // ______TS(\"edit response\");"},{"lineNumber":113,"author":{"gitId":"dishenggg"},"content":"        // response \u003d getResponse(questionId, true, \"This is the edited response.\");"},{"lineNumber":114,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.fillMcqResponse(1, \"\", response);"},{"lineNumber":115,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":116,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":117,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":118,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.verifyMcqResponse(1, \"\", response);"},{"lineNumber":119,"author":{"gitId":"dishenggg"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":120,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":"    private List\u003cString\u003e getGeneratedStudentOptions() {"},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"        return testData.students.values().stream()"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":"                .filter(s -\u003e s.getCourse().equals(student.getCourse()))"},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"                .map(s -\u003e s.getName() + \" (\" + s.getTeam().getName() + \")\")"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":"                .collect(Collectors.toList());"},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":129,"author":{"gitId":"dishenggg"},"content":"    private FeedbackResponse getResponse(FeedbackQuestion feedbackQuestion, boolean isOther, String answer) {"},{"lineNumber":130,"author":{"gitId":"dishenggg"},"content":"        FeedbackMcqResponseDetails details \u003d new FeedbackMcqResponseDetails();"},{"lineNumber":131,"author":{"gitId":"dishenggg"},"content":"        if (isOther) {"},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"            details.setOther(true);"},{"lineNumber":133,"author":{"gitId":"dishenggg"},"content":"            details.setOtherFieldContent(answer);"},{"lineNumber":134,"author":{"gitId":"dishenggg"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"dishenggg"},"content":"            details.setAnswer(answer);"},{"lineNumber":136,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"dishenggg"},"content":"        return FeedbackResponse.makeResponse(feedbackQuestion, student.getEmail(), null, instructor.getEmail(), null,"},{"lineNumber":138,"author":{"gitId":"dishenggg"},"content":"                details);"},{"lineNumber":139,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"dishenggg"},"content":"}"}],"authorContributionMap":{"dishenggg":140}},{"path":"src/e2e/java/teammates/e2e/cases/sql/FeedbackMsqQuestionE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dishenggg"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":3,"author":{"gitId":"dishenggg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":8,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":10,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":11,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqResponseDetails;"},{"lineNumber":12,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.Const;"},{"lineNumber":13,"author":{"gitId":"dishenggg"},"content":"import teammates.e2e.pageobjects.FeedbackSubmitPage;"},{"lineNumber":14,"author":{"gitId":"dishenggg"},"content":"import teammates.e2e.pageobjects.InstructorFeedbackEditPage;"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":16,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":17,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":18,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":19,"author":{"gitId":"dishenggg"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"dishenggg"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SESSION_EDIT_PAGE},"},{"lineNumber":21,"author":{"gitId":"dishenggg"},"content":" * {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}"},{"lineNumber":22,"author":{"gitId":"dishenggg"},"content":" * specifically for msq questions."},{"lineNumber":23,"author":{"gitId":"dishenggg"},"content":" */"},{"lineNumber":24,"author":{"gitId":"dishenggg"},"content":"public class FeedbackMsqQuestionE2ETest extends BaseFeedbackQuestionE2ETest {"},{"lineNumber":25,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"dishenggg"},"content":"    protected void prepareTestData() {"},{"lineNumber":27,"author":{"gitId":"dishenggg"},"content":"        testData \u003d removeAndRestoreDataBundle(loadSqlDataBundle(\"/FeedbackMsqQuestionE2ESqlTest.json\"));"},{"lineNumber":28,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"        instructor \u003d testData.instructors.get(\"instructor\");"},{"lineNumber":30,"author":{"gitId":"dishenggg"},"content":"        course \u003d testData.courses.get(\"course\");"},{"lineNumber":31,"author":{"gitId":"dishenggg"},"content":"        feedbackSession \u003d testData.feedbackSessions.get(\"openSession\");"},{"lineNumber":32,"author":{"gitId":"dishenggg"},"content":"        student \u003d testData.students.get(\"alice.tmms@FMsqQn.CS2104\");"},{"lineNumber":33,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":35,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"dishenggg"},"content":"    public void testAll() {"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":"        testEditPage();"},{"lineNumber":39,"author":{"gitId":"dishenggg"},"content":"        logout();"},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":"        testSubmitPage();"},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":43,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"    protected void testEditPage() {"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"        InstructorFeedbackEditPage feedbackEditPage \u003d loginToFeedbackEditPage();"},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion loadedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\")"},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"                .makeDeepCopy(feedbackSession);"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":"        FeedbackMsqQuestionDetails questionDetails \u003d (FeedbackMsqQuestionDetails) loadedQuestion"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"                .getQuestionDetailsCopy();"},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMsqQuestionDetails(1, questionDetails);"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"add new question\");"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":"        // add new question exactly like loaded question"},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"        loadedQuestion.setQuestionNumber(2);"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.addMsqQuestion(loadedQuestion);"},{"lineNumber":58,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMsqQuestionDetails(2, questionDetails);"},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"copy question\");"},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion copiedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForSecondSession\");"},{"lineNumber":64,"author":{"gitId":"dishenggg"},"content":"        questionDetails \u003d (FeedbackMsqQuestionDetails) copiedQuestion.getQuestionDetailsCopy();"},{"lineNumber":65,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.copyQuestion(copiedQuestion.getCourseId(),"},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":"                copiedQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"        copiedQuestion.setFeedbackSession(feedbackSession);"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"        copiedQuestion.setQuestionNumber(3);"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMsqQuestionDetails(3, questionDetails);"},{"lineNumber":71,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(copiedQuestion);"},{"lineNumber":72,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":73,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"edit question\");"},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"        questionDetails \u003d (FeedbackMsqQuestionDetails) loadedQuestion.getQuestionDetailsCopy();"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setHasAssignedWeights(false);"},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMsqWeights(new ArrayList\u003c\u003e());"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setOtherEnabled(false);"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMsqOtherWeight(0);"},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMaxSelectableChoices(Const.POINTS_NO_VALUE);"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"        List\u003cString\u003e choices \u003d questionDetails.getMsqChoices();"},{"lineNumber":81,"author":{"gitId":"dishenggg"},"content":"        choices.add(\"Edited choice\");"},{"lineNumber":82,"author":{"gitId":"dishenggg"},"content":"        questionDetails.setMsqChoices(choices);"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":"        loadedQuestion.setQuestionDetails(questionDetails);"},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.editMsqQuestion(2, questionDetails);"},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.waitForPageToLoad();"},{"lineNumber":86,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":"        feedbackEditPage.verifyMsqQuestionDetails(2, questionDetails);"},{"lineNumber":88,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":89,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":91,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":"    protected void testSubmitPage() {"},{"lineNumber":93,"author":{"gitId":"dishenggg"},"content":"        FeedbackSubmitPage feedbackSubmitPage \u003d loginToFeedbackSubmitPage();"},{"lineNumber":94,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":95,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":96,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion question \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":97,"author":{"gitId":"dishenggg"},"content":"        Student receiver \u003d testData.students.get(\"benny.tmms@FMsqQn.CS2104\");"},{"lineNumber":98,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.verifyMsqQuestion(1, receiver.getName(),"},{"lineNumber":99,"author":{"gitId":"dishenggg"},"content":"                (FeedbackMsqQuestionDetails) question.getQuestionDetailsCopy());"},{"lineNumber":100,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":101,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"verify loaded question with generated options\");"},{"lineNumber":102,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion generatedQn \u003d testData.feedbackQuestions.get(\"qn1ForSecondSession\");"},{"lineNumber":103,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.verifyGeneratedMsqQuestion(3, \"\","},{"lineNumber":104,"author":{"gitId":"dishenggg"},"content":"                (FeedbackMsqQuestionDetails) generatedQn.getQuestionDetailsCopy(), getGeneratedTeams());"},{"lineNumber":105,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":106,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"submit response\");"},{"lineNumber":107,"author":{"gitId":"dishenggg"},"content":"        List\u003cString\u003e answers \u003d Arrays.asList(\"Leadership\", \"This is the other response.\");"},{"lineNumber":108,"author":{"gitId":"dishenggg"},"content":"        FeedbackResponse response \u003d getResponse(question, receiver, answers.get(answers.size() - 1), answers);"},{"lineNumber":109,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.fillMsqResponse(1, receiver.getName(), response);"},{"lineNumber":110,"author":{"gitId":"dishenggg"},"content":"        feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":111,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":112,"author":{"gitId":"dishenggg"},"content":"        // TODO: uncomment when SubmitFeedbackResponse is working"},{"lineNumber":113,"author":{"gitId":"dishenggg"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":114,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":115,"author":{"gitId":"dishenggg"},"content":"        // ______TS(\"check previous response\");"},{"lineNumber":116,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":117,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.verifyMsqResponse(1, receiver.getName(), response);"},{"lineNumber":118,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":119,"author":{"gitId":"dishenggg"},"content":"        // ______TS(\"edit response\");"},{"lineNumber":120,"author":{"gitId":"dishenggg"},"content":"        // answers \u003d Arrays.asList(\"\");"},{"lineNumber":121,"author":{"gitId":"dishenggg"},"content":"        // response \u003d getResponse(question, receiver, \"\", answers);"},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.fillMsqResponse(1, receiver.getName(), response);"},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":"        // feedbackSubmitPage.verifyMsqResponse(1, receiver.getName(), response);"},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":128,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":130,"author":{"gitId":"dishenggg"},"content":"    private List\u003cString\u003e getGeneratedTeams() {"},{"lineNumber":131,"author":{"gitId":"dishenggg"},"content":"        return testData.students.values().stream()"},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"                .filter(s -\u003e s.getCourse().equals(student.getCourse()))"},{"lineNumber":133,"author":{"gitId":"dishenggg"},"content":"                .map(s -\u003e s.getTeam().getName())"},{"lineNumber":134,"author":{"gitId":"dishenggg"},"content":"                .distinct()"},{"lineNumber":135,"author":{"gitId":"dishenggg"},"content":"                .collect(Collectors.toList());"},{"lineNumber":136,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":138,"author":{"gitId":"dishenggg"},"content":"    private FeedbackResponse getResponse(FeedbackQuestion feedbackQuestion, Student receiver, String other,"},{"lineNumber":139,"author":{"gitId":"dishenggg"},"content":"            List\u003cString\u003e answers) {"},{"lineNumber":140,"author":{"gitId":"dishenggg"},"content":"        FeedbackMsqResponseDetails details \u003d new FeedbackMsqResponseDetails();"},{"lineNumber":141,"author":{"gitId":"dishenggg"},"content":"        if (!other.isEmpty()) {"},{"lineNumber":142,"author":{"gitId":"dishenggg"},"content":"            details.setOther(true);"},{"lineNumber":143,"author":{"gitId":"dishenggg"},"content":"            details.setOtherFieldContent(other);"},{"lineNumber":144,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"dishenggg"},"content":"        details.setAnswers(answers);"},{"lineNumber":146,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":147,"author":{"gitId":"dishenggg"},"content":"        return FeedbackResponse.makeResponse(feedbackQuestion, student.getEmail(), student.getSection(),"},{"lineNumber":148,"author":{"gitId":"dishenggg"},"content":"                receiver.getEmail(), receiver.getSection(), details);"},{"lineNumber":149,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"dishenggg"},"content":"}"}],"authorContributionMap":{"dishenggg":150}},{"path":"src/e2e/java/teammates/e2e/cases/sql/FeedbackNumScaleQuestionE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marquestye"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":3,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":5,"author":{"gitId":"marquestye"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;"},{"lineNumber":6,"author":{"gitId":"marquestye"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;"},{"lineNumber":7,"author":{"gitId":"marquestye"},"content":"import teammates.e2e.pageobjects.FeedbackSubmitPage;"},{"lineNumber":8,"author":{"gitId":"marquestye"},"content":"import teammates.e2e.pageobjects.InstructorFeedbackEditPage;"},{"lineNumber":9,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":10,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":11,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":12,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":13,"author":{"gitId":"marquestye"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"marquestye"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SESSION_EDIT_PAGE}, {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}"},{"lineNumber":15,"author":{"gitId":"marquestye"},"content":" *      specifically for NumScale questions."},{"lineNumber":16,"author":{"gitId":"marquestye"},"content":" */"},{"lineNumber":17,"author":{"gitId":"marquestye"},"content":"public class FeedbackNumScaleQuestionE2ETest extends BaseFeedbackQuestionE2ETest {"},{"lineNumber":18,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":19,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"marquestye"},"content":"    protected void prepareTestData() {"},{"lineNumber":21,"author":{"gitId":"marquestye"},"content":"        testData \u003d removeAndRestoreDataBundle(loadSqlDataBundle(\"/FeedbackNumScaleQuestionE2ESqlTest.json\"));"},{"lineNumber":22,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":23,"author":{"gitId":"marquestye"},"content":"        instructor \u003d testData.instructors.get(\"instructor\");"},{"lineNumber":24,"author":{"gitId":"marquestye"},"content":"        course \u003d testData.courses.get(\"course\");"},{"lineNumber":25,"author":{"gitId":"marquestye"},"content":"        feedbackSession \u003d testData.feedbackSessions.get(\"openSession\");"},{"lineNumber":26,"author":{"gitId":"marquestye"},"content":"        student \u003d testData.students.get(\"alice.tmms@FNumScaleQn.CS2104\");"},{"lineNumber":27,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":29,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"marquestye"},"content":"    public void testAll() {"},{"lineNumber":32,"author":{"gitId":"marquestye"},"content":"        testEditPage();"},{"lineNumber":33,"author":{"gitId":"marquestye"},"content":"        logout();"},{"lineNumber":34,"author":{"gitId":"marquestye"},"content":"        testSubmitPage();"},{"lineNumber":35,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":37,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"marquestye"},"content":"    protected void testEditPage() {"},{"lineNumber":39,"author":{"gitId":"marquestye"},"content":"        InstructorFeedbackEditPage feedbackEditPage \u003d loginToFeedbackEditPage();"},{"lineNumber":40,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":41,"author":{"gitId":"marquestye"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":42,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion loadedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":43,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleQuestionDetails questionDetails \u003d"},{"lineNumber":44,"author":{"gitId":"marquestye"},"content":"                (FeedbackNumericalScaleQuestionDetails) loadedQuestion.getQuestionDetailsCopy();"},{"lineNumber":45,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.verifyNumScaleQuestionDetails(1, questionDetails);"},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"        ______TS(\"add new question\");"},{"lineNumber":48,"author":{"gitId":"marquestye"},"content":"        // add new question exactly like loaded question"},{"lineNumber":49,"author":{"gitId":"marquestye"},"content":"        loadedQuestion.setQuestionNumber(2);"},{"lineNumber":50,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.addNumScaleQuestion(loadedQuestion);"},{"lineNumber":51,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.waitUntilAnimationFinish();"},{"lineNumber":52,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":53,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.verifyNumScaleQuestionDetails(2, questionDetails);"},{"lineNumber":54,"author":{"gitId":"marquestye"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":55,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":56,"author":{"gitId":"marquestye"},"content":"        ______TS(\"copy question\");"},{"lineNumber":57,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion copiedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForSecondSession\");"},{"lineNumber":58,"author":{"gitId":"marquestye"},"content":"        questionDetails \u003d (FeedbackNumericalScaleQuestionDetails) copiedQuestion.getQuestionDetailsCopy();"},{"lineNumber":59,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.copyQuestion(copiedQuestion.getCourseId(),"},{"lineNumber":60,"author":{"gitId":"marquestye"},"content":"                copiedQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":61,"author":{"gitId":"marquestye"},"content":"        copiedQuestion.setQuestionNumber(3);"},{"lineNumber":62,"author":{"gitId":"marquestye"},"content":"        copiedQuestion.setFeedbackSession(feedbackSession);"},{"lineNumber":63,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":64,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.verifyNumScaleQuestionDetails(3, questionDetails);"},{"lineNumber":65,"author":{"gitId":"marquestye"},"content":"        verifyPresentInDatabase(copiedQuestion);"},{"lineNumber":66,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":67,"author":{"gitId":"marquestye"},"content":"        ______TS(\"edit question\");"},{"lineNumber":68,"author":{"gitId":"marquestye"},"content":"        questionDetails \u003d (FeedbackNumericalScaleQuestionDetails) loadedQuestion.getQuestionDetailsCopy();"},{"lineNumber":69,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleQuestionDetails newQuestionDetails \u003d"},{"lineNumber":70,"author":{"gitId":"marquestye"},"content":"                (FeedbackNumericalScaleQuestionDetails) questionDetails.getDeepCopy();"},{"lineNumber":71,"author":{"gitId":"marquestye"},"content":"        newQuestionDetails.setMinScale(0);"},{"lineNumber":72,"author":{"gitId":"marquestye"},"content":"        newQuestionDetails.setStep(1);"},{"lineNumber":73,"author":{"gitId":"marquestye"},"content":"        newQuestionDetails.setMaxScale(100);"},{"lineNumber":74,"author":{"gitId":"marquestye"},"content":"        loadedQuestion.setQuestionDetails(newQuestionDetails);"},{"lineNumber":75,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.editNumScaleQuestion(2, newQuestionDetails);"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.waitForPageToLoad();"},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":78,"author":{"gitId":"marquestye"},"content":"        feedbackEditPage.verifyNumScaleQuestionDetails(2, newQuestionDetails);"},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"        // reset question details to original"},{"lineNumber":82,"author":{"gitId":"marquestye"},"content":"        loadedQuestion.setQuestionDetails(questionDetails);"},{"lineNumber":83,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":85,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":"    protected void testSubmitPage() {"},{"lineNumber":87,"author":{"gitId":"marquestye"},"content":"        FeedbackSubmitPage feedbackSubmitPage \u003d loginToFeedbackSubmitPage();"},{"lineNumber":88,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":89,"author":{"gitId":"marquestye"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":90,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion question \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":91,"author":{"gitId":"marquestye"},"content":"        Student receiver \u003d testData.students.get(\"benny.tmms@FNumScaleQn.CS2104\");"},{"lineNumber":92,"author":{"gitId":"marquestye"},"content":"        feedbackSubmitPage.verifyNumScaleQuestion(1, receiver.getTeamName(),"},{"lineNumber":93,"author":{"gitId":"marquestye"},"content":"                (FeedbackNumericalScaleQuestionDetails) question.getQuestionDetailsCopy());"},{"lineNumber":94,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":95,"author":{"gitId":"marquestye"},"content":"        ______TS(\"submit response\");"},{"lineNumber":96,"author":{"gitId":"marquestye"},"content":"        FeedbackResponse response \u003d getResponse(question, receiver, 5.4);"},{"lineNumber":97,"author":{"gitId":"marquestye"},"content":"        feedbackSubmitPage.fillNumScaleResponse(1, receiver.getTeamName(), response);"},{"lineNumber":98,"author":{"gitId":"marquestye"},"content":"        feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":99,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":100,"author":{"gitId":"marquestye"},"content":"        // TODO: uncomment when SubmitFeedbackResponse is working"},{"lineNumber":101,"author":{"gitId":"marquestye"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":102,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":103,"author":{"gitId":"marquestye"},"content":"        // ______TS(\"check previous response\");"},{"lineNumber":104,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":105,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage.verifyNumScaleResponse(1, receiver.getTeamName(), response);"},{"lineNumber":106,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":107,"author":{"gitId":"marquestye"},"content":"        // ______TS(\"edit response\");"},{"lineNumber":108,"author":{"gitId":"marquestye"},"content":"        // response \u003d getResponse(question, receiver, 10.0);"},{"lineNumber":109,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage.fillNumScaleResponse(1, receiver.getTeamName(), response);"},{"lineNumber":110,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":111,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":112,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":113,"author":{"gitId":"marquestye"},"content":"        // feedbackSubmitPage.verifyNumScaleResponse(1, receiver.getTeamName(), response);"},{"lineNumber":114,"author":{"gitId":"marquestye"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":115,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":117,"author":{"gitId":"marquestye"},"content":"    private FeedbackResponse getResponse(FeedbackQuestion feedbackQuestion, Student receiver, Double answer) {"},{"lineNumber":118,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleResponseDetails details \u003d new FeedbackNumericalScaleResponseDetails();"},{"lineNumber":119,"author":{"gitId":"marquestye"},"content":"        details.setAnswer(answer);"},{"lineNumber":120,"author":{"gitId":"marquestye"},"content":"        return FeedbackResponse.makeResponse("},{"lineNumber":121,"author":{"gitId":"marquestye"},"content":"                feedbackQuestion, student.getEmail(), null, receiver.getTeamName(), null, details);"},{"lineNumber":122,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":124,"author":{"gitId":"marquestye"},"content":"}"}],"authorContributionMap":{"marquestye":124}},{"path":"src/e2e/java/teammates/e2e/cases/sql/FeedbackRankOptionQuestionE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mingyuanc"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":6,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;"},{"lineNumber":9,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.questions.FeedbackRankQuestionDetails;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"mingyuanc"},"content":"import teammates.e2e.pageobjects.FeedbackSubmitPage;"},{"lineNumber":13,"author":{"gitId":"mingyuanc"},"content":"import teammates.e2e.pageobjects.InstructorFeedbackEditPage;"},{"lineNumber":14,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":15,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":16,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":17,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":18,"author":{"gitId":"mingyuanc"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_SESSION_EDIT_PAGE},"},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":" * {@link Const.WebPageURIs#SESSION_SUBMISSION_PAGE}"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":" * specifically for RankOption questions."},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":" */"},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"public class FeedbackRankOptionQuestionE2ETest extends BaseFeedbackQuestionE2ETest {"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":"    protected void prepareTestData() {"},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":"        testData \u003d removeAndRestoreDataBundle(loadSqlDataBundle(\"/FeedbackRankOptionQuestionE2ESqlTest.json\"));"},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":"        instructor \u003d testData.instructors.get(\"instructor\");"},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":"        course \u003d testData.courses.get(\"course\");"},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"        feedbackSession \u003d testData.feedbackSessions.get(\"openSession\");"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":"        student \u003d testData.students.get(\"alice.tmms@FRankOptQn.CS2104\");"},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":"    public void testAll() {"},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":"        testEditPage();"},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"        logout();"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":"        testSubmitPage();"},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":43,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"mingyuanc"},"content":"    protected void testEditPage() {"},{"lineNumber":45,"author":{"gitId":"mingyuanc"},"content":"        InstructorFeedbackEditPage feedbackEditPage \u003d loginToFeedbackEditPage();"},{"lineNumber":46,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":47,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":48,"author":{"gitId":"mingyuanc"},"content":"        FeedbackQuestion loadedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\")"},{"lineNumber":49,"author":{"gitId":"mingyuanc"},"content":"                .makeDeepCopy(feedbackSession);"},{"lineNumber":50,"author":{"gitId":"mingyuanc"},"content":"        FeedbackRankOptionsQuestionDetails questionDetails \u003d (FeedbackRankOptionsQuestionDetails) loadedQuestion"},{"lineNumber":51,"author":{"gitId":"mingyuanc"},"content":"                .getQuestionDetailsCopy();"},{"lineNumber":52,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.verifyRankQuestionDetails(1, questionDetails);"},{"lineNumber":53,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"add new question\");"},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"        // add new question exactly like loaded question"},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":"        loadedQuestion.setQuestionNumber(2);"},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.addRankOptionsQuestion(loadedQuestion);"},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.verifyRankQuestionDetails(2, questionDetails);"},{"lineNumber":60,"author":{"gitId":"mingyuanc"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":61,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":62,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"copy question\");"},{"lineNumber":63,"author":{"gitId":"mingyuanc"},"content":"        FeedbackQuestion copiedQuestion \u003d testData.feedbackQuestions.get(\"qn1ForSecondSession\");"},{"lineNumber":64,"author":{"gitId":"mingyuanc"},"content":"        questionDetails \u003d (FeedbackRankOptionsQuestionDetails) copiedQuestion.getQuestionDetailsCopy();"},{"lineNumber":65,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.copyQuestion(copiedQuestion.getCourseId(),"},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"                copiedQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":"        copiedQuestion.setFeedbackSession(feedbackSession);"},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":"        copiedQuestion.setQuestionNumber(3);"},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.verifyRankQuestionDetails(3, questionDetails);"},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"        verifyPresentInDatabase(copiedQuestion);"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"edit question\");"},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"        questionDetails \u003d (FeedbackRankOptionsQuestionDetails) loadedQuestion.getQuestionDetailsCopy();"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":"        List\u003cString\u003e options \u003d questionDetails.getOptions();"},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":"        options.remove(0);"},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":"        options.set(1, \"Edited option.\");"},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":"        questionDetails.setOptions(options);"},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"        questionDetails.setAreDuplicatesAllowed(true);"},{"lineNumber":80,"author":{"gitId":"mingyuanc"},"content":"        questionDetails.setMaxOptionsToBeRanked(Const.POINTS_NO_VALUE);"},{"lineNumber":81,"author":{"gitId":"mingyuanc"},"content":"        questionDetails.setMinOptionsToBeRanked(1);"},{"lineNumber":82,"author":{"gitId":"mingyuanc"},"content":"        loadedQuestion.setQuestionDetails(questionDetails);"},{"lineNumber":83,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.editRankQuestion(2, questionDetails);"},{"lineNumber":84,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.waitForPageToLoad();"},{"lineNumber":85,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":86,"author":{"gitId":"mingyuanc"},"content":"        feedbackEditPage.verifyRankQuestionDetails(2, questionDetails);"},{"lineNumber":87,"author":{"gitId":"mingyuanc"},"content":"        verifyPresentInDatabase(loadedQuestion);"},{"lineNumber":88,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":90,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"mingyuanc"},"content":"    protected void testSubmitPage() {"},{"lineNumber":92,"author":{"gitId":"mingyuanc"},"content":"        FeedbackSubmitPage feedbackSubmitPage \u003d loginToFeedbackSubmitPage();"},{"lineNumber":93,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":94,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"verify loaded question\");"},{"lineNumber":95,"author":{"gitId":"mingyuanc"},"content":"        FeedbackQuestion question \u003d testData.feedbackQuestions.get(\"qn1ForFirstSession\");"},{"lineNumber":96,"author":{"gitId":"mingyuanc"},"content":"        Student receiver \u003d testData.students.get(\"benny.tmms@FRankOptQn.CS2104\");"},{"lineNumber":97,"author":{"gitId":"mingyuanc"},"content":"        feedbackSubmitPage.verifyRankQuestion(1, receiver.getName(),"},{"lineNumber":98,"author":{"gitId":"mingyuanc"},"content":"                (FeedbackRankQuestionDetails) question.getQuestionDetailsCopy());"},{"lineNumber":99,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":100,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"submit response\");"},{"lineNumber":101,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponse response \u003d getResponse(question, receiver, Arrays.asList(2, 1, 3,"},{"lineNumber":102,"author":{"gitId":"mingyuanc"},"content":"                Const.POINTS_NOT_SUBMITTED));"},{"lineNumber":103,"author":{"gitId":"mingyuanc"},"content":"        feedbackSubmitPage.fillRankOptionResponse(1, receiver.getName(), response);"},{"lineNumber":104,"author":{"gitId":"mingyuanc"},"content":"        feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":105,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":106,"author":{"gitId":"mingyuanc"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":107,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":108,"author":{"gitId":"mingyuanc"},"content":"        // ______TS(\"check previous response\");"},{"lineNumber":109,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":110,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage.verifyRankOptionResponse(1, receiver.getName(), response);"},{"lineNumber":111,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":112,"author":{"gitId":"mingyuanc"},"content":"        // ______TS(\"edit response\");"},{"lineNumber":113,"author":{"gitId":"mingyuanc"},"content":"        // response \u003d getResponse(questionId, receiver,"},{"lineNumber":114,"author":{"gitId":"mingyuanc"},"content":"        // Arrays.asList(Const.POINTS_NOT_SUBMITTED, 1, 3, 2));"},{"lineNumber":115,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage.fillRankOptionResponse(1, receiver.getName(), response);"},{"lineNumber":116,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage.clickSubmitQuestionButton(1);"},{"lineNumber":117,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":118,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage \u003d getFeedbackSubmitPage();"},{"lineNumber":119,"author":{"gitId":"mingyuanc"},"content":"        // feedbackSubmitPage.verifyRankOptionResponse(1, receiver.getName(), response);"},{"lineNumber":120,"author":{"gitId":"mingyuanc"},"content":"        // verifyPresentInDatabase(response);"},{"lineNumber":121,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":123,"author":{"gitId":"mingyuanc"},"content":"    private FeedbackResponse getResponse(FeedbackQuestion question, Student receiver, List\u003cInteger\u003e answers) {"},{"lineNumber":124,"author":{"gitId":"mingyuanc"},"content":"        FeedbackRankOptionsResponseDetails details \u003d new FeedbackRankOptionsResponseDetails();"},{"lineNumber":125,"author":{"gitId":"mingyuanc"},"content":"        details.setAnswers(answers);"},{"lineNumber":126,"author":{"gitId":"mingyuanc"},"content":"        return FeedbackResponse.makeResponse(question, student.getEmail(), null, receiver.getEmail(), null, details);"},{"lineNumber":127,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"mingyuanc"},"content":"}"}],"authorContributionMap":{"mingyuanc":128}},{"path":"src/e2e/java/teammates/e2e/cases/sql/InstructorNotificationsPageE2ETest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuanxi1"},"content":"package teammates.e2e.cases.sql;"},{"lineNumber":2,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":3,"author":{"gitId":"yuanxi1"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"yuanxi1"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"yuanxi1"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":7,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":8,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.AppUrl;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"yuanxi1"},"content":"import teammates.e2e.pageobjects.InstructorNotificationsPage;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":14,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":15,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.output.AccountData;"},{"lineNumber":16,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":" * SUT: {@link Const.WebPageURIs#INSTRUCTOR_NOTIFICATIONS_PAGE}."},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":" */"},{"lineNumber":20,"author":{"gitId":"yuanxi1"},"content":"public class InstructorNotificationsPageE2ETest extends BaseE2ETestCase {"},{"lineNumber":21,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"    protected void prepareTestData() {"},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":"        testData \u003d loadSqlDataBundle(\"/InstructorNotificationsPageE2ESqlTest.json\");"},{"lineNumber":25,"author":{"gitId":"yuanxi1"},"content":"        removeAndRestoreDataBundle(testData);"},{"lineNumber":26,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":28,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"yuanxi1"},"content":"    protected void testAll() {"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"        Account account \u003d testData.accounts.get(\"INotifs.instr\");"},{"lineNumber":32,"author":{"gitId":"yuanxi1"},"content":"        AppUrl notificationsPageUrl \u003d createFrontendUrl(Const.WebPageURIs.INSTRUCTOR_NOTIFICATIONS_PAGE);"},{"lineNumber":33,"author":{"gitId":"yuanxi1"},"content":"        InstructorNotificationsPage notificationsPage \u003d loginToPage(notificationsPageUrl, InstructorNotificationsPage.class,"},{"lineNumber":34,"author":{"gitId":"yuanxi1"},"content":"                account.getGoogleId());"},{"lineNumber":35,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":36,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"verify that only active notifications with correct target user are shown\");"},{"lineNumber":37,"author":{"gitId":"yuanxi1"},"content":"        Notification[] notShownNotifications \u003d {"},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"notification2\"),"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"expiredNotification1\"),"},{"lineNumber":40,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":"        Notification[] shownNotifications \u003d {"},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"notification1\"),"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"notification3\"),"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"notification4\"),"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"        Notification[] readNotifications \u003d {"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"                testData.notifications.get(\"notification4\"),"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"        Set\u003cString\u003e readNotificationsIds \u003d Stream.of(readNotifications)"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":"                .map(readNotification -\u003e readNotification.getId().toString())"},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":"        notificationsPage.verifyNotShownNotifications(notShownNotifications);"},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":"        notificationsPage.verifyShownNotifications(shownNotifications, readNotificationsIds);"},{"lineNumber":57,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"mark notification as read\");"},{"lineNumber":59,"author":{"gitId":"yuanxi1"},"content":"        Notification notificationToMarkAsRead \u003d testData.notifications.get(\"notification3\");"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":"        notificationsPage.markNotificationAsRead(notificationToMarkAsRead);"},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":"        notificationsPage.verifyStatusMessage(\"Notification marked as read.\");"},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":"        // Verify that account\u0027s readNotifications attribute is updated"},{"lineNumber":64,"author":{"gitId":"yuanxi1"},"content":"        AccountData accountFromDb \u003d BACKDOOR.getAccountData(account.getGoogleId());"},{"lineNumber":65,"author":{"gitId":"yuanxi1"},"content":"        assertTrue(accountFromDb.getReadNotifications().containsKey(notificationToMarkAsRead.getId().toString()));"},{"lineNumber":66,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":67,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"notification banner is not visible\");"},{"lineNumber":68,"author":{"gitId":"yuanxi1"},"content":"        assertFalse(notificationsPage.isBannerVisible());"},{"lineNumber":69,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":"    @AfterClass"},{"lineNumber":72,"author":{"gitId":"yuanxi1"},"content":"    public void classTeardown() {"},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"        for (Notification notification : testData.notifications.values()) {"},{"lineNumber":74,"author":{"gitId":"yuanxi1"},"content":"            BACKDOOR.deleteNotification(notification.getId());"},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"}"}],"authorContributionMap":{"yuanxi1":78}},{"path":"src/e2e/java/teammates/e2e/pageobjects/AdminNotificationsPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.FindBy;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Page Object Model for the admin notifications page."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AdminNotificationsPage extends AppPage {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-add-notification\")"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private WebElement addNotificationButton;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-create-notification\")"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private WebElement createNotificationButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-edit-notification\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private WebElement editNotificationButton;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notifications-timezone\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private WebElement notificationsTimezone;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-target-user\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private WebElement notificationTargetUserDropdown;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-style\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private WebElement notificationStyleDropdown;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-title\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private WebElement notificationTitleTextBox;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-message\")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private WebElement notificationMessageEditor;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-start-date\")"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private WebElement startDateBox;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-start-time\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private WebElement startTimeDropdown;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-end-date\")"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private WebElement endDateBox;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notification-end-time\")"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private WebElement endTimeDropdown;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"notifications-table\")"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private WebElement notificationsTable;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public AdminNotificationsPage(Browser browser) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(browser);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    protected boolean containsExpectedPageContents() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getPageSource().contains(\"Notifications\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"    public void verifyNotificationsTableRow(Notification notification) {"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        WebElement notificationRow \u003d notificationsTable.findElement(By.id(notification.getId().toString()));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        verifyTableRowValues(notificationRow, getNotificationTableDisplayDetails(notification));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"    public void addNotification(Notification notification) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        clickAddNotificationButton();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.id(\"btn-create-notification\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        fillNotificationForm(notification);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        clickCreateNotificationButton();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        waitForPageToLoad(true);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"    public void editNotification(Notification notification) {"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"        WebElement notificationRow \u003d notificationsTable.findElement(By.id(notification.getId().toString()));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        WebElement editButton \u003d notificationRow.findElement(By.className(\"btn-light\"));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editButton.click();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.id(\"btn-edit-notification\"));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        fillNotificationForm(notification);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        clickEditNotificationButton();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        waitForPageToLoad(true);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"    public void deleteNotification(Notification notification) {"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        WebElement notificationRow \u003d notificationsTable.findElement(By.id(notification.getId().toString()));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        WebElement deleteButton \u003d notificationRow.findElement(By.className(\"btn-danger\"));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        deleteButton.click();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        waitForPageToLoad(true);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"    public void fillNotificationForm(Notification notification) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(notificationTargetUserDropdown, getTargetUserText(notification.getTargetUser()));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(notificationStyleDropdown, getNotificationStyle(notification.getStyle()));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        fillTextBox(notificationTitleTextBox, notification.getTitle());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        setMessage(notification.getMessage());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        setNotificationStartDateTime(notification.getStartTime());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        setNotificationEndDateTime(notification.getEndTime());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public String getFirstRowNotificationId() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e notificationRows \u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                notificationsTable.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return notificationRows.get(0).getAttribute(\"id\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void sortNotificationsTableByDescendingCreateTime() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        WebElement creationTimeHeader \u003d notificationsTable.findElements(By.tagName(\"th\")).get(5);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (creationTimeHeader.findElements(By.className(\"fa-sort-down\")).size() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            click(creationTimeHeader);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void clickAddNotificationButton() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        click(addNotificationButton);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void clickCreateNotificationButton() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        click(createNotificationButton);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void clickEditNotificationButton() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        click(editNotificationButton);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void setMessage(String message) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(notificationMessageEditor, message);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void setNotificationStartDateTime(Instant startInstant) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        setDateTime(startDateBox, startTimeDropdown, startInstant);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void setNotificationEndDateTime(Instant endInstant) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        setDateTime(endDateBox, endTimeDropdown, endInstant);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        fillDatePicker(dateBox, startInstant, getTimezone());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(timeBox.findElement(By.tagName(\"select\")), getInputTimeString(startInstant));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":"    private String[] getNotificationTableDisplayDetails(Notification notification) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return new String[] {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            notification.getTitle(),"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            getTableDisplayDateString(notification.getStartTime()),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            getTableDisplayDateString(notification.getEndTime()),"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            notification.getTargetUser().toString(),"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            getNotificationStyle(notification.getStyle()),"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private String getTimezone() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return notificationsTimezone.getText().replace(\"All dates are displayed in \", \"\").replace(\" time.\", \"\");"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    private String getInputTimeString(Instant instant) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String timezone \u003d getTimezone();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        ZonedDateTime dateTime \u003d instant.atZone(ZoneId.of(timezone));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (dateTime.getHour() \u003d\u003d 0 \u0026\u0026 dateTime.getMinute() \u003d\u003d 0) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return \"23:59H\";"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timezone, \"HH:00\") + \"H\";"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private String getTableDisplayDateString(Instant date) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(date, getTimezone(), \"d MMM h:mm a\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private String getTargetUserText(NotificationTargetUser userType) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        switch (userType) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        case STUDENT:"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return \"Students\";"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        case INSTRUCTOR:"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return \"Instructors\";"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        case GENERAL:"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return \"General (for both students and instructors)\";"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private String getNotificationStyle(NotificationStyle style) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        switch (style) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        case PRIMARY:"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return \"Primary (blue)\";"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        case SECONDARY:"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return \"Secondary (grey)\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        case SUCCESS:"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return \"Success (green)\";"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        case DANGER:"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return \"Danger (red)\";"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        case WARNING:"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return \"Warning (yellow)\";"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        case INFO:"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return \"Info (cyan)\";"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        case LIGHT:"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return \"Light\";"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        case DARK:"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return \"Dark\";"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":10,"-":209}},{"path":"src/e2e/java/teammates/e2e/pageobjects/AdminSearchPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.openqa.selenium.NoSuchElementException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.FindBy;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Represents the admin home page of the website."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AdminSearchPage extends AppPage {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_DETAILS \u003d 1;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_NAME \u003d 2;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_GOOGLE_ID \u003d 3;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_INSTITUTE \u003d 4;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_COMMENTS \u003d 5;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final int STUDENT_COL_OPTIONS \u003d 6;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final int INSTRUCTOR_COL_COURSE_ID \u003d 1;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final int INSTRUCTOR_COL_NAME \u003d 2;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final int INSTRUCTOR_COL_GOOGLE_ID \u003d 3;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final int INSTRUCTOR_COL_INSTITUTE \u003d 4;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final int INSTRUCTOR_COL_OPTIONS \u003d 5;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final int ACCOUNT_REQUEST_COL_NAME \u003d 1;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final int ACCOUNT_REQUEST_COL_EMAIL \u003d 2;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final int ACCOUNT_REQUEST_COL_INSTITUTE \u003d 3;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final int ACCOUNT_REQUEST_COL_CREATED_AT \u003d 4;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final int ACCOUNT_REQUEST_COL_REGISTERED_AT \u003d 5;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String EXPANDED_ROWS_HEADER_EMAIL \u003d \"Email\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String EXPANDED_ROWS_HEADER_COURSE_JOIN_LINK \u003d \"Course Join Link\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String EXPANDED_ROWS_HEADER_ACCOUNT_REGISTRATION_LINK \u003d \"Account Registration Link\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String LINK_TEXT_RESET_GOOGLE_ID \u003d \"Reset Google ID\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"search-box\")"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private WebElement inputBox;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"search-button\")"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private WebElement searchButton;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"show-student-links\")"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private WebElement expandStudentLinksButton;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"show-instructor-links\")"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private WebElement expandInstructorLinksButton;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"show-account-request-links\")"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private WebElement expandAccountRequestLinksButton;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"hide-student-links\")"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private WebElement collapseStudentLinksButton;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"hide-instructor-links\")"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private WebElement collapseInstructorLinksButton;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"hide-account-request-links\")"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private WebElement collapseAccountRequestLinksButton;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public AdminSearchPage(Browser browser) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        super(browser);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    protected boolean containsExpectedPageContents() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return getPageSource().contains(\"Admin Search\u003c/h1\u003e\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void inputSearchContent(String content) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        inputBox.sendKeys(content);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void clearSearchBox() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        inputBox.clear();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void clickSearchButton() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        click(searchButton);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"    public void regenerateStudentKey(Student student) {"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        studentRow.findElement(By.xpath(\"//button[text()\u003d\u0027Regenerate key\u0027]\")).click();"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"        waitForPageToLoad(true);"},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void regenerateStudentKey(StudentAttributes student) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        studentRow.findElement(By.xpath(\"//button[text()\u003d\u0027Regenerate key\u0027]\")).click();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        waitForPageToLoad(true);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"    public void verifyRegenerateStudentKey(Student student, String originalJoinLink) {"},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":"        verifyStatusMessage(\"Student\u0027s key for this course has been successfully regenerated,\""},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"                + \" and the email has been sent.\");"},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"        String regeneratedJoinLink \u003d getStudentJoinLink(student);"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(regeneratedJoinLink, originalJoinLink);"},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"    public void verifyRegenerateStudentKey(StudentAttributes student, String originalJoinLink) {"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"        verifyStatusMessage(\"Student\u0027s key for this course has been successfully regenerated,\""},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":"                + \" and the email has been sent.\");"},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"        String regeneratedJoinLink \u003d getStudentJoinLink(student);"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(regeneratedJoinLink, originalJoinLink);"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"    public void regenerateInstructorKey(Instructor instructor) {"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"        instructorRow.findElement(By.xpath(\"//button[text()\u003d\u0027Regenerate key\u0027]\")).click();"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"        waitForPageToLoad(true);"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void regenerateInstructorKey(InstructorAttributes instructor) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        instructorRow.findElement(By.xpath(\"//button[text()\u003d\u0027Regenerate key\u0027]\")).click();"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        waitForPageToLoad(true);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void clickExpandStudentLinks() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        click(expandStudentLinksButton);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void clickExpandInstructorLinks() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        click(expandInstructorLinksButton);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void clickExpandAccountRequestLinks() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        click(expandAccountRequestLinksButton);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void clickCollapseStudentLinks() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        click(collapseStudentLinksButton);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void clickCollapseInstructorLinks() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        click(collapseInstructorLinksButton);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void clickCollapseAccountRequestLinks() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        click(collapseAccountRequestLinksButton);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public String removeSpanFromText(String text) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return text.replace(\"\u003cspan class\u003d\\\"highlighted-text\\\"\u003e\", \"\").replace(\"\u003c/span\u003e\", \"\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"domoberzin"},"content":"    public WebElement getStudentRow(Student student) {"},{"lineNumber":182,"author":{"gitId":"domoberzin"},"content":"        String details \u003d String.format(\"%s [%s] (%s)\", student.getCourse().getId(),"},{"lineNumber":183,"author":{"gitId":"domoberzin"},"content":"                student.getSection() \u003d\u003d null"},{"lineNumber":184,"author":{"gitId":"domoberzin"},"content":"                ? Const.DEFAULT_SECTION"},{"lineNumber":185,"author":{"gitId":"domoberzin"},"content":"                : student.getSection().getName(), student.getTeam().getName());"},{"lineNumber":186,"author":{"gitId":"domoberzin"},"content":"        WebElement table \u003d browser.driver.findElement(By.id(\"search-table-student\"));"},{"lineNumber":187,"author":{"gitId":"domoberzin"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElements(By.tagName(\"tr\"));"},{"lineNumber":188,"author":{"gitId":"domoberzin"},"content":"        for (WebElement row : rows) {"},{"lineNumber":189,"author":{"gitId":"domoberzin"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":190,"author":{"gitId":"domoberzin"},"content":"            if (!columns.isEmpty() \u0026\u0026 removeSpanFromText(columns.get(STUDENT_COL_DETAILS - 1)"},{"lineNumber":191,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(details)"},{"lineNumber":192,"author":{"gitId":"domoberzin"},"content":"                    \u0026\u0026 removeSpanFromText(columns.get(STUDENT_COL_NAME - 1)"},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(student.getName())) {"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"                return row;"},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":"        return null;"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public WebElement getStudentRow(StudentAttributes student) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        String details \u003d String.format(\"%s [%s] (%s)\", student.getCourse(),"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                student.getSection() \u003d\u003d null ? Const.DEFAULT_SECTION : student.getSection(), student.getTeam());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d browser.driver.findElements(By.cssSelector(\"#search-table-student tbody tr\"));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        for (WebElement row : rows) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            if (removeSpanFromText(columns.get(STUDENT_COL_DETAILS - 1)"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(details)"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                    \u0026\u0026 removeSpanFromText(columns.get(STUDENT_COL_NAME - 1)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(student.getName())) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                return row;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public String getStudentDetails(WebElement studentRow) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return getColumnText(studentRow, STUDENT_COL_DETAILS);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public String getStudentName(WebElement studentRow) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return getColumnText(studentRow, STUDENT_COL_NAME);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public String getStudentGoogleId(WebElement studentRow) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        return getColumnText(studentRow, STUDENT_COL_GOOGLE_ID);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public String getStudentHomeLink(WebElement studentRow) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return getColumnLink(studentRow, STUDENT_COL_GOOGLE_ID);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public String getStudentInstitute(WebElement studentRow) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return getColumnText(studentRow, STUDENT_COL_INSTITUTE);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public String getStudentComments(WebElement studentRow) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return getColumnText(studentRow, STUDENT_COL_COMMENTS);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public String getStudentManageAccountLink(WebElement studentRow) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return getColumnLink(studentRow, STUDENT_COL_OPTIONS);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    public String getStudentEmail(WebElement studentRow) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        return getExpandedRowInputValue(studentRow, EXPANDED_ROWS_HEADER_EMAIL);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public String getStudentJoinLink(WebElement studentRow) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        return getExpandedRowInputValue(studentRow, EXPANDED_ROWS_HEADER_COURSE_JOIN_LINK);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"domoberzin"},"content":"    public String getStudentJoinLink(Student student) {"},{"lineNumber":253,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":254,"author":{"gitId":"domoberzin"},"content":"        return getStudentJoinLink(studentRow);"},{"lineNumber":255,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public String getStudentJoinLink(StudentAttributes student) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return getStudentJoinLink(studentRow);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"domoberzin"},"content":"    public void resetStudentGoogleId(Student student) {"},{"lineNumber":263,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":264,"author":{"gitId":"domoberzin"},"content":"        WebElement link \u003d studentRow.findElement(By.linkText(LINK_TEXT_RESET_GOOGLE_ID));"},{"lineNumber":265,"author":{"gitId":"domoberzin"},"content":"        link.click();"},{"lineNumber":266,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":267,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":268,"author":{"gitId":"domoberzin"},"content":"        waitForElementStaleness(link);"},{"lineNumber":269,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public void resetStudentGoogleId(StudentAttributes student) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        WebElement link \u003d studentRow.findElement(By.linkText(LINK_TEXT_RESET_GOOGLE_ID));"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        link.click();"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        waitForElementStaleness(link);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"domoberzin"},"content":"    public WebElement getInstructorRow(Instructor instructor) {"},{"lineNumber":281,"author":{"gitId":"domoberzin"},"content":"        WebElement table \u003d browser.driver.findElement(By.id(\"search-table-instructor\"));"},{"lineNumber":282,"author":{"gitId":"domoberzin"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElements(By.tagName(\"tr\"));"},{"lineNumber":283,"author":{"gitId":"domoberzin"},"content":"        for (WebElement row : rows) {"},{"lineNumber":284,"author":{"gitId":"domoberzin"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":285,"author":{"gitId":"domoberzin"},"content":"            if (columns.size() \u003e\u003d 3 \u0026\u0026 (removeSpanFromText(columns.get(2)"},{"lineNumber":286,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(instructor.getGoogleId())"},{"lineNumber":287,"author":{"gitId":"domoberzin"},"content":"                    || removeSpanFromText(columns.get(1)"},{"lineNumber":288,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(instructor.getName()))) {"},{"lineNumber":289,"author":{"gitId":"domoberzin"},"content":"                return row;"},{"lineNumber":290,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":291,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":292,"author":{"gitId":"domoberzin"},"content":"        return null;"},{"lineNumber":293,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public WebElement getInstructorRow(InstructorAttributes instructor) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        String courseId \u003d instructor.getCourseId();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d browser.driver.findElements(By.cssSelector(\"#search-table-instructor tbody tr\"));"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        for (WebElement row : rows) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            if (removeSpanFromText(columns.get(INSTRUCTOR_COL_COURSE_ID - 1)"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(courseId)"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                    \u0026\u0026 removeSpanFromText(columns.get(INSTRUCTOR_COL_NAME - 1)"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(instructor.getName())) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                return row;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"    public String getInstructorCourseId(WebElement instructorRow) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        return getColumnText(instructorRow, INSTRUCTOR_COL_COURSE_ID);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    public String getInstructorName(WebElement instructorRow) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        return getColumnText(instructorRow, INSTRUCTOR_COL_NAME);"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    public String getInstructorGoogleId(WebElement instructorRow) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        return getColumnText(instructorRow, INSTRUCTOR_COL_GOOGLE_ID);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"    public String getInstructorHomePageLink(WebElement instructorRow) {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return getColumnLink(instructorRow, INSTRUCTOR_COL_GOOGLE_ID);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    public String getInstructorInstitute(WebElement instructorRow) {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        return getColumnText(instructorRow, INSTRUCTOR_COL_INSTITUTE);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    public String getInstructorManageAccountLink(WebElement instructorRow) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        return getColumnLink(instructorRow, INSTRUCTOR_COL_OPTIONS);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"    public String getInstructorEmail(WebElement instructorRow) {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        return getExpandedRowInputValue(instructorRow, EXPANDED_ROWS_HEADER_EMAIL);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    public String getInstructorJoinLink(WebElement instructorRow) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        return getExpandedRowInputValue(instructorRow, EXPANDED_ROWS_HEADER_COURSE_JOIN_LINK);"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"domoberzin"},"content":"    public String getInstructorJoinLink(Instructor instructor) {"},{"lineNumber":343,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":344,"author":{"gitId":"domoberzin"},"content":"        return getInstructorJoinLink(instructorRow);"},{"lineNumber":345,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    public String getInstructorJoinLink(InstructorAttributes instructor) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        return getInstructorJoinLink(instructorRow);"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"domoberzin"},"content":"    public void resetInstructorGoogleId(Instructor instructor) {"},{"lineNumber":353,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":354,"author":{"gitId":"domoberzin"},"content":"        WebElement link \u003d instructorRow.findElement(By.linkText(LINK_TEXT_RESET_GOOGLE_ID));"},{"lineNumber":355,"author":{"gitId":"domoberzin"},"content":"        link.click();"},{"lineNumber":356,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":357,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":358,"author":{"gitId":"domoberzin"},"content":"        waitForElementStaleness(link);"},{"lineNumber":359,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public void resetInstructorGoogleId(InstructorAttributes instructor) {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        WebElement link \u003d instructorRow.findElement(By.linkText(LINK_TEXT_RESET_GOOGLE_ID));"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        link.click();"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        waitForElementStaleness(link);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    public WebElement getAccountRequestRow(AccountRequestAttributes accountRequest) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        String email \u003d accountRequest.getEmail();"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        String institute \u003d accountRequest.getInstitute();"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d browser.driver.findElements(By.cssSelector(\"#search-table-account-request tbody tr\"));"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        for (WebElement row : rows) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            if (removeSpanFromText(columns.get(ACCOUNT_REQUEST_COL_EMAIL - 1)"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(email)"},{"lineNumber":378,"author":{"gitId":"-"},"content":"                    \u0026\u0026 removeSpanFromText(columns.get(ACCOUNT_REQUEST_COL_INSTITUTE - 1)"},{"lineNumber":379,"author":{"gitId":"-"},"content":"                    .getAttribute(\"innerHTML\")).contains(institute)) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                return row;"},{"lineNumber":381,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"domoberzin"},"content":"    public WebElement getAccountRequestRow(AccountRequest accountRequest) {"},{"lineNumber":387,"author":{"gitId":"domoberzin"},"content":"        String email \u003d accountRequest.getEmail();"},{"lineNumber":388,"author":{"gitId":"domoberzin"},"content":"        String institute \u003d accountRequest.getInstitute();"},{"lineNumber":389,"author":{"gitId":"domoberzin"},"content":"        List\u003cWebElement\u003e rows \u003d browser.driver.findElements(By.cssSelector(\"#search-table-account-request tbody tr\"));"},{"lineNumber":390,"author":{"gitId":"domoberzin"},"content":"        for (WebElement row : rows) {"},{"lineNumber":391,"author":{"gitId":"domoberzin"},"content":"            List\u003cWebElement\u003e columns \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":392,"author":{"gitId":"domoberzin"},"content":"            if (removeSpanFromText(columns.get(ACCOUNT_REQUEST_COL_EMAIL - 1)"},{"lineNumber":393,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(email)"},{"lineNumber":394,"author":{"gitId":"domoberzin"},"content":"                    \u0026\u0026 removeSpanFromText(columns.get(ACCOUNT_REQUEST_COL_INSTITUTE - 1)"},{"lineNumber":395,"author":{"gitId":"domoberzin"},"content":"                    .getAttribute(\"innerHTML\")).contains(institute)) {"},{"lineNumber":396,"author":{"gitId":"domoberzin"},"content":"                return row;"},{"lineNumber":397,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":398,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":399,"author":{"gitId":"domoberzin"},"content":"        return null;"},{"lineNumber":400,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":401,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"    public String getAccountRequestName(WebElement accountRequestRow) {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        return getColumnText(accountRequestRow, ACCOUNT_REQUEST_COL_NAME);"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    public String getAccountRequestEmail(WebElement accountRequestRow) {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        return getColumnText(accountRequestRow, ACCOUNT_REQUEST_COL_EMAIL);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"    public String getAccountRequestInstitute(WebElement accountRequestRow) {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        return getColumnText(accountRequestRow, ACCOUNT_REQUEST_COL_INSTITUTE);"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    public String getAccountRequestCreatedAt(WebElement accountRequestRow) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        return getColumnText(accountRequestRow, ACCOUNT_REQUEST_COL_CREATED_AT);"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public String getAccountRequestRegisteredAt(WebElement accountRequestRow) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        return getColumnText(accountRequestRow, ACCOUNT_REQUEST_COL_REGISTERED_AT);"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"    public String getAccountRequestRegistrationLink(WebElement accountRequestRow) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        return getExpandedRowInputValue(accountRequestRow, EXPANDED_ROWS_HEADER_ACCOUNT_REGISTRATION_LINK);"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"    public void clickDeleteAccountRequestButton(AccountRequestAttributes accountRequest) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        WebElement deleteButton \u003d accountRequestRow.findElement(By.cssSelector(\"[id^\u003d\u0027delete-account-request-\u0027]\"));"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        deleteButton.click();"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"domoberzin"},"content":"    public void clickDeleteAccountRequestButton(AccountRequest accountRequest) {"},{"lineNumber":435,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":436,"author":{"gitId":"domoberzin"},"content":"        WebElement deleteButton \u003d accountRequestRow.findElement(By.cssSelector(\"[id^\u003d\u0027delete-account-request-\u0027]\"));"},{"lineNumber":437,"author":{"gitId":"domoberzin"},"content":"        deleteButton.click();"},{"lineNumber":438,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":439,"author":{"gitId":"domoberzin"},"content":"        waitForPageToLoad();"},{"lineNumber":440,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":441,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"    public void clickResetAccountRequestButton(AccountRequestAttributes accountRequest) {"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        WebElement deleteButton \u003d accountRequestRow.findElement(By.cssSelector(\"[id^\u003d\u0027reset-account-request-\u0027]\"));"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        deleteButton.click();"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":448,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"domoberzin"},"content":"    public void clickResetAccountRequestButton(AccountRequest accountRequest) {"},{"lineNumber":451,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":452,"author":{"gitId":"domoberzin"},"content":"        WebElement deleteButton \u003d accountRequestRow.findElement(By.cssSelector(\"[id^\u003d\u0027reset-account-request-\u0027]\"));"},{"lineNumber":453,"author":{"gitId":"domoberzin"},"content":"        deleteButton.click();"},{"lineNumber":454,"author":{"gitId":"domoberzin"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":455,"author":{"gitId":"domoberzin"},"content":"        waitForPageToLoad();"},{"lineNumber":456,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    public int getNumExpandedRows(WebElement row) {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        String xpath \u003d \"following-sibling::tr[1]/td/ul/li\";"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        return row.findElements(By.xpath(xpath)).size();"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"    private String getColumnText(WebElement row, int columnNum) {"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        String xpath \u003d String.format(\"td[%d]\", columnNum);"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        return row.findElement(By.xpath(xpath)).getText();"},{"lineNumber":466,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"    private String getColumnLink(WebElement row, int columnNum) {"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            String xpath \u003d String.format(\"td[%d]/a\", columnNum);"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            return row.findElement(By.xpath(xpath)).getAttribute(\"href\");"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"    private String getExpandedRowInputValue(WebElement row, String rowHeader) {"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"            String xpath \u003d String.format(\"following-sibling::tr[1]/td/ul/li[contains(., \u0027%s\u0027)]/input\", rowHeader);"},{"lineNumber":480,"author":{"gitId":"-"},"content":"            return row.findElement(By.xpath(xpath)).getAttribute(\"value\");"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":482,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"domoberzin"},"content":"    public void verifyStudentRowContent(Student student, Course course,"},{"lineNumber":487,"author":{"gitId":"domoberzin"},"content":"                                        String expectedDetails, String expectedManageAccountLink,"},{"lineNumber":488,"author":{"gitId":"domoberzin"},"content":"                                        String expectedHomePageLink) {"},{"lineNumber":489,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":490,"author":{"gitId":"domoberzin"},"content":"        String actualDetails \u003d getStudentDetails(studentRow);"},{"lineNumber":491,"author":{"gitId":"domoberzin"},"content":"        String actualName \u003d getStudentName(studentRow);"},{"lineNumber":492,"author":{"gitId":"domoberzin"},"content":"        String actualGoogleId \u003d getStudentGoogleId(studentRow);"},{"lineNumber":493,"author":{"gitId":"domoberzin"},"content":"        String actualHomepageLink \u003d getStudentHomeLink(studentRow);"},{"lineNumber":494,"author":{"gitId":"domoberzin"},"content":"        String actualInstitute \u003d getStudentInstitute(studentRow);"},{"lineNumber":495,"author":{"gitId":"domoberzin"},"content":"        String actualComment \u003d getStudentComments(studentRow);"},{"lineNumber":496,"author":{"gitId":"domoberzin"},"content":"        String actualManageAccountLink \u003d getStudentManageAccountLink(studentRow);"},{"lineNumber":497,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":498,"author":{"gitId":"domoberzin"},"content":"        String expectedName \u003d student.getName();"},{"lineNumber":499,"author":{"gitId":"domoberzin"},"content":"        String expectedGoogleId \u003d StringHelper.convertToEmptyStringIfNull(student.getGoogleId());"},{"lineNumber":500,"author":{"gitId":"domoberzin"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":501,"author":{"gitId":"domoberzin"},"content":"        String expectedComment \u003d StringHelper.convertToEmptyStringIfNull(student.getComments());"},{"lineNumber":502,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":503,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedDetails, actualDetails);"},{"lineNumber":504,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":505,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedGoogleId, actualGoogleId);"},{"lineNumber":506,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":507,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedComment, actualComment);"},{"lineNumber":508,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedManageAccountLink, actualManageAccountLink);"},{"lineNumber":509,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedHomePageLink, actualHomepageLink);"},{"lineNumber":510,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":511,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"    public void verifyStudentRowContent(StudentAttributes student, CourseAttributes course,"},{"lineNumber":513,"author":{"gitId":"-"},"content":"                                        String expectedDetails, String expectedManageAccountLink,"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                                        String expectedHomePageLink) {"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        String actualDetails \u003d getStudentDetails(studentRow);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        String actualName \u003d getStudentName(studentRow);"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        String actualGoogleId \u003d getStudentGoogleId(studentRow);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        String actualHomepageLink \u003d getStudentHomeLink(studentRow);"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        String actualInstitute \u003d getStudentInstitute(studentRow);"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        String actualComment \u003d getStudentComments(studentRow);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        String actualManageAccountLink \u003d getStudentManageAccountLink(studentRow);"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"        String expectedName \u003d student.getName();"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        String expectedGoogleId \u003d StringHelper.convertToEmptyStringIfNull(student.getGoogleId());"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        String expectedComment \u003d StringHelper.convertToEmptyStringIfNull(student.getComments());"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"        assertEquals(expectedDetails, actualDetails);"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        assertEquals(expectedGoogleId, actualGoogleId);"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        assertEquals(expectedComment, actualComment);"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        assertEquals(expectedManageAccountLink, actualManageAccountLink);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        assertEquals(expectedHomePageLink, actualHomepageLink);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"domoberzin"},"content":"    public void verifyStudentRowContentAfterReset(Student student, Course course) {"},{"lineNumber":539,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":540,"author":{"gitId":"domoberzin"},"content":"        String actualName \u003d getStudentName(studentRow);"},{"lineNumber":541,"author":{"gitId":"domoberzin"},"content":"        String actualInstitute \u003d getStudentInstitute(studentRow);"},{"lineNumber":542,"author":{"gitId":"domoberzin"},"content":"        String actualComment \u003d getStudentComments(studentRow);"},{"lineNumber":543,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":544,"author":{"gitId":"domoberzin"},"content":"        String expectedName \u003d student.getName();"},{"lineNumber":545,"author":{"gitId":"domoberzin"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":546,"author":{"gitId":"domoberzin"},"content":"        String expectedComment \u003d StringHelper.convertToEmptyStringIfNull(student.getComments());"},{"lineNumber":547,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":548,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":549,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":550,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedComment, actualComment);"},{"lineNumber":551,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":552,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":553,"author":{"gitId":"domoberzin"},"content":"    public void verifyStudentExpandedLinks(Student student, int expectedNumExpandedRows) {"},{"lineNumber":554,"author":{"gitId":"domoberzin"},"content":"        clickExpandStudentLinks();"},{"lineNumber":555,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":556,"author":{"gitId":"domoberzin"},"content":"        String actualEmail \u003d getStudentEmail(studentRow);"},{"lineNumber":557,"author":{"gitId":"domoberzin"},"content":"        String actualJoinLink \u003d getStudentJoinLink(studentRow);"},{"lineNumber":558,"author":{"gitId":"domoberzin"},"content":"        int actualNumExpandedRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":559,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":560,"author":{"gitId":"domoberzin"},"content":"        String expectedEmail \u003d student.getEmail();"},{"lineNumber":561,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":562,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedEmail, actualEmail);"},{"lineNumber":563,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(\"\", actualJoinLink);"},{"lineNumber":564,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedNumExpandedRows, actualNumExpandedRows);"},{"lineNumber":565,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":566,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":567,"author":{"gitId":"-"},"content":"    public void verifyStudentExpandedLinks(StudentAttributes student, int expectedNumExpandedRows) {"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        clickExpandStudentLinks();"},{"lineNumber":569,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        String actualEmail \u003d getStudentEmail(studentRow);"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        String actualJoinLink \u003d getStudentJoinLink(studentRow);"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        int actualNumExpandedRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":573,"author":{"gitId":"-"},"content":""},{"lineNumber":574,"author":{"gitId":"-"},"content":"        String expectedEmail \u003d student.getEmail();"},{"lineNumber":575,"author":{"gitId":"-"},"content":""},{"lineNumber":576,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, actualEmail);"},{"lineNumber":577,"author":{"gitId":"-"},"content":"        assertNotEquals(\"\", actualJoinLink);"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        assertEquals(expectedNumExpandedRows, actualNumExpandedRows);"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":580,"author":{"gitId":"-"},"content":""},{"lineNumber":581,"author":{"gitId":"domoberzin"},"content":"    public void verifyInstructorRowContent(Instructor instructor, Course course,"},{"lineNumber":582,"author":{"gitId":"domoberzin"},"content":"                                           String expectedManageAccountLink, String expectedHomePageLink) {"},{"lineNumber":583,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":584,"author":{"gitId":"domoberzin"},"content":"        String actualCourseId \u003d getInstructorCourseId(instructorRow);"},{"lineNumber":585,"author":{"gitId":"domoberzin"},"content":"        String actualName \u003d getInstructorName(instructorRow);"},{"lineNumber":586,"author":{"gitId":"domoberzin"},"content":"        String actualGoogleId \u003d getInstructorGoogleId(instructorRow);"},{"lineNumber":587,"author":{"gitId":"domoberzin"},"content":"        String actualHomePageLink \u003d getInstructorHomePageLink(instructorRow);"},{"lineNumber":588,"author":{"gitId":"domoberzin"},"content":"        String actualInstitute \u003d getInstructorInstitute(instructorRow);"},{"lineNumber":589,"author":{"gitId":"domoberzin"},"content":"        String actualManageAccountLink \u003d getInstructorManageAccountLink(instructorRow);"},{"lineNumber":590,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":591,"author":{"gitId":"domoberzin"},"content":"        String expectedCourseId \u003d instructor.getCourseId();"},{"lineNumber":592,"author":{"gitId":"domoberzin"},"content":"        String expectedName \u003d instructor.getName();"},{"lineNumber":593,"author":{"gitId":"domoberzin"},"content":"        String expectedGoogleId \u003d StringHelper.convertToEmptyStringIfNull(instructor.getGoogleId());"},{"lineNumber":594,"author":{"gitId":"domoberzin"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":595,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":596,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedCourseId, actualCourseId);"},{"lineNumber":597,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":598,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedGoogleId, actualGoogleId);"},{"lineNumber":599,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedHomePageLink, actualHomePageLink);"},{"lineNumber":600,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":601,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedManageAccountLink, actualManageAccountLink);"},{"lineNumber":602,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":603,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":604,"author":{"gitId":"-"},"content":"    public void verifyInstructorRowContent(InstructorAttributes instructor, CourseAttributes course,"},{"lineNumber":605,"author":{"gitId":"-"},"content":"                                           String expectedManageAccountLink, String expectedHomePageLink) {"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        String actualCourseId \u003d getInstructorCourseId(instructorRow);"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        String actualName \u003d getInstructorName(instructorRow);"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        String actualGoogleId \u003d getInstructorGoogleId(instructorRow);"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        String actualHomePageLink \u003d getInstructorHomePageLink(instructorRow);"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        String actualInstitute \u003d getInstructorInstitute(instructorRow);"},{"lineNumber":612,"author":{"gitId":"-"},"content":"        String actualManageAccountLink \u003d getInstructorManageAccountLink(instructorRow);"},{"lineNumber":613,"author":{"gitId":"-"},"content":""},{"lineNumber":614,"author":{"gitId":"-"},"content":"        String expectedCourseId \u003d instructor.getCourseId();"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        String expectedName \u003d instructor.getName();"},{"lineNumber":616,"author":{"gitId":"-"},"content":"        String expectedGoogleId \u003d StringHelper.convertToEmptyStringIfNull(instructor.getGoogleId());"},{"lineNumber":617,"author":{"gitId":"-"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"        assertEquals(expectedCourseId, actualCourseId);"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":621,"author":{"gitId":"-"},"content":"        assertEquals(expectedGoogleId, actualGoogleId);"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        assertEquals(expectedHomePageLink, actualHomePageLink);"},{"lineNumber":623,"author":{"gitId":"-"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        assertEquals(expectedManageAccountLink, actualManageAccountLink);"},{"lineNumber":625,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"domoberzin"},"content":"    public void verifyInstructorRowContentAfterReset(Instructor instructor, Course course) {"},{"lineNumber":628,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":629,"author":{"gitId":"domoberzin"},"content":"        String actualCourseId \u003d getInstructorCourseId(instructorRow);"},{"lineNumber":630,"author":{"gitId":"domoberzin"},"content":"        String actualName \u003d getInstructorName(instructorRow);"},{"lineNumber":631,"author":{"gitId":"domoberzin"},"content":"        String actualInstitute \u003d getInstructorInstitute(instructorRow);"},{"lineNumber":632,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":633,"author":{"gitId":"domoberzin"},"content":"        String expectedCourseId \u003d instructor.getCourseId();"},{"lineNumber":634,"author":{"gitId":"domoberzin"},"content":"        String expectedName \u003d instructor.getName();"},{"lineNumber":635,"author":{"gitId":"domoberzin"},"content":"        String expectedInstitute \u003d StringHelper.convertToEmptyStringIfNull(course.getInstitute());"},{"lineNumber":636,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":637,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedCourseId, actualCourseId);"},{"lineNumber":638,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedName, actualName);"},{"lineNumber":639,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedInstitute, actualInstitute);"},{"lineNumber":640,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":641,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":642,"author":{"gitId":"domoberzin"},"content":"    public void verifyInstructorExpandedLinks(Instructor instructor) {"},{"lineNumber":643,"author":{"gitId":"domoberzin"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":644,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":645,"author":{"gitId":"domoberzin"},"content":"        String actualEmail \u003d getInstructorEmail(instructorRow);"},{"lineNumber":646,"author":{"gitId":"domoberzin"},"content":"        String actualJoinLink \u003d getInstructorJoinLink(instructorRow);"},{"lineNumber":647,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":648,"author":{"gitId":"domoberzin"},"content":"        String expectedEmail \u003d instructor.getEmail();"},{"lineNumber":649,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":650,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedEmail, actualEmail);"},{"lineNumber":651,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(\"\", actualJoinLink);"},{"lineNumber":652,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":653,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":654,"author":{"gitId":"-"},"content":"    public void verifyInstructorExpandedLinks(InstructorAttributes instructor) {"},{"lineNumber":655,"author":{"gitId":"-"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":656,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        String actualEmail \u003d getInstructorEmail(instructorRow);"},{"lineNumber":658,"author":{"gitId":"-"},"content":"        String actualJoinLink \u003d getInstructorJoinLink(instructorRow);"},{"lineNumber":659,"author":{"gitId":"-"},"content":""},{"lineNumber":660,"author":{"gitId":"-"},"content":"        String expectedEmail \u003d instructor.getEmail();"},{"lineNumber":661,"author":{"gitId":"-"},"content":""},{"lineNumber":662,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, actualEmail);"},{"lineNumber":663,"author":{"gitId":"-"},"content":"        assertNotEquals(\"\", actualJoinLink);"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"    public void verifyAccountRequestRowContent(AccountRequestAttributes accountRequest) {"},{"lineNumber":667,"author":{"gitId":"-"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        String actualName \u003d getAccountRequestName(accountRequestRow);"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        String actualEmail \u003d getAccountRequestEmail(accountRequestRow);"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        String actualInstitute \u003d getAccountRequestInstitute(accountRequestRow);"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        String actualCreatedAt \u003d getAccountRequestCreatedAt(accountRequestRow);"},{"lineNumber":672,"author":{"gitId":"-"},"content":"        String actualRegisteredAt \u003d getAccountRequestRegisteredAt(accountRequestRow);"},{"lineNumber":673,"author":{"gitId":"-"},"content":""},{"lineNumber":674,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getName(), actualName);"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getEmail(), actualEmail);"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getInstitute(), actualInstitute);"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        assertFalse(actualCreatedAt.isBlank());"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        if (accountRequest.getRegisteredAt() \u003d\u003d null) {"},{"lineNumber":679,"author":{"gitId":"-"},"content":"            assertEquals(\"Not Registered Yet\", actualRegisteredAt);"},{"lineNumber":680,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":681,"author":{"gitId":"-"},"content":"            assertFalse(actualRegisteredAt.isBlank());"},{"lineNumber":682,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":683,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"domoberzin"},"content":"    public void verifyAccountRequestRowContent(AccountRequest accountRequest) {"},{"lineNumber":686,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":687,"author":{"gitId":"domoberzin"},"content":"        String actualName \u003d getAccountRequestName(accountRequestRow);"},{"lineNumber":688,"author":{"gitId":"domoberzin"},"content":"        String actualEmail \u003d getAccountRequestEmail(accountRequestRow);"},{"lineNumber":689,"author":{"gitId":"domoberzin"},"content":"        String actualInstitute \u003d getAccountRequestInstitute(accountRequestRow);"},{"lineNumber":690,"author":{"gitId":"domoberzin"},"content":"        String actualCreatedAt \u003d getAccountRequestCreatedAt(accountRequestRow);"},{"lineNumber":691,"author":{"gitId":"domoberzin"},"content":"        String actualRegisteredAt \u003d getAccountRequestRegisteredAt(accountRequestRow);"},{"lineNumber":692,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":693,"author":{"gitId":"domoberzin"},"content":"        assertEquals(accountRequest.getName(), actualName);"},{"lineNumber":694,"author":{"gitId":"domoberzin"},"content":"        assertEquals(accountRequest.getEmail(), actualEmail);"},{"lineNumber":695,"author":{"gitId":"domoberzin"},"content":"        assertEquals(accountRequest.getInstitute(), actualInstitute);"},{"lineNumber":696,"author":{"gitId":"domoberzin"},"content":"        assertFalse(actualCreatedAt.isBlank());"},{"lineNumber":697,"author":{"gitId":"domoberzin"},"content":"        if (accountRequest.getRegisteredAt() \u003d\u003d null) {"},{"lineNumber":698,"author":{"gitId":"domoberzin"},"content":"            assertEquals(\"Not Registered Yet\", actualRegisteredAt);"},{"lineNumber":699,"author":{"gitId":"domoberzin"},"content":"        } else {"},{"lineNumber":700,"author":{"gitId":"domoberzin"},"content":"            assertFalse(actualRegisteredAt.isBlank());"},{"lineNumber":701,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":702,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":703,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"    public void verifyAccountRequestExpandedLinks(AccountRequestAttributes accountRequest) {"},{"lineNumber":705,"author":{"gitId":"-"},"content":"        clickExpandAccountRequestLinks();"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        String actualRegistrationLink \u003d getAccountRequestRegistrationLink(accountRequestRow);"},{"lineNumber":708,"author":{"gitId":"-"},"content":""},{"lineNumber":709,"author":{"gitId":"-"},"content":"        assertFalse(actualRegistrationLink.isBlank());"},{"lineNumber":710,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"domoberzin"},"content":"    public void verifyAccountRequestExpandedLinks(AccountRequest accountRequest) {"},{"lineNumber":713,"author":{"gitId":"domoberzin"},"content":"        clickExpandAccountRequestLinks();"},{"lineNumber":714,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":715,"author":{"gitId":"domoberzin"},"content":"        String actualRegistrationLink \u003d getAccountRequestRegistrationLink(accountRequestRow);"},{"lineNumber":716,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":717,"author":{"gitId":"domoberzin"},"content":"        assertFalse(actualRegistrationLink.isBlank());"},{"lineNumber":718,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":719,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":720,"author":{"gitId":"domoberzin"},"content":"    public void verifyLinkExpansionButtons(Student student,"},{"lineNumber":721,"author":{"gitId":"domoberzin"},"content":"            Instructor instructor, AccountRequest accountRequest) {"},{"lineNumber":722,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":723,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":724,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":725,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":726,"author":{"gitId":"domoberzin"},"content":"        clickExpandStudentLinks();"},{"lineNumber":727,"author":{"gitId":"domoberzin"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":728,"author":{"gitId":"domoberzin"},"content":"        clickExpandAccountRequestLinks();"},{"lineNumber":729,"author":{"gitId":"domoberzin"},"content":"        int numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":730,"author":{"gitId":"domoberzin"},"content":"        int numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":731,"author":{"gitId":"domoberzin"},"content":"        int numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":732,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":733,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":734,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":735,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":736,"author":{"gitId":"domoberzin"},"content":"        clickCollapseInstructorLinks();"},{"lineNumber":737,"author":{"gitId":"domoberzin"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":738,"author":{"gitId":"domoberzin"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":739,"author":{"gitId":"domoberzin"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":740,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":741,"author":{"gitId":"domoberzin"},"content":"        assertEquals(numExpandedInstructorRows, 0);"},{"lineNumber":742,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":743,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":744,"author":{"gitId":"domoberzin"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":745,"author":{"gitId":"domoberzin"},"content":"        clickCollapseStudentLinks();"},{"lineNumber":746,"author":{"gitId":"domoberzin"},"content":"        clickCollapseAccountRequestLinks();"},{"lineNumber":747,"author":{"gitId":"domoberzin"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":748,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":749,"author":{"gitId":"domoberzin"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":750,"author":{"gitId":"domoberzin"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":751,"author":{"gitId":"domoberzin"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":752,"author":{"gitId":"domoberzin"},"content":"        assertEquals(numExpandedStudentRows, 0);"},{"lineNumber":753,"author":{"gitId":"domoberzin"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":754,"author":{"gitId":"domoberzin"},"content":"        assertEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":755,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":756,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":757,"author":{"gitId":"-"},"content":"    public void verifyLinkExpansionButtons(StudentAttributes student,"},{"lineNumber":758,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor, AccountRequestAttributes accountRequest) {"},{"lineNumber":759,"author":{"gitId":"-"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":761,"author":{"gitId":"-"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"        clickExpandStudentLinks();"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        clickExpandAccountRequestLinks();"},{"lineNumber":766,"author":{"gitId":"-"},"content":"        int numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":767,"author":{"gitId":"-"},"content":"        int numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":768,"author":{"gitId":"-"},"content":"        int numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":769,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":770,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"        clickCollapseInstructorLinks();"},{"lineNumber":774,"author":{"gitId":"-"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":776,"author":{"gitId":"-"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":777,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":778,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedInstructorRows, 0);"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":780,"author":{"gitId":"-"},"content":""},{"lineNumber":781,"author":{"gitId":"-"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":782,"author":{"gitId":"-"},"content":"        clickCollapseStudentLinks();"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        clickCollapseAccountRequestLinks();"},{"lineNumber":784,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":785,"author":{"gitId":"-"},"content":""},{"lineNumber":786,"author":{"gitId":"-"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":788,"author":{"gitId":"-"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":789,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedStudentRows, 0);"},{"lineNumber":790,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"domoberzin"},"content":"    public void verifyLinkExpansionButtons(StudentAttributes student,"},{"lineNumber":795,"author":{"gitId":"domoberzin"},"content":"            InstructorAttributes instructor, AccountRequest accountRequest) {"},{"lineNumber":796,"author":{"gitId":"domoberzin"},"content":"        WebElement studentRow \u003d getStudentRow(student);"},{"lineNumber":797,"author":{"gitId":"domoberzin"},"content":"        WebElement instructorRow \u003d getInstructorRow(instructor);"},{"lineNumber":798,"author":{"gitId":"domoberzin"},"content":"        WebElement accountRequestRow \u003d getAccountRequestRow(accountRequest);"},{"lineNumber":799,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":800,"author":{"gitId":"domoberzin"},"content":"        clickExpandStudentLinks();"},{"lineNumber":801,"author":{"gitId":"domoberzin"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":802,"author":{"gitId":"domoberzin"},"content":"        clickExpandAccountRequestLinks();"},{"lineNumber":803,"author":{"gitId":"domoberzin"},"content":"        int numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":804,"author":{"gitId":"domoberzin"},"content":"        int numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        int numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":807,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"        clickCollapseInstructorLinks();"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":812,"author":{"gitId":"-"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":813,"author":{"gitId":"-"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedStudentRows, 0);"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedInstructorRows, 0);"},{"lineNumber":816,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":817,"author":{"gitId":"-"},"content":""},{"lineNumber":818,"author":{"gitId":"-"},"content":"        clickExpandInstructorLinks();"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        clickCollapseStudentLinks();"},{"lineNumber":820,"author":{"gitId":"-"},"content":"        clickCollapseAccountRequestLinks();"},{"lineNumber":821,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":822,"author":{"gitId":"-"},"content":""},{"lineNumber":823,"author":{"gitId":"-"},"content":"        numExpandedStudentRows \u003d getNumExpandedRows(studentRow);"},{"lineNumber":824,"author":{"gitId":"-"},"content":"        numExpandedInstructorRows \u003d getNumExpandedRows(instructorRow);"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        numExpandedAccountRequestRows \u003d getNumExpandedRows(accountRequestRow);"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedStudentRows, 0);"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        assertNotEquals(numExpandedInstructorRows, 0);"},{"lineNumber":828,"author":{"gitId":"-"},"content":"        assertEquals(numExpandedAccountRequestRows, 0);"},{"lineNumber":829,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":830,"author":{"gitId":"-"},"content":""},{"lineNumber":831,"author":{"gitId":"domoberzin"},"content":"    public void verifyRegenerateInstructorKey(Instructor instructor, String originalJoinLink) {"},{"lineNumber":832,"author":{"gitId":"domoberzin"},"content":"        verifyStatusMessage(\"Instructor\u0027s key for this course has been successfully regenerated,\""},{"lineNumber":833,"author":{"gitId":"-"},"content":"                + \" and the email has been sent.\");"},{"lineNumber":834,"author":{"gitId":"-"},"content":""},{"lineNumber":835,"author":{"gitId":"domoberzin"},"content":"        String regeneratedJoinLink \u003d getInstructorJoinLink(instructor);"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        assertNotEquals(regeneratedJoinLink, originalJoinLink);"},{"lineNumber":837,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":838,"author":{"gitId":"-"},"content":""},{"lineNumber":839,"author":{"gitId":"-"},"content":"    public void verifyRegenerateInstructorKey(InstructorAttributes instructor, String originalJoinLink) {"},{"lineNumber":840,"author":{"gitId":"-"},"content":"        verifyStatusMessage(\"Instructor\u0027s key for this course has been successfully regenerated,\""},{"lineNumber":841,"author":{"gitId":"-"},"content":"                + \" and the email has been sent.\");"},{"lineNumber":842,"author":{"gitId":"-"},"content":""},{"lineNumber":843,"author":{"gitId":"-"},"content":"        String regeneratedJoinLink \u003d getInstructorJoinLink(instructor);"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        assertNotEquals(regeneratedJoinLink, originalJoinLink);"},{"lineNumber":845,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":846,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":313,"-":533}},{"path":"src/e2e/java/teammates/e2e/pageobjects/AppPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static com.google.common.base.Preconditions.checkNotNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.lang.reflect.Constructor;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.lang.reflect.InvocationTargetException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":"import java.util.Locale;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.openqa.selenium.InvalidElementStateException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.openqa.selenium.JavascriptExecutor;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.openqa.selenium.Keys;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import org.openqa.selenium.NoSuchElementException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebDriverException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.openqa.selenium.remote.RemoteWebElement;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.openqa.selenium.remote.UselessFileDetector;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.PageFactory;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.ui.ExpectedCondition;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.ui.ExpectedConditions;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.ui.Select;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.ui.WebDriverWait;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.e2e.util.MaximumRetriesExceededException;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import teammates.e2e.util.RetryManager;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import teammates.e2e.util.Retryable;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import teammates.e2e.util.TestProperties;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import teammates.test.FileHelper;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import teammates.test.ThreadHelper;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitId":"-"},"content":" * An abstract class that represents a browser-loaded page of the app and"},{"lineNumber":49,"author":{"gitId":"-"},"content":" * provides ways to interact with it. Also contains methods to validate some"},{"lineNumber":50,"author":{"gitId":"-"},"content":" * aspects of the page, e.g. HTML page source."},{"lineNumber":51,"author":{"gitId":"-"},"content":" *"},{"lineNumber":52,"author":{"gitId":"-"},"content":" * \u003cp\u003eNote: We are using the Page Object pattern here."},{"lineNumber":53,"author":{"gitId":"-"},"content":" *"},{"lineNumber":54,"author":{"gitId":"-"},"content":" * @see \u003ca href\u003d\"https://martinfowler.com/bliki/PageObject.html\"\u003ehttps://martinfowler.com/bliki/PageObject.html\u003c/a\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":" */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"public abstract class AppPage {"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String CLEAR_ELEMENT_SCRIPT;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String SCROLL_ELEMENT_TO_CENTER_AND_CLICK_SCRIPT;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String READ_TINYMCE_CONTENT_SCRIPT;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String WRITE_TO_TINYMCE_SCRIPT;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            CLEAR_ELEMENT_SCRIPT \u003d FileHelper.readFile(\"src/e2e/resources/scripts/clearElementWithoutEvents.js\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            SCROLL_ELEMENT_TO_CENTER_AND_CLICK_SCRIPT \u003d FileHelper"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    .readFile(\"src/e2e/resources/scripts/scrollElementToCenterAndClick.js\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            READ_TINYMCE_CONTENT_SCRIPT \u003d FileHelper.readFile(\"src/e2e/resources/scripts/readTinyMCEContent.js\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            WRITE_TO_TINYMCE_SCRIPT \u003d FileHelper.readFile(\"src/e2e/resources/scripts/writeToTinyMCE.js\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /** Browser instance the page is loaded into. */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    protected Browser browser;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /** Use for retrying due to transient UI issues. */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    protected RetryManager uiRetryManager \u003d new RetryManager((TestProperties.TEST_TIMEOUT + 1) / 2);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Used by subclasses to create a {@code AppPage} object to wrap around the"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * given {@code browser} object. Fails if the page content does not match"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * the page type, as defined by the sub-class."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public AppPage(Browser browser) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.browser \u003d browser;"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        boolean isCorrectPageType;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            isCorrectPageType \u003d containsExpectedPageContents();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"            if (isCorrectPageType) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            // ignore and try again"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // To minimize test failures due to eventual consistency, we try to"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        //  reload the page and compare once more."},{"lineNumber":103,"author":{"gitId":"-"},"content":"        System.out.println(\"#### Incorrect page type: going to try reloading the page.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(2000);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        reloadPage();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        isCorrectPageType \u003d containsExpectedPageContents();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (isCorrectPageType) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        System.out.println(\"######### Not in the correct page! ##########\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        throw new IllegalStateException(\"Not in the correct page!\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Browser getBrowser() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return browser;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Gets a new page object representation of the currently open web page in the browser."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails if the new page content does not match content expected in a page of"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * the type indicated by the parameter {@code typeOfPage}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static \u003cT extends AppPage\u003e T getNewPageInstance(Browser currentBrowser, Class\u003cT\u003e typeOfPage) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish(currentBrowser);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            Constructor\u003cT\u003e constructor \u003d typeOfPage.getConstructor(Browser.class);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            T page \u003d constructor.newInstance(currentBrowser);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            PageFactory.initElements(currentBrowser.driver, page);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            page.waitForPageToLoad();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return page;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        } catch (InvocationTargetException e) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            if (e.getCause() instanceof IllegalStateException) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                throw (IllegalStateException) e.getCause();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException e) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Fails if the new page content does not match content expected in a page of"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * the type indicated by the parameter {@code newPageType}."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public \u003cT extends AppPage\u003e T changePageType(Class\u003cT\u003e newPageType) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return getNewPageInstance(browser, newPageType);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public \u003cE\u003e E waitFor(ExpectedCondition\u003cE\u003e expectedCondition) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        WebDriverWait wait \u003d new WebDriverWait(browser.driver, Duration.ofSeconds(TestProperties.TEST_TIMEOUT));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return wait.until(expectedCondition);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Waits until the page is fully loaded."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void waitForPageToLoad() {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        waitForPageToLoad(false);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Waits until the page is fully loaded."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * @param excludeToast Set this to true if toast message\u0027s disappearance should not be counted"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     *         as criteria for page load\u0027s completion."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void waitForPageToLoad(boolean excludeToast) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        browser.waitForPageLoad(excludeToast);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void waitForElementVisibility(WebElement element) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        waitFor(ExpectedConditions.visibilityOf(element));"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void waitForElementVisibility(By by) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        waitFor(ExpectedConditions.visibilityOfElementLocated(by));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void waitForElementToBeClickable(WebElement element) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        waitFor(ExpectedConditions.elementToBeClickable(element));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public static void waitUntilAnimationFinish(Browser browser) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        WebDriverWait wait \u003d new WebDriverWait(browser.driver, Duration.ofSeconds(TestProperties.TEST_TIMEOUT));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.className(\"ng-animating\")));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(1000);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void waitUntilAnimationFinish() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish(browser);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Waits until an element is no longer attached to the DOM or the timeout expires."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * @param element the WebElement that expires after {@link TestProperties#TEST_TIMEOUT}"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * @see org.openqa.selenium.support.ui.FluentWait#until(java.util.function.Function)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void waitForElementStaleness(WebElement element) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        waitFor(ExpectedConditions.stalenessOf(element));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void verifyUnclickable(WebElement element) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        if (\"a\".equals(element.getTagName())) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            assertTrue(element.getAttribute(\"class\").contains(\"disabled\"));"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            assertNotNull(element.getAttribute(\"disabled\"));"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Waits for a confirmation modal to appear and click the confirm button."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void waitForConfirmationModalAndClickOk() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        waitForModalShown();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        waitForElementVisibility(By.className(\"modal-btn-ok\"));"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        WebElement okayButton \u003d browser.driver.findElement(By.className(\"modal-btn-ok\"));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        waitForElementToBeClickable(okayButton);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        clickDismissModalButtonAndWaitForModalHidden(okayButton);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    private void waitForModalShown() {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // Possible exploration: Change to listening to modal shown event as"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        // this is based on the implementation detail assumption that once modal-backdrop is added the modal is shown"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        waitForElementVisibility(By.className(\"modal-backdrop\"));"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    void waitForModalHidden(WebElement modalBackdrop) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        // Possible exploration: Change to listening to modal hidden event as"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        // this is based on the implementation detail assumption that once modal-backdrop is removed the modal is hidden"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        waitForElementStaleness(modalBackdrop);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * Waits for the element to appear in the page, up to the timeout specified."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public WebElement waitForElementPresence(By by) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return waitFor(ExpectedConditions.presenceOfElementLocated(by));"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public void reloadPage() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        browser.goToUrl(browser.driver.getCurrentUrl());"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        waitForPageToLoad();"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    protected Object executeScript(String script, Object... args) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        JavascriptExecutor javascriptExecutor \u003d (JavascriptExecutor) browser.driver;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        return javascriptExecutor.executeScript(script, args);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * Returns the HTML source of the currently loaded page."},{"lineNumber":258,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public String getPageSource() {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        return browser.driver.getPageSource();"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public String getTitle() {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        return browser.driver.getTitle();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"    public String getPageTitle() {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        return waitForElementPresence(By.tagName(\"h1\")).getText();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    public void click(By by) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        WebElement element \u003d browser.driver.findElement(by);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        click(element);"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    protected void click(WebElement element) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        executeScript(\"arguments[0].click();\", element);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitId":"-"},"content":"     * Simulates the clearing and sending of keys to an element."},{"lineNumber":282,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e This method is not the same as using {@link WebElement#clear} followed by {@link WebElement#sendKeys}."},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * It avoids double firing of the {@code change} event which may occur when {@link WebElement#clear} is followed by"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * {@link WebElement#sendKeys}."},{"lineNumber":286,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * @see AppPage#clearWithoutEvents(WebElement)"},{"lineNumber":288,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    private void clearAndSendKeys(WebElement element, CharSequence... keysToSend) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Map\u003cString, Object\u003e result \u003d clearWithoutEvents(element);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        @SuppressWarnings(\"unchecked\")"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e errors \u003d (Map\u003cString, String\u003e) result.get(\"errors\");"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        if (errors !\u003d null) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            throw new InvalidElementStateException(errors.get(\"detail\"));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        element.sendKeys(keysToSend);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"-"},"content":"     * Clears any kind of editable element, but without firing the {@code change} event (unlike {@link WebElement#clear()})."},{"lineNumber":302,"author":{"gitId":"-"},"content":"     * Avoid using this method if {@link WebElement#clear()} meets the requirements as this method depends on implementation"},{"lineNumber":303,"author":{"gitId":"-"},"content":"     * details."},{"lineNumber":304,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    private Map\u003cString, Object\u003e clearWithoutEvents(WebElement element) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        // This method is a close mirror of HtmlUnitWebElement#clear(), except that events are not handled. Note that"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        // HtmlUnitWebElement is mirrored as opposed to RemoteWebElement (which is used with actual browsers) for convenience"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        // and the implementation can differ."},{"lineNumber":309,"author":{"gitId":"-"},"content":"        checkNotNull(element);"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"        // Adapted from ExpectedConditions#stalenessOf which forces a staleness check. This allows a meaningful"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        // StaleElementReferenceException to be thrown rather than just getting a boolean from ExpectedConditions."},{"lineNumber":313,"author":{"gitId":"-"},"content":"        element.isEnabled();"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"        // Fail safe in case the implementation of staleness checks is changed"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        if (isExpectedCondition(ExpectedConditions.stalenessOf(element))) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":318,"author":{"gitId":"-"},"content":"                    \"Element is stale but should have been caught earlier by element.isEnabled().\");"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"        @SuppressWarnings(\"unchecked\")"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Map\u003cString, Object\u003e result \u003d (Map\u003cString, Object\u003e) executeScript(CLEAR_ELEMENT_SCRIPT, element);"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return result;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    protected void fillTextBox(WebElement textBoxElement, String value) {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"            scrollElementToCenterAndClick(textBoxElement);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        } catch (WebDriverException e) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            // It is important that a text box element is clickable before we fill it but due to legacy reasons we continue"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            // attempting to fill the text box element even if it\u0027s not clickable (which may lead to an unexpected failure"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            // later on)"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            System.out.println(\"Unexpectedly not able to click on the text box element because of: \");"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            System.out.println(e);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"        // If the intended value is empty `clear` works well enough for us"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        if (value.isEmpty()) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            textBoxElement.clear();"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        // Otherwise we need to do special handling of entering input because `clear` and `sendKeys` work differently."},{"lineNumber":344,"author":{"gitId":"-"},"content":"        // See documentation for `clearAndSendKeys` for more details."},{"lineNumber":345,"author":{"gitId":"-"},"content":"        clearAndSendKeys(textBoxElement, value);"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        textBoxElement.sendKeys(Keys.TAB); // blur the element to receive events"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"    protected void fillDatePicker(WebElement dateBox, Instant startInstant, String timeZone) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        WebElement buttonToOpenPicker \u003d dateBox.findElement(By.tagName(\"button\"));"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        click(buttonToOpenPicker);"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"        WebElement datePicker \u003d dateBox.findElement(By.tagName(\"ngb-datepicker\"));"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        WebElement monthAndYearPicker \u003d datePicker.findElement(By.tagName(\"ngb-datepicker-navigation-select\"));"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        WebElement monthPicker \u003d monthAndYearPicker.findElement(By.cssSelector(\"[title\u003d\u0027Select month\u0027]\"));"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        WebElement yearPicker \u003d monthAndYearPicker.findElement(By.cssSelector(\"[title\u003d\u0027Select year\u0027]\"));"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        WebElement dayPicker \u003d datePicker.findElement(By.cssSelector(\"ngb-datepicker-month\"));"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"        String year \u003d getYearString(startInstant, timeZone);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        String month \u003d getMonthString(startInstant, timeZone);"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        String date \u003d getFullDateString(startInstant, timeZone);"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(yearPicker, year);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(monthPicker, month);"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        click(dayPicker.findElement(By.cssSelector(String.format(\"[aria-label\u003d\u0027%s\u0027]\", date))));"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"    protected void fillFileBox(RemoteWebElement fileBoxElement, String fileName) {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        if (fileName.isEmpty()) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            fileBoxElement.clear();"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            fileBoxElement.setFileDetector(new UselessFileDetector());"},{"lineNumber":374,"author":{"gitId":"-"},"content":"            String filePath \u003d new File(fileName).getAbsolutePath();"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            fileBoxElement.sendKeys(filePath);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":380,"author":{"gitId":"-"},"content":"     * Get rich text from editor."},{"lineNumber":381,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    protected String getEditorRichText(WebElement editor) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.tagName(\"iframe\"));"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        String id \u003d editor.findElement(By.tagName(\"textarea\")).getAttribute(\"id\");"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        return (String) ((JavascriptExecutor) browser.driver)"},{"lineNumber":386,"author":{"gitId":"-"},"content":"                .executeAsyncScript(READ_TINYMCE_CONTENT_SCRIPT, id);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":390,"author":{"gitId":"-"},"content":"     * Write rich text to editor."},{"lineNumber":391,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    protected void writeToRichTextEditor(WebElement editor, String text) {"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.tagName(\"iframe\"));"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        String id \u003d editor.findElement(By.tagName(\"textarea\")).getAttribute(\"id\");"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        ((JavascriptExecutor) browser.driver).executeAsyncScript(WRITE_TO_TINYMCE_SCRIPT, id, text);"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":399,"author":{"gitId":"-"},"content":"     * Select the option, if it is not already selected."},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * No action taken if it is already selected."},{"lineNumber":401,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    protected void markOptionAsSelected(WebElement option) {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        waitForElementVisibility(option);"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        if (!option.isSelected()) {"},{"lineNumber":405,"author":{"gitId":"-"},"content":"            click(option);"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":410,"author":{"gitId":"-"},"content":"     * Unselect the option, if it is not already unselected."},{"lineNumber":411,"author":{"gitId":"-"},"content":"     * No action taken if it is already unselected\u0027."},{"lineNumber":412,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    protected void markOptionAsUnselected(WebElement option) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        waitForElementVisibility(option);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        if (option.isSelected()) {"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            click(option);"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":421,"author":{"gitId":"-"},"content":"     * Returns the text of the option selected in the dropdown."},{"lineNumber":422,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    protected String getSelectedDropdownOptionText(WebElement dropdown) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        Select select \u003d new Select(dropdown);"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            uiRetryManager.runUntilNoRecognizedException(new Retryable(\"Wait for dropdown text to load\") {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                @Override"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                public void run() {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"                    String txt \u003d select.getFirstSelectedOption().getText();"},{"lineNumber":430,"author":{"gitId":"-"},"content":"                    assertNotEquals(\"\", txt);"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":432,"author":{"gitId":"-"},"content":"            }, WebDriverException.class, AssertionError.class);"},{"lineNumber":433,"author":{"gitId":"-"},"content":"            return select.getFirstSelectedOption().getText();"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        } catch (MaximumRetriesExceededException e) {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            return select.getFirstSelectedOption().getText();"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":440,"author":{"gitId":"-"},"content":"     * Selects option in dropdown based on visible text."},{"lineNumber":441,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":442,"author":{"gitId":"-"},"content":"    protected void selectDropdownOptionByText(WebElement dropdown, String text) {"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        scrollElementToCenter(dropdown);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        Select select \u003d new Select(dropdown);"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        select.selectByVisibleText(text);"},{"lineNumber":446,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":449,"author":{"gitId":"-"},"content":"     * Selects option in dropdown based on value."},{"lineNumber":450,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    protected void selectDropdownOptionByValue(WebElement dropdown, String value) {"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        scrollElementToCenter(dropdown);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        Select select \u003d new Select(dropdown);"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        select.selectByValue(value);"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":458,"author":{"gitId":"-"},"content":"     * Asserts that all values in the body of the given table are equal to the expectedTableBodyValues."},{"lineNumber":459,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    protected void verifyTableBodyValues(WebElement table, String[][] expectedTableBodyValues) {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        assertTrue(expectedTableBodyValues.length \u003c\u003d rows.size());"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        for (int rowIndex \u003d 0; rowIndex \u003c expectedTableBodyValues.length; rowIndex++) {"},{"lineNumber":464,"author":{"gitId":"-"},"content":"            verifyTableRowValues(rows.get(rowIndex), expectedTableBodyValues[rowIndex]);"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":466,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":469,"author":{"gitId":"-"},"content":"     * Asserts that all values in the row header of the given table are equal to the expectedRowHeaderValues."},{"lineNumber":470,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    protected void verifyTableRowHeaderValues(WebElement table, String[][] expectedTableRowHeaderValues) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElement(By.tagName(\"thead\")).findElements(By.tagName(\"tr\"));"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        assertTrue(expectedTableRowHeaderValues.length \u003c\u003d rows.size());"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        for (int rowIndex \u003d 0; rowIndex \u003c expectedTableRowHeaderValues.length; rowIndex++) {"},{"lineNumber":475,"author":{"gitId":"-"},"content":"            verifyTableHeaderValues(rows.get(rowIndex), expectedTableRowHeaderValues[rowIndex]);"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":477,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":480,"author":{"gitId":"-"},"content":"     * Asserts that all values in the column header of the given table are equal to the expectedTablColumnHeaderValues."},{"lineNumber":481,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    protected void verifyTableColumnHeaderValues(WebElement table, String[][] expectedTablColumnHeaderValues) {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElement(By.tagName(\"tbody\")).findElements(By.tagName(\"tr\"));"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        assertTrue(expectedTablColumnHeaderValues.length \u003c\u003d rows.size());"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        for (int rowIndex \u003d 0; rowIndex \u003c expectedTablColumnHeaderValues.length; rowIndex++) {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"            verifyTableHeaderValues(rows.get(rowIndex), expectedTablColumnHeaderValues[rowIndex]);"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":491,"author":{"gitId":"-"},"content":"     * Asserts that all data values in the given table row are equal to the expectedRowValues."},{"lineNumber":492,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    protected void verifyTableRowValues(WebElement row, String[] expectedRowValues) {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e cells \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        assertTrue(expectedRowValues.length \u003c\u003d cells.size());"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        for (int cellIndex \u003d 0; cellIndex \u003c expectedRowValues.length; cellIndex++) {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"            assertEquals(expectedRowValues[cellIndex], cells.get(cellIndex).getText());"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":502,"author":{"gitId":"-"},"content":"     * Asserts that all header values in the given table row are equal to the expectedRowHeaderValues."},{"lineNumber":503,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":504,"author":{"gitId":"-"},"content":"    protected void verifyTableHeaderValues(WebElement row, String[] expectedRowHeaderValues) {"},{"lineNumber":505,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e cells \u003d row.findElements(By.tagName(\"th\"));"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        assertTrue(expectedRowHeaderValues.length \u003c\u003d cells.size());"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        for (int cellIndex \u003d 0; cellIndex \u003c expectedRowHeaderValues.length; cellIndex++) {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"            assertEquals(expectedRowHeaderValues[cellIndex], cells.get(cellIndex).getText());"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"    public void verifyBannerContent(NotificationAttributes expected) {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"        WebElement banner \u003d browser.driver.findElement(By.className(\"banner\"));"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        String title \u003d banner.findElement(By.tagName(\"h5\")).getText();"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        String message \u003d banner.findElement(By.className(\"banner-text\")).getAttribute(\"innerHTML\");"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        assertEquals(expected.getTitle(), title);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        assertEquals(expected.getMessage(), message);"},{"lineNumber":518,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":"    public boolean isBannerVisible() {"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        return isElementVisible(By.className(\"banner\"));"},{"lineNumber":522,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":525,"author":{"gitId":"-"},"content":"     * Clicks the element and clicks \u0027Yes\u0027 in the follow up dialog box."},{"lineNumber":526,"author":{"gitId":"-"},"content":"     * Fails if there is no dialog box."},{"lineNumber":527,"author":{"gitId":"-"},"content":"     * @return the resulting page."},{"lineNumber":528,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":529,"author":{"gitId":"-"},"content":"    public AppPage clickAndConfirm(WebElement elementToClick) {"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        click(elementToClick);"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":533,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":534,"author":{"gitId":"-"},"content":""},{"lineNumber":535,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":536,"author":{"gitId":"-"},"content":"     * Returns True if the page contains some basic elements expected in a page of the"},{"lineNumber":537,"author":{"gitId":"-"},"content":"     *         specific type. e.g., the top heading."},{"lineNumber":538,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":539,"author":{"gitId":"-"},"content":"    protected abstract boolean containsExpectedPageContents();"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":542,"author":{"gitId":"-"},"content":"     * Returns True if there is a corresponding element for the given locator."},{"lineNumber":543,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":544,"author":{"gitId":"-"},"content":"    public boolean isElementPresent(By by) {"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        return browser.driver.findElements(by).size() !\u003d 0;"},{"lineNumber":546,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":547,"author":{"gitId":"-"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":549,"author":{"gitId":"-"},"content":"     * Returns True if there is a corresponding element for the given id or name."},{"lineNumber":550,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":551,"author":{"gitId":"-"},"content":"    public boolean isElementPresent(String elementId) {"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":553,"author":{"gitId":"-"},"content":"            browser.driver.findElement(By.id(elementId));"},{"lineNumber":554,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":556,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":558,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":559,"author":{"gitId":"-"},"content":""},{"lineNumber":560,"author":{"gitId":"-"},"content":"    public boolean isElementVisible(By by) {"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":562,"author":{"gitId":"-"},"content":"            return browser.driver.findElement(by).isDisplayed();"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":564,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":566,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":569,"author":{"gitId":"-"},"content":"     * Returns true if the expected condition is evaluated to true immediately."},{"lineNumber":570,"author":{"gitId":"-"},"content":"     * @see ExpectedConditions"},{"lineNumber":571,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    private boolean isExpectedCondition(ExpectedCondition\u003c?\u003e expectedCondition) {"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        Object value \u003d expectedCondition.apply(browser.driver);"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        if (value \u003d\u003d null) {"},{"lineNumber":575,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":576,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":577,"author":{"gitId":"-"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":"        if (value.getClass() \u003d\u003d Boolean.class) {"},{"lineNumber":579,"author":{"gitId":"-"},"content":"            return (boolean) value;"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":583,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":586,"author":{"gitId":"-"},"content":"     * Clicks a button (can be inside or outside the modal) that dismisses the modal and waits for the modal to be hidden."},{"lineNumber":587,"author":{"gitId":"-"},"content":"     * The caller must ensure the button is in the modal or a timeout will occur while waiting for the modal to be hidden."},{"lineNumber":588,"author":{"gitId":"-"},"content":"     * @param dismissModalButton a button that dismisses the modal"},{"lineNumber":589,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":590,"author":{"gitId":"-"},"content":"    public void clickDismissModalButtonAndWaitForModalHidden(WebElement dismissModalButton) {"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        // Note: Should first check if the button can actually dismiss the modal otherwise the state will be consistent."},{"lineNumber":592,"author":{"gitId":"-"},"content":"        // However, it is too difficult to check."},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"        WebElement modalBackdrop \u003d browser.driver.findElement(By.className(\"modal-backdrop\"));"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":"        click(dismissModalButton);"},{"lineNumber":597,"author":{"gitId":"-"},"content":"        waitForModalHidden(modalBackdrop);"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":599,"author":{"gitId":"-"},"content":""},{"lineNumber":600,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":601,"author":{"gitId":"-"},"content":"     * Scrolls element to center and clicks on it."},{"lineNumber":602,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":603,"author":{"gitId":"-"},"content":"     * \u003cp\u003eAs compared to {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)}, this method is"},{"lineNumber":604,"author":{"gitId":"-"},"content":"     * more reliable as the element will not get blocked by elements such as the header."},{"lineNumber":605,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":606,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFurthermore, {@link org.openqa.selenium.interactions.Actions#moveToElement(WebElement)} is currently not"},{"lineNumber":607,"author":{"gitId":"-"},"content":"     * working in Geckodriver."},{"lineNumber":608,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":609,"author":{"gitId":"-"},"content":"     * \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e A \"scroll into view\" Actions primitive is in progress and may allow scrolling element to center."},{"lineNumber":610,"author":{"gitId":"-"},"content":"     * Tracking issue:"},{"lineNumber":611,"author":{"gitId":"-"},"content":"     * \u003ca href\u003d\"https://github.com/w3c/webdriver/issues/1005\"\u003eMissing \"scroll into view\" Actions primitive\u003c/a\u003e."},{"lineNumber":612,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":613,"author":{"gitId":"-"},"content":"     * \u003cp\u003eAlso note that there are some other caveats, for example"},{"lineNumber":614,"author":{"gitId":"-"},"content":"     * {@code new Actions(browser.driver).moveToElement(...).click(...).perform()} does not behave consistently across"},{"lineNumber":615,"author":{"gitId":"-"},"content":"     * browsers."},{"lineNumber":616,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":617,"author":{"gitId":"-"},"content":"     * \u003cli\u003eIn FirefoxDriver, the element is scrolled to and then a click is attempted on the element."},{"lineNumber":618,"author":{"gitId":"-"},"content":"     * \u003cli\u003eIn ChromeDriver, the mouse is scrolled to the element and then a click is attempted on the mouse coordinate,"},{"lineNumber":619,"author":{"gitId":"-"},"content":"     * which means another element can actually be clicked (such as the header or a blocking pop-up)."},{"lineNumber":620,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":621,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":622,"author":{"gitId":"-"},"content":"     * \u003cp\u003eChromeDriver also automatically scrolls to an element when clicking an element if it is not in the viewport."},{"lineNumber":623,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":624,"author":{"gitId":"-"},"content":"    void scrollElementToCenterAndClick(WebElement element) {"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        // TODO: migrate to `scrollIntoView` when Geckodriver is adopted"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        scrollElementToCenter(element);"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        element.click();"},{"lineNumber":628,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":629,"author":{"gitId":"-"},"content":""},{"lineNumber":630,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":631,"author":{"gitId":"-"},"content":"     * Scrolls element to center."},{"lineNumber":632,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":633,"author":{"gitId":"-"},"content":"    void scrollElementToCenter(WebElement element) {"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        executeScript(SCROLL_ELEMENT_TO_CENTER_AND_CLICK_SCRIPT, element);"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(1000);"},{"lineNumber":636,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":637,"author":{"gitId":"-"},"content":""},{"lineNumber":638,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":639,"author":{"gitId":"-"},"content":"     * Asserts message in toast is equal to the expected message."},{"lineNumber":640,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":641,"author":{"gitId":"-"},"content":"    public void verifyStatusMessage(String expectedMessage) {"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        verifyStatusMessageWithLinks(expectedMessage, new String[] {});"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        closeToast();"},{"lineNumber":644,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":647,"author":{"gitId":"-"},"content":"     * Asserts message in toast is equal to the expected message and contains the expected links."},{"lineNumber":648,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":649,"author":{"gitId":"-"},"content":"    public void verifyStatusMessageWithLinks(String expectedMessage, String[] expectedLinks) {"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        WebElement[] statusMessage \u003d new WebElement[1];"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":652,"author":{"gitId":"-"},"content":"            uiRetryManager.runUntilNoRecognizedException(new Retryable(\"Verify status to user\") {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"                @Override"},{"lineNumber":654,"author":{"gitId":"-"},"content":"                public void run() {"},{"lineNumber":655,"author":{"gitId":"-"},"content":"                    statusMessage[0] \u003d waitForElementPresence(By.className(\"toast-body\"));"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                    assertEquals(expectedMessage, statusMessage[0].getText());"},{"lineNumber":657,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":658,"author":{"gitId":"-"},"content":"            }, WebDriverException.class, AssertionError.class);"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        } catch (MaximumRetriesExceededException e) {"},{"lineNumber":660,"author":{"gitId":"-"},"content":"            statusMessage[0] \u003d waitForElementPresence(By.className(\"toast-body\"));"},{"lineNumber":661,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, statusMessage[0].getText());"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":663,"author":{"gitId":"-"},"content":"            if (expectedLinks.length \u003e 0) {"},{"lineNumber":664,"author":{"gitId":"-"},"content":"                List\u003cWebElement\u003e actualLinks \u003d statusMessage[0].findElements(By.tagName(\"a\"));"},{"lineNumber":665,"author":{"gitId":"-"},"content":"                for (int i \u003d 0; i \u003c expectedLinks.length; i++) {"},{"lineNumber":666,"author":{"gitId":"-"},"content":"                    assertTrue(actualLinks.get(i).getAttribute(\"href\").contains(expectedLinks[i]));"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":668,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":670,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":671,"author":{"gitId":"-"},"content":""},{"lineNumber":672,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":673,"author":{"gitId":"-"},"content":"     * Closes toast message."},{"lineNumber":674,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":675,"author":{"gitId":"-"},"content":"    public void closeToast() {"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        WebElement toastCloseButton \u003d waitForElementPresence(By.className(\"btn-close\"));"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        click(toastCloseButton);"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":681,"author":{"gitId":"-"},"content":"     * Switches to the new browser window just opened."},{"lineNumber":682,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":683,"author":{"gitId":"-"},"content":"    protected void switchToNewWindow() {"},{"lineNumber":684,"author":{"gitId":"-"},"content":"        browser.switchToNewWindow();"},{"lineNumber":685,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":686,"author":{"gitId":"-"},"content":""},{"lineNumber":687,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":688,"author":{"gitId":"-"},"content":"     * Closes current window and switches back to parent window."},{"lineNumber":689,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":690,"author":{"gitId":"-"},"content":"    public void closeCurrentWindowAndSwitchToParentWindow() {"},{"lineNumber":691,"author":{"gitId":"-"},"content":"        browser.closeCurrentWindowAndSwitchToParentWindow();"},{"lineNumber":692,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":693,"author":{"gitId":"-"},"content":""},{"lineNumber":694,"author":{"gitId":"-"},"content":"    String getDisplayGiverName(FeedbackParticipantType type) {"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        switch (type) {"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":697,"author":{"gitId":"-"},"content":"            return \"Feedback session creator (i.e., me)\";"},{"lineNumber":698,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":699,"author":{"gitId":"-"},"content":"            return \"Students in this course\";"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":701,"author":{"gitId":"-"},"content":"            return \"Instructors in this course\";"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":703,"author":{"gitId":"-"},"content":"            return \"Teams in this course\";"},{"lineNumber":704,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":705,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Unknown FeedbackParticipantType: \" + type);"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":707,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":708,"author":{"gitId":"-"},"content":""},{"lineNumber":709,"author":{"gitId":"-"},"content":"    String getDisplayRecipientName(FeedbackParticipantType type) {"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        switch (type) {"},{"lineNumber":711,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            return \"Giver (Self feedback)\";"},{"lineNumber":713,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":714,"author":{"gitId":"-"},"content":"            return \"Other students in the same section\";"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":716,"author":{"gitId":"-"},"content":"            return \"Students in the course\";"},{"lineNumber":717,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":718,"author":{"gitId":"-"},"content":"            return \"Other students in the course\";"},{"lineNumber":719,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":720,"author":{"gitId":"-"},"content":"            return \"Instructors in the course\";"},{"lineNumber":721,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":722,"author":{"gitId":"-"},"content":"            return \"Other teams in the same section\";"},{"lineNumber":723,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":724,"author":{"gitId":"-"},"content":"            return \"Teams in the course\";"},{"lineNumber":725,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":726,"author":{"gitId":"-"},"content":"            return \"Other teams in the course\";"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        case OWN_TEAM:"},{"lineNumber":728,"author":{"gitId":"-"},"content":"            return \"Giver\u0027s team\";"},{"lineNumber":729,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":730,"author":{"gitId":"-"},"content":"            return \"Giver\u0027s team members\";"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":732,"author":{"gitId":"-"},"content":"            return \"Giver\u0027s team members and Giver\";"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        case NONE:"},{"lineNumber":734,"author":{"gitId":"-"},"content":"            return \"Nobody specific (For general class feedback)\";"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":736,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Unknown FeedbackParticipantType: \" + type);"},{"lineNumber":737,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":738,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":739,"author":{"gitId":"-"},"content":""},{"lineNumber":740,"author":{"gitId":"-"},"content":"    String getDisplayedDateTime(Instant instant, String timeZone, String pattern) {"},{"lineNumber":741,"author":{"gitId":"-"},"content":"        ZonedDateTime zonedDateTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone(instant, timeZone, false)"},{"lineNumber":742,"author":{"gitId":"-"},"content":"                .atZone(ZoneId.of(timeZone));"},{"lineNumber":743,"author":{"gitId":"yuanxi1"},"content":"        return DateTimeFormatter.ofPattern(pattern, Locale.ENGLISH).format(zonedDateTime);"},{"lineNumber":744,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":745,"author":{"gitId":"-"},"content":""},{"lineNumber":746,"author":{"gitId":"-"},"content":"    private String getFullDateString(Instant instant, String timeZone) {"},{"lineNumber":747,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"EEEE, MMMM d, yyyy\");"},{"lineNumber":748,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"    private String getYearString(Instant instant, String timeZone) {"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"yyyy\");"},{"lineNumber":752,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":753,"author":{"gitId":"-"},"content":""},{"lineNumber":754,"author":{"gitId":"-"},"content":"    private String getMonthString(Instant instant, String timeZone) {"},{"lineNumber":755,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"MMM\");"},{"lineNumber":756,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":757,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":2,"-":755}},{"path":"src/e2e/java/teammates/e2e/pageobjects/FeedbackSubmitPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.openqa.selenium.NoSuchElementException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackContributionResponseDetails;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqResponseDetails;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqResponseDetails;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankQuestionDetails;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * Represents the feedback submission page of the website."},{"lineNumber":44,"author":{"gitId":"-"},"content":" */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"public class FeedbackSubmitPage extends AppPage {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public FeedbackSubmitPage(Browser browser) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(browser);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected boolean containsExpectedPageContents() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (isElementPresent(By.className(\"modal-content\"))) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            waitForConfirmationModalAndClickOk();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return getPageTitle().contains(\"Submit Feedback\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void verifyFeedbackSessionDetails(FeedbackSessionAttributes feedbackSession, CourseAttributes course) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(getCourseId(), feedbackSession.getCourseId());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(getCourseName(), course.getName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(getCourseInstitute(), course.getInstitute());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertDateEquals(getOpeningTime(), feedbackSession.getStartTime(), feedbackSession.getTimeZone());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertDateEquals(getClosingTime(), feedbackSession.getEndTime(), feedbackSession.getTimeZone());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(getInstructions(), feedbackSession.getInstructions());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void verifyNumQuestions(int expected) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(browser.driver.findElements(By.cssSelector(\"[id^\u003d\u0027question-submission-form-qn-\u0027]\")).size(), expected);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void verifyQuestionDetails(int qnNumber, FeedbackQuestionAttributes questionAttributes) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(getQuestionBrief(qnNumber), questionAttributes.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        verifyVisibilityList(qnNumber, questionAttributes);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (questionAttributes.getQuestionDescription() !\u003d null) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            assertEquals(getQuestionDescription(qnNumber), questionAttributes.getQuestionDescription());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void verifyLimitedRecipients(int qnNumber, int numRecipients, List\u003cString\u003e recipientNames) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipientDropdowns \u003d getQuestionForm(qnNumber)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .findElements(By.cssSelector(\"[id^\u003d\u0027recipient-dropdown-qn-\u0027]\"));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(numRecipients, recipientDropdowns.size());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipients \u003d recipientDropdowns.get(0).findElements(By.tagName(\"option\"));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(recipientNames.size(), recipients.size() - 1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Collections.sort(recipientNames);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c recipientNames.size(); i++) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            assertEquals(recipientNames.get(i), recipients.get(i + 1).getText());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void verifyRecipients(int qnNumber, List\u003cString\u003e recipientNames, String role) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Collections.sort(recipientNames);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c recipientNames.size(); i++) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(recipientNames.get(i) + \" (\" + role + \")\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    questionForm.findElement(By.id(\"recipient-name-qn-\" + qnNumber + \"-idx-\" + i)).getText());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void verifyWarningMessageForPartialResponse(int[] unansweredQuestions) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        click(getSubmitAllQuestionsButton());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        StringBuilder expectedSb \u003d new StringBuilder();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        for (int unansweredQuestion : unansweredQuestions) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            expectedSb.append(unansweredQuestion).append(\", \");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedString \u003d expectedSb.toString().substring(0, expectedSb.length() - 2) + \".\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String warningString \u003d waitForElementPresence(By.id(\"not-answered-questions\")).getText();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(warningString.split(\": \")[1], expectedString);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        waitForConfirmationModalAndClickOk();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void verifyCannotSubmit() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        WebElement submitButton \u003d waitForElementPresence(By.cssSelector(\"[id^\u003d\u0027btn-submit-qn-\u0027]\"));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (submitButton !\u003d null) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            assertFalse(submitButton.isEnabled());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void addComment(int qnNumber, String recipient, String newComment) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        WebElement commentSection \u003d getCommentSection(qnNumber, recipient);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        click(commentSection.findElement(By.className(\"btn-add-comment\")));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        writeToCommentEditor(commentSection, newComment);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void editComment(int qnNumber, String recipient, String editedComment) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        WebElement commentSection \u003d getCommentSection(qnNumber, recipient);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        click(commentSection.findElement(By.className(\"btn-edit-comment\")));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        writeToCommentEditor(commentSection, editedComment);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void deleteComment(int qnNumber, String recipient) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        clickAndConfirm(getCommentSection(qnNumber, recipient).findElement(By.className(\"btn-delete-comment\")));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void verifyComment(int qnNumber, String recipient, String expectedComment) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        WebElement commentSection \u003d getCommentSection(qnNumber, recipient);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String actualComment \u003d commentSection.findElement(By.className(\"comment-text\")).getAttribute(\"innerHTML\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedComment, actualComment);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void verifyNoCommentPresent(int qnNumber, String recipient) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        int numComments \u003d getCommentSection(qnNumber, recipient).findElements(By.className(\"comment-text\")).size();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(numComments, 0);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void verifyTextQuestion(int qnNumber, FeedbackTextQuestionDetails questionDetails) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String recommendedLengthText \u003d getQuestionForm(qnNumber).findElement(By.id(\"recommended-length\")).getText();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(recommendedLengthText, \"Recommended length for the answer: \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                + questionDetails.getRecommendedLength() + \" words\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void fillTextResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        FeedbackTextResponseDetails responseDetails \u003d (FeedbackTextResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(getTextResponseEditor(qnNumber, recipient), responseDetails.getAnswer());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void fillTextResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        FeedbackTextResponseDetails responseDetails \u003d"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                (FeedbackTextResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(getTextResponseEditor(qnNumber, recipient), responseDetails.getAnswer());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void verifyTextResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        FeedbackTextResponseDetails responseDetails \u003d (FeedbackTextResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        int responseLength \u003d responseDetails.getAnswer().split(\" \").length;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(getEditorRichText(getTextResponseEditor(qnNumber, recipient)), responseDetails.getAnswer());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(getResponseLengthText(qnNumber, recipient), \"Response length: \" + responseLength"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                + \" words\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void verifyTextResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        FeedbackTextResponseDetails responseDetails \u003d"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                (FeedbackTextResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        int responseLength \u003d responseDetails.getAnswer().split(\" \").length;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertEquals(getEditorRichText(getTextResponseEditor(qnNumber, recipient)), responseDetails.getAnswer());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertEquals(getResponseLengthText(qnNumber, recipient), \"Response length: \" + responseLength"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                + \" words\");"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void verifyMcqQuestion(int qnNumber, String recipient, FeedbackMcqQuestionDetails questionDetails) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        List\u003cString\u003e mcqChoices \u003d questionDetails.getMcqChoices();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMcqOptions(qnNumber, recipient);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c mcqChoices.size(); i++) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            assertEquals(mcqChoices.get(i), optionTexts.get(i).getText());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        if (questionDetails.isOtherEnabled()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            assertEquals(\"Other\", getMcqSection(qnNumber, recipient).findElement(By.id(\"other-option\")).getText());"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void verifyGeneratedMcqQuestion(int qnNumber, String recipient, List\u003cString\u003e options) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMcqOptions(qnNumber, recipient);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c options.size(); i++) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            assertEquals(options.get(i), optionTexts.get(i).getText());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void fillMcqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        FeedbackMcqResponseDetails responseDetails \u003d (FeedbackMcqResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getMcqOtherOptionRadioBtn(qnNumber, recipient));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            fillTextBox(getMcqOtherOptionTextbox(qnNumber, recipient), responseDetails.getOtherFieldContent());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e optionTexts \u003d getMcqOptions(qnNumber, recipient);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                if (optionTexts.get(i).getText().equals(responseDetails.getAnswer())) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                    markOptionAsSelected(getMcqRadioBtns(qnNumber, recipient).get(i));"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"dishenggg"},"content":"    public void fillMcqResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":219,"author":{"gitId":"dishenggg"},"content":"        FeedbackMcqResponseDetails responseDetails \u003d (FeedbackMcqResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":220,"author":{"gitId":"dishenggg"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":221,"author":{"gitId":"dishenggg"},"content":"            markOptionAsSelected(getMcqOtherOptionRadioBtn(qnNumber, recipient));"},{"lineNumber":222,"author":{"gitId":"dishenggg"},"content":"            fillTextBox(getMcqOtherOptionTextbox(qnNumber, recipient), responseDetails.getOtherFieldContent());"},{"lineNumber":223,"author":{"gitId":"dishenggg"},"content":"        } else {"},{"lineNumber":224,"author":{"gitId":"dishenggg"},"content":"            List\u003cWebElement\u003e optionTexts \u003d getMcqOptions(qnNumber, recipient);"},{"lineNumber":225,"author":{"gitId":"dishenggg"},"content":"            for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":226,"author":{"gitId":"dishenggg"},"content":"                if (optionTexts.get(i).getText().equals(responseDetails.getAnswer())) {"},{"lineNumber":227,"author":{"gitId":"dishenggg"},"content":"                    markOptionAsSelected(getMcqRadioBtns(qnNumber, recipient).get(i));"},{"lineNumber":228,"author":{"gitId":"dishenggg"},"content":"                    break;"},{"lineNumber":229,"author":{"gitId":"dishenggg"},"content":"                }"},{"lineNumber":230,"author":{"gitId":"dishenggg"},"content":"            }"},{"lineNumber":231,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void verifyMcqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        FeedbackMcqResponseDetails responseDetails \u003d (FeedbackMcqResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            assertTrue(getMcqOtherOptionRadioBtn(qnNumber, recipient).isSelected());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            assertEquals(getMcqOtherOptionTextbox(qnNumber, recipient).getAttribute(\"value\"),"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    responseDetails.getOtherFieldContent());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e optionTexts \u003d getMcqOptions(qnNumber, recipient);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e radioBtns \u003d getMcqRadioBtns(qnNumber, recipient);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                if (optionTexts.get(i).getText().equals(responseDetails.getAnswer())) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                    assertTrue(radioBtns.get(i).isSelected());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                assertFalse(radioBtns.get(i).isSelected());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public void verifyMsqQuestion(int qnNumber, String recipient, FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        List\u003cString\u003e msqChoices \u003d questionDetails.getMsqChoices();"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        if (questionDetails.isOtherEnabled()) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            msqChoices.add(\"Other\");"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        if (questionDetails.getMinSelectableChoices() \u003d\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            msqChoices.add(\"None of the above\");"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c msqChoices.size(); i++) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            assertEquals(msqChoices.get(i), optionTexts.get(i).getText());"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        verifyMsqSelectableOptionsMessage(qnNumber, questionDetails);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    private void verifyMsqSelectableOptionsMessage(int qnNumber, FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        if (questionDetails.getMinSelectableChoices() !\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"min-options-message\")).getText(),"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    \"Choose at least \" + questionDetails.getMinSelectableChoices() + \" options.\");"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        if (questionDetails.getMaxSelectableChoices() !\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"max-options-message\")).getText(),"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                    \"Choose no more than \" + questionDetails.getMaxSelectableChoices() + \" options.\");"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public void verifyGeneratedMsqQuestion(int qnNumber, String recipient, FeedbackMsqQuestionDetails questionDetails,"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                                           List\u003cString\u003e options) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c options.size(); i++) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            assertEquals(options.get(i), optionTexts.get(i).getText());"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        verifyMsqSelectableOptionsMessage(qnNumber, questionDetails);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    public void fillMsqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        FeedbackMsqResponseDetails responseDetails \u003d (FeedbackMsqResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        List\u003cString\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        if (answers.get(0).isEmpty()) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            answers.add(\"None of the above\");"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e checkboxes \u003d getMsqCheckboxes(qnNumber, recipient);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            if (answers.contains(optionTexts.get(i).getText())) {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                markOptionAsSelected(checkboxes.get(i));"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                markOptionAsUnselected(checkboxes.get(i));"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getMsqOtherOptionCheckbox(qnNumber, recipient));"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            fillTextBox(getMsqOtherOptionTextbox(qnNumber, recipient), responseDetails.getOtherFieldContent());"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"dishenggg"},"content":"    public void fillMsqResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":310,"author":{"gitId":"dishenggg"},"content":"        FeedbackMsqResponseDetails responseDetails \u003d (FeedbackMsqResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":311,"author":{"gitId":"dishenggg"},"content":"        List\u003cString\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":312,"author":{"gitId":"dishenggg"},"content":"        if (answers.get(0).isEmpty()) {"},{"lineNumber":313,"author":{"gitId":"dishenggg"},"content":"            answers.add(\"None of the above\");"},{"lineNumber":314,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"dishenggg"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":316,"author":{"gitId":"dishenggg"},"content":"        List\u003cWebElement\u003e checkboxes \u003d getMsqCheckboxes(qnNumber, recipient);"},{"lineNumber":317,"author":{"gitId":"dishenggg"},"content":"        for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":318,"author":{"gitId":"dishenggg"},"content":"            if (answers.contains(optionTexts.get(i).getText())) {"},{"lineNumber":319,"author":{"gitId":"dishenggg"},"content":"                markOptionAsSelected(checkboxes.get(i));"},{"lineNumber":320,"author":{"gitId":"dishenggg"},"content":"            } else {"},{"lineNumber":321,"author":{"gitId":"dishenggg"},"content":"                markOptionAsUnselected(checkboxes.get(i));"},{"lineNumber":322,"author":{"gitId":"dishenggg"},"content":"            }"},{"lineNumber":323,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":324,"author":{"gitId":"dishenggg"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":325,"author":{"gitId":"dishenggg"},"content":"            markOptionAsSelected(getMsqOtherOptionCheckbox(qnNumber, recipient));"},{"lineNumber":326,"author":{"gitId":"dishenggg"},"content":"            fillTextBox(getMsqOtherOptionTextbox(qnNumber, recipient), responseDetails.getOtherFieldContent());"},{"lineNumber":327,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    public void verifyMsqResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        FeedbackMsqResponseDetails responseDetails \u003d (FeedbackMsqResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        List\u003cString\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        if (answers.get(0).isEmpty()) {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            answers.add(\"None of the above\");"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e checkboxes \u003d getMsqCheckboxes(qnNumber, recipient);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            if (answers.contains(optionTexts.get(i).getText())) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"                assertTrue(checkboxes.get(i).isSelected());"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            } else if (\"Other\".equals(optionTexts.get(i).getText())) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                assertEquals(checkboxes.get(i).isSelected(), responseDetails.isOther());"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                assertFalse(checkboxes.get(i).isSelected());"},{"lineNumber":345,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            assertEquals(getMsqOtherOptionTextbox(qnNumber, recipient).getAttribute(\"value\"),"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                    responseDetails.getOtherFieldContent());"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"dishenggg"},"content":"    public void verifyMsqResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":354,"author":{"gitId":"dishenggg"},"content":"        FeedbackMsqResponseDetails responseDetails \u003d (FeedbackMsqResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":355,"author":{"gitId":"dishenggg"},"content":"        List\u003cString\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":356,"author":{"gitId":"dishenggg"},"content":"        if (answers.get(0).isEmpty()) {"},{"lineNumber":357,"author":{"gitId":"dishenggg"},"content":"            answers.add(\"None of the above\");"},{"lineNumber":358,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":359,"author":{"gitId":"dishenggg"},"content":"        List\u003cWebElement\u003e optionTexts \u003d getMsqOptions(qnNumber, recipient);"},{"lineNumber":360,"author":{"gitId":"dishenggg"},"content":"        List\u003cWebElement\u003e checkboxes \u003d getMsqCheckboxes(qnNumber, recipient);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c optionTexts.size(); i++) {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            if (answers.contains(optionTexts.get(i).getText())) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                assertTrue(checkboxes.get(i).isSelected());"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            } else if (\"Other\".equals(optionTexts.get(i).getText())) {"},{"lineNumber":365,"author":{"gitId":"-"},"content":"                assertEquals(checkboxes.get(i).isSelected(), responseDetails.isOther());"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"                assertFalse(checkboxes.get(i).isSelected());"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        if (responseDetails.isOther()) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            assertEquals(getMsqOtherOptionTextbox(qnNumber, recipient).getAttribute(\"value\"),"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                    responseDetails.getOtherFieldContent());"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"    public void verifyNumScaleQuestion(int qnNumber, String recipient,"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                                       FeedbackNumericalScaleQuestionDetails questionDetails) {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        double step \u003d questionDetails.getStep();"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        double twoSteps \u003d 2 * step;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        double min \u003d questionDetails.getMinScale();"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        double max \u003d questionDetails.getMaxScale();"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        String possibleValues \u003d String.format(\"Possible values: [%s, %s, %s, ..., %s, %s, %s]\","},{"lineNumber":383,"author":{"gitId":"-"},"content":"                getDoubleString(min), getDoubleString(min + step), getDoubleString(min + twoSteps),"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                getDoubleString(max - twoSteps), getDoubleString(max - step), getDoubleString(max));"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        String actualValues \u003d getNumScaleSection(qnNumber, recipient).findElement(By.id(\"possible-values\")).getText();"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        assertEquals(actualValues, possibleValues);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"    public void fillNumScaleResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        FeedbackNumericalScaleResponseDetails responseDetails \u003d"},{"lineNumber":391,"author":{"gitId":"-"},"content":"                (FeedbackNumericalScaleResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        fillTextBox(getNumScaleInput(qnNumber, recipient), Double.toString(responseDetails.getAnswer()));"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"marquestye"},"content":"    public void fillNumScaleResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":396,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleResponseDetails responseDetails \u003d"},{"lineNumber":397,"author":{"gitId":"marquestye"},"content":"                (FeedbackNumericalScaleResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":398,"author":{"gitId":"marquestye"},"content":"        fillTextBox(getNumScaleInput(qnNumber, recipient), Double.toString(responseDetails.getAnswer()));"},{"lineNumber":399,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":400,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    public void verifyNumScaleResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        FeedbackNumericalScaleResponseDetails responseDetails \u003d"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                (FeedbackNumericalScaleResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        assertEquals(getNumScaleInput(qnNumber, recipient).getAttribute(\"value\"),"},{"lineNumber":405,"author":{"gitId":"-"},"content":"                getDoubleString(responseDetails.getAnswer()));"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"marquestye"},"content":"    public void verifyNumScaleResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":409,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleResponseDetails responseDetails \u003d"},{"lineNumber":410,"author":{"gitId":"marquestye"},"content":"                (FeedbackNumericalScaleResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":411,"author":{"gitId":"marquestye"},"content":"        assertEquals(getNumScaleInput(qnNumber, recipient).getAttribute(\"value\"),"},{"lineNumber":412,"author":{"gitId":"marquestye"},"content":"                getDoubleString(responseDetails.getAnswer()));"},{"lineNumber":413,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":414,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"    public void verifyConstSumQuestion(int qnNumber, String recipient,"},{"lineNumber":416,"author":{"gitId":"-"},"content":"                                       FeedbackConstantSumQuestionDetails questionDetails) {"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        if (!questionDetails.isDistributeToRecipients()) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            List\u003cString\u003e constSumOptions \u003d questionDetails.getConstSumOptions();"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e optionTexts \u003d getConstSumOptions(qnNumber, recipient);"},{"lineNumber":420,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c constSumOptions.size(); i++) {"},{"lineNumber":421,"author":{"gitId":"-"},"content":"                assertEquals(constSumOptions.get(i), optionTexts.get(i).getText());"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"        int totalPoints \u003d questionDetails.getPoints();"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        if (questionDetails.isPointsPerOption()) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            totalPoints *\u003d questionDetails.getNumOfConstSumOptions();"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"total-points-message\")).getText(),"},{"lineNumber":430,"author":{"gitId":"-"},"content":"                \"Total points distributed should add up to \" + totalPoints + \".\");"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"        if (questionDetails.isForceUnevenDistribution()) {"},{"lineNumber":433,"author":{"gitId":"-"},"content":"            String entityType \u003d questionDetails.isDistributeToRecipients() ? \"recipient\" : \"option\";"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            if (\"All options\".equals(questionDetails.getDistributePointsFor())) {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"all-uneven-message\")).getText(),"},{"lineNumber":436,"author":{"gitId":"-"},"content":"                        \"Every \" + entityType + \" should be allocated different number of points.\");"},{"lineNumber":437,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"one-uneven-message\")).getText(),"},{"lineNumber":439,"author":{"gitId":"-"},"content":"                        \"At least one \" + entityType + \" should be allocated different number of points.\");"},{"lineNumber":440,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":442,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"    public void fillConstSumOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        FeedbackConstantSumResponseDetails responseDetails \u003d"},{"lineNumber":446,"author":{"gitId":"-"},"content":"                (FeedbackConstantSumResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e constSumInputs \u003d getConstSumInputs(qnNumber, recipient);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            fillTextBox(constSumInputs.get(i), Integer.toString(answers.get(i)));"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"    public void verifyConstSumOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        FeedbackConstantSumResponseDetails responseDetails \u003d"},{"lineNumber":456,"author":{"gitId":"-"},"content":"                (FeedbackConstantSumResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e constSumInputs \u003d getConstSumInputs(qnNumber, recipient);"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"            assertEquals(constSumInputs.get(i).getAttribute(\"value\"), Integer.toString(answers.get(i)));"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":462,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"    public void fillConstSumRecipientResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipientInputs \u003d getConstSumRecipientInputs(qnNumber);"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            FeedbackConstantSumResponseDetails response \u003d"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                    (FeedbackConstantSumResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":469,"author":{"gitId":"-"},"content":"            fillTextBox(recipientInputs.get(i), Integer.toString(response.getAnswers().get(0)));"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"    public void verifyConstSumRecipientResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipientInputs \u003d getConstSumRecipientInputs(qnNumber);"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":476,"author":{"gitId":"-"},"content":"            FeedbackConstantSumResponseDetails response \u003d"},{"lineNumber":477,"author":{"gitId":"-"},"content":"                    (FeedbackConstantSumResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":478,"author":{"gitId":"-"},"content":"            assertEquals(recipientInputs.get(i).getAttribute(\"value\"),"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                    Integer.toString(response.getAnswers().get(0)));"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":481,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"    public void verifyContributionQuestion(int qnNumber, FeedbackContributionQuestionDetails questionDetails) {"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":485,"author":{"gitId":"-"},"content":"            selectDropdownOptionByText(getContributionDropdowns(qnNumber).get(0), \"Not Sure\");"},{"lineNumber":486,"author":{"gitId":"-"},"content":"            assertTrue(questionDetails.isNotSureAllowed());"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            assertFalse(questionDetails.isZeroSum());"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":489,"author":{"gitId":"-"},"content":"            assertFalse(questionDetails.isNotSureAllowed());"},{"lineNumber":490,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"    public void fillContributionResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e dropdowns \u003d getContributionDropdowns(qnNumber);"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":496,"author":{"gitId":"-"},"content":"            FeedbackContributionResponseDetails response \u003d"},{"lineNumber":497,"author":{"gitId":"-"},"content":"                    (FeedbackContributionResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":498,"author":{"gitId":"-"},"content":"            selectDropdownOptionByText(dropdowns.get(i), getContributionString(response.getAnswer()));"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"    public void verifyContributionResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e dropdowns \u003d getContributionDropdowns(qnNumber);"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":505,"author":{"gitId":"-"},"content":"            FeedbackContributionResponseDetails response \u003d"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                    (FeedbackContributionResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            assertEquals(getSelectedDropdownOptionText(dropdowns.get(i)), getContributionString(response.getAnswer()));"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"    public void verifyRubricQuestion(int qnNumber, String recipient, FeedbackRubricQuestionDetails questionDetails) {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        List\u003cString\u003e choices \u003d questionDetails.getRubricChoices();"},{"lineNumber":513,"author":{"gitId":"-"},"content":"        List\u003cString\u003e subQuestions \u003d questionDetails.getRubricSubQuestions();"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        List\u003cList\u003cString\u003e\u003e descriptions \u003d questionDetails.getRubricDescriptions();"},{"lineNumber":515,"author":{"gitId":"-"},"content":""},{"lineNumber":516,"author":{"gitId":"-"},"content":"        String[][] expectedTableData \u003d new String[subQuestions.size()][choices.size()];"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        String[][] expectedTableRowHeader \u003d new String[1][choices.size()];"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        String[][] expectedTableColumnHeader \u003d new String[subQuestions.size()][1];"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c choices.size(); i++) {"},{"lineNumber":521,"author":{"gitId":"-"},"content":"            expectedTableRowHeader[0][i] \u003d choices.get(i);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c subQuestions.size(); i++) {"},{"lineNumber":524,"author":{"gitId":"-"},"content":"            expectedTableColumnHeader[i][0] \u003d subQuestions.get(i);"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c descriptions.size(); i++) {"},{"lineNumber":527,"author":{"gitId":"-"},"content":"            List\u003cString\u003e description \u003d descriptions.get(i);"},{"lineNumber":528,"author":{"gitId":"-"},"content":"            for (int j \u003d 0; j \u003c description.size(); j++) {"},{"lineNumber":529,"author":{"gitId":"-"},"content":"                expectedTableData[i][j] \u003d description.get(j);"},{"lineNumber":530,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        WebElement rubricTable \u003d getRubricTable(qnNumber, recipient);"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        verifyTableBodyValues(rubricTable, expectedTableData);"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        verifyTableRowHeaderValues(rubricTable, expectedTableRowHeader);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        verifyTableColumnHeaderValues(rubricTable, expectedTableColumnHeader);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public void fillRubricResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        FeedbackRubricResponseDetails responseDetails \u003d"},{"lineNumber":540,"author":{"gitId":"-"},"content":"                (FeedbackRubricResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswer();"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"            click(getRubricInputs(qnNumber, recipient, i + 2).get(answers.get(i)));"},{"lineNumber":544,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":546,"author":{"gitId":"-"},"content":""},{"lineNumber":547,"author":{"gitId":"-"},"content":"    public void verifyRubricResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":548,"author":{"gitId":"-"},"content":"        FeedbackRubricResponseDetails responseDetails \u003d"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                (FeedbackRubricResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":550,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswer();"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":552,"author":{"gitId":"-"},"content":"            assertTrue(getRubricInputs(qnNumber, recipient, i + 2).get(answers.get(i)).isSelected());"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":554,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":555,"author":{"gitId":"-"},"content":""},{"lineNumber":556,"author":{"gitId":"-"},"content":"    public void verifyRankQuestion(int qnNumber, String recipient, FeedbackRankQuestionDetails questionDetails) {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        if (questionDetails.getMaxOptionsToBeRanked() !\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":558,"author":{"gitId":"-"},"content":"            assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"max-options-message\")).getText(),"},{"lineNumber":559,"author":{"gitId":"-"},"content":"                    \"Rank no more than \" + questionDetails.getMaxOptionsToBeRanked() + \" options.\");"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        if (questionDetails.getMinOptionsToBeRanked() !\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":562,"author":{"gitId":"-"},"content":"            assertEquals(getQuestionForm(qnNumber).findElement(By.id(\"min-options-message\")).getText(),"},{"lineNumber":563,"author":{"gitId":"-"},"content":"                    \"Rank at least \" + questionDetails.getMinOptionsToBeRanked() + \" options.\");"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        if (questionDetails instanceof FeedbackRankOptionsQuestionDetails) {"},{"lineNumber":566,"author":{"gitId":"-"},"content":"            FeedbackRankOptionsQuestionDetails optionDetails \u003d (FeedbackRankOptionsQuestionDetails) questionDetails;"},{"lineNumber":567,"author":{"gitId":"-"},"content":"            List\u003cString\u003e options \u003d optionDetails.getOptions();"},{"lineNumber":568,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e optionTexts \u003d getRankOptions(qnNumber, recipient);"},{"lineNumber":569,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c options.size(); i++) {"},{"lineNumber":570,"author":{"gitId":"-"},"content":"                assertEquals(options.get(i), optionTexts.get(i).getText());"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":573,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"    public void fillRankOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":576,"author":{"gitId":"-"},"content":"        FeedbackRankOptionsResponseDetails responseDetails \u003d"},{"lineNumber":577,"author":{"gitId":"-"},"content":"                (FeedbackRankOptionsResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":580,"author":{"gitId":"-"},"content":"            if (answers.get(i) \u003d\u003d Const.POINTS_NOT_SUBMITTED) {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"                selectDropdownOptionByText(getRankOptionsDropdowns(qnNumber, recipient).get(i), \"\");"},{"lineNumber":582,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":583,"author":{"gitId":"-"},"content":"                selectDropdownOptionByText(getRankOptionsDropdowns(qnNumber, recipient).get(i),"},{"lineNumber":584,"author":{"gitId":"-"},"content":"                        Integer.toString(answers.get(i)));"},{"lineNumber":585,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":587,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"mingyuanc"},"content":"    public void fillRankOptionResponse(int qnNumber, String recipient, FeedbackResponse response) {"},{"lineNumber":590,"author":{"gitId":"mingyuanc"},"content":"        FeedbackRankOptionsResponseDetails responseDetails \u003d"},{"lineNumber":591,"author":{"gitId":"mingyuanc"},"content":"                (FeedbackRankOptionsResponseDetails) response.getFeedbackResponseDetailsCopy();"},{"lineNumber":592,"author":{"gitId":"mingyuanc"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":593,"author":{"gitId":"mingyuanc"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":594,"author":{"gitId":"mingyuanc"},"content":"            if (answers.get(i) \u003d\u003d Const.POINTS_NOT_SUBMITTED) {"},{"lineNumber":595,"author":{"gitId":"mingyuanc"},"content":"                selectDropdownOptionByText(getRankOptionsDropdowns(qnNumber, recipient).get(i), \"\");"},{"lineNumber":596,"author":{"gitId":"mingyuanc"},"content":"            } else {"},{"lineNumber":597,"author":{"gitId":"mingyuanc"},"content":"                selectDropdownOptionByText(getRankOptionsDropdowns(qnNumber, recipient).get(i),"},{"lineNumber":598,"author":{"gitId":"mingyuanc"},"content":"                        Integer.toString(answers.get(i)));"},{"lineNumber":599,"author":{"gitId":"mingyuanc"},"content":"            }"},{"lineNumber":600,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":601,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":602,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":603,"author":{"gitId":"-"},"content":"    public void verifyRankOptionResponse(int qnNumber, String recipient, FeedbackResponseAttributes response) {"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        FeedbackRankOptionsResponseDetails responseDetails \u003d"},{"lineNumber":605,"author":{"gitId":"-"},"content":"                (FeedbackRankOptionsResponseDetails) response.getResponseDetailsCopy();"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        List\u003cInteger\u003e answers \u003d responseDetails.getAnswers();"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c answers.size(); i++) {"},{"lineNumber":608,"author":{"gitId":"-"},"content":"            if (answers.get(i) \u003d\u003d Const.POINTS_NOT_SUBMITTED) {"},{"lineNumber":609,"author":{"gitId":"-"},"content":"                assertEquals(getSelectedDropdownOptionText(getRankOptionsDropdowns(qnNumber, recipient).get(i)),"},{"lineNumber":610,"author":{"gitId":"-"},"content":"                        \"\");"},{"lineNumber":611,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":612,"author":{"gitId":"-"},"content":"                assertEquals(getSelectedDropdownOptionText(getRankOptionsDropdowns(qnNumber, recipient).get(i)),"},{"lineNumber":613,"author":{"gitId":"-"},"content":"                        Integer.toString(answers.get(i)));"},{"lineNumber":614,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    public void fillRankRecipientResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipientDropdowns \u003d getRankRecipientDropdowns(qnNumber);"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":621,"author":{"gitId":"-"},"content":"            FeedbackRankRecipientsResponseDetails response \u003d"},{"lineNumber":622,"author":{"gitId":"-"},"content":"                    (FeedbackRankRecipientsResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":623,"author":{"gitId":"-"},"content":"            if (response.getAnswer() \u003d\u003d Const.POINTS_NOT_SUBMITTED) {"},{"lineNumber":624,"author":{"gitId":"-"},"content":"                selectDropdownOptionByText(recipientDropdowns.get(i), \"\");"},{"lineNumber":625,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":626,"author":{"gitId":"-"},"content":"                selectDropdownOptionByText(recipientDropdowns.get(i), Integer.toString(response.getAnswer()));"},{"lineNumber":627,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":629,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"    public void verifyRankRecipientResponse(int qnNumber, List\u003cFeedbackResponseAttributes\u003e responses) {"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e recipientDropdowns \u003d getRankRecipientDropdowns(qnNumber);"},{"lineNumber":633,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c responses.size(); i++) {"},{"lineNumber":634,"author":{"gitId":"-"},"content":"            FeedbackRankRecipientsResponseDetails response \u003d"},{"lineNumber":635,"author":{"gitId":"-"},"content":"                    (FeedbackRankRecipientsResponseDetails) responses.get(i).getResponseDetailsCopy();"},{"lineNumber":636,"author":{"gitId":"-"},"content":"            if (response.getAnswer() \u003d\u003d Const.POINTS_NOT_SUBMITTED) {"},{"lineNumber":637,"author":{"gitId":"-"},"content":"                assertEquals(getSelectedDropdownOptionText(recipientDropdowns.get(i)), \"\");"},{"lineNumber":638,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                assertEquals(getSelectedDropdownOptionText(recipientDropdowns.get(i)),"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                        Integer.toString(response.getAnswer()));"},{"lineNumber":641,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":643,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":644,"author":{"gitId":"-"},"content":""},{"lineNumber":645,"author":{"gitId":"-"},"content":"    private String getCourseId() {"},{"lineNumber":646,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"course-id\")).getText();"},{"lineNumber":647,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":648,"author":{"gitId":"-"},"content":""},{"lineNumber":649,"author":{"gitId":"-"},"content":"    private String getCourseName() {"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"course-name\")).getText();"},{"lineNumber":651,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":652,"author":{"gitId":"-"},"content":""},{"lineNumber":653,"author":{"gitId":"-"},"content":"    private String getCourseInstitute() {"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"course-institute\")).getText();"},{"lineNumber":655,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":656,"author":{"gitId":"-"},"content":""},{"lineNumber":657,"author":{"gitId":"-"},"content":"    private String getFeedbackSessionName() {"},{"lineNumber":658,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"fs-name\")).getText();"},{"lineNumber":659,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":660,"author":{"gitId":"-"},"content":""},{"lineNumber":661,"author":{"gitId":"-"},"content":"    private String getOpeningTime() {"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"opening-time\")).getText();"},{"lineNumber":663,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":664,"author":{"gitId":"-"},"content":""},{"lineNumber":665,"author":{"gitId":"-"},"content":"    private String getClosingTime() {"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"closing-time\")).getText();"},{"lineNumber":667,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":668,"author":{"gitId":"-"},"content":""},{"lineNumber":669,"author":{"gitId":"-"},"content":"    private String getInstructions() {"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        return browser.driver.findElement(By.id(\"instructions\")).getAttribute(\"innerHTML\");"},{"lineNumber":671,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"    private void assertDateEquals(String actual, Instant instant, String timeZone) {"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        String dateStrWithAbbr \u003d getDateStringWithAbbr(instant, timeZone);"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        String dateStrWithOffset \u003d getDateStringWithOffset(instant, timeZone);"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"        boolean isExpected \u003d actual.equals(dateStrWithAbbr) || actual.equals(dateStrWithOffset);"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        assertTrue(isExpected);"},{"lineNumber":679,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"    private String getDateStringWithAbbr(Instant instant, String timeZone) {"},{"lineNumber":682,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"EE, dd MMM, yyyy, hh:mm a z\");"},{"lineNumber":683,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"    private String getDateStringWithOffset(Instant instant, String timeZone) {"},{"lineNumber":686,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"EE, dd MMM, yyyy, hh:mm a X\");"},{"lineNumber":687,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"    private WebElement getQuestionForm(int qnNumber) {"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        By questionFormId \u003d By.id(\"question-submission-form-qn-\" + qnNumber);"},{"lineNumber":691,"author":{"gitId":"-"},"content":"        waitForElementPresence(questionFormId);"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d browser.driver.findElement(questionFormId);"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        // Scroll to the question to ensure that the details are fully loaded"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        scrollElementToCenter(questionForm);"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        return questionForm;"},{"lineNumber":697,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"    private String getQuestionBrief(int qnNumber) {"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        String questionDetails \u003d getQuestionForm(qnNumber).findElement(By.className(\"question-details\")).getText();"},{"lineNumber":701,"author":{"gitId":"-"},"content":"        return questionDetails.split(\": \")[1];"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"    private void verifyVisibilityList(int qnNumber, FeedbackQuestionAttributes questionAttributes) {"},{"lineNumber":705,"author":{"gitId":"-"},"content":"        if (questionAttributes.getShowResponsesTo().isEmpty()) {"},{"lineNumber":706,"author":{"gitId":"-"},"content":"            verifyVisibilityStringPresent(qnNumber, \"No-one can see your responses\");"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        if (questionAttributes.getRecipientType().equals(FeedbackParticipantType.SELF)) {"},{"lineNumber":709,"author":{"gitId":"-"},"content":"            verifyVisibilityStringPresent(qnNumber, \"You can see your own feedback in the results page later on.\");"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":711,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType viewerType : questionAttributes.getShowResponsesTo()) {"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            verifyVisibilityStringPresent(qnNumber, getVisibilityString(questionAttributes, viewerType));"},{"lineNumber":713,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":714,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":715,"author":{"gitId":"-"},"content":""},{"lineNumber":716,"author":{"gitId":"-"},"content":"    private void verifyVisibilityStringPresent(int qnNumber, String expectedString) {"},{"lineNumber":717,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e visibilityStrings \u003d getQuestionForm(qnNumber).findElement(By.className(\"visibility-list\"))"},{"lineNumber":718,"author":{"gitId":"-"},"content":"                .findElements(By.tagName(\"li\"));"},{"lineNumber":719,"author":{"gitId":"-"},"content":"        for (WebElement visibilityString : visibilityStrings) {"},{"lineNumber":720,"author":{"gitId":"-"},"content":"            if (visibilityString.getText().equals(expectedString)) {"},{"lineNumber":721,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":722,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":723,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":724,"author":{"gitId":"-"},"content":"        fail(\"Expected visibility string not found: \" + qnNumber + \": \" + expectedString);"},{"lineNumber":725,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":726,"author":{"gitId":"-"},"content":""},{"lineNumber":727,"author":{"gitId":"-"},"content":"    private String getVisibilityString(FeedbackQuestionAttributes questionAttributes,"},{"lineNumber":728,"author":{"gitId":"-"},"content":"                                       FeedbackParticipantType viewerType) {"},{"lineNumber":729,"author":{"gitId":"-"},"content":"        if (!questionAttributes.getShowResponsesTo().contains(viewerType)) {"},{"lineNumber":730,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":732,"author":{"gitId":"-"},"content":""},{"lineNumber":733,"author":{"gitId":"-"},"content":"        StringBuilder message \u003d new StringBuilder(getViewerString(viewerType, questionAttributes.getRecipientType()));"},{"lineNumber":734,"author":{"gitId":"-"},"content":"        message.append(\" can see your response\");"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        if (questionAttributes.getShowRecipientNameTo().contains(viewerType)) {"},{"lineNumber":736,"author":{"gitId":"-"},"content":"            message.append(\", the name of the recipient\");"},{"lineNumber":737,"author":{"gitId":"-"},"content":"            if (questionAttributes.getShowGiverNameTo().contains(viewerType)) {"},{"lineNumber":738,"author":{"gitId":"-"},"content":"                message.append(\", and your name\");"},{"lineNumber":739,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":740,"author":{"gitId":"-"},"content":"                message.append(\", but not your name\");"},{"lineNumber":741,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":742,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":743,"author":{"gitId":"-"},"content":"            if (questionAttributes.getShowGiverNameTo().contains(viewerType)) {"},{"lineNumber":744,"author":{"gitId":"-"},"content":"                message.append(\", and your name, but not the name of the recipient\");"},{"lineNumber":745,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":746,"author":{"gitId":"-"},"content":"                message.append(\", but not the name of the recipient, or your name\");"},{"lineNumber":747,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":749,"author":{"gitId":"-"},"content":"        return message.toString();"},{"lineNumber":750,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":751,"author":{"gitId":"-"},"content":""},{"lineNumber":752,"author":{"gitId":"-"},"content":"    private String getViewerString(FeedbackParticipantType viewerType, FeedbackParticipantType recipientType) {"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        switch (viewerType) {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"        case RECEIVER:"},{"lineNumber":755,"author":{"gitId":"-"},"content":"            return \"The receiving \" + getRecipientString(recipientType);"},{"lineNumber":756,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":757,"author":{"gitId":"-"},"content":"            return \"Your team members\";"},{"lineNumber":758,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":759,"author":{"gitId":"-"},"content":"            return \"Other students in the course\";"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":761,"author":{"gitId":"-"},"content":"            return \"Instructors in this course\";"},{"lineNumber":762,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":763,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown viewer type\");"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":765,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":766,"author":{"gitId":"-"},"content":""},{"lineNumber":767,"author":{"gitId":"-"},"content":"    private String getRecipientString(FeedbackParticipantType recipientType) {"},{"lineNumber":768,"author":{"gitId":"-"},"content":"        switch (recipientType) {"},{"lineNumber":769,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":770,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":772,"author":{"gitId":"-"},"content":"            return \"teams\";"},{"lineNumber":773,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":774,"author":{"gitId":"-"},"content":"            return \"student\";"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":776,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":777,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":778,"author":{"gitId":"-"},"content":"            return \"students\";"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":780,"author":{"gitId":"-"},"content":"            return \"instructors\";"},{"lineNumber":781,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":782,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown recipientType\");"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":784,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":785,"author":{"gitId":"-"},"content":""},{"lineNumber":786,"author":{"gitId":"-"},"content":"    public void clickSubmitQuestionButton(int qnNumber) {"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        WebElement submitQnButton \u003d waitForElementPresence(By.id(\"btn-submit-qn-\" + qnNumber));"},{"lineNumber":788,"author":{"gitId":"-"},"content":"        clickAndConfirm(submitQnButton);"},{"lineNumber":789,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":790,"author":{"gitId":"-"},"content":""},{"lineNumber":791,"author":{"gitId":"-"},"content":"    public void clickSubmitAllQuestionsButton() {"},{"lineNumber":792,"author":{"gitId":"-"},"content":"        clickAndConfirm(getSubmitAllQuestionsButton());"},{"lineNumber":793,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":794,"author":{"gitId":"-"},"content":""},{"lineNumber":795,"author":{"gitId":"-"},"content":"    private WebElement getSubmitAllQuestionsButton() {"},{"lineNumber":796,"author":{"gitId":"-"},"content":"        return waitForElementPresence(By.id(\"btn-submit\"));"},{"lineNumber":797,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":798,"author":{"gitId":"-"},"content":""},{"lineNumber":799,"author":{"gitId":"-"},"content":"    private String getQuestionDescription(int qnNumber) {"},{"lineNumber":800,"author":{"gitId":"-"},"content":"        return getQuestionForm(qnNumber).findElement(By.className(\"question-description\")).getAttribute(\"innerHTML\");"},{"lineNumber":801,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":802,"author":{"gitId":"-"},"content":""},{"lineNumber":803,"author":{"gitId":"-"},"content":"    private WebElement getCommentSection(int qnNumber, String recipient) {"},{"lineNumber":804,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        return getQuestionForm(qnNumber).findElement(By.id(\"comment-section-qn-\" + qnNumber + \"-idx-\" + recipientIndex));"},{"lineNumber":806,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":807,"author":{"gitId":"-"},"content":""},{"lineNumber":808,"author":{"gitId":"-"},"content":"    private void writeToCommentEditor(WebElement commentSection, String comment) {"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        scrollElementToCenter(commentSection);"},{"lineNumber":810,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.tagName(\"editor\"));"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(commentSection.findElement(By.tagName(\"editor\")), comment);"},{"lineNumber":812,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":813,"author":{"gitId":"-"},"content":""},{"lineNumber":814,"author":{"gitId":"-"},"content":"    private int getRecipientIndex(int qnNumber, String recipient) {"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        // For questions with recipient none or self."},{"lineNumber":816,"author":{"gitId":"-"},"content":"        if (recipient.isEmpty()) {"},{"lineNumber":817,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":818,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":820,"author":{"gitId":"-"},"content":"        // For questions with flexible recipient."},{"lineNumber":821,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":822,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e recipientDropdowns \u003d"},{"lineNumber":823,"author":{"gitId":"-"},"content":"                    questionForm.findElements(By.cssSelector(\"[id^\u003d\u0027recipient-dropdown-qn-\u0027]\"));"},{"lineNumber":824,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c recipientDropdowns.size(); i++) {"},{"lineNumber":825,"author":{"gitId":"-"},"content":"                String dropdownText \u003d getSelectedDropdownOptionText(recipientDropdowns.get(i));"},{"lineNumber":826,"author":{"gitId":"-"},"content":"                if (dropdownText.isEmpty()) {"},{"lineNumber":827,"author":{"gitId":"-"},"content":"                    selectDropdownOptionByText(recipientDropdowns.get(i), recipient);"},{"lineNumber":828,"author":{"gitId":"-"},"content":"                    return i;"},{"lineNumber":829,"author":{"gitId":"-"},"content":"                } else if (dropdownText.equals(recipient)) {"},{"lineNumber":830,"author":{"gitId":"-"},"content":"                    return i;"},{"lineNumber":831,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":832,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":833,"author":{"gitId":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":834,"author":{"gitId":"-"},"content":"            // continue"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        int limit \u003d 20; // we are not likely to set test data exceeding this number"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c limit; i++) {"},{"lineNumber":838,"author":{"gitId":"-"},"content":"            if (questionForm.findElement(By.id(\"recipient-name-qn-\" + qnNumber + \"-idx-\" + i))"},{"lineNumber":839,"author":{"gitId":"-"},"content":"                    .getText().contains(recipient)) {"},{"lineNumber":840,"author":{"gitId":"-"},"content":"                return i;"},{"lineNumber":841,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":842,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":843,"author":{"gitId":"-"},"content":"        return -1;"},{"lineNumber":844,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":845,"author":{"gitId":"-"},"content":""},{"lineNumber":846,"author":{"gitId":"-"},"content":"    private WebElement getTextResponseEditor(int qnNumber, String recipient) {"},{"lineNumber":847,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":848,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":849,"author":{"gitId":"-"},"content":"        WebElement editor \u003d questionForm.findElements(By.tagName(\"tm-rich-text-editor\")).get(recipientIndex);"},{"lineNumber":850,"author":{"gitId":"-"},"content":"        scrollElementToCenter(editor);"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        return editor;"},{"lineNumber":852,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":853,"author":{"gitId":"-"},"content":""},{"lineNumber":854,"author":{"gitId":"-"},"content":"    private String getResponseLengthText(int qnNumber, String recipient) {"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        return getQuestionForm(qnNumber).findElements(By.id(\"response-length\")).get(recipientIndex).getText();"},{"lineNumber":857,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":858,"author":{"gitId":"-"},"content":""},{"lineNumber":859,"author":{"gitId":"-"},"content":"    private String getDoubleString(Double value) {"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        return value % 1 \u003d\u003d 0 ? Integer.toString(value.intValue()) : Double.toString(value);"},{"lineNumber":861,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":862,"author":{"gitId":"-"},"content":""},{"lineNumber":863,"author":{"gitId":"-"},"content":"    private WebElement getMcqSection(int qnNumber, String recipient) {"},{"lineNumber":864,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":865,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":866,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-mcq-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":867,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":868,"author":{"gitId":"-"},"content":""},{"lineNumber":869,"author":{"gitId":"-"},"content":"    private WebElement getMcqOtherOptionRadioBtn(int qnNumber, String recipient) {"},{"lineNumber":870,"author":{"gitId":"-"},"content":"        WebElement mcqSection \u003d getMcqSection(qnNumber, recipient);"},{"lineNumber":871,"author":{"gitId":"-"},"content":"        return mcqSection.findElement(By.cssSelector(\"#other-option input[type\u003dradio]\"));"},{"lineNumber":872,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":873,"author":{"gitId":"-"},"content":""},{"lineNumber":874,"author":{"gitId":"-"},"content":"    private WebElement getMcqOtherOptionTextbox(int qnNumber, String recipient) {"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        WebElement mcqSection \u003d getMcqSection(qnNumber, recipient);"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        return mcqSection.findElement(By.cssSelector(\"#other-option input[type\u003dtext]\"));"},{"lineNumber":877,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":878,"author":{"gitId":"-"},"content":""},{"lineNumber":879,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getMcqOptions(int qnNumber, String recipient) {"},{"lineNumber":880,"author":{"gitId":"-"},"content":"        WebElement mcqSection \u003d getMcqSection(qnNumber, recipient);"},{"lineNumber":881,"author":{"gitId":"-"},"content":"        return mcqSection.findElements(By.className(\"option-text\"));"},{"lineNumber":882,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getMcqRadioBtns(int qnNumber, String recipient) {"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        WebElement mcqSection \u003d getMcqSection(qnNumber, recipient);"},{"lineNumber":886,"author":{"gitId":"-"},"content":"        return mcqSection.findElements(By.cssSelector(\"input[type\u003dradio]\"));"},{"lineNumber":887,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":888,"author":{"gitId":"-"},"content":""},{"lineNumber":889,"author":{"gitId":"-"},"content":"    private WebElement getMsqSection(int qnNumber, String recipient) {"},{"lineNumber":890,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":891,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":892,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-msq-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":893,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":894,"author":{"gitId":"-"},"content":""},{"lineNumber":895,"author":{"gitId":"-"},"content":"    private WebElement getMsqOtherOptionCheckbox(int qnNumber, String recipient) {"},{"lineNumber":896,"author":{"gitId":"-"},"content":"        WebElement msqSection \u003d getMsqSection(qnNumber, recipient);"},{"lineNumber":897,"author":{"gitId":"-"},"content":"        return msqSection.findElement(By.cssSelector(\"#other-option input[type\u003dcheckbox]\"));"},{"lineNumber":898,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":899,"author":{"gitId":"-"},"content":""},{"lineNumber":900,"author":{"gitId":"-"},"content":"    private WebElement getMsqOtherOptionTextbox(int qnNumber, String recipient) {"},{"lineNumber":901,"author":{"gitId":"-"},"content":"        WebElement msqSection \u003d getMsqSection(qnNumber, recipient);"},{"lineNumber":902,"author":{"gitId":"-"},"content":"        return msqSection.findElement(By.cssSelector(\"#other-option input[type\u003dtext]\"));"},{"lineNumber":903,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":904,"author":{"gitId":"-"},"content":""},{"lineNumber":905,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getMsqOptions(int qnNumber, String recipient) {"},{"lineNumber":906,"author":{"gitId":"-"},"content":"        WebElement msqSection \u003d getMsqSection(qnNumber, recipient);"},{"lineNumber":907,"author":{"gitId":"-"},"content":"        return msqSection.findElements(By.tagName(\"strong\"));"},{"lineNumber":908,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":909,"author":{"gitId":"-"},"content":""},{"lineNumber":910,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getMsqCheckboxes(int qnNumber, String recipient) {"},{"lineNumber":911,"author":{"gitId":"-"},"content":"        WebElement msqSection \u003d getMsqSection(qnNumber, recipient);"},{"lineNumber":912,"author":{"gitId":"-"},"content":"        return msqSection.findElements(By.cssSelector(\"input[type\u003dcheckbox]\"));"},{"lineNumber":913,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":914,"author":{"gitId":"-"},"content":""},{"lineNumber":915,"author":{"gitId":"-"},"content":"    private WebElement getNumScaleSection(int qnNumber, String recipient) {"},{"lineNumber":916,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":917,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":918,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-num-scale-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":919,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":920,"author":{"gitId":"-"},"content":""},{"lineNumber":921,"author":{"gitId":"-"},"content":"    private WebElement getNumScaleInput(int qnNumber, String recipient) {"},{"lineNumber":922,"author":{"gitId":"-"},"content":"        WebElement numScaleSection \u003d getNumScaleSection(qnNumber, recipient);"},{"lineNumber":923,"author":{"gitId":"-"},"content":"        return numScaleSection.findElement(By.tagName(\"input\"));"},{"lineNumber":924,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":925,"author":{"gitId":"-"},"content":""},{"lineNumber":926,"author":{"gitId":"-"},"content":"    private WebElement getConstSumOptionsSection(int qnNumber, String recipient) {"},{"lineNumber":927,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":928,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":929,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-constsum-options-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":930,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":931,"author":{"gitId":"-"},"content":""},{"lineNumber":932,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getConstSumOptions(int qnNumber, String recipient) {"},{"lineNumber":933,"author":{"gitId":"-"},"content":"        WebElement constSumOptionSection \u003d getConstSumOptionsSection(qnNumber, recipient);"},{"lineNumber":934,"author":{"gitId":"-"},"content":"        return constSumOptionSection.findElements(By.tagName(\"strong\"));"},{"lineNumber":935,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":936,"author":{"gitId":"-"},"content":""},{"lineNumber":937,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getConstSumInputs(int qnNumber, String recipient) {"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        WebElement constSumOptionSection \u003d getConstSumOptionsSection(qnNumber, recipient);"},{"lineNumber":939,"author":{"gitId":"-"},"content":"        return constSumOptionSection.findElements(By.cssSelector(\"input[type\u003dnumber]\"));"},{"lineNumber":940,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":941,"author":{"gitId":"-"},"content":""},{"lineNumber":942,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getConstSumRecipientInputs(int qnNumber) {"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        return getQuestionForm(qnNumber).findElements(By.cssSelector(\"input[type\u003dnumber]\"));"},{"lineNumber":944,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":945,"author":{"gitId":"-"},"content":""},{"lineNumber":946,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getContributionDropdowns(int questionNum) {"},{"lineNumber":947,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElements(By.tagName(\"select\"));"},{"lineNumber":948,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":949,"author":{"gitId":"-"},"content":""},{"lineNumber":950,"author":{"gitId":"-"},"content":"    private String getContributionString(int answer) {"},{"lineNumber":951,"author":{"gitId":"-"},"content":"        if (answer \u003d\u003d Const.POINTS_NOT_SURE) {"},{"lineNumber":952,"author":{"gitId":"-"},"content":"            return \"Not Sure\";"},{"lineNumber":953,"author":{"gitId":"-"},"content":"        } else if (answer \u003d\u003d Const.POINTS_EQUAL_SHARE) {"},{"lineNumber":954,"author":{"gitId":"-"},"content":"            return \"Equal share\";"},{"lineNumber":955,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":956,"author":{"gitId":"-"},"content":"            return \"Equal share\" + (answer \u003e 100 ? \" + \" : \" - \") + Math.abs(answer - 100) + \"%\";"},{"lineNumber":957,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":958,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":959,"author":{"gitId":"-"},"content":""},{"lineNumber":960,"author":{"gitId":"-"},"content":"    private WebElement getRubricSection(int qnNumber, String recipient) {"},{"lineNumber":961,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":962,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":963,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-rubric-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":964,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":965,"author":{"gitId":"-"},"content":""},{"lineNumber":966,"author":{"gitId":"-"},"content":"    private WebElement getRubricTable(int qnNumber, String recipient) {"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        return getRubricSection(qnNumber, recipient).findElement(By.tagName(\"table\"));"},{"lineNumber":968,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":969,"author":{"gitId":"-"},"content":""},{"lineNumber":970,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRubricInputs(int qnNumber, String recipient, int rowNumber) {"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        WebElement rubricRow \u003d getRubricSection(qnNumber, recipient).findElements(By.tagName(\"tr\")).get(rowNumber - 1);"},{"lineNumber":972,"author":{"gitId":"-"},"content":"        return rubricRow.findElements(By.tagName(\"input\"));"},{"lineNumber":973,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":974,"author":{"gitId":"-"},"content":""},{"lineNumber":975,"author":{"gitId":"-"},"content":"    private WebElement getRankOptionsSection(int qnNumber, String recipient) {"},{"lineNumber":976,"author":{"gitId":"-"},"content":"        int recipientIndex \u003d getRecipientIndex(qnNumber, recipient);"},{"lineNumber":977,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(qnNumber);"},{"lineNumber":978,"author":{"gitId":"-"},"content":"        return questionForm.findElements(By.tagName(\"tm-rank-options-question-edit-answer-form\")).get(recipientIndex);"},{"lineNumber":979,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":980,"author":{"gitId":"-"},"content":""},{"lineNumber":981,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRankOptions(int questionNum, String recipient) {"},{"lineNumber":982,"author":{"gitId":"-"},"content":"        WebElement rankSection \u003d getRankOptionsSection(questionNum, recipient);"},{"lineNumber":983,"author":{"gitId":"-"},"content":"        return rankSection.findElements(By.tagName(\"strong\"));"},{"lineNumber":984,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":985,"author":{"gitId":"-"},"content":""},{"lineNumber":986,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRankOptionsDropdowns(int questionNum, String recipient) {"},{"lineNumber":987,"author":{"gitId":"-"},"content":"        WebElement rankSection \u003d getRankOptionsSection(questionNum, recipient);"},{"lineNumber":988,"author":{"gitId":"-"},"content":"        return rankSection.findElements(By.tagName(\"select\"));"},{"lineNumber":989,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":990,"author":{"gitId":"-"},"content":""},{"lineNumber":991,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRankRecipientDropdowns(int questionNum) {"},{"lineNumber":992,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElements(By.tagName(\"select\"));"},{"lineNumber":993,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":994,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":13,"dishenggg":45,"mingyuanc":14,"-":922}},{"path":"src/e2e/java/teammates/e2e/pageobjects/InstructorFeedbackEditPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.openqa.selenium.Keys;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.openqa.selenium.support.FindBy;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankQuestionDetails;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.test.ThreadHelper;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Represents the instructor feedback edit page of the website."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class InstructorFeedbackEditPage extends AppPage {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String CUSTOM_FEEDBACK_PATH_OPTION \u003d \"Custom feedback path\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_PATH_SEPARATOR \u003d \" will give feedback on \";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String CUSTOM_VISIBILITY_OPTION \u003d \"Custom visibility options\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-fs-edit\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private WebElement fsEditButton;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-fs-save\")"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private WebElement fsSaveButton;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-fs-copy\")"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private WebElement fsCopyButton;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"edit-course-id\")"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private WebElement courseIdTextBox;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"time-zone\")"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private WebElement timezoneDropDown;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"course-name\")"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private WebElement courseNameTextBox;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"edit-session-name\")"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private WebElement sessionNameTextBox;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"instructions\")"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private WebElement instructionsEditor;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"submission-start-date\")"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private WebElement startDateBox;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"submission-start-time\")"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private WebElement startTimeDropdown;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"submission-end-date\")"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private WebElement endDateBox;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"submission-end-time\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private WebElement endTimeDropdown;"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"grace-period\")"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private WebElement gracePeriodDropdown;"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"submission-status\")"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private WebElement submissionStatusTextBox;"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"published-status\")"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private WebElement publishStatusTextBox;"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-change-visibility\")"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private WebElement changeVisibilityButton;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"session-visibility-custom\")"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private WebElement customSessionVisibleTimeButton;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"session-visibility-date\")"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private WebElement sessionVisibilityDateBox;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"session-visibility-time\")"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private WebElement sessionVisibilityTimeDropdown;"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"session-visibility-at-open\")"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private WebElement openSessionVisibleTimeButton;"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"response-visibility-custom\")"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private WebElement customResponseVisibleTimeButton;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"response-visibility-date\")"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private WebElement responseVisibilityDateBox;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"response-visibility-time\")"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private WebElement responseVisibilityTimeDropdown;"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"response-visibility-immediately\")"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private WebElement immediateResponseVisibleTimeButton;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"response-visibility-manually\")"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private WebElement manualResponseVisibleTimeButton;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-change-email\")"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private WebElement changeEmailButton;"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"email-opening\")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private WebElement openingSessionEmailCheckbox;"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"email-closing\")"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private WebElement closingSessionEmailCheckbox;"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"email-published\")"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private WebElement publishedSessionEmailCheckbox;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-new-question\")"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private WebElement addNewQuestionButton;"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-copy-question\")"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private WebElement copyQuestionButton;"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"preview-student\")"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private WebElement previewAsStudentDropdown;"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-preview-student\")"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private WebElement previewAsStudentButton;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"preview-instructor\")"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private WebElement previewAsInstructorDropdown;"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @FindBy(id \u003d \"btn-preview-instructor\")"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private WebElement previewAsInstructorButton;"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public InstructorFeedbackEditPage(Browser browser) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        super(browser);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    protected boolean containsExpectedPageContents() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return getPageTitle().contains(\"Edit Feedback Session\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void verifySessionDetails(CourseAttributes course, FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.id(\"instructions\"));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertEquals(getCourseId(), course.getId());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(getCourseName(), course.getName());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertEquals(getTimeZone(), feedbackSession.getTimeZone());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertEquals(getFeedbackSessionName(), feedbackSession.getFeedbackSessionName());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(getInstructions(), feedbackSession.getInstructions());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(getStartDate(), getDateString(feedbackSession.getStartTime(), feedbackSession.getTimeZone()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(getStartTime(), getTimeString(feedbackSession.getStartTime(), feedbackSession.getTimeZone()));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertEquals(getEndDate(), getDateString(feedbackSession.getEndTime(), feedbackSession.getTimeZone()));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(getEndTime(), getTimeString(feedbackSession.getEndTime(), feedbackSession.getTimeZone()));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(getGracePeriod(), feedbackSession.getGracePeriodMinutes() + \" min\");"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        verifySubmissionStatus(feedbackSession);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        verifyPublishedStatus(feedbackSession);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        verifyVisibilitySettings(feedbackSession);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        verifyEmailSettings(feedbackSession);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private void verifySubmissionStatus(FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String submissionStatus \u003d getSubmissionStatus();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (feedbackSession.isClosed()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            assertEquals(submissionStatus, \"Closed\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } else if (feedbackSession.isVisible() \u0026\u0026 (feedbackSession.isOpened() || feedbackSession.isInGracePeriod())) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            assertEquals(submissionStatus, \"Open\");"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            assertEquals(submissionStatus, \"Awaiting\");"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private void verifyPublishedStatus(FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        String publishedStatus \u003d getPublishedStatus();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        if (feedbackSession.isPublished()) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            assertEquals(publishedStatus, \"Published\");"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            assertEquals(publishedStatus, \"Not Published\");"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    private void verifyVisibilitySettings(FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Instant sessionVisibleTime \u003d feedbackSession.getSessionVisibleFromTime();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Instant responseVisibleTime \u003d feedbackSession.getResultsVisibleFromTime();"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // Default settings, assert setting section not expanded"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (sessionVisibleTime.equals(Const.TIME_REPRESENTS_FOLLOW_OPENING)"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                \u0026\u0026 responseVisibleTime.equals(Const.TIME_REPRESENTS_LATER)) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            assertTrue(isElementPresent(\"btn-change-visibility\"));"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        verifySessionVisibilitySettings(sessionVisibleTime, feedbackSession);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        verifyResponseVisibilitySettings(responseVisibleTime, feedbackSession);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    private void verifySessionVisibilitySettings(Instant sessionVisibleTime,"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                                                 FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        if (sessionVisibleTime.equals(Const.TIME_REPRESENTS_FOLLOW_OPENING)) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            assertTrue(openSessionVisibleTimeButton.isSelected());"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            assertTrue(customSessionVisibleTimeButton.isSelected());"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            assertEquals(getSessionVisibilityDate(), getDateString(feedbackSession.getSessionVisibleFromTime(),"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    feedbackSession.getTimeZone()));"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            assertEquals(getSessionVisibilityTime(), getTimeString(feedbackSession.getSessionVisibleFromTime(),"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    feedbackSession.getTimeZone()));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private void verifyResponseVisibilitySettings(Instant responseVisibleTime,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                                                  FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        if (responseVisibleTime.equals(Const.TIME_REPRESENTS_FOLLOW_VISIBLE)) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            assertTrue(immediateResponseVisibleTimeButton.isSelected());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        } else if (responseVisibleTime.equals(Const.TIME_REPRESENTS_LATER)) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            assertTrue(manualResponseVisibleTimeButton.isSelected());"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            assertTrue(customSessionVisibleTimeButton.isSelected());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            assertEquals(getResponseVisibilityDate(), getDateString(feedbackSession.getResultsVisibleFromTime(),"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    feedbackSession.getTimeZone()));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            assertEquals(getResponseVisibilityTime(), getTimeString(feedbackSession.getResultsVisibleFromTime(),"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    feedbackSession.getTimeZone()));"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    private void verifyEmailSettings(FeedbackSessionAttributes feedbackSession) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        boolean isOpeningEmailEnabled \u003d feedbackSession.isOpeningEmailEnabled();"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        boolean isClosingEmailEnabled \u003d feedbackSession.isClosingEmailEnabled();"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        boolean isPublishedEmailEnabled \u003d feedbackSession.isPublishedEmailEnabled();"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        // Default settings, assert setting section not expanded"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        if (isOpeningEmailEnabled \u0026\u0026 isClosingEmailEnabled \u0026\u0026 isPublishedEmailEnabled) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            assertTrue(isElementPresent(\"btn-change-email\"));"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        if (isOpeningEmailEnabled) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            assertTrue(openingSessionEmailCheckbox.isSelected());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        if (isClosingEmailEnabled) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            assertTrue(closingSessionEmailCheckbox.isSelected());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        if (isPublishedEmailEnabled) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            assertTrue(publishedSessionEmailCheckbox.isSelected());"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public void editSessionDetails(FeedbackSessionAttributes newFeedbackSessionDetails) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        click(fsEditButton);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        setInstructions(newFeedbackSessionDetails.getInstructions());"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        setSessionStartDateTime(newFeedbackSessionDetails.getStartTime(), newFeedbackSessionDetails.getTimeZone());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        setSessionEndDateTime(newFeedbackSessionDetails.getEndTime(), newFeedbackSessionDetails.getTimeZone());"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        selectGracePeriod(newFeedbackSessionDetails.getGracePeriodMinutes());"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        setVisibilitySettings(newFeedbackSessionDetails);"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        setEmailSettings(newFeedbackSessionDetails);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        click(fsSaveButton);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    public void copySessionToOtherCourse(CourseAttributes otherCourse, String sessionName) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        click(fsCopyButton);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        WebElement copyFsModal \u003d waitForElementPresence(By.id(\"copy-course-modal\"));"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"        fillTextBox(copyFsModal.findElement(By.id(\"copy-session-name\")), sessionName);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e options \u003d copyFsModal.findElements(By.className(\"form-check\"));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        for (WebElement option : options) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            String courseId \u003d option.findElement(By.cssSelector(\"label span\")).getText();"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            if (courseId.equals(otherCourse.getId())) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                click(option.findElement(By.tagName(\"input\")));"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        click(browser.driver.findElement(By.id(\"btn-confirm-copy-course\")));"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public void deleteSession() {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        clickAndConfirm(waitForElementPresence(By.id(\"btn-fs-delete\")));"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"    public FeedbackSubmitPage previewAsStudent(StudentAttributes student) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(previewAsStudentDropdown, String.format(\"[%s] %s\", student.getTeam(), student.getName()));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        click(previewAsStudentButton);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(2000);"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        switchToNewWindow();"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        return changePageType(FeedbackSubmitPage.class);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public FeedbackSubmitPage previewAsInstructor(InstructorAttributes instructor) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(previewAsInstructorDropdown, instructor.getName());"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        click(previewAsInstructorButton);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(2000);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        switchToNewWindow();"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        return changePageType(FeedbackSubmitPage.class);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    public void verifyNumQuestions(int expected) {"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        assertEquals(getNumQuestions(), expected);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    public void verifyQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        scrollElementToCenter(getQuestionForm(questionNum));"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        assertEquals(feedbackQuestion.getQuestionType(), getQuestionType(questionNum));"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        assertEquals(feedbackQuestion.getQuestionNumber(), getQuestionNumber(questionNum));"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        assertEquals(feedbackQuestion.getQuestionDetailsCopy().getQuestionText(), getQuestionBrief(questionNum));"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        assertEquals(getQuestionDescription(questionNum), feedbackQuestion.getQuestionDescription());"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        verifyFeedbackPathSettings(questionNum, feedbackQuestion);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        verifyQuestionVisibilitySettings(questionNum, feedbackQuestion);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"    private void verifyFeedbackPathSettings(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        assertEquals(getDisplayGiverName(feedbackQuestion.getGiverType()), getFeedbackGiver(questionNum));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        String feedbackReceiver \u003d getFeedbackReceiver(questionNum);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        assertEquals(getDisplayRecipientName(feedbackQuestion.getRecipientType()), feedbackReceiver);"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        if (feedbackReceiver.equals(getDisplayRecipientName(FeedbackParticipantType.INSTRUCTORS))"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                || feedbackReceiver.equals(getDisplayRecipientName(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF))"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                || feedbackReceiver.equals(getDisplayRecipientName(FeedbackParticipantType.TEAMS_EXCLUDING_SELF))) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            verifyNumberOfEntitiesToGiveFeedbackTo(questionNum, feedbackQuestion.getNumberOfEntitiesToGiveFeedbackTo());"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    private void verifyNumberOfEntitiesToGiveFeedbackTo(int questionNum, int numberOfEntitiesToGiveFeedbackTo) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        WebElement feedbackPathPanel \u003d questionForm.findElement(By.tagName(\"tm-feedback-path-panel\"));"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        if (numberOfEntitiesToGiveFeedbackTo \u003d\u003d Const.MAX_POSSIBLE_RECIPIENTS) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            assertTrue(feedbackPathPanel.findElement(By.id(\"unlimited-recipients\")).isSelected());"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            assertTrue(feedbackPathPanel.findElement(By.id(\"custom-recipients\")).isSelected());"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            assertEquals(feedbackPathPanel.findElement(By.id(\"custom-recipients-number\")).getAttribute(\"value\"),"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                    Integer.toString(numberOfEntitiesToGiveFeedbackTo));"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    private void verifyQuestionVisibilitySettings(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        WebElement visibilityPanel \u003d questionForm.findElement(By.tagName(\"tm-visibility-panel\"));"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        String visibility \u003d visibilityPanel.findElement(By.cssSelector(\"#btn-question-visibility span\")).getText();"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e showResponsesTo \u003d feedbackQuestion.getShowResponsesTo();"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e showGiverNameTo \u003d feedbackQuestion.getShowGiverNameTo();"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e showRecipientNameTo \u003d feedbackQuestion.getShowRecipientNameTo();"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"        switch (visibility) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        case \"Shown anonymously to recipient and giver\u0027s team members, visible to instructors\":"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.OWN_TEAM_MEMBERS));"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 3);"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":363,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 1);"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 2);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"        case \"Visible to instructors only\":"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 1);"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 1);"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 1);"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"        case \"Shown anonymously to recipient and instructors\":"},{"lineNumber":382,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 2);"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 0);"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 2);"},{"lineNumber":391,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"        case \"Shown anonymously to recipient, visible to instructors\":"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 2);"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 1);"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 2);"},{"lineNumber":404,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        case \"Shown anonymously to recipient and giver/recipient\u0027s team members, visible to instructors\":"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.OWN_TEAM_MEMBERS));"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS));"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 4);"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 1);"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 2);"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"        case \"Visible to recipient and instructors\":"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            assertTrue(showResponsesTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            assertEquals(showResponsesTo.size(), 2);"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            assertTrue(showGiverNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            assertEquals(showGiverNameTo.size(), 2);"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            assertTrue(showRecipientNameTo.contains(FeedbackParticipantType.RECEIVER));"},{"lineNumber":432,"author":{"gitId":"-"},"content":"            assertEquals(showRecipientNameTo.size(), 2);"},{"lineNumber":433,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":436,"author":{"gitId":"-"},"content":"            verifyCustomQuestionVisibility(questionNum, feedbackQuestion);"},{"lineNumber":437,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":438,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":439,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"    private void verifyCustomQuestionVisibility(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        WebElement visibilityPanel \u003d questionForm.findElement(By.tagName(\"tm-visibility-panel\"));"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        String visibility \u003d visibilityPanel.findElement(By.cssSelector(\"#btn-question-visibility span\")).getText();"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        assertEquals(visibility, CUSTOM_VISIBILITY_OPTION);"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"        FeedbackParticipantType giver \u003d feedbackQuestion.getGiverType();"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        FeedbackParticipantType receiver \u003d feedbackQuestion.getRecipientType();"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        WebElement customVisibilityTable \u003d visibilityPanel.findElement(By.id(\"custom-visibility-table\"));"},{"lineNumber":450,"author":{"gitId":"-"},"content":"        assertVisibilityBoxesSelected(customVisibilityTable, giver, receiver, feedbackQuestion.getShowResponsesTo(), 1);"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        assertVisibilityBoxesSelected(customVisibilityTable, giver, receiver, feedbackQuestion.getShowGiverNameTo(), 2);"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        assertVisibilityBoxesSelected(customVisibilityTable, giver, receiver, feedbackQuestion.getShowRecipientNameTo(), 3);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"    private void assertVisibilityBoxesSelected(WebElement table, FeedbackParticipantType giver,"},{"lineNumber":456,"author":{"gitId":"-"},"content":"                                               FeedbackParticipantType receiver, List\u003cFeedbackParticipantType\u003e participants,"},{"lineNumber":457,"author":{"gitId":"-"},"content":"                                               int colNum) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e possibleTypes \u003d new ArrayList\u003c\u003e(Arrays.asList(FeedbackParticipantType.RECEIVER,"},{"lineNumber":459,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.OWN_TEAM_MEMBERS, FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,"},{"lineNumber":460,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.STUDENTS, FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        if (!giver.equals(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":462,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.OWN_TEAM_MEMBERS);"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        if (!receiver.equals(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":465,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        if (receiver.equals(FeedbackParticipantType.NONE)"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                || receiver.equals(FeedbackParticipantType.SELF)"},{"lineNumber":469,"author":{"gitId":"-"},"content":"                || receiver.equals(FeedbackParticipantType.OWN_TEAM)) {"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER);"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElements(By.tagName(\"tr\"));"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        int index \u003d colNum - 1;"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType participant : participants) {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"            assertTrue(rows.get(possibleTypes.indexOf(participant)).findElements(By.tagName(\"input\")).get(index)"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                    .isSelected());"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"    public void addTemplateQuestion(int optionNum) {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        addNewQuestion(1);"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        WebElement templateQuestionModal \u003d waitForElementPresence(By.id(\"template-question-modal\"));"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"        click(templateQuestionModal.findElements(By.tagName(\"input\")).get(optionNum - 1));"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        clickAndWaitForNewQuestion(browser.driver.findElement(By.id(\"btn-confirm-template\")));"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"    public void copyQuestion(String courseId, String questionText) {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        click(copyQuestionButton);"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        WebElement copyQuestionModal \u003d waitForElementPresence(By.id(\"copy-question-modal\"));"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e cards \u003d copyQuestionModal.findElements(By.className(\"card\"));"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        for (WebElement card : cards) {"},{"lineNumber":496,"author":{"gitId":"-"},"content":"            WebElement cardHeader \u003d card.findElement(By.className(\"card-header\"));"},{"lineNumber":497,"author":{"gitId":"-"},"content":"            if (cardHeader.getText().startsWith(\"[\" + courseId + \"]\")) {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"                click(cardHeader);"},{"lineNumber":499,"author":{"gitId":"-"},"content":"                WebElement cardBody \u003d waitForElementPresence(By.className(\"card-body\"));"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                // Reload questions"},{"lineNumber":501,"author":{"gitId":"-"},"content":"                WebElement reloadBtn \u003d cardBody.findElement(By.tagName(\"button\"));"},{"lineNumber":502,"author":{"gitId":"-"},"content":"                click(reloadBtn);"},{"lineNumber":503,"author":{"gitId":"-"},"content":"                WebElement table \u003d waitForElementPresence(By.id(\"copy-question-table\"));"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                List\u003cWebElement\u003e rows \u003d table.findElements(By.cssSelector(\"tbody tr\"));"},{"lineNumber":505,"author":{"gitId":"-"},"content":"                for (WebElement row : rows) {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                    List\u003cWebElement\u003e cells \u003d row.findElements(By.tagName(\"td\"));"},{"lineNumber":507,"author":{"gitId":"-"},"content":"                    if (cells.get(2).getText().equals(questionText)) {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"                        markOptionAsSelected(cells.get(0).findElement(By.tagName(\"input\")));"},{"lineNumber":509,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":510,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":511,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":513,"author":{"gitId":"-"},"content":"        clickAndWaitForNewQuestion(browser.driver.findElement(By.id(\"btn-confirm-copy-question\")));"},{"lineNumber":514,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":515,"author":{"gitId":"-"},"content":""},{"lineNumber":516,"author":{"gitId":"-"},"content":"    public void editQuestionNumber(int questionNum, int newQuestionNumber) {"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(getQuestionForm(questionNum).findElement(By.id(\"question-number-dropdown\")),"},{"lineNumber":519,"author":{"gitId":"-"},"content":"                Integer.toString(newQuestionNumber));"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"    public void editQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"    private void inputQuestionDetails(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        setQuestionBrief(questionNum, feedbackQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        setQuestionDescription(questionNum, feedbackQuestion.getQuestionDescription());"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        FeedbackQuestionType questionType \u003d feedbackQuestion.getQuestionType();"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        if (!questionType.equals(FeedbackQuestionType.CONTRIB)) {"},{"lineNumber":534,"author":{"gitId":"-"},"content":"            setFeedbackPath(questionNum, feedbackQuestion);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"            setQuestionVisibility(questionNum, feedbackQuestion);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":537,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"    private void inputQuestionDetails(int questionNum, FeedbackQuestion feedbackQuestion) {"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        setQuestionBrief(questionNum, feedbackQuestion.getQuestionDetailsCopy().getQuestionText());"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        setQuestionDescription(questionNum, feedbackQuestion.getDescription());"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        FeedbackQuestionType questionType \u003d feedbackQuestion.getQuestionDetailsCopy().getQuestionType();"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        if (!questionType.equals(FeedbackQuestionType.CONTRIB)) {"},{"lineNumber":544,"author":{"gitId":"-"},"content":"            setFeedbackPath(questionNum, feedbackQuestion);"},{"lineNumber":545,"author":{"gitId":"-"},"content":"            setQuestionVisibility(questionNum, feedbackQuestion);"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":547,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"    public void duplicateQuestion(int questionNum) {"},{"lineNumber":550,"author":{"gitId":"-"},"content":"        clickAndWaitForNewQuestion(getQuestionForm(questionNum).findElement(By.id(\"btn-duplicate-question\")));"},{"lineNumber":551,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"    public void deleteQuestion(int questionNum) {"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        clickAndConfirm(getQuestionForm(questionNum).findElement(By.id(\"btn-delete-question\")));"},{"lineNumber":555,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"    public void verifyTextQuestionDetails(int questionNum, FeedbackTextQuestionDetails questionDetails) {"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        String recommendLength \u003d getRecommendedTextLengthField(questionNum).getAttribute(\"value\");"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        assertEquals(recommendLength, questionDetails.getRecommendedLength().toString());"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"    public void addTextQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        addNewQuestion(2);"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        FeedbackTextQuestionDetails questionDetails \u003d"},{"lineNumber":567,"author":{"gitId":"-"},"content":"                (FeedbackTextQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        fillTextBox(getRecommendedTextLengthField(questionNum), questionDetails.getRecommendedLength().toString());"},{"lineNumber":569,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":570,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":571,"author":{"gitId":"-"},"content":""},{"lineNumber":572,"author":{"gitId":"-"},"content":"    public void addTextQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        addNewQuestion(2);"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":575,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":576,"author":{"gitId":"-"},"content":"        FeedbackTextQuestionDetails questionDetails \u003d"},{"lineNumber":577,"author":{"gitId":"-"},"content":"                (FeedbackTextQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        fillTextBox(getRecommendedTextLengthField(questionNum), questionDetails.getRecommendedLength().toString());"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":581,"author":{"gitId":"-"},"content":""},{"lineNumber":582,"author":{"gitId":"-"},"content":"    public void editTextQuestion(int questionNum, FeedbackTextQuestionDetails textQuestionDetails) {"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        WebElement recommendedTextLengthField \u003d getRecommendedTextLengthField(questionNum);"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        waitForElementToBeClickable(recommendedTextLengthField);"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        fillTextBox(recommendedTextLengthField, textQuestionDetails.getRecommendedLength().toString());"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":588,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":589,"author":{"gitId":"-"},"content":""},{"lineNumber":590,"author":{"gitId":"-"},"content":"    public void verifyMcqQuestionDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails) {"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        if (verifyGeneratedOptions(questionNum, questionDetails.getGenerateOptionsFor())) {"},{"lineNumber":592,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        verifyOptions(questionNum, questionDetails.getMcqChoices());"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        verifyOptionWeights(questionNum, questionDetails.isHasAssignedWeights(), questionDetails.getMcqWeights());"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        verifyOtherOption(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMcqOtherWeight());"},{"lineNumber":597,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"    public void addMcqQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        addNewQuestion(3);"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        FeedbackMcqQuestionDetails questionDetails \u003d (FeedbackMcqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        inputMcqDetails(questionNum, questionDetails);"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":606,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":607,"author":{"gitId":"-"},"content":""},{"lineNumber":608,"author":{"gitId":"dishenggg"},"content":"    public void addMcqQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":609,"author":{"gitId":"dishenggg"},"content":"        addNewQuestion(3);"},{"lineNumber":610,"author":{"gitId":"dishenggg"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":611,"author":{"gitId":"dishenggg"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":612,"author":{"gitId":"-"},"content":"        FeedbackMcqQuestionDetails questionDetails \u003d (FeedbackMcqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        inputMcqDetails(questionNum, questionDetails);"},{"lineNumber":614,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"    public void editMcqQuestion(int questionNum, FeedbackMcqQuestionDetails questionDetails) {"},{"lineNumber":618,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        inputMcqDetails(questionNum, questionDetails);"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":622,"author":{"gitId":"-"},"content":""},{"lineNumber":623,"author":{"gitId":"-"},"content":"    public void verifyMsqQuestionDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        verifyMaxOptions(questionNum, questionDetails.getMaxSelectableChoices());"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        verifyMinOptions(questionNum, questionDetails.getMinSelectableChoices());"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        if (verifyGeneratedOptions(questionNum, questionDetails.getGenerateOptionsFor())) {"},{"lineNumber":627,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":629,"author":{"gitId":"-"},"content":"        verifyOptions(questionNum, questionDetails.getMsqChoices());"},{"lineNumber":630,"author":{"gitId":"-"},"content":"        verifyOptionWeights(questionNum, questionDetails.isHasAssignedWeights(), questionDetails.getMsqWeights());"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        verifyOtherOption(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMsqOtherWeight());"},{"lineNumber":632,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"    public void addMsqQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        addNewQuestion(4);"},{"lineNumber":636,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":637,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        FeedbackMsqQuestionDetails questionDetails \u003d (FeedbackMsqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        inputMsqDetails(questionNum, questionDetails);"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":641,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":642,"author":{"gitId":"-"},"content":""},{"lineNumber":643,"author":{"gitId":"dishenggg"},"content":"    public void addMsqQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":644,"author":{"gitId":"dishenggg"},"content":"        addNewQuestion(4);"},{"lineNumber":645,"author":{"gitId":"dishenggg"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":646,"author":{"gitId":"dishenggg"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":647,"author":{"gitId":"dishenggg"},"content":"        FeedbackMsqQuestionDetails questionDetails \u003d (FeedbackMsqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":648,"author":{"gitId":"dishenggg"},"content":"        inputMsqDetails(questionNum, questionDetails);"},{"lineNumber":649,"author":{"gitId":"dishenggg"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":650,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":652,"author":{"gitId":"-"},"content":"    public void editMsqQuestion(int questionNum, FeedbackMsqQuestionDetails msqQuestionDetails) {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        inputMsqDetails(questionNum, msqQuestionDetails);"},{"lineNumber":655,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":656,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"-"},"content":"    public void verifyNumScaleQuestionDetails(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails) {"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        assertEquals(getMinNumscaleInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":660,"author":{"gitId":"-"},"content":"                Integer.toString(questionDetails.getMinScale()));"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        assertEquals(getNumScaleIncrementInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":662,"author":{"gitId":"-"},"content":"                getDoubleString(questionDetails.getStep()));"},{"lineNumber":663,"author":{"gitId":"-"},"content":"        assertEquals(getMaxNumscaleInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":664,"author":{"gitId":"-"},"content":"                Integer.toString(questionDetails.getMaxScale()));"},{"lineNumber":665,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":666,"author":{"gitId":"-"},"content":""},{"lineNumber":667,"author":{"gitId":"-"},"content":"    public void addNumScaleQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        addNewQuestion(5);"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        FeedbackNumericalScaleQuestionDetails questionDetails \u003d"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                (FeedbackNumericalScaleQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":673,"author":{"gitId":"-"},"content":"        inputNumScaleDetails(questionNum, questionDetails);"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":675,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"marquestye"},"content":"    public void addNumScaleQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":678,"author":{"gitId":"marquestye"},"content":"        addNewQuestion(5);"},{"lineNumber":679,"author":{"gitId":"marquestye"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":680,"author":{"gitId":"marquestye"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":681,"author":{"gitId":"marquestye"},"content":"        FeedbackNumericalScaleQuestionDetails questionDetails \u003d"},{"lineNumber":682,"author":{"gitId":"-"},"content":"                (FeedbackNumericalScaleQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        inputNumScaleDetails(questionNum, questionDetails);"},{"lineNumber":684,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":685,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":686,"author":{"gitId":"-"},"content":""},{"lineNumber":687,"author":{"gitId":"-"},"content":"    public void editNumScaleQuestion(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails) {"},{"lineNumber":688,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":689,"author":{"gitId":"-"},"content":"        inputNumScaleDetails(questionNum, questionDetails);"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":691,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":692,"author":{"gitId":"-"},"content":""},{"lineNumber":693,"author":{"gitId":"-"},"content":"    public void verifyConstSumQuestionDetails(int questionNum, FeedbackConstantSumQuestionDetails questionDetails) {"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        if (!questionDetails.isDistributeToRecipients()) {"},{"lineNumber":695,"author":{"gitId":"-"},"content":"            verifyOptions(questionNum, questionDetails.getConstSumOptions());"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"        if (questionDetails.isPointsPerOption()) {"},{"lineNumber":699,"author":{"gitId":"-"},"content":"            assertTrue(getConstSumPerOptionPointsRadioBtn(questionNum).isSelected());"},{"lineNumber":700,"author":{"gitId":"-"},"content":"            assertEquals(getConstSumPerOptionPointsInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":701,"author":{"gitId":"-"},"content":"                    Integer.toString(questionDetails.getPoints()));"},{"lineNumber":702,"author":{"gitId":"-"},"content":"            assertFalse(getConstSumTotalPointsRadioBtn(questionNum).isSelected());"},{"lineNumber":703,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":704,"author":{"gitId":"-"},"content":"            assertTrue(getConstSumTotalPointsRadioBtn(questionNum).isSelected());"},{"lineNumber":705,"author":{"gitId":"-"},"content":"            assertEquals(getConstSumTotalPointsInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":706,"author":{"gitId":"-"},"content":"                    Integer.toString(questionDetails.getPoints()));"},{"lineNumber":707,"author":{"gitId":"-"},"content":"            assertFalse(getConstSumPerOptionPointsRadioBtn(questionNum).isSelected());"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"        if (questionDetails.isForceUnevenDistribution()) {"},{"lineNumber":711,"author":{"gitId":"-"},"content":"            String distributeFor \u003d questionDetails.getDistributePointsFor();"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            assertTrue(getConstSumUnevenDistributionCheckbox(questionNum).isSelected());"},{"lineNumber":713,"author":{"gitId":"-"},"content":"            assertEquals(getSelectedDropdownOptionText(getConstSumUnevenDistributionDropdown(questionNum)).trim(),"},{"lineNumber":714,"author":{"gitId":"-"},"content":"                    \"All options\".equals(distributeFor) ? \"Every option\" : distributeFor);"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":716,"author":{"gitId":"-"},"content":"            assertFalse(getConstSumUnevenDistributionCheckbox(questionNum).isSelected());"},{"lineNumber":717,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":718,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":719,"author":{"gitId":"-"},"content":""},{"lineNumber":720,"author":{"gitId":"-"},"content":"    public void addConstSumOptionQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":721,"author":{"gitId":"-"},"content":"        addNewQuestion(6);"},{"lineNumber":722,"author":{"gitId":"-"},"content":"        addConstSumQuestion(feedbackQuestion);"},{"lineNumber":723,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":724,"author":{"gitId":"-"},"content":""},{"lineNumber":725,"author":{"gitId":"-"},"content":"    public void addConstSumRecipientQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":726,"author":{"gitId":"-"},"content":"        addNewQuestion(7);"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        addConstSumQuestion(feedbackQuestion);"},{"lineNumber":728,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"    public void addConstSumQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":732,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        FeedbackConstantSumQuestionDetails questionDetails \u003d"},{"lineNumber":734,"author":{"gitId":"-"},"content":"                (FeedbackConstantSumQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        inputConstSumDetails(questionNum, questionDetails);"},{"lineNumber":736,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":737,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":738,"author":{"gitId":"-"},"content":""},{"lineNumber":739,"author":{"gitId":"-"},"content":"    public void editConstSumQuestion(int questionNum, FeedbackConstantSumQuestionDetails csQuestionDetails) {"},{"lineNumber":740,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":741,"author":{"gitId":"-"},"content":"        inputConstSumDetails(questionNum, csQuestionDetails);"},{"lineNumber":742,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":743,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":744,"author":{"gitId":"-"},"content":""},{"lineNumber":745,"author":{"gitId":"-"},"content":"    public void verifyContributionQuestionDetails(int questionNum, FeedbackContributionQuestionDetails questionDetails) {"},{"lineNumber":746,"author":{"gitId":"-"},"content":"        assertEquals(questionDetails.isZeroSum(), getZeroSumCheckbox(questionNum).isSelected());"},{"lineNumber":747,"author":{"gitId":"-"},"content":"        assertEquals(questionDetails.isNotSureAllowed(), getAllowNotSureContributionCheckbox(questionNum).isSelected());"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        if (questionDetails.isZeroSum()) {"},{"lineNumber":749,"author":{"gitId":"-"},"content":"            assertFalse(questionDetails.isNotSureAllowed());"},{"lineNumber":750,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":751,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":752,"author":{"gitId":"-"},"content":""},{"lineNumber":753,"author":{"gitId":"-"},"content":"    public void addContributionQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"        addNewQuestion(8);"},{"lineNumber":755,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":756,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":757,"author":{"gitId":"-"},"content":"        FeedbackContributionQuestionDetails questionDetails \u003d"},{"lineNumber":758,"author":{"gitId":"-"},"content":"                (FeedbackContributionQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":759,"author":{"gitId":"-"},"content":"        inputContributionDetails(questionNum, questionDetails);"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":761,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"    public void editContributionQuestion(int questionNum, FeedbackContributionQuestionDetails questionDetails) {"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        inputContributionDetails(questionNum, questionDetails);"},{"lineNumber":766,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":767,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":768,"author":{"gitId":"-"},"content":""},{"lineNumber":769,"author":{"gitId":"-"},"content":"    public void verifyRubricQuestionDetails(int questionNum, FeedbackRubricQuestionDetails questionDetails) {"},{"lineNumber":770,"author":{"gitId":"-"},"content":"        int numChoices \u003d questionDetails.getNumOfRubricChoices();"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        List\u003cString\u003e choices \u003d questionDetails.getRubricChoices();"},{"lineNumber":772,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c numChoices; i++) {"},{"lineNumber":773,"author":{"gitId":"-"},"content":"            assertEquals(choices.get(i), getRubricChoiceInputs(questionNum).get(i).getAttribute(\"value\"));"},{"lineNumber":774,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":"        int numSubQn \u003d questionDetails.getNumOfRubricSubQuestions();"},{"lineNumber":777,"author":{"gitId":"-"},"content":"        List\u003cString\u003e subQuestions \u003d questionDetails.getRubricSubQuestions();"},{"lineNumber":778,"author":{"gitId":"-"},"content":"        List\u003cList\u003cString\u003e\u003e descriptions \u003d questionDetails.getRubricDescriptions();"},{"lineNumber":779,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c numSubQn; i++) {"},{"lineNumber":780,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e textAreas \u003d getRubricTextareas(questionNum, i + 2);"},{"lineNumber":781,"author":{"gitId":"-"},"content":"            assertEquals(subQuestions.get(i), textAreas.get(0).getAttribute(\"value\"));"},{"lineNumber":782,"author":{"gitId":"-"},"content":"            for (int j \u003d 0; j \u003c numChoices; j++) {"},{"lineNumber":783,"author":{"gitId":"-"},"content":"                assertEquals(descriptions.get(i).get(j), textAreas.get(j + 1).getAttribute(\"value\"));"},{"lineNumber":784,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":785,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":786,"author":{"gitId":"-"},"content":""},{"lineNumber":787,"author":{"gitId":"-"},"content":"        if (questionDetails.isHasAssignedWeights()) {"},{"lineNumber":788,"author":{"gitId":"-"},"content":"            assertTrue(getWeightCheckbox(questionNum).isSelected());"},{"lineNumber":789,"author":{"gitId":"-"},"content":"            List\u003cList\u003cDouble\u003e\u003e weights \u003d questionDetails.getRubricWeights();"},{"lineNumber":790,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c numSubQn; i++) {"},{"lineNumber":791,"author":{"gitId":"-"},"content":"                List\u003cWebElement\u003e rubricWeights \u003d getRubricWeights(questionNum, i + 2);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"                for (int j \u003d 0; j \u003c numChoices; j++) {"},{"lineNumber":793,"author":{"gitId":"-"},"content":"                    assertEquals(getDoubleString(weights.get(i).get(j)),"},{"lineNumber":794,"author":{"gitId":"-"},"content":"                            rubricWeights.get(j).getAttribute(\"value\"));"},{"lineNumber":795,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":796,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":797,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":798,"author":{"gitId":"-"},"content":"            assertFalse(getWeightCheckbox(questionNum).isSelected());"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":800,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":801,"author":{"gitId":"-"},"content":""},{"lineNumber":802,"author":{"gitId":"-"},"content":"    public void addRubricQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":803,"author":{"gitId":"-"},"content":"        addNewQuestion(9);"},{"lineNumber":804,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        FeedbackRubricQuestionDetails questionDetails \u003d"},{"lineNumber":807,"author":{"gitId":"-"},"content":"                (FeedbackRubricQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        inputRubricDetails(questionNum, questionDetails);"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":810,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"    public void editRubricQuestion(int questionNum, FeedbackRubricQuestionDetails questionDetails) {"},{"lineNumber":813,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        inputRubricDetails(questionNum, questionDetails);"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":816,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":817,"author":{"gitId":"-"},"content":""},{"lineNumber":818,"author":{"gitId":"-"},"content":"    public void verifyRankQuestionDetails(int questionNum, FeedbackRankQuestionDetails questionDetails) {"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        if (questionDetails instanceof FeedbackRankOptionsQuestionDetails) {"},{"lineNumber":820,"author":{"gitId":"-"},"content":"            FeedbackRankOptionsQuestionDetails optionDetails \u003d (FeedbackRankOptionsQuestionDetails) questionDetails;"},{"lineNumber":821,"author":{"gitId":"-"},"content":"            verifyOptions(questionNum, optionDetails.getOptions());"},{"lineNumber":822,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        assertEquals(getAllowDuplicateRankCheckbox(questionNum).isSelected(), questionDetails.isAreDuplicatesAllowed());"},{"lineNumber":824,"author":{"gitId":"-"},"content":"        verifyMaxOptions(questionNum, questionDetails.getMaxOptionsToBeRanked());"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        verifyMinOptions(questionNum, questionDetails.getMinOptionsToBeRanked());"},{"lineNumber":826,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":827,"author":{"gitId":"-"},"content":""},{"lineNumber":828,"author":{"gitId":"-"},"content":"    public void addRankOptionsQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":829,"author":{"gitId":"-"},"content":"        addNewQuestion(10);"},{"lineNumber":830,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":831,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":832,"author":{"gitId":"-"},"content":"        FeedbackRankOptionsQuestionDetails questionDetails \u003d"},{"lineNumber":833,"author":{"gitId":"-"},"content":"                (FeedbackRankOptionsQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        inputRankDetails(questionNum, questionDetails);"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":836,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":837,"author":{"gitId":"-"},"content":""},{"lineNumber":838,"author":{"gitId":"mingyuanc"},"content":"    public void addRankOptionsQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":839,"author":{"gitId":"mingyuanc"},"content":"        addNewQuestion(10);"},{"lineNumber":840,"author":{"gitId":"mingyuanc"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":841,"author":{"gitId":"mingyuanc"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":842,"author":{"gitId":"mingyuanc"},"content":"        FeedbackRankOptionsQuestionDetails questionDetails \u003d"},{"lineNumber":843,"author":{"gitId":"-"},"content":"                (FeedbackRankOptionsQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        inputRankDetails(questionNum, questionDetails);"},{"lineNumber":845,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":846,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":847,"author":{"gitId":"-"},"content":""},{"lineNumber":848,"author":{"gitId":"-"},"content":"    public void addRankRecipientsQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":849,"author":{"gitId":"-"},"content":"        addNewQuestion(11);"},{"lineNumber":850,"author":{"gitId":"-"},"content":"        int questionNum \u003d getNumQuestions();"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        inputQuestionDetails(questionNum, feedbackQuestion);"},{"lineNumber":852,"author":{"gitId":"-"},"content":"        FeedbackRankQuestionDetails questionDetails \u003d"},{"lineNumber":853,"author":{"gitId":"-"},"content":"                (FeedbackRankQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":854,"author":{"gitId":"-"},"content":"        inputRankDetails(questionNum, questionDetails);"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        clickSaveNewQuestionButton();"},{"lineNumber":856,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":857,"author":{"gitId":"-"},"content":""},{"lineNumber":858,"author":{"gitId":"-"},"content":"    public void editRankQuestion(int questionNum, FeedbackRankQuestionDetails questionDetails) {"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        clickEditQuestionButton(questionNum);"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        inputRankDetails(questionNum, questionDetails);"},{"lineNumber":861,"author":{"gitId":"-"},"content":"        clickSaveQuestionButton(questionNum);"},{"lineNumber":862,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":863,"author":{"gitId":"-"},"content":""},{"lineNumber":864,"author":{"gitId":"-"},"content":"    private String getCourseId() {"},{"lineNumber":865,"author":{"gitId":"-"},"content":"        return courseIdTextBox.getText();"},{"lineNumber":866,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":867,"author":{"gitId":"-"},"content":""},{"lineNumber":868,"author":{"gitId":"-"},"content":"    private String getCourseName() {"},{"lineNumber":869,"author":{"gitId":"-"},"content":"        return courseNameTextBox.getText();"},{"lineNumber":870,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":871,"author":{"gitId":"-"},"content":""},{"lineNumber":872,"author":{"gitId":"-"},"content":"    private String getTimeZone() {"},{"lineNumber":873,"author":{"gitId":"-"},"content":"        return timezoneDropDown.getText();"},{"lineNumber":874,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":875,"author":{"gitId":"-"},"content":""},{"lineNumber":876,"author":{"gitId":"-"},"content":"    private String getFeedbackSessionName() {"},{"lineNumber":877,"author":{"gitId":"-"},"content":"        return sessionNameTextBox.getText();"},{"lineNumber":878,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":879,"author":{"gitId":"-"},"content":""},{"lineNumber":880,"author":{"gitId":"-"},"content":"    private String getInstructions() {"},{"lineNumber":881,"author":{"gitId":"-"},"content":"        return getEditorRichText(instructionsEditor.findElement(By.tagName(\"editor\")));"},{"lineNumber":882,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"    private String getStartDate() {"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        return startDateBox.findElement(By.tagName(\"input\")).getAttribute(\"value\");"},{"lineNumber":886,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":887,"author":{"gitId":"-"},"content":""},{"lineNumber":888,"author":{"gitId":"-"},"content":"    private String getStartTime() {"},{"lineNumber":889,"author":{"gitId":"-"},"content":"        return getSelectedDropdownOptionText(startTimeDropdown.findElement(By.tagName(\"select\")));"},{"lineNumber":890,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":891,"author":{"gitId":"-"},"content":""},{"lineNumber":892,"author":{"gitId":"-"},"content":"    private String getEndDate() {"},{"lineNumber":893,"author":{"gitId":"-"},"content":"        return endDateBox.findElement(By.tagName(\"input\")).getAttribute(\"value\");"},{"lineNumber":894,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":895,"author":{"gitId":"-"},"content":""},{"lineNumber":896,"author":{"gitId":"-"},"content":"    private String getEndTime() {"},{"lineNumber":897,"author":{"gitId":"-"},"content":"        return getSelectedDropdownOptionText(endTimeDropdown.findElement(By.tagName(\"select\")));"},{"lineNumber":898,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":899,"author":{"gitId":"-"},"content":""},{"lineNumber":900,"author":{"gitId":"-"},"content":"    private String getSessionVisibilityDate() {"},{"lineNumber":901,"author":{"gitId":"-"},"content":"        return sessionVisibilityDateBox.findElement(By.tagName(\"input\")).getAttribute(\"value\");"},{"lineNumber":902,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":903,"author":{"gitId":"-"},"content":""},{"lineNumber":904,"author":{"gitId":"-"},"content":"    private String getSessionVisibilityTime() {"},{"lineNumber":905,"author":{"gitId":"-"},"content":"        return getSelectedDropdownOptionText(sessionVisibilityTimeDropdown.findElement(By.tagName(\"select\")));"},{"lineNumber":906,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":907,"author":{"gitId":"-"},"content":""},{"lineNumber":908,"author":{"gitId":"-"},"content":"    private String getResponseVisibilityDate() {"},{"lineNumber":909,"author":{"gitId":"-"},"content":"        return responseVisibilityDateBox.findElement(By.tagName(\"input\"))"},{"lineNumber":910,"author":{"gitId":"-"},"content":"                .getAttribute(\"value\");"},{"lineNumber":911,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":912,"author":{"gitId":"-"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"    private String getResponseVisibilityTime() {"},{"lineNumber":914,"author":{"gitId":"-"},"content":"        return getSelectedDropdownOptionText(responseVisibilityTimeDropdown.findElement(By.tagName(\"select\")));"},{"lineNumber":915,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":916,"author":{"gitId":"-"},"content":""},{"lineNumber":917,"author":{"gitId":"-"},"content":"    private String getGracePeriod() {"},{"lineNumber":918,"author":{"gitId":"-"},"content":"        return getSelectedDropdownOptionText(gracePeriodDropdown);"},{"lineNumber":919,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":920,"author":{"gitId":"-"},"content":""},{"lineNumber":921,"author":{"gitId":"-"},"content":"    private String getSubmissionStatus() {"},{"lineNumber":922,"author":{"gitId":"-"},"content":"        return submissionStatusTextBox.getText();"},{"lineNumber":923,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":924,"author":{"gitId":"-"},"content":""},{"lineNumber":925,"author":{"gitId":"-"},"content":"    private String getPublishedStatus() {"},{"lineNumber":926,"author":{"gitId":"-"},"content":"        return publishStatusTextBox.getText();"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"    private String getDateString(Instant instant, String timeZone) {"},{"lineNumber":930,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"EE, dd MMM, yyyy\");"},{"lineNumber":931,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":932,"author":{"gitId":"-"},"content":""},{"lineNumber":933,"author":{"gitId":"-"},"content":"    private String getTimeString(Instant instant, String timeZone) {"},{"lineNumber":934,"author":{"gitId":"-"},"content":"        ZonedDateTime dateTime \u003d instant.atZone(ZoneId.of(timeZone));"},{"lineNumber":935,"author":{"gitId":"-"},"content":"        if (dateTime.getHour() \u003d\u003d 0 \u0026\u0026 dateTime.getMinute() \u003d\u003d 0) {"},{"lineNumber":936,"author":{"gitId":"-"},"content":"            return \"23:59H\";"},{"lineNumber":937,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        return getDisplayedDateTime(instant, timeZone, \"HH:00\") + \"H\";"},{"lineNumber":939,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":940,"author":{"gitId":"-"},"content":""},{"lineNumber":941,"author":{"gitId":"-"},"content":"    private void setInstructions(String newInstructions) {"},{"lineNumber":942,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(instructionsEditor.findElement(By.tagName(\"editor\")), newInstructions);"},{"lineNumber":943,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":944,"author":{"gitId":"-"},"content":""},{"lineNumber":945,"author":{"gitId":"-"},"content":"    private void setSessionStartDateTime(Instant startInstant, String timeZone) {"},{"lineNumber":946,"author":{"gitId":"-"},"content":"        setDateTime(startDateBox, startTimeDropdown, startInstant, timeZone);"},{"lineNumber":947,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":948,"author":{"gitId":"-"},"content":""},{"lineNumber":949,"author":{"gitId":"-"},"content":"    private void setSessionEndDateTime(Instant endInstant, String timeZone) {"},{"lineNumber":950,"author":{"gitId":"-"},"content":"        setDateTime(endDateBox, endTimeDropdown, endInstant, timeZone);"},{"lineNumber":951,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":952,"author":{"gitId":"-"},"content":""},{"lineNumber":953,"author":{"gitId":"-"},"content":"    private void setVisibilityDateTime(Instant startInstant, String timeZone) {"},{"lineNumber":954,"author":{"gitId":"-"},"content":"        setDateTime(sessionVisibilityDateBox, sessionVisibilityTimeDropdown, startInstant, timeZone);"},{"lineNumber":955,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":956,"author":{"gitId":"-"},"content":""},{"lineNumber":957,"author":{"gitId":"-"},"content":"    private void setResponseDateTime(Instant endInstant, String timeZone) {"},{"lineNumber":958,"author":{"gitId":"-"},"content":"        setDateTime(responseVisibilityDateBox, responseVisibilityTimeDropdown, endInstant, timeZone);"},{"lineNumber":959,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":960,"author":{"gitId":"-"},"content":""},{"lineNumber":961,"author":{"gitId":"-"},"content":"    private void setDateTime(WebElement dateBox, WebElement timeBox, Instant startInstant, String timeZone) {"},{"lineNumber":962,"author":{"gitId":"-"},"content":"        fillDatePicker(dateBox, startInstant, timeZone);"},{"lineNumber":963,"author":{"gitId":"-"},"content":""},{"lineNumber":964,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(timeBox.findElement(By.tagName(\"select\")), getTimeString(startInstant, timeZone));"},{"lineNumber":965,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":966,"author":{"gitId":"-"},"content":""},{"lineNumber":967,"author":{"gitId":"-"},"content":"    private void selectGracePeriod(long gracePeriodMinutes) {"},{"lineNumber":968,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(gracePeriodDropdown, gracePeriodMinutes + \" min\");"},{"lineNumber":969,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":970,"author":{"gitId":"-"},"content":""},{"lineNumber":971,"author":{"gitId":"-"},"content":"    private void setVisibilitySettings(FeedbackSessionAttributes newFeedbackSession) {"},{"lineNumber":972,"author":{"gitId":"-"},"content":"        showVisibilitySettings();"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"        setSessionVisibilitySettings(newFeedbackSession);"},{"lineNumber":975,"author":{"gitId":"-"},"content":"        setResponseVisibilitySettings(newFeedbackSession);"},{"lineNumber":976,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":977,"author":{"gitId":"-"},"content":""},{"lineNumber":978,"author":{"gitId":"-"},"content":"    private void setSessionVisibilitySettings(FeedbackSessionAttributes newFeedbackSession) {"},{"lineNumber":979,"author":{"gitId":"-"},"content":"        Instant sessionDateTime \u003d newFeedbackSession.getSessionVisibleFromTime();"},{"lineNumber":980,"author":{"gitId":"-"},"content":"        if (sessionDateTime.equals(Const.TIME_REPRESENTS_FOLLOW_OPENING)) {"},{"lineNumber":981,"author":{"gitId":"-"},"content":"            click(openSessionVisibleTimeButton);"},{"lineNumber":982,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":983,"author":{"gitId":"-"},"content":"            click(customSessionVisibleTimeButton);"},{"lineNumber":984,"author":{"gitId":"-"},"content":"            setVisibilityDateTime(sessionDateTime, newFeedbackSession.getTimeZone());"},{"lineNumber":985,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":986,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"    private void setResponseVisibilitySettings(FeedbackSessionAttributes newFeedbackSession) {"},{"lineNumber":989,"author":{"gitId":"-"},"content":"        Instant responseDateTime \u003d newFeedbackSession.getResultsVisibleFromTime();"},{"lineNumber":990,"author":{"gitId":"-"},"content":"        if (responseDateTime.equals(Const.TIME_REPRESENTS_FOLLOW_VISIBLE)) {"},{"lineNumber":991,"author":{"gitId":"-"},"content":"            click(immediateResponseVisibleTimeButton);"},{"lineNumber":992,"author":{"gitId":"-"},"content":"        } else if (responseDateTime.equals(Const.TIME_REPRESENTS_LATER)) {"},{"lineNumber":993,"author":{"gitId":"-"},"content":"            click(manualResponseVisibleTimeButton);"},{"lineNumber":994,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":995,"author":{"gitId":"-"},"content":"            click(customResponseVisibleTimeButton);"},{"lineNumber":996,"author":{"gitId":"-"},"content":"            setResponseDateTime(responseDateTime, newFeedbackSession.getTimeZone());"},{"lineNumber":997,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":998,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":999,"author":{"gitId":"-"},"content":""},{"lineNumber":1000,"author":{"gitId":"-"},"content":"    private void setEmailSettings(FeedbackSessionAttributes newFeedbackSessionDetails) {"},{"lineNumber":1001,"author":{"gitId":"-"},"content":"        showEmailSettings();"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"        if (newFeedbackSessionDetails.isOpeningEmailEnabled() !\u003d openingSessionEmailCheckbox.isSelected()) {"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"            click(openingSessionEmailCheckbox);"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"        if (newFeedbackSessionDetails.isClosingEmailEnabled() !\u003d closingSessionEmailCheckbox.isSelected()) {"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"            click(closingSessionEmailCheckbox);"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"        if (newFeedbackSessionDetails.isPublishedEmailEnabled() !\u003d publishedSessionEmailCheckbox.isSelected()) {"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"            click(publishedSessionEmailCheckbox);"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1011,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1012,"author":{"gitId":"-"},"content":""},{"lineNumber":1013,"author":{"gitId":"-"},"content":"    private void showVisibilitySettings() {"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"        if (isElementPresent(By.id(\"btn-change-visibility\"))) {"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"            click(changeVisibilityButton);"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1018,"author":{"gitId":"-"},"content":""},{"lineNumber":1019,"author":{"gitId":"-"},"content":"    private void showEmailSettings() {"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"        if (isElementPresent(By.id(\"btn-change-email\"))) {"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"            click(changeEmailButton);"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1024,"author":{"gitId":"-"},"content":""},{"lineNumber":1025,"author":{"gitId":"-"},"content":"    private int getNumQuestions() {"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"        return browser.driver.findElements(By.tagName(\"tm-question-edit-form\")).size();"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1028,"author":{"gitId":"-"},"content":""},{"lineNumber":1029,"author":{"gitId":"-"},"content":"    private WebElement getQuestionForm(int questionNum) {"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"        return browser.driver.findElements(By.tagName(\"tm-question-edit-form\")).get(questionNum - 1);"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1032,"author":{"gitId":"-"},"content":""},{"lineNumber":1033,"author":{"gitId":"-"},"content":"    private FeedbackQuestionType getQuestionType(int questionNum) {"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"        String questionType \u003d getQuestionForm(questionNum).findElement(By.id(\"question-type\")).getText().trim();"},{"lineNumber":1035,"author":{"gitId":"-"},"content":""},{"lineNumber":1036,"author":{"gitId":"-"},"content":"        switch (questionType) {"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"        case \"Essay question\":"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.TEXT;"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"        case \"Multiple-Choice (single answer) question\":"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.MCQ;"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"        case \"Multiple-choice (multiple answers) question\":"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.MSQ;"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"        case \"Numerical Scale Question\":"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.NUMSCALE;"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"        case \"Distribute points (among options) question\":"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.CONSTSUM_OPTIONS;"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"        case \"Distribute points (among recipients) question\":"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.CONSTSUM_RECIPIENTS;"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"        case \"Team contribution question\":"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.CONTRIB;"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"        case \"Rubric question\":"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.RUBRIC;"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"        case \"Rank (options) question\":"},{"lineNumber":1054,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.RANK_OPTIONS;"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"        case \"Rank (recipients) question\":"},{"lineNumber":1056,"author":{"gitId":"-"},"content":"            return FeedbackQuestionType.RANK_RECIPIENTS;"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Unknown FeedbackQuestionType\");"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1061,"author":{"gitId":"-"},"content":""},{"lineNumber":1062,"author":{"gitId":"-"},"content":"    private int getQuestionNumber(int questionNum) {"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"        return Integer.parseInt(getQuestionForm(questionNum).findElement(By.id(\"question-number\")).getText());"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1065,"author":{"gitId":"-"},"content":""},{"lineNumber":1066,"author":{"gitId":"-"},"content":"    private String getQuestionBrief(int questionNum) {"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"question-brief\")).getAttribute(\"value\");"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1069,"author":{"gitId":"-"},"content":""},{"lineNumber":1070,"author":{"gitId":"-"},"content":"    private String getQuestionDescription(int questionNum) {"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"        WebElement editor \u003d waitForElementPresence(By.cssSelector(\"#question-form-\" + questionNum + \" editor\"));"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"        return getEditorRichText(editor);"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1074,"author":{"gitId":"-"},"content":""},{"lineNumber":1075,"author":{"gitId":"-"},"content":"    private String getFeedbackGiver(int questionNum) {"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        String feedbackPath \u003d getFeedbackPath(questionNum);"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"        if (CUSTOM_FEEDBACK_PATH_OPTION.equals(feedbackPath)) {"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"            return getSelectedDropdownOptionText(getQuestionForm(questionNum)"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"                    .findElement(By.tagName(\"tm-feedback-path-panel\"))"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"                    .findElement(By.id(\"giver-type\")));"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"        return feedbackPath.split(FEEDBACK_PATH_SEPARATOR)[0];"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1084,"author":{"gitId":"-"},"content":""},{"lineNumber":1085,"author":{"gitId":"-"},"content":"    private String getFeedbackReceiver(int questionNum) {"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"        String feedbackPath \u003d getFeedbackPath(questionNum);"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"        if (CUSTOM_FEEDBACK_PATH_OPTION.equals(feedbackPath)) {"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"            return getSelectedDropdownOptionText(getQuestionForm(questionNum)"},{"lineNumber":1089,"author":{"gitId":"-"},"content":"                    .findElement(By.tagName(\"tm-feedback-path-panel\"))"},{"lineNumber":1090,"author":{"gitId":"-"},"content":"                    .findElement(By.id(\"receiver-type\")));"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1092,"author":{"gitId":"-"},"content":"        return feedbackPath.split(FEEDBACK_PATH_SEPARATOR)[1];"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1094,"author":{"gitId":"-"},"content":""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"    private String getFeedbackPath(int questionNum) {"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"        WebElement feedbackPathPanel \u003d getQuestionForm(questionNum).findElement(By.tagName(\"tm-feedback-path-panel\"));"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"        return feedbackPathPanel.findElement(By.cssSelector(\"#btn-feedback-path span\")).getText();"},{"lineNumber":1098,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1099,"author":{"gitId":"-"},"content":""},{"lineNumber":1100,"author":{"gitId":"-"},"content":"    private void setQuestionBrief(int questionNum, String newBrief) {"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"        fillTextBox(getQuestionForm(questionNum).findElement(By.id(\"question-brief\")), newBrief);"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1103,"author":{"gitId":"-"},"content":""},{"lineNumber":1104,"author":{"gitId":"-"},"content":"    private void setQuestionDescription(int questionNum, String newDescription) {"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"        WebElement editor \u003d waitForElementPresence(By.cssSelector(\"#question-form-\" + questionNum + \" editor\"));"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"        writeToRichTextEditor(editor, newDescription);"},{"lineNumber":1107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1108,"author":{"gitId":"-"},"content":""},{"lineNumber":1109,"author":{"gitId":"-"},"content":"    private void setFeedbackPath(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"        FeedbackParticipantType newGiver \u003d feedbackQuestion.getGiverType();"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"        FeedbackParticipantType newRecipient \u003d feedbackQuestion.getRecipientType();"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"        String feedbackPath \u003d getFeedbackPath(questionNum);"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum).findElement(By.tagName(\"tm-feedback-path-panel\"));"},{"lineNumber":1114,"author":{"gitId":"-"},"content":"        if (!CUSTOM_FEEDBACK_PATH_OPTION.equals(feedbackPath)) {"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"            selectFeedbackPathDropdownOption(questionNum, CUSTOM_FEEDBACK_PATH_OPTION + \"...\");"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1117,"author":{"gitId":"-"},"content":"        // Set to type STUDENT first to adjust NumberOfEntitiesToGiveFeedbackTo"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"giver-type\")),"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"                getDisplayGiverName(FeedbackParticipantType.STUDENTS));"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"receiver-type\")),"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"                getDisplayRecipientName(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF));"},{"lineNumber":1122,"author":{"gitId":"-"},"content":"        if (feedbackQuestion.getNumberOfEntitiesToGiveFeedbackTo() \u003d\u003d Const.MAX_POSSIBLE_RECIPIENTS) {"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"            click(questionForm.findElement(By.id(\"unlimited-recipients\")));"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1125,"author":{"gitId":"-"},"content":"            click(questionForm.findElement(By.id(\"custom-recipients\")));"},{"lineNumber":1126,"author":{"gitId":"-"},"content":"            fillTextBox(questionForm.findElement(By.id(\"custom-recipients-number\")),"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"                    Integer.toString(feedbackQuestion.getNumberOfEntitiesToGiveFeedbackTo()));"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1129,"author":{"gitId":"-"},"content":""},{"lineNumber":1130,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"giver-type\")), getDisplayGiverName(newGiver));"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"receiver-type\")),"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"                getDisplayRecipientName(newRecipient));"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1134,"author":{"gitId":"-"},"content":""},{"lineNumber":1135,"author":{"gitId":"-"},"content":"    private void setFeedbackPath(int questionNum, FeedbackQuestion feedbackQuestion) {"},{"lineNumber":1136,"author":{"gitId":"-"},"content":"        FeedbackParticipantType newGiver \u003d feedbackQuestion.getGiverType();"},{"lineNumber":1137,"author":{"gitId":"-"},"content":"        FeedbackParticipantType newRecipient \u003d feedbackQuestion.getRecipientType();"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"        String feedbackPath \u003d getFeedbackPath(questionNum);"},{"lineNumber":1139,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum).findElement(By.tagName(\"tm-feedback-path-panel\"));"},{"lineNumber":1140,"author":{"gitId":"-"},"content":"        if (!CUSTOM_FEEDBACK_PATH_OPTION.equals(feedbackPath)) {"},{"lineNumber":1141,"author":{"gitId":"-"},"content":"            selectFeedbackPathDropdownOption(questionNum, CUSTOM_FEEDBACK_PATH_OPTION + \"...\");"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"        // Set to type STUDENT first to adjust NumberOfEntitiesToGiveFeedbackTo"},{"lineNumber":1144,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"giver-type\")),"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"                getDisplayGiverName(FeedbackParticipantType.STUDENTS));"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"receiver-type\")),"},{"lineNumber":1147,"author":{"gitId":"-"},"content":"                getDisplayRecipientName(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF));"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"        if (feedbackQuestion.getNumOfEntitiesToGiveFeedbackTo() \u003d\u003d Const.MAX_POSSIBLE_RECIPIENTS) {"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"            click(questionForm.findElement(By.id(\"unlimited-recipients\")));"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"            click(questionForm.findElement(By.id(\"custom-recipients\")));"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"            fillTextBox(questionForm.findElement(By.id(\"custom-recipients-number\")),"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"                    Integer.toString(feedbackQuestion.getNumOfEntitiesToGiveFeedbackTo()));"},{"lineNumber":1154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1155,"author":{"gitId":"-"},"content":""},{"lineNumber":1156,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"giver-type\")), getDisplayGiverName(newGiver));"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"        selectDropdownOptionByText(questionForm.findElement(By.id(\"receiver-type\")),"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"                getDisplayRecipientName(newRecipient));"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1160,"author":{"gitId":"-"},"content":""},{"lineNumber":1161,"author":{"gitId":"-"},"content":"    private void selectFeedbackPathDropdownOption(int questionNum, String text) {"},{"lineNumber":1162,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"        WebElement feedbackPathPanel \u003d questionForm.findElement(By.tagName(\"tm-feedback-path-panel\"));"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"        click(feedbackPathPanel.findElement(By.id(\"btn-feedback-path\")));"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"        WebElement dropdown \u003d feedbackPathPanel.findElement(By.id(\"feedback-path-dropdown\"));"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e options \u003d dropdown.findElements(By.className(\"dropdown-button\"));"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"        for (WebElement option : options) {"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"            if (option.getText().equals(text)) {"},{"lineNumber":1169,"author":{"gitId":"-"},"content":"                click(option);"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1174,"author":{"gitId":"-"},"content":""},{"lineNumber":1175,"author":{"gitId":"-"},"content":"    private void clickEditQuestionButton(int questionNum) {"},{"lineNumber":1176,"author":{"gitId":"-"},"content":"        click(getQuestionForm(questionNum).findElement(By.id(\"btn-edit-question\")));"},{"lineNumber":1177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1178,"author":{"gitId":"-"},"content":""},{"lineNumber":1179,"author":{"gitId":"-"},"content":"    private void clickSaveQuestionButton(int questionNum) {"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"        WebElement saveButton \u003d getQuestionForm(questionNum).findElement(By.id(\"btn-save-question\"));"},{"lineNumber":1181,"author":{"gitId":"-"},"content":"        click(saveButton);"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"        ThreadHelper.waitFor(1000);"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1184,"author":{"gitId":"-"},"content":""},{"lineNumber":1185,"author":{"gitId":"-"},"content":"    private void setQuestionVisibility(int questionNum, FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"        WebElement visibilityPanel \u003d questionForm.findElement(By.tagName(\"tm-visibility-panel\"));"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"        String visibility \u003d visibilityPanel.findElement(By.cssSelector(\"#btn-question-visibility span\")).getText();"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"        if (!CUSTOM_VISIBILITY_OPTION.equals(visibility)) {"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"            selectVisibilityDropdownOption(questionNum, CUSTOM_VISIBILITY_OPTION + \"...\");"},{"lineNumber":1191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1192,"author":{"gitId":"-"},"content":""},{"lineNumber":1193,"author":{"gitId":"-"},"content":"        FeedbackParticipantType giver \u003d feedbackQuestion.getGiverType();"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"        FeedbackParticipantType receiver \u003d feedbackQuestion.getRecipientType();"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"        WebElement customVisibilityTable \u003d visibilityPanel.findElement(By.id(\"custom-visibility-table\"));"},{"lineNumber":1196,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowResponsesTo(), 1);"},{"lineNumber":1197,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowGiverNameTo(), 2);"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowRecipientNameTo(), 3);"},{"lineNumber":1199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1200,"author":{"gitId":"-"},"content":""},{"lineNumber":1201,"author":{"gitId":"-"},"content":"    private void setQuestionVisibility(int questionNum, FeedbackQuestion feedbackQuestion) {"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":1203,"author":{"gitId":"-"},"content":"        WebElement visibilityPanel \u003d questionForm.findElement(By.tagName(\"tm-visibility-panel\"));"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"        String visibility \u003d visibilityPanel.findElement(By.cssSelector(\"#btn-question-visibility span\")).getText();"},{"lineNumber":1205,"author":{"gitId":"-"},"content":"        if (!CUSTOM_VISIBILITY_OPTION.equals(visibility)) {"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"            selectVisibilityDropdownOption(questionNum, CUSTOM_VISIBILITY_OPTION + \"...\");"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1208,"author":{"gitId":"-"},"content":""},{"lineNumber":1209,"author":{"gitId":"-"},"content":"        FeedbackParticipantType giver \u003d feedbackQuestion.getGiverType();"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"        FeedbackParticipantType receiver \u003d feedbackQuestion.getRecipientType();"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"        WebElement customVisibilityTable \u003d visibilityPanel.findElement(By.id(\"custom-visibility-table\"));"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowResponsesTo(), 1);"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowGiverNameTo(), 2);"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"        selectVisibilityBoxes(customVisibilityTable, giver, receiver, feedbackQuestion.getShowRecipientNameTo(), 3);"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1216,"author":{"gitId":"-"},"content":""},{"lineNumber":1217,"author":{"gitId":"-"},"content":"    private void selectVisibilityBoxes(WebElement table, FeedbackParticipantType giver,"},{"lineNumber":1218,"author":{"gitId":"-"},"content":"                                       FeedbackParticipantType receiver, List\u003cFeedbackParticipantType\u003e participants,"},{"lineNumber":1219,"author":{"gitId":"-"},"content":"                                       int colNum) {"},{"lineNumber":1220,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e possibleTypes \u003d new ArrayList\u003c\u003e(Arrays.asList(FeedbackParticipantType.RECEIVER,"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.OWN_TEAM_MEMBERS, FeedbackParticipantType.RECEIVER_TEAM_MEMBERS,"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.STUDENTS, FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"        if (!giver.equals(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":1224,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.OWN_TEAM_MEMBERS);"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"        if (!receiver.equals(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF)) {"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1229,"author":{"gitId":"-"},"content":"        if (receiver.equals(FeedbackParticipantType.NONE)"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"                || receiver.equals(FeedbackParticipantType.SELF)"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"                || receiver.equals(FeedbackParticipantType.OWN_TEAM)) {"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER);"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"            possibleTypes.remove(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1235,"author":{"gitId":"-"},"content":""},{"lineNumber":1236,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e rows \u003d table.findElements(By.tagName(\"tr\"));"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"        int index \u003d colNum - 1;"},{"lineNumber":1238,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType participant : participants) {"},{"lineNumber":1239,"author":{"gitId":"-"},"content":"            markOptionAsSelected(rows.get(possibleTypes.indexOf(participant)).findElements(By.tagName(\"input\")).get(index));"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1242,"author":{"gitId":"-"},"content":""},{"lineNumber":1243,"author":{"gitId":"-"},"content":"    private void selectVisibilityDropdownOption(int questionNum, String text) {"},{"lineNumber":1244,"author":{"gitId":"-"},"content":"        WebElement questionForm \u003d getQuestionForm(questionNum);"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"        WebElement visibilityPanel \u003d questionForm.findElement(By.tagName(\"tm-visibility-panel\"));"},{"lineNumber":1246,"author":{"gitId":"-"},"content":"        click(visibilityPanel.findElement(By.id(\"btn-question-visibility\")));"},{"lineNumber":1247,"author":{"gitId":"-"},"content":"        WebElement dropdown \u003d visibilityPanel.findElement(By.id(\"question-visibility-dropdown\"));"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e options \u003d dropdown.findElements(By.className(\"dropdown-button\"));"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"        for (WebElement option : options) {"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"            if (option.getText().equals(text)) {"},{"lineNumber":1251,"author":{"gitId":"-"},"content":"                click(option);"},{"lineNumber":1252,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":1253,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1254,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1256,"author":{"gitId":"-"},"content":""},{"lineNumber":1257,"author":{"gitId":"-"},"content":"    private void clickAndWaitForNewQuestion(WebElement button) {"},{"lineNumber":1258,"author":{"gitId":"-"},"content":"        int newQuestionNum \u003d getNumQuestions() + 1;"},{"lineNumber":1259,"author":{"gitId":"-"},"content":"        click(button);"},{"lineNumber":1260,"author":{"gitId":"-"},"content":"        waitForElementPresence(By.id(\"question-form-\" + newQuestionNum));"},{"lineNumber":1261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1262,"author":{"gitId":"-"},"content":""},{"lineNumber":1263,"author":{"gitId":"-"},"content":"    private void addNewQuestion(int optionNumber) {"},{"lineNumber":1264,"author":{"gitId":"-"},"content":"        click(addNewQuestionButton);"},{"lineNumber":1265,"author":{"gitId":"-"},"content":"        WebElement newQuestionDropdown \u003d waitForElementPresence(By.id(\"new-question-dropdown\"));"},{"lineNumber":1266,"author":{"gitId":"-"},"content":"        WebElement optionButton \u003d newQuestionDropdown.findElements(By.tagName(\"button\")).get(optionNumber - 1);"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"        if (optionNumber \u003d\u003d 1) {"},{"lineNumber":1268,"author":{"gitId":"-"},"content":"            click(optionButton);"},{"lineNumber":1269,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1270,"author":{"gitId":"-"},"content":"            clickAndWaitForNewQuestion(optionButton);"},{"lineNumber":1271,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1272,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1273,"author":{"gitId":"-"},"content":""},{"lineNumber":1274,"author":{"gitId":"-"},"content":"    private void clickSaveNewQuestionButton() {"},{"lineNumber":1275,"author":{"gitId":"-"},"content":"        WebElement saveButton \u003d browser.driver.findElement(By.id(\"btn-save-new\"));"},{"lineNumber":1276,"author":{"gitId":"-"},"content":"        click(saveButton);"},{"lineNumber":1277,"author":{"gitId":"-"},"content":"        waitForElementStaleness(saveButton);"},{"lineNumber":1278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1279,"author":{"gitId":"-"},"content":""},{"lineNumber":1280,"author":{"gitId":"-"},"content":"    private WebElement getRecommendedTextLengthField(int questionNum) {"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum)"},{"lineNumber":1282,"author":{"gitId":"-"},"content":"                .findElement(By.tagName(\"tm-text-question-edit-details-form\"))"},{"lineNumber":1283,"author":{"gitId":"-"},"content":"                .findElement(By.id(\"recommended-length\"));"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1285,"author":{"gitId":"-"},"content":""},{"lineNumber":1286,"author":{"gitId":"-"},"content":"    private WebElement getGenerateOptionsCheckbox(int questionNum) {"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"generate-checkbox\"));"},{"lineNumber":1288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1289,"author":{"gitId":"-"},"content":""},{"lineNumber":1290,"author":{"gitId":"-"},"content":"    private WebElement getGenerateOptionsDropdown(int questionNum) {"},{"lineNumber":1291,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"generate-dropdown\"));"},{"lineNumber":1292,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1293,"author":{"gitId":"-"},"content":""},{"lineNumber":1294,"author":{"gitId":"-"},"content":"    private WebElement getWeightCheckbox(int questionNum) {"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"weights-checkbox\"));"},{"lineNumber":1296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1297,"author":{"gitId":"-"},"content":""},{"lineNumber":1298,"author":{"gitId":"-"},"content":"    private WebElement getOtherOptionCheckbox(int questionNum) {"},{"lineNumber":1299,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"other-checkbox\"));"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1301,"author":{"gitId":"-"},"content":""},{"lineNumber":1302,"author":{"gitId":"-"},"content":"    private WebElement getQuestionDropdownCheckbox(int questionNum) {"},{"lineNumber":1303,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"make-question-dropdown\"));"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1305,"author":{"gitId":"-"},"content":""},{"lineNumber":1306,"author":{"gitId":"-"},"content":"    private String getGeneratedOptionString(FeedbackParticipantType type) {"},{"lineNumber":1307,"author":{"gitId":"-"},"content":"        switch (type) {"},{"lineNumber":1308,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":1309,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":1310,"author":{"gitId":"-"},"content":"            return \"students\";"},{"lineNumber":1311,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":1312,"author":{"gitId":"-"},"content":"            return \"students (excluding self)\";"},{"lineNumber":1313,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":1314,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":1315,"author":{"gitId":"-"},"content":"            return \"teams\";"},{"lineNumber":1316,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"            return \"teams (excluding own team)\";"},{"lineNumber":1318,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":1319,"author":{"gitId":"-"},"content":"            return \"instructors\";"},{"lineNumber":1320,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":1321,"author":{"gitId":"-"},"content":"            return \"unknown\";"},{"lineNumber":1322,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1323,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1324,"author":{"gitId":"-"},"content":""},{"lineNumber":1325,"author":{"gitId":"-"},"content":"    private String getDoubleString(Double value) {"},{"lineNumber":1326,"author":{"gitId":"-"},"content":"        return value % 1 \u003d\u003d 0 ? Integer.toString(value.intValue()) : Double.toString(value);"},{"lineNumber":1327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1328,"author":{"gitId":"-"},"content":""},{"lineNumber":1329,"author":{"gitId":"-"},"content":"    private WebElement getOptionsSection(int questionNum) {"},{"lineNumber":1330,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"options-section\"));"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1332,"author":{"gitId":"-"},"content":""},{"lineNumber":1333,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getOptionInputs(int questionNum) {"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"        WebElement optionsSection \u003d getOptionsSection(questionNum);"},{"lineNumber":1335,"author":{"gitId":"-"},"content":"        return optionsSection.findElements(By.cssSelector(\"input[type\u003d\u0027text\u0027]\"));"},{"lineNumber":1336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1337,"author":{"gitId":"-"},"content":""},{"lineNumber":1338,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getOptionWeightInputs(int questionNum) {"},{"lineNumber":1339,"author":{"gitId":"-"},"content":"        WebElement optionsSection \u003d getOptionsSection(questionNum);"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"        return optionsSection.findElements(By.cssSelector(\"tm-weight-field input\"));"},{"lineNumber":1341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1342,"author":{"gitId":"-"},"content":""},{"lineNumber":1343,"author":{"gitId":"-"},"content":"    private WebElement getOtherWeightInput(int questionNum) {"},{"lineNumber":1344,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"other-weight\"));"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1346,"author":{"gitId":"-"},"content":""},{"lineNumber":1347,"author":{"gitId":"-"},"content":"    private boolean verifyGeneratedOptions(int questionNum, FeedbackParticipantType participantType) {"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"        if (!participantType.equals(FeedbackParticipantType.NONE)) {"},{"lineNumber":1349,"author":{"gitId":"-"},"content":"            assertTrue(getGenerateOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1350,"author":{"gitId":"-"},"content":"            assertEquals(getSelectedDropdownOptionText(getGenerateOptionsDropdown(questionNum)),"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"                    getGeneratedOptionString(participantType));"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":1353,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1354,"author":{"gitId":"-"},"content":"        assertFalse(getGenerateOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":1356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1357,"author":{"gitId":"-"},"content":""},{"lineNumber":1358,"author":{"gitId":"-"},"content":"    private void verifyOptions(int questionNum, List\u003cString\u003e options) {"},{"lineNumber":1359,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e inputs \u003d getOptionInputs(questionNum);"},{"lineNumber":1360,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c options.size(); i++) {"},{"lineNumber":1361,"author":{"gitId":"-"},"content":"            assertEquals(options.get(i), inputs.get(i).getAttribute(\"value\"));"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1363,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1364,"author":{"gitId":"-"},"content":""},{"lineNumber":1365,"author":{"gitId":"-"},"content":"    private void verifyOptionWeights(int questionNum, boolean hasWeights, List\u003cDouble\u003e weights) {"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"        if (hasWeights) {"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"            assertTrue(getWeightCheckbox(questionNum).isSelected());"},{"lineNumber":1368,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e weightInputs \u003d getOptionWeightInputs(questionNum);"},{"lineNumber":1369,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c weights.size(); i++) {"},{"lineNumber":1370,"author":{"gitId":"-"},"content":"                assertEquals(getDoubleString(weights.get(i)), weightInputs.get(i).getAttribute(\"value\"));"},{"lineNumber":1371,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1372,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1373,"author":{"gitId":"-"},"content":"            assertFalse(getWeightCheckbox(questionNum).isSelected());"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1375,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1376,"author":{"gitId":"-"},"content":""},{"lineNumber":1377,"author":{"gitId":"-"},"content":"    private void verifyOtherOption(int questionNum, boolean hasOther, Double weight) {"},{"lineNumber":1378,"author":{"gitId":"-"},"content":"        if (hasOther) {"},{"lineNumber":1379,"author":{"gitId":"-"},"content":"            assertTrue(getOtherOptionCheckbox(questionNum).isSelected());"},{"lineNumber":1380,"author":{"gitId":"-"},"content":"            if (weight \u003e 0) {"},{"lineNumber":1381,"author":{"gitId":"-"},"content":"                String otherWeight \u003d getOtherWeightInput(questionNum).getAttribute(\"value\");"},{"lineNumber":1382,"author":{"gitId":"-"},"content":"                assertEquals(getDoubleString(weight), otherWeight);"},{"lineNumber":1383,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1384,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1385,"author":{"gitId":"-"},"content":"            assertFalse(getOtherOptionCheckbox(questionNum).isSelected());"},{"lineNumber":1386,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1388,"author":{"gitId":"-"},"content":""},{"lineNumber":1389,"author":{"gitId":"-"},"content":"    private void inputMcqDetails(int questionNum, FeedbackMcqQuestionDetails questionDetails) {"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {"},{"lineNumber":1391,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":1392,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1393,"author":{"gitId":"-"},"content":""},{"lineNumber":1394,"author":{"gitId":"-"},"content":"        inputOptions(questionNum, questionDetails.getMcqChoices());"},{"lineNumber":1395,"author":{"gitId":"-"},"content":"        inputOptionWeights(questionNum, questionDetails.isHasAssignedWeights(), questionDetails.getMcqWeights());"},{"lineNumber":1396,"author":{"gitId":"-"},"content":"        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMcqOtherWeight());"},{"lineNumber":1397,"author":{"gitId":"-"},"content":"        inputDropdownEnabledChoice(questionNum, questionDetails.isQuestionDropdownEnabled());"},{"lineNumber":1398,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1399,"author":{"gitId":"-"},"content":""},{"lineNumber":1400,"author":{"gitId":"-"},"content":"    private boolean inputGenerateOptions(int questionNum, FeedbackParticipantType participantType) {"},{"lineNumber":1401,"author":{"gitId":"-"},"content":"        if (!participantType.equals(FeedbackParticipantType.NONE)) {"},{"lineNumber":1402,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getGenerateOptionsCheckbox(questionNum));"},{"lineNumber":1403,"author":{"gitId":"-"},"content":"            selectDropdownOptionByText(getGenerateOptionsDropdown(questionNum),"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"                    getGeneratedOptionString(participantType));"},{"lineNumber":1405,"author":{"gitId":"-"},"content":"            clickSaveQuestionButton(questionNum);"},{"lineNumber":1406,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1408,"author":{"gitId":"-"},"content":"        markOptionAsUnselected(getGenerateOptionsCheckbox(questionNum));"},{"lineNumber":1409,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":1410,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1411,"author":{"gitId":"-"},"content":""},{"lineNumber":1412,"author":{"gitId":"-"},"content":"    private void inputOptions(int questionNum, List\u003cString\u003e options) {"},{"lineNumber":1413,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e inputs \u003d getOptionInputs(questionNum);"},{"lineNumber":1414,"author":{"gitId":"-"},"content":"        int numInputsNeeded \u003d options.size() - inputs.size();"},{"lineNumber":1415,"author":{"gitId":"-"},"content":"        if (numInputsNeeded \u003e 0) {"},{"lineNumber":1416,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c numInputsNeeded; i++) {"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-option\")));"},{"lineNumber":1418,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1419,"author":{"gitId":"-"},"content":"            inputs \u003d getOptionInputs(questionNum);"},{"lineNumber":1420,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1421,"author":{"gitId":"-"},"content":"        if (numInputsNeeded \u003c 0) {"},{"lineNumber":1422,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c -numInputsNeeded; i++) {"},{"lineNumber":1423,"author":{"gitId":"-"},"content":"                click(getOptionsSection(questionNum).findElement(By.tagName(\"button\")));"},{"lineNumber":1424,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1425,"author":{"gitId":"-"},"content":"            inputs \u003d getOptionInputs(questionNum);"},{"lineNumber":1426,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1427,"author":{"gitId":"-"},"content":""},{"lineNumber":1428,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c options.size(); i++) {"},{"lineNumber":1429,"author":{"gitId":"-"},"content":"            fillTextBox(inputs.get(i), options.get(i));"},{"lineNumber":1430,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1431,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1432,"author":{"gitId":"-"},"content":""},{"lineNumber":1433,"author":{"gitId":"-"},"content":"    private void inputOptionWeights(int questionNum, boolean hasWeights, List\u003cDouble\u003e weights) {"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"        if (hasWeights) {"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getWeightCheckbox(questionNum));"},{"lineNumber":1436,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e weightInputs \u003d getOptionWeightInputs(questionNum);"},{"lineNumber":1437,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c weights.size(); i++) {"},{"lineNumber":1438,"author":{"gitId":"-"},"content":"                fillTextBox(weightInputs.get(i), getDoubleString(weights.get(i)));"},{"lineNumber":1439,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1440,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1441,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getWeightCheckbox(questionNum));"},{"lineNumber":1442,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1443,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1444,"author":{"gitId":"-"},"content":""},{"lineNumber":1445,"author":{"gitId":"-"},"content":"    private void inputOtherChoice(int questionNum, boolean hasOther, Double otherWeight) {"},{"lineNumber":1446,"author":{"gitId":"-"},"content":"        if (hasOther) {"},{"lineNumber":1447,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getOtherOptionCheckbox(questionNum));"},{"lineNumber":1448,"author":{"gitId":"-"},"content":"            if (otherWeight \u003e 0) {"},{"lineNumber":1449,"author":{"gitId":"-"},"content":"                fillTextBox(getOtherWeightInput(questionNum), getDoubleString(otherWeight));"},{"lineNumber":1450,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1451,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getOtherOptionCheckbox(questionNum));"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1454,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1455,"author":{"gitId":"-"},"content":""},{"lineNumber":1456,"author":{"gitId":"-"},"content":"    private void inputDropdownEnabledChoice(int questionNum, boolean hasOther) {"},{"lineNumber":1457,"author":{"gitId":"-"},"content":"        if (hasOther) {"},{"lineNumber":1458,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getQuestionDropdownCheckbox(questionNum));"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1460,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getQuestionDropdownCheckbox(questionNum));"},{"lineNumber":1461,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1462,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1463,"author":{"gitId":"-"},"content":""},{"lineNumber":1464,"author":{"gitId":"-"},"content":"    private WebElement getMaxOptionsCheckbox(int questionNum) {"},{"lineNumber":1465,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"max-options-checkbox\"));"},{"lineNumber":1466,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1467,"author":{"gitId":"-"},"content":""},{"lineNumber":1468,"author":{"gitId":"-"},"content":"    private WebElement getMaxOptionsInput(int questionNum) {"},{"lineNumber":1469,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"max-options\"));"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1471,"author":{"gitId":"-"},"content":""},{"lineNumber":1472,"author":{"gitId":"-"},"content":"    private WebElement getMinOptionsCheckbox(int questionNum) {"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"min-options-checkbox\"));"},{"lineNumber":1474,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1475,"author":{"gitId":"-"},"content":""},{"lineNumber":1476,"author":{"gitId":"-"},"content":"    private WebElement getMinOptionsInput(int questionNum) {"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"min-options\"));"},{"lineNumber":1478,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1479,"author":{"gitId":"-"},"content":""},{"lineNumber":1480,"author":{"gitId":"-"},"content":"    private void verifyMaxOptions(int questionNum, int maxOptions) {"},{"lineNumber":1481,"author":{"gitId":"-"},"content":"        if (maxOptions \u003d\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":1482,"author":{"gitId":"-"},"content":"            assertFalse(getMaxOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1483,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"            assertTrue(getMaxOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1485,"author":{"gitId":"-"},"content":"            assertEquals(getMaxOptionsInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":1486,"author":{"gitId":"-"},"content":"                    Integer.toString(maxOptions));"},{"lineNumber":1487,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1488,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1489,"author":{"gitId":"-"},"content":""},{"lineNumber":1490,"author":{"gitId":"-"},"content":"    private void verifyMinOptions(int questionNum, int minOptions) {"},{"lineNumber":1491,"author":{"gitId":"-"},"content":"        if (minOptions \u003d\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"            assertFalse(getMinOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1493,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1494,"author":{"gitId":"-"},"content":"            assertTrue(getMinOptionsCheckbox(questionNum).isSelected());"},{"lineNumber":1495,"author":{"gitId":"-"},"content":"            assertEquals(getMinOptionsInput(questionNum).getAttribute(\"value\"),"},{"lineNumber":1496,"author":{"gitId":"-"},"content":"                    Integer.toString(minOptions));"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1498,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1499,"author":{"gitId":"-"},"content":""},{"lineNumber":1500,"author":{"gitId":"-"},"content":"    private void inputMsqDetails(int questionNum, FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":1501,"author":{"gitId":"-"},"content":"        if (inputGenerateOptions(questionNum, questionDetails.getGenerateOptionsFor())) {"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":1503,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1504,"author":{"gitId":"-"},"content":""},{"lineNumber":1505,"author":{"gitId":"-"},"content":"        inputOptions(questionNum, questionDetails.getMsqChoices());"},{"lineNumber":1506,"author":{"gitId":"-"},"content":"        inputOptionWeights(questionNum, questionDetails.isHasAssignedWeights(), questionDetails.getMsqWeights());"},{"lineNumber":1507,"author":{"gitId":"-"},"content":"        inputOtherChoice(questionNum, questionDetails.isOtherEnabled(), questionDetails.getMsqOtherWeight());"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"        inputMaxOptions(questionNum, questionDetails.getMaxSelectableChoices());"},{"lineNumber":1509,"author":{"gitId":"-"},"content":"        inputMinOptions(questionNum, questionDetails.getMinSelectableChoices());"},{"lineNumber":1510,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1511,"author":{"gitId":"-"},"content":""},{"lineNumber":1512,"author":{"gitId":"-"},"content":"    private void inputMaxOptions(int questionNum, int maxOptions) {"},{"lineNumber":1513,"author":{"gitId":"-"},"content":"        if (maxOptions \u003d\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":1514,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getMaxOptionsCheckbox(questionNum));"},{"lineNumber":1515,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1516,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getMaxOptionsCheckbox(questionNum));"},{"lineNumber":1517,"author":{"gitId":"-"},"content":"            fillTextBox(getMaxOptionsInput(questionNum), Integer.toString(maxOptions));"},{"lineNumber":1518,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1519,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1520,"author":{"gitId":"-"},"content":""},{"lineNumber":1521,"author":{"gitId":"-"},"content":"    private void inputMinOptions(int questionNum, int minOptions) {"},{"lineNumber":1522,"author":{"gitId":"-"},"content":"        if (minOptions \u003d\u003d Const.POINTS_NO_VALUE) {"},{"lineNumber":1523,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getMinOptionsCheckbox(questionNum));"},{"lineNumber":1524,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1525,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getMinOptionsCheckbox(questionNum));"},{"lineNumber":1526,"author":{"gitId":"-"},"content":"            fillTextBox(getMinOptionsInput(questionNum), Integer.toString(minOptions));"},{"lineNumber":1527,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1528,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1529,"author":{"gitId":"-"},"content":""},{"lineNumber":1530,"author":{"gitId":"-"},"content":"    private WebElement getMinNumscaleInput(int questionNum) {"},{"lineNumber":1531,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"min-value\"));"},{"lineNumber":1532,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1533,"author":{"gitId":"-"},"content":""},{"lineNumber":1534,"author":{"gitId":"-"},"content":"    private WebElement getMaxNumscaleInput(int questionNum) {"},{"lineNumber":1535,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"max-value\"));"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1537,"author":{"gitId":"-"},"content":""},{"lineNumber":1538,"author":{"gitId":"-"},"content":"    private WebElement getNumScaleIncrementInput(int questionNum) {"},{"lineNumber":1539,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"increment-value\"));"},{"lineNumber":1540,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1541,"author":{"gitId":"-"},"content":""},{"lineNumber":1542,"author":{"gitId":"-"},"content":"    private void inputNumScaleDetails(int questionNum, FeedbackNumericalScaleQuestionDetails questionDetails) {"},{"lineNumber":1543,"author":{"gitId":"-"},"content":"        inputNumScaleValue(getMinNumscaleInput(questionNum), Integer.toString(questionDetails.getMinScale()));"},{"lineNumber":1544,"author":{"gitId":"-"},"content":"        inputNumScaleValue(getNumScaleIncrementInput(questionNum), getDoubleString(questionDetails.getStep()));"},{"lineNumber":1545,"author":{"gitId":"-"},"content":"        inputNumScaleValue(getMaxNumscaleInput(questionNum), Integer.toString(questionDetails.getMaxScale()));"},{"lineNumber":1546,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1547,"author":{"gitId":"-"},"content":""},{"lineNumber":1548,"author":{"gitId":"-"},"content":"    private void inputNumScaleValue(WebElement input, String value) {"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"        input.clear();"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"        input.sendKeys(value);"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1552,"author":{"gitId":"-"},"content":""},{"lineNumber":1553,"author":{"gitId":"-"},"content":"    private WebElement getConstSumTotalPointsRadioBtn(int questionNum) {"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"total-points-radio\"));"},{"lineNumber":1555,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1556,"author":{"gitId":"-"},"content":""},{"lineNumber":1557,"author":{"gitId":"-"},"content":"    private WebElement getConstSumTotalPointsInput(int questionNum) {"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"total-points\"));"},{"lineNumber":1559,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1560,"author":{"gitId":"-"},"content":""},{"lineNumber":1561,"author":{"gitId":"-"},"content":"    private WebElement getConstSumPerOptionPointsRadioBtn(int questionNum) {"},{"lineNumber":1562,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"per-option-points-radio\"));"},{"lineNumber":1563,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1564,"author":{"gitId":"-"},"content":""},{"lineNumber":1565,"author":{"gitId":"-"},"content":"    private WebElement getConstSumPerOptionPointsInput(int questionNum) {"},{"lineNumber":1566,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"per-option-points\"));"},{"lineNumber":1567,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1568,"author":{"gitId":"-"},"content":""},{"lineNumber":1569,"author":{"gitId":"-"},"content":"    private WebElement getConstSumUnevenDistributionCheckbox(int questionNum) {"},{"lineNumber":1570,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"uneven-distribution-checkbox\"));"},{"lineNumber":1571,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1572,"author":{"gitId":"-"},"content":""},{"lineNumber":1573,"author":{"gitId":"-"},"content":"    private WebElement getConstSumUnevenDistributionDropdown(int questionNum) {"},{"lineNumber":1574,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"uneven-distribution-dropdown\"));"},{"lineNumber":1575,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1576,"author":{"gitId":"-"},"content":""},{"lineNumber":1577,"author":{"gitId":"-"},"content":"    private void inputConstSumDetails(int questionNum, FeedbackConstantSumQuestionDetails questionDetails) {"},{"lineNumber":1578,"author":{"gitId":"-"},"content":"        if (!questionDetails.isDistributeToRecipients()) {"},{"lineNumber":1579,"author":{"gitId":"-"},"content":"            inputOptions(questionNum, questionDetails.getConstSumOptions());"},{"lineNumber":1580,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1581,"author":{"gitId":"-"},"content":"        if (questionDetails.isPointsPerOption()) {"},{"lineNumber":1582,"author":{"gitId":"-"},"content":"            click(getConstSumPerOptionPointsRadioBtn(questionNum));"},{"lineNumber":1583,"author":{"gitId":"-"},"content":"            fillTextBox(getConstSumPerOptionPointsInput(questionNum), Integer.toString(questionDetails.getPoints()));"},{"lineNumber":1584,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1585,"author":{"gitId":"-"},"content":"            click(getConstSumTotalPointsRadioBtn(questionNum));"},{"lineNumber":1586,"author":{"gitId":"-"},"content":"            fillTextBox(getConstSumTotalPointsInput(questionNum), Integer.toString(questionDetails.getPoints()));"},{"lineNumber":1587,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1588,"author":{"gitId":"-"},"content":"        String distributeFor \u003d questionDetails.getDistributePointsFor();"},{"lineNumber":1589,"author":{"gitId":"-"},"content":"        if (questionDetails.isForceUnevenDistribution()) {"},{"lineNumber":1590,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getConstSumUnevenDistributionCheckbox(questionNum));"},{"lineNumber":1591,"author":{"gitId":"-"},"content":"            selectDropdownOptionByText(getConstSumUnevenDistributionDropdown(questionNum),"},{"lineNumber":1592,"author":{"gitId":"-"},"content":"                    \"All options\".equals(distributeFor) ? \"Every option\" : distributeFor);"},{"lineNumber":1593,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1594,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getConstSumUnevenDistributionCheckbox(questionNum));"},{"lineNumber":1595,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1596,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1597,"author":{"gitId":"-"},"content":""},{"lineNumber":1598,"author":{"gitId":"-"},"content":"    private WebElement getZeroSumCheckbox(int questionNum) {"},{"lineNumber":1599,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"zero-sum-checkbox\"));"},{"lineNumber":1600,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1601,"author":{"gitId":"-"},"content":""},{"lineNumber":1602,"author":{"gitId":"-"},"content":"    private WebElement getAllowNotSureContributionCheckbox(int questionNum) {"},{"lineNumber":1603,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"not-sure-checkbox\"));"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1605,"author":{"gitId":"-"},"content":""},{"lineNumber":1606,"author":{"gitId":"-"},"content":"    private void inputContributionDetails(int questionNum, FeedbackContributionQuestionDetails questionDetails) {"},{"lineNumber":1607,"author":{"gitId":"-"},"content":"        if (questionDetails.isZeroSum()) {"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getZeroSumCheckbox(questionNum));"},{"lineNumber":1609,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getZeroSumCheckbox(questionNum));"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1612,"author":{"gitId":"-"},"content":"        if (questionDetails.isNotSureAllowed()) {"},{"lineNumber":1613,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getAllowNotSureContributionCheckbox(questionNum));"},{"lineNumber":1614,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1615,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getAllowNotSureContributionCheckbox(questionNum));"},{"lineNumber":1616,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1617,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1618,"author":{"gitId":"-"},"content":""},{"lineNumber":1619,"author":{"gitId":"-"},"content":"    private WebElement getRubricRow(int questionNum, int rowNumber) {"},{"lineNumber":1620,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElements(By.cssSelector(\"tm-rubric-question-edit-details-form tr\"))"},{"lineNumber":1621,"author":{"gitId":"-"},"content":"                .get(rowNumber - 1);"},{"lineNumber":1622,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1623,"author":{"gitId":"-"},"content":""},{"lineNumber":1624,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRubricChoiceInputs(int questionNum) {"},{"lineNumber":1625,"author":{"gitId":"-"},"content":"        return getRubricRow(questionNum, 1).findElements(By.tagName(\"input\"));"},{"lineNumber":1626,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1627,"author":{"gitId":"-"},"content":""},{"lineNumber":1628,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRubricTextareas(int questionNum, int rowNum) {"},{"lineNumber":1629,"author":{"gitId":"-"},"content":"        return getRubricRow(questionNum, rowNum).findElements(By.tagName(\"textarea\"));"},{"lineNumber":1630,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1631,"author":{"gitId":"-"},"content":""},{"lineNumber":1632,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getRubricWeights(int questionNum, int rowNum) {"},{"lineNumber":1633,"author":{"gitId":"-"},"content":"        return getRubricRow(questionNum, rowNum).findElements(By.tagName(\"input\"));"},{"lineNumber":1634,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1635,"author":{"gitId":"-"},"content":""},{"lineNumber":1636,"author":{"gitId":"-"},"content":"    private WebElement getRubricDeleteSubQnBtn(int questionNum, int rowNum) {"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"        return getRubricRow(questionNum, rowNum).findElement(By.id(\"btn-delete-subquestion\"));"},{"lineNumber":1638,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1639,"author":{"gitId":"-"},"content":""},{"lineNumber":1640,"author":{"gitId":"-"},"content":"    private WebElement getRubricDeleteChoiceBtn(int questionNum, int colNum) {"},{"lineNumber":1641,"author":{"gitId":"-"},"content":"        return getRubricRow(questionNum, getNumRubricRows(questionNum)).findElements(By.id(\"btn-delete-choice\")).get(colNum);"},{"lineNumber":1642,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1643,"author":{"gitId":"-"},"content":""},{"lineNumber":1644,"author":{"gitId":"-"},"content":"    private int getNumRubricRows(int questionNum) {"},{"lineNumber":1645,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElements(By.cssSelector(\"#rubric-table tr\")).size();"},{"lineNumber":1646,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1647,"author":{"gitId":"-"},"content":""},{"lineNumber":1648,"author":{"gitId":"-"},"content":"    private int getNumRubricCols(int questionNum) {"},{"lineNumber":1649,"author":{"gitId":"-"},"content":"        WebElement row \u003d getRubricRow(questionNum, 1);"},{"lineNumber":1650,"author":{"gitId":"-"},"content":"        return row.findElements(By.tagName(\"td\")).size() + row.findElements(By.tagName(\"th\")).size();"},{"lineNumber":1651,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1652,"author":{"gitId":"-"},"content":""},{"lineNumber":1653,"author":{"gitId":"-"},"content":"    private void inputRubricDetails(int questionNum, FeedbackRubricQuestionDetails questionDetails) {"},{"lineNumber":1654,"author":{"gitId":"-"},"content":"        int numSubQn \u003d questionDetails.getNumOfRubricSubQuestions();"},{"lineNumber":1655,"author":{"gitId":"-"},"content":"        int numChoices \u003d questionDetails.getNumOfRubricChoices();"},{"lineNumber":1656,"author":{"gitId":"-"},"content":"        adjustNumRubricFields(questionNum, numSubQn, numChoices);"},{"lineNumber":1657,"author":{"gitId":"-"},"content":""},{"lineNumber":1658,"author":{"gitId":"-"},"content":"        List\u003cString\u003e choices \u003d questionDetails.getRubricChoices();"},{"lineNumber":1659,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c numChoices; i++) {"},{"lineNumber":1660,"author":{"gitId":"-"},"content":"            fillTextBox(getRubricChoiceInputs(questionNum).get(i), choices.get(i));"},{"lineNumber":1661,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1662,"author":{"gitId":"-"},"content":""},{"lineNumber":1663,"author":{"gitId":"-"},"content":"        List\u003cString\u003e subQuestions \u003d questionDetails.getRubricSubQuestions();"},{"lineNumber":1664,"author":{"gitId":"-"},"content":"        List\u003cList\u003cString\u003e\u003e descriptions \u003d questionDetails.getRubricDescriptions();"},{"lineNumber":1665,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c numSubQn; i++) {"},{"lineNumber":1666,"author":{"gitId":"-"},"content":"            List\u003cWebElement\u003e textAreas \u003d getRubricTextareas(questionNum, i + 2);"},{"lineNumber":1667,"author":{"gitId":"-"},"content":"            fillTextBox(textAreas.get(0), subQuestions.get(i));"},{"lineNumber":1668,"author":{"gitId":"-"},"content":"            for (int j \u003d 0; j \u003c numChoices; j++) {"},{"lineNumber":1669,"author":{"gitId":"-"},"content":"                fillTextBox(textAreas.get(j + 1), descriptions.get(i).get(j));"},{"lineNumber":1670,"author":{"gitId":"-"},"content":"                if (descriptions.get(i).get(j).isEmpty()) {"},{"lineNumber":1671,"author":{"gitId":"-"},"content":"                    // using clear does not send the required event"},{"lineNumber":1672,"author":{"gitId":"-"},"content":"                    // as a workaround, after clearing without event, enter a random character and delete it"},{"lineNumber":1673,"author":{"gitId":"-"},"content":"                    textAreas.get(j + 1).sendKeys(\"a\");"},{"lineNumber":1674,"author":{"gitId":"-"},"content":"                    textAreas.get(j + 1).sendKeys(Keys.BACK_SPACE);"},{"lineNumber":1675,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":1676,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1677,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1678,"author":{"gitId":"-"},"content":""},{"lineNumber":1679,"author":{"gitId":"-"},"content":"        if (questionDetails.isHasAssignedWeights()) {"},{"lineNumber":1680,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getWeightCheckbox(questionNum));"},{"lineNumber":1681,"author":{"gitId":"-"},"content":"            List\u003cList\u003cDouble\u003e\u003e weights \u003d questionDetails.getRubricWeights();"},{"lineNumber":1682,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c numSubQn; i++) {"},{"lineNumber":1683,"author":{"gitId":"-"},"content":"                for (int j \u003d 0; j \u003c numChoices; j++) {"},{"lineNumber":1684,"author":{"gitId":"-"},"content":"                    fillTextBox(getRubricWeights(questionNum, i + 2).get(j), getDoubleString(weights.get(i).get(j)));"},{"lineNumber":1685,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":1686,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1687,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1688,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getWeightCheckbox(questionNum));"},{"lineNumber":1689,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1690,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1691,"author":{"gitId":"-"},"content":""},{"lineNumber":1692,"author":{"gitId":"-"},"content":"    private void adjustNumRubricFields(int questionNum, int numSubQn, int numChoices) {"},{"lineNumber":1693,"author":{"gitId":"-"},"content":"        int numSubQnsNeeded \u003d numSubQn - (getNumRubricRows(questionNum) - 2);"},{"lineNumber":1694,"author":{"gitId":"-"},"content":"        int numChoicesNeeded \u003d numChoices - (getNumRubricCols(questionNum) - 1);"},{"lineNumber":1695,"author":{"gitId":"-"},"content":"        if (numSubQnsNeeded \u003e 0) {"},{"lineNumber":1696,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c numSubQnsNeeded; i++) {"},{"lineNumber":1697,"author":{"gitId":"-"},"content":"                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-row\")));"},{"lineNumber":1698,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1699,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1700,"author":{"gitId":"-"},"content":"        if (numChoicesNeeded \u003e 0) {"},{"lineNumber":1701,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c numChoicesNeeded; i++) {"},{"lineNumber":1702,"author":{"gitId":"-"},"content":"                click(getQuestionForm(questionNum).findElement(By.id(\"btn-add-col\")));"},{"lineNumber":1703,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1704,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1705,"author":{"gitId":"-"},"content":"        if (numSubQnsNeeded \u003c 0) {"},{"lineNumber":1706,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c -numSubQnsNeeded; i++) {"},{"lineNumber":1707,"author":{"gitId":"-"},"content":"                click(getRubricDeleteSubQnBtn(questionNum, 2));"},{"lineNumber":1708,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1709,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1710,"author":{"gitId":"-"},"content":"        if (numChoicesNeeded \u003c 0) {"},{"lineNumber":1711,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c -numChoicesNeeded; i++) {"},{"lineNumber":1712,"author":{"gitId":"-"},"content":"                clickAndConfirm(getRubricDeleteChoiceBtn(questionNum, 2));"},{"lineNumber":1713,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1714,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1715,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1716,"author":{"gitId":"-"},"content":""},{"lineNumber":1717,"author":{"gitId":"-"},"content":"    private WebElement getAllowDuplicateRankCheckbox(int questionNum) {"},{"lineNumber":1718,"author":{"gitId":"-"},"content":"        return getQuestionForm(questionNum).findElement(By.id(\"duplicate-rank-checkbox\"));"},{"lineNumber":1719,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1720,"author":{"gitId":"-"},"content":""},{"lineNumber":1721,"author":{"gitId":"-"},"content":"    private void inputRankDetails(int questionNum, FeedbackRankQuestionDetails questionDetails) {"},{"lineNumber":1722,"author":{"gitId":"-"},"content":"        if (questionDetails instanceof FeedbackRankOptionsQuestionDetails) {"},{"lineNumber":1723,"author":{"gitId":"-"},"content":"            FeedbackRankOptionsQuestionDetails optionDetails \u003d (FeedbackRankOptionsQuestionDetails) questionDetails;"},{"lineNumber":1724,"author":{"gitId":"-"},"content":"            inputOptions(questionNum, optionDetails.getOptions());"},{"lineNumber":1725,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1726,"author":{"gitId":"-"},"content":"        if (questionDetails.isAreDuplicatesAllowed()) {"},{"lineNumber":1727,"author":{"gitId":"-"},"content":"            markOptionAsSelected(getAllowDuplicateRankCheckbox(questionNum));"},{"lineNumber":1728,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":1729,"author":{"gitId":"-"},"content":"            markOptionAsUnselected(getAllowDuplicateRankCheckbox(questionNum));"},{"lineNumber":1730,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1731,"author":{"gitId":"-"},"content":"        inputMaxOptions(questionNum, questionDetails.getMaxOptionsToBeRanked());"},{"lineNumber":1732,"author":{"gitId":"-"},"content":"        inputMinOptions(questionNum, questionDetails.getMinOptionsToBeRanked());"},{"lineNumber":1733,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1734,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":5,"dishenggg":13,"mingyuanc":5,"-":1711}},{"path":"src/e2e/java/teammates/e2e/pageobjects/StudentHomePage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.e2e.pageobjects;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.openqa.selenium.By;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.openqa.selenium.WebElement;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Page Object Model for student home page."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StudentHomePage extends AppPage {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public StudentHomePage(Browser browser) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        super(browser);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected boolean containsExpectedPageContents() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return \"Student Home\".equals(getPageTitle());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private List\u003cWebElement\u003e getStudentHomeCoursePanels() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return browser.driver.findElements(By.cssSelector(\"div.card.bg-light\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public int getStudentHomeCoursePanelIndex(String courseName) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cWebElement\u003e coursePanels \u003d getStudentHomeCoursePanels();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        int coursePanelIndex \u003d -1;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c coursePanels.size(); i++) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            if (coursePanels.get(i).getText().contains(courseName)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                coursePanelIndex \u003d i;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(coursePanelIndex \u003e\u003d 0);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return coursePanelIndex;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void verifyVisibleFeedbackSessionToStudents(String feedbackSessionName, int index) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(getStudentHomeCoursePanels().get(index)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .findElement(By.cssSelector(\"div.table-responsive table.table tbody\")).getText()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .contains(feedbackSessionName));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void clickCloseNotificationBannerButton() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        WebElement closeNotifButton \u003d browser.driver.findElement(By.id(\"btn-close-notif\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        waitForElementToBeClickable(closeNotifButton);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        click(closeNotifButton);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void clickMarkAsReadButton() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        WebElement markNotifAsReadButton \u003d browser.driver.findElement(By.id(\"btn-mark-as-read\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        waitForElementToBeClickable(markNotifAsReadButton);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        click(markNotifAsReadButton);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        waitUntilAnimationFinish();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":"    public String getNotificationId() {"},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":"        WebElement notificationBanner \u003d browser.driver.findElement(By.id(\"notification-banner\"));"},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":"        return notificationBanner.getAttribute(\"data-testid\");"},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":5,"-":60}},{"path":"src/it/java/teammates/it/sqllogic/core/AccountsLogicIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":8,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.AccountsLogic;"},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":"import teammates.sqllogic.core.CoursesLogic;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.NotificationsLogic;"},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":"import teammates.sqllogic.core.UsersLogic;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":27,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":28,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":32,"author":{"gitId":"yuanxi1"},"content":"import teammates.test.AssertHelper;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * SUT: {@link AccountsLogic}."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AccountsLogicIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":"    private UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"    private CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AccountsDb accountsDb \u003d AccountsDb.inst();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":"    private SqlDataBundle typicalDataBundle;"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"    @BeforeClass"},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"    public void setupClass() {"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"        super.setupClass();"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":"        typicalDataBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":"    @BeforeMethod"},{"lineNumber":57,"author":{"gitId":"yuanxi1"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"        super.setUp();"},{"lineNumber":59,"author":{"gitId":"yuanxi1"},"content":"        persistDataBundle(typicalDataBundle);"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":"        HibernateUtil.clearSession();"},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ______TS(\"success: mark notification as read\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Account account \u003d new Account(\"google-id\", \"name\", \"email@teammates.com\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Notification notification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        accountsDb.createAccount(account);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        notificationsLogic.createNotification(notification);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Account actualAccount \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cReadNotification\u003e accountReadNotifications \u003d actualAccount.getReadNotifications();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(1, accountReadNotifications.size());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertSame(actualAccount, accountReadNotifications.get(0).getAccount());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertSame(notification, accountReadNotifications.get(0).getNotification());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":86,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"yuanxi1"},"content":"    public void testJoinCourseForStudent()"},{"lineNumber":88,"author":{"gitId":"yuanxi1"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":89,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":90,"author":{"gitId":"yuanxi1"},"content":"        Student student2YetToJoinCourse \u003d typicalDataBundle.students.get(\"student2YetToJoinCourse4\");"},{"lineNumber":91,"author":{"gitId":"yuanxi1"},"content":"        Student student3YetToJoinCourse \u003d typicalDataBundle.students.get(\"student3YetToJoinCourse4\");"},{"lineNumber":92,"author":{"gitId":"yuanxi1"},"content":"        Student studentInCourse \u003d typicalDataBundle.students.get(\"student1InCourse1\");"},{"lineNumber":93,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":94,"author":{"gitId":"yuanxi1"},"content":"        String loggedInGoogleId \u003d \"AccLogicT.student.id\";"},{"lineNumber":95,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":96,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: wrong key\");"},{"lineNumber":97,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":98,"author":{"gitId":"yuanxi1"},"content":"        String wrongKey \u003d StringHelper.encrypt(\"wrongkey\");"},{"lineNumber":99,"author":{"gitId":"yuanxi1"},"content":"        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":100,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForStudent(wrongKey, loggedInGoogleId));"},{"lineNumber":101,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"No student with given registration key: \" + wrongKey, ednee.getMessage());"},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":103,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: invalid parameters\");"},{"lineNumber":104,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":105,"author":{"gitId":"yuanxi1"},"content":"        InvalidParametersException ipe \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":106,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForStudent(student2YetToJoinCourse.getRegKey(), \"wrong student\"));"},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":"        AssertHelper.assertContains(FieldValidator.REASON_INCORRECT_FORMAT, ipe.getMessage());"},{"lineNumber":108,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":109,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: googleID belongs to an existing student in the course\");"},{"lineNumber":110,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":111,"author":{"gitId":"yuanxi1"},"content":"        EntityAlreadyExistsException eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":112,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForStudent(student2YetToJoinCourse.getRegKey(),"},{"lineNumber":113,"author":{"gitId":"yuanxi1"},"content":"                studentInCourse.getGoogleId()));"},{"lineNumber":114,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Student has already joined course\", eaee.getMessage());"},{"lineNumber":115,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":116,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: with encryption and new account to be created\");"},{"lineNumber":117,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":118,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.joinCourseForStudent(student2YetToJoinCourse.getRegKey(), loggedInGoogleId);"},{"lineNumber":119,"author":{"gitId":"yuanxi1"},"content":"        Account accountCreated \u003d accountsLogic.getAccountForGoogleId(loggedInGoogleId);"},{"lineNumber":120,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":121,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(loggedInGoogleId, usersLogic.getStudentForEmail("},{"lineNumber":122,"author":{"gitId":"yuanxi1"},"content":"                student2YetToJoinCourse.getCourseId(), student2YetToJoinCourse.getEmail()).getGoogleId());"},{"lineNumber":123,"author":{"gitId":"yuanxi1"},"content":"        assertNotNull(accountCreated);"},{"lineNumber":124,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":125,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: student joined but account already exists\");"},{"lineNumber":126,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":127,"author":{"gitId":"yuanxi1"},"content":"        String existingAccountId \u003d \"existingAccountId\";"},{"lineNumber":128,"author":{"gitId":"yuanxi1"},"content":"        Account existingAccount \u003d new Account(existingAccountId, \"accountName\", student3YetToJoinCourse.getEmail());"},{"lineNumber":129,"author":{"gitId":"yuanxi1"},"content":"        accountsDb.createAccount(existingAccount);"},{"lineNumber":130,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":131,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.joinCourseForStudent(student3YetToJoinCourse.getRegKey(), existingAccountId);"},{"lineNumber":132,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":133,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(existingAccountId, usersLogic.getStudentForEmail("},{"lineNumber":134,"author":{"gitId":"yuanxi1"},"content":"                student3YetToJoinCourse.getCourseId(), student3YetToJoinCourse.getEmail()).getGoogleId());"},{"lineNumber":135,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":136,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: already joined\");"},{"lineNumber":137,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":138,"author":{"gitId":"yuanxi1"},"content":"        eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":139,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForStudent(student2YetToJoinCourse.getRegKey(), loggedInGoogleId));"},{"lineNumber":140,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Student has already joined course\", eaee.getMessage());"},{"lineNumber":141,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":142,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: course is deleted\");"},{"lineNumber":143,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":144,"author":{"gitId":"yuanxi1"},"content":"        Course originalCourse \u003d usersLogic.getStudentForEmail("},{"lineNumber":145,"author":{"gitId":"yuanxi1"},"content":"                student2YetToJoinCourse.getCourseId(), student2YetToJoinCourse.getEmail()).getCourse();"},{"lineNumber":146,"author":{"gitId":"yuanxi1"},"content":"        coursesLogic.moveCourseToRecycleBin(originalCourse.getId());"},{"lineNumber":147,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":148,"author":{"gitId":"yuanxi1"},"content":"        ednee \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":149,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForStudent(student2YetToJoinCourse.getRegKey(),"},{"lineNumber":150,"author":{"gitId":"yuanxi1"},"content":"                        loggedInGoogleId));"},{"lineNumber":151,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"The course you are trying to join has been deleted by an instructor\", ednee.getMessage());"},{"lineNumber":152,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":154,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"yuanxi1"},"content":"    public void testJoinCourseForInstructor() throws Exception {"},{"lineNumber":156,"author":{"gitId":"yuanxi1"},"content":"        String instructorIdAlreadyJoinedCourse \u003d \"instructor1\";"},{"lineNumber":157,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructor2YetToJoinCourse \u003d typicalDataBundle.instructors.get(\"instructor2YetToJoinCourse4\");"},{"lineNumber":158,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructor3YetToJoinCourse \u003d typicalDataBundle.instructors.get(\"instructor3YetToJoinCourse4\");"},{"lineNumber":159,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":160,"author":{"gitId":"yuanxi1"},"content":"        String loggedInGoogleId \u003d \"AccLogicT.instr.id\";"},{"lineNumber":161,"author":{"gitId":"yuanxi1"},"content":"        String[] key \u003d new String[] {"},{"lineNumber":162,"author":{"gitId":"yuanxi1"},"content":"                getRegKeyForInstructor(instructor2YetToJoinCourse.getCourseId(), instructor2YetToJoinCourse.getEmail()),"},{"lineNumber":163,"author":{"gitId":"yuanxi1"},"content":"                getRegKeyForInstructor(instructor2YetToJoinCourse.getCourseId(), instructor3YetToJoinCourse.getEmail()),"},{"lineNumber":164,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":165,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":166,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: googleID belongs to an existing instructor in the course\");"},{"lineNumber":167,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":168,"author":{"gitId":"yuanxi1"},"content":"        EntityAlreadyExistsException eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":169,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForInstructor("},{"lineNumber":170,"author":{"gitId":"yuanxi1"},"content":"                        key[0], instructorIdAlreadyJoinedCourse));"},{"lineNumber":171,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Instructor has already joined course\", eaee.getMessage());"},{"lineNumber":172,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":173,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: instructor joined and new account be created\");"},{"lineNumber":174,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":175,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.joinCourseForInstructor(key[0], loggedInGoogleId);"},{"lineNumber":176,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":177,"author":{"gitId":"yuanxi1"},"content":"        Instructor joinedInstructor \u003d usersLogic.getInstructorForEmail("},{"lineNumber":178,"author":{"gitId":"yuanxi1"},"content":"                        instructor2YetToJoinCourse.getCourseId(), instructor2YetToJoinCourse.getEmail());"},{"lineNumber":179,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(loggedInGoogleId, joinedInstructor.getGoogleId());"},{"lineNumber":180,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":181,"author":{"gitId":"yuanxi1"},"content":"        Account accountCreated \u003d accountsLogic.getAccountForGoogleId(loggedInGoogleId);"},{"lineNumber":182,"author":{"gitId":"yuanxi1"},"content":"        assertNotNull(accountCreated);"},{"lineNumber":183,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":184,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: instructor joined but account already exists\");"},{"lineNumber":185,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":186,"author":{"gitId":"yuanxi1"},"content":"        String existingAccountId \u003d \"existingAccountId\";"},{"lineNumber":187,"author":{"gitId":"yuanxi1"},"content":"        Account existingAccount \u003d new Account(existingAccountId, \"accountName\", instructor3YetToJoinCourse.getEmail());"},{"lineNumber":188,"author":{"gitId":"yuanxi1"},"content":"        accountsDb.createAccount(existingAccount);"},{"lineNumber":189,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":190,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.joinCourseForInstructor(key[1], existingAccount.getGoogleId());"},{"lineNumber":191,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":192,"author":{"gitId":"yuanxi1"},"content":"        joinedInstructor \u003d usersLogic.getInstructorForEmail("},{"lineNumber":193,"author":{"gitId":"yuanxi1"},"content":"                        instructor3YetToJoinCourse.getCourseId(), existingAccount.getEmail());"},{"lineNumber":194,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(existingAccountId, joinedInstructor.getGoogleId());"},{"lineNumber":195,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":196,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: instructor already joined\");"},{"lineNumber":197,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":198,"author":{"gitId":"yuanxi1"},"content":"        eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":199,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForInstructor(key[0], loggedInGoogleId));"},{"lineNumber":200,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Instructor has already joined course\", eaee.getMessage());"},{"lineNumber":201,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":202,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: key belongs to a different user\");"},{"lineNumber":203,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":204,"author":{"gitId":"yuanxi1"},"content":"        eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":205,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForInstructor(key[0], \"otherUserId\"));"},{"lineNumber":206,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Instructor has already joined course\", eaee.getMessage());"},{"lineNumber":207,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":208,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: invalid key\");"},{"lineNumber":209,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":210,"author":{"gitId":"yuanxi1"},"content":"        String invalidKey \u003d StringHelper.encrypt(\"invalidKey\");"},{"lineNumber":211,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":212,"author":{"gitId":"yuanxi1"},"content":"        EntityDoesNotExistException ednee \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":213,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForInstructor(invalidKey, loggedInGoogleId));"},{"lineNumber":214,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"No instructor with given registration key: \" + invalidKey,"},{"lineNumber":215,"author":{"gitId":"yuanxi1"},"content":"                ednee.getMessage());"},{"lineNumber":216,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":217,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: course deleted\");"},{"lineNumber":218,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":219,"author":{"gitId":"yuanxi1"},"content":"        Course originalCourse \u003d usersLogic.getInstructorForEmail("},{"lineNumber":220,"author":{"gitId":"yuanxi1"},"content":"                instructor2YetToJoinCourse.getCourseId(), instructor2YetToJoinCourse.getEmail()).getCourse();"},{"lineNumber":221,"author":{"gitId":"yuanxi1"},"content":"        coursesLogic.moveCourseToRecycleBin(originalCourse.getId());"},{"lineNumber":222,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":223,"author":{"gitId":"yuanxi1"},"content":"        ednee \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":224,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e accountsLogic.joinCourseForInstructor(instructor2YetToJoinCourse.getRegKey(),"},{"lineNumber":225,"author":{"gitId":"yuanxi1"},"content":"                    instructor2YetToJoinCourse.getGoogleId()));"},{"lineNumber":226,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"The course you are trying to join has been deleted by an instructor\", ednee.getMessage());"},{"lineNumber":227,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":229,"author":{"gitId":"yuanxi1"},"content":"    private String getRegKeyForInstructor(String courseId, String email) {"},{"lineNumber":230,"author":{"gitId":"yuanxi1"},"content":"        return usersLogic.getInstructorForEmail(courseId, email).getRegKey();"},{"lineNumber":231,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":179,"-":53}},{"path":"src/it/java/teammates/it/sqllogic/core/FeedbackQuestionsLogicIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"},{"lineNumber":16,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackQuestionsLogic;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackVisibilityType;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.ui.output.NumberOfEntitiesToGiveFeedbackToSetting;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackQuestionUpdateRequest;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackQuestionsLogic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class FeedbackQuestionsLogicIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private SqlDataBundle typicalDataBundle;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setupClass() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        super.setupClass();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        typicalDataBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalDataBundle);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"marquestye"},"content":"    public void testCreateFeedbackQuestion() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d typicalDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        FeedbackTextQuestionDetails newQuestionDetails \u003d new FeedbackTextQuestionDetails(\"New question text.\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e showTos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        showTos.add(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        FeedbackQuestion newQuestion \u003d FeedbackQuestion.makeQuestion(fs, 6, \"This is a new text question\","},{"lineNumber":59,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.STUDENTS, FeedbackParticipantType.OWN_TEAM_MEMBERS, -100,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                showTos, showTos, showTos, newQuestionDetails);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        newQuestion \u003d fqLogic.createFeedbackQuestion(newQuestion);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        FeedbackQuestion actualQuestion \u003d fqLogic.getFeedbackQuestion(newQuestion.getId());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        verifyEquals(newQuestion, actualQuestion);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForSession() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d typicalDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d typicalDataBundle.feedbackQuestions.get(\"qn2InSession1InCourse1\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d typicalDataBundle.feedbackQuestions.get(\"qn3InSession1InCourse1\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d typicalDataBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d typicalDataBundle.feedbackQuestions.get(\"qn5InSession1InCourse1\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq6 \u003d typicalDataBundle.feedbackQuestions.get(\"qn6InSession1InCourse1NoResponses\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2, fq3, fq4, fq5, fq6);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForSession(fs);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(expectedQuestions.containsAll(actualQuestions));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackQuestionCascade() throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        fq1.setDescription(\"New question description\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FeedbackQuestionUpdateRequest updateRequest \u003d generateFeedbackQuestionUpdateRequest("},{"lineNumber":92,"author":{"gitId":"-"},"content":"                fq1.getQuestionNumber(),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                fq1.getDescription(),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                fq1.getQuestionDetailsCopy(),"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                fq1.getQuestionDetailsCopy().getQuestionType(),"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                fq1.getGiverType(),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                fq1.getRecipientType(),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                fq1.getNumOfEntitiesToGiveFeedbackTo(),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                fq1.getShowResponsesTo(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                fq1.getShowGiverNameTo(),"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                fq1.getShowRecipientNameTo()"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        updateRequest.setNumberOfEntitiesToGiveFeedbackToSetting(NumberOfEntitiesToGiveFeedbackToSetting.CUSTOM);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        fqLogic.updateFeedbackQuestionCascade(fq1.getId(), updateRequest);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        FeedbackQuestion actualFeedbackQuestion \u003d fqLogic.getFeedbackQuestion(fq1.getId());"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        verifyEquals(fq1, actualFeedbackQuestion);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private FeedbackQuestionUpdateRequest generateFeedbackQuestionUpdateRequest("},{"lineNumber":113,"author":{"gitId":"-"},"content":"            int questionNumber,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            String questionDescription,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails questionDetails,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            FeedbackQuestionType questionType,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            FeedbackParticipantType giverType,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            FeedbackParticipantType recipientType,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Integer customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showRecipientNameTo"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        FeedbackQuestionUpdateRequest updateRequest \u003d new FeedbackQuestionUpdateRequest();"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        updateRequest.setQuestionNumber(questionNumber);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        updateRequest.setQuestionDescription(questionDescription);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        updateRequest.setQuestionDetails(questionDetails);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        updateRequest.setQuestionType(questionType);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        updateRequest.setGiverType(giverType);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        updateRequest.setRecipientType(recipientType);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        updateRequest.setCustomNumberOfEntitiesToGiveFeedbackTo(customNumberOfEntitiesToGiveFeedbackTo);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        updateRequest.setShowResponsesTo(convertToFeedbackVisibilityType(showResponsesTo));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        updateRequest.setShowGiverNameTo(convertToFeedbackVisibilityType(showGiverNameTo));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        updateRequest.setShowRecipientNameTo(convertToFeedbackVisibilityType(showRecipientNameTo));"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return updateRequest;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackVisibilityType\u003e convertToFeedbackVisibilityType("},{"lineNumber":141,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e feedbackParticipantTypes) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return feedbackParticipantTypes.stream().map(feedbackParticipantType -\u003e {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            switch (feedbackParticipantType) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            case STUDENTS:"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                return FeedbackVisibilityType.STUDENTS;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            case INSTRUCTORS:"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                return FeedbackVisibilityType.INSTRUCTORS;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            case RECEIVER:"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                return FeedbackVisibilityType.RECIPIENT;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            case OWN_TEAM_MEMBERS:"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                return FeedbackVisibilityType.GIVER_TEAM_MEMBERS;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            case RECEIVER_TEAM_MEMBERS:"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                return FeedbackVisibilityType.RECIPIENT_TEAM_MEMBERS;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                assert false : \"Unknown feedbackParticipantType\" + feedbackParticipantType;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toList());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":2,"-":159}},{"path":"src/it/java/teammates/it/storage/sqlapi/AccountRequestsDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * SUT: {@link AccountRequestsDb}."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AccountRequestsDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AccountRequestsDb accountRequestDb \u003d AccountRequestsDb.inst();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void testCreateReadDeleteAccountRequest() throws Exception {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        ______TS(\"Create account request, does not exists, succeeds\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ______TS(\"Read account request using the given email and institute\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AccountRequest actualAccReqEmalAndInstitute \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        verifyEquals(accountRequest, actualAccReqEmalAndInstitute);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ______TS(\"Read account request using the given registration key\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        AccountRequest actualAccReqRegistrationKey \u003d"},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"                accountRequestDb.getAccountRequestByRegistrationKey(accountRequest.getRegistrationKey());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        verifyEquals(accountRequest, actualAccReqRegistrationKey);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ______TS(\"Read account request using the given start and end timing\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cAccountRequest\u003e actualAccReqCreatedAt \u003d"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                accountRequestDb.getAccountRequests(accountRequest.getCreatedAt(), accountRequest.getCreatedAt());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(1, actualAccReqCreatedAt.size());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        verifyEquals(accountRequest, actualAccReqCreatedAt.get(0));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ______TS(\"Read account request not found using the outside start and end timing\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cAccountRequest\u003e actualAccReqCreatedAtOutside \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                accountRequestDb.getAccountRequests("},{"lineNumber":50,"author":{"gitId":"-"},"content":"                        accountRequest.getCreatedAt().minusMillis(3000),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                        accountRequest.getCreatedAt().minusMillis(2000));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(0, actualAccReqCreatedAtOutside.size());"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ______TS(\"Create acccount request, already exists, execption thrown\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AccountRequest identicalAccountRequest \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNotSame(accountRequest, identicalAccountRequest);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                () -\u003e accountRequestDb.createAccountRequest(identicalAccountRequest));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ______TS(\"Delete account request that was created\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        accountRequestDb.deleteAccountRequest(accountRequest);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AccountRequest actualAccountRequest \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNull(actualAccountRequest);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void testUpdateAccountRequest() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ______TS(\"Update account request, does not exists, exception thrown\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                () -\u003e accountRequestDb.updateAccountRequest(accountRequest));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        ______TS(\"Update account request, already exists, update successful\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        accountRequest.setName(\"new account request name\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest("},{"lineNumber":88,"author":{"gitId":"-"},"content":"                accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        verifyEquals(accountRequest, actual);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateAccountRequestEmailField() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in email field\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in email field"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String email \u003d \"email\u0027/**/OR/**/1\u003d1/**/@gmail.com\";"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(email, \"name\", \"institute\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(email, actual.getEmail());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateAccountRequestNameField() throws Exception {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in name field\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in name field"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String name \u003d \"name\u0027; SELECT * FROM account_requests; --\";"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", name, \"institute\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(name, actual.getName());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateAccountRequestInstituteField() throws Exception {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in institute field\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in institute field"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String institute \u003d \"institute\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", institute);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), institute);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(institute, actual.getInstitute());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetAccountRequest() throws Exception {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getAccountRequest\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String instituteInjection \u003d \"institute\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        AccountRequest actualInjection \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), instituteInjection);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertNull(actualInjection);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest, actual);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetAccountRequestByRegistrationKey() throws Exception {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getAccountRequestByRegistrationKey\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        String regKeyInjection \u003d \"regKey\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        AccountRequest actualInjection \u003d accountRequestDb.getAccountRequestByRegistrationKey(regKeyInjection);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertNull(actualInjection);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequestByRegistrationKey(accountRequest.getRegistrationKey());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest, actual);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInUpdateAccountRequest() throws Exception {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in updateAccountRequest\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String nameInjection \u003d \"newName\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        accountRequest.setName(nameInjection);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest, actual);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInDeleteAccountRequest() throws Exception {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in deleteAccountRequest\");"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        String emailInjection \u003d \"email\u0027/**/OR/**/1\u003d1/**/@gmail.com\";"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String nameInjection \u003d \"name\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String instituteInjection \u003d \"institute\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        AccountRequest accountRequestInjection \u003d new AccountRequest(emailInjection, nameInjection, instituteInjection);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        accountRequestDb.deleteAccountRequest(accountRequestInjection);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest, actual);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void testSqlInjectionSearchAccountRequestsInWholeSystem() throws Exception {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in searchAccountRequestsInWholeSystem\");"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String searchInjection \u003d \"institute\u0027; DROP TABLE account_requests; --\";"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        List\u003cAccountRequest\u003e actualInjection \u003d accountRequestDb.searchAccountRequestsInWholeSystem(searchInjection);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertEquals(0, actualInjection.size());"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest(\"test@gmail.com\", \"institute\");"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest, actual);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":1,"-":209}},{"path":"src/it/java/teammates/it/storage/sqlapi/CoursesDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * SUT: {@link CoursesDb}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class CoursesDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final CoursesDb coursesDb \u003d CoursesDb.inst();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"    public void testGetCourse() throws Exception {"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: get course that does not exist\");"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        Course actual \u003d coursesDb.getCourse(\"non-existent-course-id\");"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        assertNull(actual);"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null assertion exception thrown\");"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getCourse(null));"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: get course that already exists\");"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"        Course expected \u003d getTypicalCourse();"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(expected);"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"        actual \u003d coursesDb.getCourse(expected.getId());"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"        verifyEquals(expected, actual);"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void testCreateCourse() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        ______TS(\"success: create course that does not exist\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Course actualCourse \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        verifyEquals(course, actualCourse);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null course assertion exception thrown\");"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.createCourse(null));"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: invalid course details\");"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        Course invalidCourse \u003d new Course(\"course-id\", \"!@#!@#\", \"Asia/Singapore\", \"institute\");"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e coursesDb.createCourse(invalidCourse));"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        ______TS(\"failure: create course that already exist, execption thrown\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Course identicalCourse \u003d getTypicalCourse();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNotSame(course, identicalCourse);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(EntityAlreadyExistsException.class, () -\u003e coursesDb.createCourse(identicalCourse));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void testUpdateCourse() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ______TS(\"failure: update course that does not exist, exception thrown\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(EntityDoesNotExistException.class, () -\u003e coursesDb.updateCourse(course));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null course assertion exception thrown\");"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.updateCourse(null));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: update course that already exists\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        course.setName(\"new course name\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        coursesDb.updateCourse(course);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Course actual \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        verifyEquals(course, actual);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ______TS(\"success: update detached course that already exists\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // same id, different name"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Course detachedCourse \u003d getTypicalCourse();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        detachedCourse.setName(\"different-name\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        coursesDb.updateCourse(detachedCourse);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        verifyEquals(course, detachedCourse);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"    public void testDeleteCourse() throws Exception {"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: delete course that already exists\");"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"        coursesDb.deleteCourse(course);"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        Course actualCourse \u003d coursesDb.getCourse(course.getId());"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":"        assertNull(actualCourse);"},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":"    public void testCreateSection() throws Exception {"},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: create section that does not exist\");"},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createSection(section);"},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":"        Section actualSection \u003d coursesDb.getSectionByName(course.getId(), section.getName());"},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"        verifyEquals(section, actualSection);"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null section assertion exception thrown\");"},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.createSection(null));"},{"lineNumber":114,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: invalid section details\");"},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":"        Section invalidSection \u003d new Section(course, null);"},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e coursesDb.createSection(invalidSection));"},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: create section that already exist, execption thrown\");"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":"        assertThrows(EntityAlreadyExistsException.class, () -\u003e coursesDb.createSection(section));"},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"    public void testGetSectionByName() throws Exception {"},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createSection(section);"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null courseId assertion exception thrown\");"},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getSectionByName(null, section.getName()));"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null sectionName assertion exception thrown\");"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getSectionByName(course.getId(), null));"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: get section that already exists\");"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":"        Section actualSection \u003d coursesDb.getSectionByName(course.getId(), section.getName());"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"        verifyEquals(section, actualSection);"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: get section that does not exist\");"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"        Section nonExistentSection \u003d coursesDb.getSectionByName(course.getId(), \"non-existent-section-name\");"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"        assertNull(nonExistentSection);"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void testGetSectionByCourseIdAndTeam() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, \"team-name\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        section.addTeam(team);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null courseId assertion exception thrown\");"},{"lineNumber":155,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getSectionByCourseIdAndTeam(null, team.getName()));"},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":157,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null teamName assertion exception thrown\");"},{"lineNumber":158,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getSectionByCourseIdAndTeam(course.getId(), null));"},{"lineNumber":159,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Section actualSection \u003d coursesDb.getSectionByCourseIdAndTeam(course.getId(), team.getName());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        verifyEquals(section, actualSection);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void testGetTeamsForSection() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Team team1 \u003d new Team(section, \"team-name1\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        section.addTeam(team1);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Team team2 \u003d new Team(section, \"team-name2\");"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        section.addTeam(team2);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e expectedTeams \u003d List.of(team1, team2);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null section assertion exception thrown\");"},{"lineNumber":180,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getTeamsForSection(null));"},{"lineNumber":181,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e actualTeams \u003d coursesDb.getTeamsForSection(section);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertEquals(expectedTeams.size(), actualTeams.size());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertTrue(expectedTeams.containsAll(actualTeams));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"domoberzin"},"content":"    public void testDeleteSectionsByCourseId() throws Exception {"},{"lineNumber":190,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":191,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":192,"author":{"gitId":"domoberzin"},"content":"        List\u003cSection\u003e expectedSections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"            Section newSection \u003d new Section(course, \"section-name\" + i);"},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"            expectedSections.add(newSection);"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":"            course.addSection(newSection);"},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":"            assertNotNull(coursesDb.getSectionByName(course.getId(), newSection.getName()));"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":200,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: delete sections by course id\");"},{"lineNumber":201,"author":{"gitId":"domoberzin"},"content":"        coursesDb.deleteSectionsByCourseId(course.getId());"},{"lineNumber":202,"author":{"gitId":"domoberzin"},"content":"        for (Section section : expectedSections) {"},{"lineNumber":203,"author":{"gitId":"domoberzin"},"content":"            Section actualSection \u003d coursesDb.getSectionByName(course.getId(), section.getName());"},{"lineNumber":204,"author":{"gitId":"domoberzin"},"content":"            assertNull(actualSection);"},{"lineNumber":205,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void testGetTeamsForCourse() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Section section1 \u003d new Section(course, \"section-name1\");"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        course.addSection(section1);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Team team1 \u003d new Team(section1, \"team-name1\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        section1.addTeam(team1);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        Team team2 \u003d new Team(section1, \"team-name2\");"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        section1.addTeam(team2);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        Section section2 \u003d new Section(course, \"section-name2\");"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        course.addSection(section2);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        Team team3 \u003d new Team(section2, \"team-name3\");"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        section2.addTeam(team3);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        Team team4 \u003d new Team(section2, \"team-name4\");"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        section2.addTeam(team4);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e expectedTeams \u003d List.of(team1, team2, team3, team4);"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null courseId assertion exception thrown\");"},{"lineNumber":231,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getTeamsForCourse(null));"},{"lineNumber":232,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e actualTeams \u003d coursesDb.getTeamsForCourse(course.getId());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        assertEquals(expectedTeams.size(), actualTeams.size());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertTrue(expectedTeams.containsAll(actualTeams));"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":239,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"domoberzin"},"content":"    public void testCreateTeam() throws Exception {"},{"lineNumber":241,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":242,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":243,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d new Team(section, \"team-name1\");"},{"lineNumber":244,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":245,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createSection(section);"},{"lineNumber":246,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":247,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(coursesDb.getSectionByName(course.getId(), section.getName()));"},{"lineNumber":248,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":249,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null team assertion exception thrown\");"},{"lineNumber":250,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.createTeam(null));"},{"lineNumber":251,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":252,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: create team that does not exist\");"},{"lineNumber":253,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createTeam(team);"},{"lineNumber":254,"author":{"gitId":"domoberzin"},"content":"        Team actualTeam \u003d coursesDb.getTeamByName(section.getId(), team.getName());"},{"lineNumber":255,"author":{"gitId":"domoberzin"},"content":"        verifyEquals(team, actualTeam);"},{"lineNumber":256,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":257,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: invalid team details\");"},{"lineNumber":258,"author":{"gitId":"domoberzin"},"content":"        Team invalidTeam \u003d new Team(section, null);"},{"lineNumber":259,"author":{"gitId":"domoberzin"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e coursesDb.createTeam(invalidTeam));"},{"lineNumber":260,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":261,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: create team that already exist, execption thrown\");"},{"lineNumber":262,"author":{"gitId":"domoberzin"},"content":"        assertThrows(EntityAlreadyExistsException.class, () -\u003e coursesDb.createTeam(team));"},{"lineNumber":263,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":265,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":266,"author":{"gitId":"domoberzin"},"content":"    public void testGetTeamByName() throws Exception {"},{"lineNumber":267,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":268,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":269,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d new Team(section, \"team-name1\");"},{"lineNumber":270,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":271,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createSection(section);"},{"lineNumber":272,"author":{"gitId":"domoberzin"},"content":"        coursesDb.createTeam(team);"},{"lineNumber":273,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":274,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: get team that already exists\");"},{"lineNumber":275,"author":{"gitId":"domoberzin"},"content":"        Team actualTeam \u003d coursesDb.getTeamByName(section.getId(), team.getName());"},{"lineNumber":276,"author":{"gitId":"domoberzin"},"content":"        verifyEquals(team, actualTeam);"},{"lineNumber":277,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":278,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null sectionId assertion exception thrown\");"},{"lineNumber":279,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getTeamByName(null, team.getName()));"},{"lineNumber":280,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":281,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"failure: null teamName assertion exception thrown\");"},{"lineNumber":282,"author":{"gitId":"domoberzin"},"content":"        assertThrows(AssertionError.class, () -\u003e coursesDb.getTeamByName(section.getId(), null));"},{"lineNumber":283,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":284,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: null return\");"},{"lineNumber":285,"author":{"gitId":"domoberzin"},"content":"        Team nonExistentTeam \u003d coursesDb.getTeamByName(section.getId(), \"non-existent-team-name\");"},{"lineNumber":286,"author":{"gitId":"domoberzin"},"content":"        assertNull(nonExistentTeam);"},{"lineNumber":287,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateCourse() throws Exception {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in createCourse\");"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in name field"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        String courseName \u003d \"test\u0027; DROP TABLE courses; --\";"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", courseName, \"UTC\", \"teammates\");"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        Course actual \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        assertEquals(courseName, actual.getName());"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetCourse() throws Exception {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getCourse\");"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"teammates\");"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in courseId field"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        String courseId \u003d \"test\u0027 OR 1 \u003d 1; --\";"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        Course actual \u003d coursesDb.getCourse(courseId);"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        assertEquals(null, actual);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInUpdateCourse() throws Exception {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in updateCourse\");"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"name\", \"UTC\", \"institute\");"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        String newName \u003d \"newName\u0027; DROP TABLE courses; --\";"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        course.setName(newName);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        coursesDb.updateCourse(course);"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        Course actual \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        assertEquals(newName, actual.getName());"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInDeleteCourse() throws Exception {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in deleteCourse\");"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"name\", \"UTC\", \"institute\");"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"        String name \u003d \"newName\u0027; DELETE FROM courses; --\";"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        Course injectionCourse \u003d new Course(\"course-id-injection\", name, \"UTC\", \"institute\");"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(injectionCourse);"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"        coursesDb.deleteCourse(injectionCourse);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Course actualInjectionCourse \u003d coursesDb.getCourse(\"course-id-injection\");"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        // The course should be deleted"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        assertEquals(null, actualInjectionCourse);"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"        // All other courses should not be deleted"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        Course actualCourse \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        assertEquals(course, actualCourse);"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateSection() throws Exception {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in createSection\");"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"        // Attempt to use SQL commands in sectionName fields"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"name\", \"UTC\", \"institute\");"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        String sectionName \u003d \"section\u0027; DROP TABLE courses; --\";"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, sectionName);"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        coursesDb.createSection(section);"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        // Check that we are still able to get courses"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        Course actualCourse \u003d coursesDb.getCourse(\"course-id\");"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        assertEquals(course, actualCourse);"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetSectionByName() throws Exception {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getSectionByName\");"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        String sectionName \u003d \"section-name\";"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, sectionName);"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"        coursesDb.createSection(section);"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        Section actual \u003d coursesDb.getSectionByName(\"course-id\", \"section-name\u0027; DROP TABLE courses; --\");"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        assertEquals(null, actual);"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        Section actualSection \u003d coursesDb.getSectionByName(\"course-id\", sectionName);"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        assertEquals(sectionName, actualSection.getName());"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetSectionByCourseIdAndTeam() throws Exception {"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getSectionByCourseIdAndTeam\");"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, \"team-name\");"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        section.addTeam(team);"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"        // The system should treat the input as a plain text string"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        String teamNameInjection \u003d \"team-name\u0027; DROP TABLE courses; --\";"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        Section actual \u003d coursesDb.getSectionByCourseIdAndTeam(\"course-id\", teamNameInjection);"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        assertEquals(null, actual);"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        Section actualSection \u003d coursesDb.getSectionByCourseIdAndTeam(\"course-id\", \"team-name\");"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        assertEquals(\"team-name\", actualSection.getTeams().get(0).getName());"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInDeleteSectionsByCourseId() throws Exception {"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in deleteSectionsByCourseId\");"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"name\", \"UTC\", \"institute\");"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"        String courseId \u003d \"course-id\u0027; DELETE FROM courses; --\";"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        coursesDb.deleteSectionsByCourseId(courseId);"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"        // The sections should not be deleted"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        Section actualSection \u003d coursesDb.getSectionByName(\"course-id\", \"section-name\");"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        assertEquals(section, actualSection);"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetTeamsForSection() throws Exception {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getTeamsForSection\");"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, \"team-name\");"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        section.addTeam(team);"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"        String sectionName \u003d \"section-name\u0027 OR 1 \u003d 1; --\";"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        Section sectionInjection \u003d new Section(course, sectionName);"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e actual \u003d coursesDb.getTeamsForSection(sectionInjection);"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        assertEquals(0, actual.size());"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":441,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetTeamsForCourse() throws Exception {"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getTeamsForCourse\");"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, \"team-name\");"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        section.addTeam(team);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"        String courseId \u003d \"course-id\u0027 OR 1 \u003d 1; --\";"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e actual \u003d coursesDb.getTeamsForCourse(courseId);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        assertEquals(0, actual.size());"},{"lineNumber":454,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateTeam() throws Exception {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in createTeam\");"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"        String teamName \u003d \"team\u0027; DROP TABLE courses; --\";"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, teamName);"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        coursesDb.createTeam(team);"},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"        List\u003cTeam\u003e actual \u003d coursesDb.getTeamsForSection(section);"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        assertEquals(1, actual.size());"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        assertEquals(teamName, actual.get(0).getName());"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetTeamByName() throws Exception {"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in getTeamByName\");"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", \"UTC\", \"institute\");"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        Section section \u003d new Section(course, \"section-name\");"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        course.addSection(section);"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        Team team \u003d new Team(section, \"team-name\");"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        section.addTeam(team);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"        String teamName \u003d \"team-name\u0027; DROP TABLE courses; --\";"},{"lineNumber":486,"author":{"gitId":"-"},"content":"        Team actual \u003d coursesDb.getTeamByName(section.getId(), teamName);"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        assertEquals(null, actual);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        Team actualTeam \u003d coursesDb.getTeamByName(section.getId(), \"team-name\");"},{"lineNumber":489,"author":{"gitId":"-"},"content":"        assertEquals(team, actualTeam);"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":165,"-":326}},{"path":"src/it/java/teammates/it/storage/sqlapi/FeedbackQuestionsDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":12,"author":{"gitId":"dishenggg"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":13,"author":{"gitId":"dishenggg"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackQuestionsDb;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackQuestionsDb}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class FeedbackQuestionsDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FeedbackQuestionsDb fqDb \u003d FeedbackQuestionsDb.inst();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private SqlDataBundle typicalDataBundle;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setupClass() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super.setupClass();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        typicalDataBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalDataBundle);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"    public void testGetFeedbackQuestion() {"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion expectedFq \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion actualFq \u003d fqDb.getFeedbackQuestion(expectedFq.getId());"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"        assertEquals(expectedFq, actualFq);"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: does not exist, returns null\");"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":"        actualFq \u003d fqDb.getFeedbackQuestion(UUID.randomUUID());"},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"        assertNull(actualFq);"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":58,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: null parameter, assertion error\");"},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        assertThrows(AssertionError.class, () -\u003e fqDb.getFeedbackQuestion(null));"},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":"    public void testCreateFeedbackQuestion() throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":64,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":65,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion expectedFq \u003d getTypicalFeedbackQuestionForSession("},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":"                getTypicalFeedbackSessionForCourse(getTypicalCourse()));"},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"        fqDb.createFeedbackQuestion(expectedFq);"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(expectedFq);"},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":71,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: duplicate question, throws error\");"},{"lineNumber":72,"author":{"gitId":"dishenggg"},"content":"        assertThrows(EntityAlreadyExistsException.class, () -\u003e fqDb.createFeedbackQuestion(expectedFq));"},{"lineNumber":73,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: invalid question, throws error\");"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion invalidFq \u003d getTypicalFeedbackQuestionForSession("},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"                getTypicalFeedbackSessionForCourse(getTypicalCourse()));"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"        invalidFq.setGiverType(FeedbackParticipantType.RECEIVER);"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e fqDb.createFeedbackQuestion(invalidFq));"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"        assertNull(fqDb.getFeedbackQuestion(invalidFq.getId()));"},{"lineNumber":81,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":82,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: null parameter, assertion error\");"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":"        assertThrows(AssertionError.class, () -\u003e fqDb.createFeedbackQuestion(null));"},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForSession() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d typicalDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d typicalDataBundle.feedbackQuestions.get(\"qn2InSession1InCourse1\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d typicalDataBundle.feedbackQuestions.get(\"qn3InSession1InCourse1\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d typicalDataBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d typicalDataBundle.feedbackQuestions.get(\"qn5InSession1InCourse1\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq6 \u003d typicalDataBundle.feedbackQuestions.get(\"qn6InSession1InCourse1NoResponses\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2, fq3, fq4, fq5, fq6);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqDb.getFeedbackQuestionsForSession(fs.getId());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(expectedQuestions.containsAll(actualQuestions));"},{"lineNumber":103,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":104,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: session does not exist, returns no questions\");"},{"lineNumber":105,"author":{"gitId":"dishenggg"},"content":"        actualQuestions \u003d fqDb.getFeedbackQuestionsForSession(UUID.randomUUID());"},{"lineNumber":106,"author":{"gitId":"dishenggg"},"content":"        assertEquals(0, actualQuestions.size());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForGiverType() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d typicalDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d typicalDataBundle.feedbackQuestions.get(\"qn2InSession1InCourse1\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.STUDENTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(expectedQuestions.containsAll(actualQuestions));"},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: session does not exist, returns no questions\");"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":"        fs \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"        actualQuestions \u003d fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.STUDENTS);"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":"        assertEquals(0, actualQuestions.size());"},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":129,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"dishenggg"},"content":"    public void testDeleteFeedbackQuestion() {"},{"lineNumber":131,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"        FeedbackQuestion fq \u003d typicalDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":133,"author":{"gitId":"dishenggg"},"content":"        verifyPresentInDatabase(fq);"},{"lineNumber":134,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":135,"author":{"gitId":"dishenggg"},"content":"        fqDb.deleteFeedbackQuestion(fq.getId());"},{"lineNumber":136,"author":{"gitId":"dishenggg"},"content":"        assertNull(fqDb.getFeedbackQuestion(fq.getId()));"},{"lineNumber":137,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":138,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: null parameter, assertion error\");"},{"lineNumber":139,"author":{"gitId":"dishenggg"},"content":"        assertThrows(AssertionError.class, () -\u003e fqDb.deleteFeedbackQuestion(null));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void testHasFeedbackQuestionsForGiverType() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Course course \u003d typicalDataBundle.courses.get(\"course1\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d typicalDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        boolean actual \u003d fqDb.hasFeedbackQuestionsForGiverType("},{"lineNumber":149,"author":{"gitId":"-"},"content":"                fs.getName(), course.getId(), FeedbackParticipantType.STUDENTS);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertTrue(actual);"},{"lineNumber":152,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":153,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"failure: session/course does not exist, returns false\");"},{"lineNumber":154,"author":{"gitId":"dishenggg"},"content":"        actual \u003d fqDb.hasFeedbackQuestionsForGiverType(\"session-name\", \"course-id\", FeedbackParticipantType.STUDENTS);"},{"lineNumber":155,"author":{"gitId":"dishenggg"},"content":"        assertFalse(actual);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":70,"-":87}},{"path":"src/it/java/teammates/it/storage/sqlapi/FeedbackResponseCommentsDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponseCommentsDb;"},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackResponseCommentsDb}."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FeedbackResponseCommentsDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final FeedbackResponseCommentsDb frcDb \u003d FeedbackResponseCommentsDb.inst();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"    private SqlDataBundle testDataBundle;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void setupClass() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super.setupClass();"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"        testDataBundle \u003d loadSqlDataBundle(\"/FeedbackResponsesITBundle.json\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"        persistDataBundle(testDataBundle);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        HibernateUtil.clearSession();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void testGetFeedbackResponseCommentForResponseFromParticipant() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr \u003d testDataBundle.feedbackResponses.get(\"response1ForQ1\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"        FeedbackResponseComment expectedComment \u003d testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        FeedbackResponseComment actualComment \u003d frcDb.getFeedbackResponseCommentForResponseFromParticipant(fr.getId());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(expectedComment, actualComment);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private FeedbackResponseComment prepareSqlInjectionTest() {"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":"        FeedbackResponseComment frc \u003d testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertNotNull(frcDb.getFeedbackResponseComment(frc.getId()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return frc;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private void checkSqlInjectionFailed(FeedbackResponseComment frc) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertNotNull(frcDb.getFeedbackResponseComment(frc.getId()));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInUpdateGiverEmailOfFeedbackResponseComments() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FeedbackResponseComment frc \u003d prepareSqlInjectionTest();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027; DELETE FROM feedback_response_comments;--\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        frcDb.updateGiverEmailOfFeedbackResponseComments(sqli, \"\", \"\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        checkSqlInjectionFailed(frc);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInUpdateLastEditorEmailOfFeedbackResponseComments() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        FeedbackResponseComment frc \u003d prepareSqlInjectionTest();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027; DELETE FROM feedback_response_comments;--\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        frcDb.updateLastEditorEmailOfFeedbackResponseComments(sqli, \"\", \"\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        checkSqlInjectionFailed(frc);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateFeedbackResponseComment() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        FeedbackResponseComment frc \u003d prepareSqlInjectionTest();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr \u003d testDataBundle.feedbackResponses.get(\"response1ForQ1\");"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"        Section s \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027\u0027);/**/DELETE/**/FROM/**/feedback_response_comments;--@gmail.com\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FeedbackResponseComment newFrc \u003d new FeedbackResponseComment("},{"lineNumber":102,"author":{"gitId":"-"},"content":"                fr, \"\", FeedbackParticipantType.INSTRUCTORS, s, s, \"\","},{"lineNumber":103,"author":{"gitId":"-"},"content":"                false, false,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                new ArrayList\u003cFeedbackParticipantType\u003e(), new ArrayList\u003cFeedbackParticipantType\u003e(), sqli);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        frcDb.createFeedbackResponseComment(newFrc);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        checkSqlInjectionFailed(frc);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInUpdateFeedbackResponseComment() throws Exception {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FeedbackResponseComment frc \u003d prepareSqlInjectionTest();"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027\u0027);/**/DELETE/**/FROM/**/feedback_response_comments;--@gmail.com\";"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        frc.setLastEditorEmail(sqli);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        frcDb.updateFeedbackResponseComment(frc);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        checkSqlInjectionFailed(frc);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":122,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForSession_matchFound_success() {"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session with comments\");"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"        FeedbackSession sessionWithComments \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e expected \u003d List.of("},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\"),"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse1ForQ1\"),"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse2ForQ1\"),"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ2s\"),"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ3\"),"},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse4ForQ1\")"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForSession("},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":"                        course.getId(), sessionWithComments.getName());"},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForSession_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":143,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":146,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Course not found\");"},{"lineNumber":147,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForSession(\"not_exist\", session.getName());"},{"lineNumber":148,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":149,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":150,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session not found\");"},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSession(course.getId(), \"Nonexistent session\");"},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session without comments\");"},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":"        FeedbackSession sessionWithoutComments \u003d testDataBundle.feedbackSessions.get(\"ongoingSession1InCourse1\");"},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSession(course.getId(), sessionWithoutComments.getName());"},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForQuestion_matchFound_success() {"},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question with comments\");"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion questionWithComments \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e expectedComments \u003d List.of("},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\"),"},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse1ForQ1\"),"},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse2ForQ1\"),"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse4ForQ1\")"},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForQuestion(questionWithComments.getId());"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expectedComments, results);"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForQuestion_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question not found\");"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":"        UUID nonexistentQuestionId \u003d UUID.fromString(\"11110000-0000-0000-0000-000000000000\");"},{"lineNumber":178,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForQuestion(nonexistentQuestionId);"},{"lineNumber":179,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":180,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":181,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question without comments\");"},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion questionWithoutComments \u003d testDataBundle.feedbackQuestions.get(\"qn5InSession1InCourse1\");"},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForQuestion(questionWithoutComments.getId());"},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForSessionInSection_matchFound_success()"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"        Section section1 \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"        Section section2 \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session1 \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session2 \u003d testDataBundle.feedbackSessions.get(\"session2InTypicalCourse\");"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section 1 Session 2 match\");"},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e expected \u003d List.of("},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1InSession2\")"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":"                course.getId(), session2.getName(), section1.getName());"},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section 2 Session 1 match\");"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse4ForQ1\")"},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":"                course.getId(), session1.getName(), section2.getName());"},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForSessionInSection_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session1 \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session2 \u003d testDataBundle.feedbackSessions.get(\"session2InTypicalCourse\");"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"        Section section1 \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"        Section section2 \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Course not found\");"},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":"                \"not_exist\", session1.getName(), section1.getName());"},{"lineNumber":224,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":225,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":226,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session not found\");"},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"                course.getId(), \"Nonexistent session\", section1.getName());"},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":231,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section not found\");"},{"lineNumber":232,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":233,"author":{"gitId":"xenosf"},"content":"                course.getId(), session1.getName(), \"Nonexistent section\");"},{"lineNumber":234,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":235,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":236,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching comments exist\");"},{"lineNumber":237,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":238,"author":{"gitId":"xenosf"},"content":"                course.getId(), session2.getName(), section2.getName());"},{"lineNumber":239,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":240,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForQuestionInSection_matchFound_success() {"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"        Section section1 \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"        Section section2 \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question1 \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question2 \u003d testDataBundle.feedbackQuestions.get(\"qn2InSession1InCourse1\");"},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section 1 Question 1 match\");"},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e expected \u003d List.of("},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\"),"},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse1ForQ1\"),"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment2ToResponse2ForQ1\"),"},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse4ForQ1\")"},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection("},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"                question1.getId(), section1.getName());"},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section 2 Question 1 match\");"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse4ForQ1\")"},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection("},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"                question1.getId(), section2.getName());"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section 1 Question 2 match\");"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ2s\")"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection("},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"                question2.getId(), section1.getName());"},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":"        assertListCommentsEqual(expected, results);"},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponseCommentsForQuestionInSection_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"        Section section \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question1 \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question2 \u003d testDataBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question not found\");"},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        UUID nonexistentQuestionId \u003d UUID.fromString(\"11110000-0000-0000-0000-000000000000\");"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection("},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":"                nonexistentQuestionId, section.getName());"},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Section not found\");"},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection(question1.getId(), \"Nonexistent section\");"},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching comments exist\");"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"        results \u003d frcDb.getFeedbackResponseCommentsForQuestionInSection(question2.getId(), section.getName());"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"    private void assertListCommentsEqual(List\u003cFeedbackResponseComment\u003e expected, List\u003cFeedbackResponseComment\u003e actual) {"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"        assertTrue("},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"                String.format(\"List contents are not equal.%nExpected: %s,%nActual: %s\","},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"                        expected.toString(), actual.toString()),"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"                new HashSet\u003c\u003e(expected).equals(new HashSet\u003c\u003e(actual)));"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":"        assertEquals(\"List size not equal.\", expected.size(), actual.size());"},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":202,"-":104}},{"path":"src/it/java/teammates/it/storage/sqlapi/FeedbackResponsesDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponseCommentsDb;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponsesDb;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackTextResponse;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackResponsesDb}."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class FeedbackResponsesDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final FeedbackResponsesDb frDb \u003d FeedbackResponsesDb.inst();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final FeedbackResponseCommentsDb frcDb \u003d FeedbackResponseCommentsDb.inst();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"    private SqlDataBundle testDataBundle;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setupClass() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        super.setupClass();"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"        testDataBundle \u003d loadSqlDataBundle(\"/FeedbackResponsesITBundle.json\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        persistDataBundle(testDataBundle);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        HibernateUtil.clearSession();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void testGetFeedbackResponsesFromGiverForQuestion() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e expectedQuestions \u003d List.of("},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ1\"),"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\")"},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponse\u003e actualQuestions \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                frDb.getFeedbackResponsesFromGiverForQuestion(fq.getId(), \"student1@teammates.tmt\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(expectedQuestions.containsAll(actualQuestions));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesForQuestionCascade() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr1 \u003d testDataBundle.feedbackResponses.get(\"response1ForQ1\");"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr2 \u003d testDataBundle.feedbackResponses.get(\"response2ForQ1\");"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":"        FeedbackResponseComment frc1 \u003d testDataBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponsesForQuestionCascade(fq.getId());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertNull(frDb.getFeedbackResponse(fr1.getId()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNull(frDb.getFeedbackResponse(fr2.getId()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertNull(frcDb.getFeedbackResponseComment(frc1.getId()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void testDeleteFeedback() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr1 \u003d testDataBundle.feedbackResponses.get(\"response1ForQ1\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponse(fr1);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertNull(frDb.getFeedbackResponse(fr1.getId()));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void testHasResponsesFromGiverInSession() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":"        FeedbackSession fs \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        boolean actualHasReponses1 \u003d"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                frDb.hasResponsesFromGiverInSession(\"student1@teammates.tmt\", fs.getName(), course.getId());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(actualHasReponses1);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ______TS(\"student with no responses\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        boolean actualHasReponses2 \u003d"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                frDb.hasResponsesFromGiverInSession(\"studentnorespones@teammates.tmt\", fs.getName(), course.getId());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(actualHasReponses2);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void testAreThereResponsesForQuestion() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":116,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq1 \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        boolean actualResponse1 \u003d"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                frDb.areThereResponsesForQuestion(fq1.getId());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(actualResponse1);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        ______TS(\"feedback question with no responses\");"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq2 \u003d testDataBundle.feedbackQuestions.get(\"qn6InSession1InCourse1NoResponses\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        boolean actualResponse2 \u003d"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                frDb.areThereResponsesForQuestion(fq2.getId());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertFalse(actualResponse2);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void testHasResponsesForCourse() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        ______TS(\"success: typical case\");"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        boolean actual \u003d"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                frDb.hasResponsesForCourse(course.getId());"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(actual);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private FeedbackResponse prepareSqlInjectionTest() {"},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse fr \u003d testDataBundle.feedbackResponses.get(\"response1ForQ1\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertNotNull(frDb.getFeedbackResponse(fr.getId()));"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return fr;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void checkSqliFailed(FeedbackResponse fr) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // If SQLi is successful, feedback responses would have been deleted from db."},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // So get will return null."},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertNotNull(frDb.getFeedbackResponse(fr.getId()));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetFeedbackResponsesFromGiverForCourse() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in GetFeedbackResponsesFromGiverForCourse, courseId param\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String courseId \u003d \"\u0027; DELETE FROM feedback_responses;--\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        frDb.getFeedbackResponsesFromGiverForCourse(courseId, \"\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetFeedbackResponsesForRecipientForCourse() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in GetFeedbackResponsesForRecipientForCourse, courseId param\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String courseId \u003d \"\u0027; DELETE FROM feedback_responses;--\";"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        frDb.getFeedbackResponsesForRecipientForCourse(courseId, \"\");"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInGetFeedbackResponsesFromGiverForQuestion() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in GetFeedbackResponsesFromGiverForQuestion, giverEmail param\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        String giverEmail \u003d \"\u0027;/**/DELETE/**/FROM/**/feedback_responses;--@gmail.com\";"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        frDb.getFeedbackResponsesFromGiverForQuestion(fr.getId(), giverEmail);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInHasResponsesFromGiverInSession() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in HasResponsesFromGiverInSession, giver param\");"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        String giver \u003d \"\u0027; DELETE FROM feedback_responses;--\";"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        frDb.hasResponsesFromGiverInSession(giver, \"\", \"\");"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInHasResponsesForCourse() {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ______TS(\"SQL Injection test in HasResponsesForCourse, courseId param\");"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String courseId \u003d \"\u0027; DELETE FROM feedback_responses;--\";"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        frDb.hasResponsesForCourse(courseId);"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCreateFeedbackResponse() throws Exception {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"        Section s \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        String dummyUuid \u003d \"00000000-0000-4000-8000-000000000001\";"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        FeedbackResponseDetails frd \u003d new FeedbackTextResponseDetails();"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027, \" + dummyUuid + \", \" + dummyUuid + \"); DELETE FROM feedback_responses;--\";"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        FeedbackResponse newFr \u003d new FeedbackTextResponse(fq, \"\", s, sqli, s, frd);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        frDb.createFeedbackResponse(newFr);"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void testSqlInjectionInCpdateFeedbackResponse() throws Exception {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        FeedbackResponse fr \u003d prepareSqlInjectionTest();"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        String sqli \u003d \"\u0027\u0027); DELETE FROM feedback_response_comments;--\";"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        fr.setGiver(sqli);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        frDb.updateFeedbackResponse(fr);"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        checkSqliFailed(fr);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":239,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForRecipientForQuestion_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question not found\");"},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":"        String recipient \u003d \"student1@teammates.tmt\";"},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"        UUID nonexistentQuestionId \u003d UUID.fromString(\"11110000-0000-0000-0000-000000000000\");"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e results \u003d frDb.getFeedbackResponsesForRecipientForQuestion(nonexistentQuestionId, recipient);"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist\");"},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion questionWithNoResponses \u003d testDataBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForRecipientForQuestion(questionWithNoResponses.getId(), recipient);"},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForRecipientForQuestion_matchFound_success() {"},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Matching responses exist\");"},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"        String recipient \u003d \"student2@teammates.tmt\";"},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e expected \u003d List.of("},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ1\")"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e actual \u003d frDb.getFeedbackResponsesForRecipientForQuestion(question.getId(), recipient);"},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForSessionInSection_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"        String section3 \u003d testDataBundle.sections.get(\"section3InCourse1\").getName();"},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":"        String courseId \u003d session.getCourse().getId();"},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for giver section\");"},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":"        FeedbackResultFetchType fetchType \u003d FeedbackResultFetchType.GIVER;"},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e results \u003d frDb.getFeedbackResponsesForSessionInSection("},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":"                session, courseId, section3, fetchType);"},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for recipient section\");"},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.RECEIVER;"},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForSessionInSection(session, courseId, section3, fetchType);"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for both giver and recipient section\");"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.BOTH;"},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForSessionInSection(session, courseId, section3, fetchType);"},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForSessionInSection_matchFound_success() {"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":"        Course course \u003d testDataBundle.courses.get(\"course1\");"},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session1 \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"        Section section1 \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"        Section section2 \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match giver section 1 in session 1\");"},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"        FeedbackResultFetchType fetchType \u003d FeedbackResultFetchType.GIVER;"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e expected \u003d List.of("},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ1\"),"},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ1\"),"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ2\"),"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ2\"),"},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ3\"),"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\"),"},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ2\")"},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e actual \u003d frDb.getFeedbackResponsesForSessionInSection("},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"                session1, course.getId(), section1.getName(), fetchType);"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match recipient section 2 in session 1\");"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.RECEIVER;"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\"),"},{"lineNumber":316,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ2\"),"},{"lineNumber":317,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response4ForQ1\")"},{"lineNumber":318,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":319,"author":{"gitId":"xenosf"},"content":"        actual \u003d frDb.getFeedbackResponsesForSessionInSection(session1, course.getId(),"},{"lineNumber":320,"author":{"gitId":"xenosf"},"content":"                section2.getName(), fetchType);"},{"lineNumber":321,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":322,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":323,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match both giver and recipient section 2 in session 1\");"},{"lineNumber":324,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.BOTH;"},{"lineNumber":325,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":326,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response4ForQ1\")"},{"lineNumber":327,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":328,"author":{"gitId":"xenosf"},"content":"        actual \u003d frDb.getFeedbackResponsesForSessionInSection(session1, course.getId(),"},{"lineNumber":329,"author":{"gitId":"xenosf"},"content":"                section2.getName(), fetchType);"},{"lineNumber":330,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":331,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":333,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":334,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForQuestionInSection_matchNotFound_shouldReturnEmptyList() {"},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"        String section1 \u003d testDataBundle.sections.get(\"section1InCourse1\").getName();"},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"        String section3 \u003d testDataBundle.sections.get(\"section3InCourse1\").getName();"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Question not found\");"},{"lineNumber":339,"author":{"gitId":"xenosf"},"content":"        UUID nonexistentQuestionId \u003d UUID.fromString(\"11110000-0000-0000-0000-000000000000\");"},{"lineNumber":340,"author":{"gitId":"xenosf"},"content":"        FeedbackResultFetchType fetchType \u003d FeedbackResultFetchType.BOTH;"},{"lineNumber":341,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e results \u003d frDb.getFeedbackResponsesForQuestionInSection(nonexistentQuestionId,"},{"lineNumber":342,"author":{"gitId":"xenosf"},"content":"                section1, fetchType);"},{"lineNumber":343,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":344,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":345,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for giver section\");"},{"lineNumber":346,"author":{"gitId":"xenosf"},"content":"        UUID questionId \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\").getId();"},{"lineNumber":347,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.GIVER;"},{"lineNumber":348,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForQuestionInSection(questionId, section3, fetchType);"},{"lineNumber":349,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":350,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":351,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for recipient section\");"},{"lineNumber":352,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.RECEIVER;"},{"lineNumber":353,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForQuestionInSection(questionId, section3, fetchType);"},{"lineNumber":354,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":355,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":356,"author":{"gitId":"xenosf"},"content":"        ______TS(\"No matching responses exist for both giver and recipient section\");"},{"lineNumber":357,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.BOTH;"},{"lineNumber":358,"author":{"gitId":"xenosf"},"content":"        results \u003d frDb.getFeedbackResponsesForQuestionInSection(questionId, section3, fetchType);"},{"lineNumber":359,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, results.size());"},{"lineNumber":360,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":362,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":363,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForQuestionInSection_matchFound_success() {"},{"lineNumber":364,"author":{"gitId":"xenosf"},"content":"        Section section1 \u003d testDataBundle.sections.get(\"section1InCourse1\");"},{"lineNumber":365,"author":{"gitId":"xenosf"},"content":"        Section section2 \u003d testDataBundle.sections.get(\"section2InCourse1\");"},{"lineNumber":366,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question1 \u003d testDataBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":367,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":368,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match giver section 1 for Q1\");"},{"lineNumber":369,"author":{"gitId":"xenosf"},"content":"        FeedbackResultFetchType fetchType \u003d FeedbackResultFetchType.GIVER;"},{"lineNumber":370,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e expected \u003d List.of("},{"lineNumber":371,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ1\"),"},{"lineNumber":372,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ1\"),"},{"lineNumber":373,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\")"},{"lineNumber":374,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":375,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e actual \u003d frDb.getFeedbackResponsesForQuestionInSection(question1.getId(),"},{"lineNumber":376,"author":{"gitId":"xenosf"},"content":"                section1.getName(), fetchType);"},{"lineNumber":377,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":378,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":379,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match recipient section 2 for Q1\");"},{"lineNumber":380,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.RECEIVER;"},{"lineNumber":381,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":382,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\"),"},{"lineNumber":383,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response4ForQ1\")"},{"lineNumber":384,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":385,"author":{"gitId":"xenosf"},"content":"        actual \u003d frDb.getFeedbackResponsesForQuestionInSection(question1.getId(), section2.getName(), fetchType);"},{"lineNumber":386,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":387,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":388,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Match both giver and recipient section 2 for Q1\");"},{"lineNumber":389,"author":{"gitId":"xenosf"},"content":"        fetchType \u003d FeedbackResultFetchType.BOTH;"},{"lineNumber":390,"author":{"gitId":"xenosf"},"content":"        expected \u003d List.of("},{"lineNumber":391,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response4ForQ1\")"},{"lineNumber":392,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":393,"author":{"gitId":"xenosf"},"content":"        actual \u003d frDb.getFeedbackResponsesForQuestionInSection(question1.getId(), section2.getName(), fetchType);"},{"lineNumber":394,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":395,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":397,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":398,"author":{"gitId":"xenosf"},"content":"    public void testGetFeedbackResponsesForSession() {"},{"lineNumber":399,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session has responses\");"},{"lineNumber":400,"author":{"gitId":"xenosf"},"content":"        FeedbackSession sessionWithResponses \u003d testDataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":401,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e expected \u003d List.of("},{"lineNumber":402,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ1\"),"},{"lineNumber":403,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ1\"),"},{"lineNumber":404,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ2\"),"},{"lineNumber":405,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response2ForQ2\"),"},{"lineNumber":406,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response1ForQ3\"),"},{"lineNumber":407,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ1\"),"},{"lineNumber":408,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response3ForQ2\"),"},{"lineNumber":409,"author":{"gitId":"xenosf"},"content":"                testDataBundle.feedbackResponses.get(\"response4ForQ1\")"},{"lineNumber":410,"author":{"gitId":"xenosf"},"content":"        );"},{"lineNumber":411,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e actual \u003d frDb.getFeedbackResponsesForSession(sessionWithResponses,"},{"lineNumber":412,"author":{"gitId":"xenosf"},"content":"                sessionWithResponses.getCourse().getId());"},{"lineNumber":413,"author":{"gitId":"xenosf"},"content":"        assertListResponsesEqual(expected, actual);"},{"lineNumber":414,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":415,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Session has no responses\");"},{"lineNumber":416,"author":{"gitId":"xenosf"},"content":"        FeedbackSession sessionWithoutResponses \u003d testDataBundle.feedbackSessions.get("},{"lineNumber":417,"author":{"gitId":"xenosf"},"content":"                \"unpublishedSession1InTypicalCourse\");"},{"lineNumber":418,"author":{"gitId":"xenosf"},"content":"        actual \u003d frDb.getFeedbackResponsesForSession(sessionWithoutResponses, sessionWithResponses.getCourse().getId());"},{"lineNumber":419,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, actual.size());"},{"lineNumber":420,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":422,"author":{"gitId":"xenosf"},"content":"    private void assertListResponsesEqual(List\u003cFeedbackResponse\u003e expected, List\u003cFeedbackResponse\u003e actual) {"},{"lineNumber":423,"author":{"gitId":"xenosf"},"content":"        assertEquals(\"List size not equal.\", expected.size(), actual.size());"},{"lineNumber":424,"author":{"gitId":"xenosf"},"content":"        assertTrue("},{"lineNumber":425,"author":{"gitId":"xenosf"},"content":"                String.format(\"List contents are not equal.%nExpected: %s,%nActual: %s\","},{"lineNumber":426,"author":{"gitId":"xenosf"},"content":"                        expected.toString(), actual.toString()),"},{"lineNumber":427,"author":{"gitId":"xenosf"},"content":"                new HashSet\u003c\u003e(expected).equals(new HashSet\u003c\u003e(actual)));"},{"lineNumber":428,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":429,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":215,"-":214}},{"path":"src/it/java/teammates/it/storage/sqlsearch/AccountRequestSearchIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.storage.sqlsearch;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.test.AssertHelper;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.test.TestProperties;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link AccountRequestsDb},"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":" *      {@link teammates.storage.search.AccountRequestSearchDocument}."},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"public class AccountRequestSearchIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    private final SqlDataBundle typicalBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"    private final AccountRequestsDb accountRequestsDb \u003d AccountRequestsDb.inst();"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"        putDocuments(typicalBundle);"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"    public void allTests() throws Exception {"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins1General \u003d typicalBundle.accountRequests.get(\"instructor1\");"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins2General \u003d typicalBundle.accountRequests.get(\"instructor2\");"},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins1InCourse1 \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins2InCourse1 \u003d typicalBundle.accountRequests.get(\"instructor2OfCourse1\");"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins1InCourse2 \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse2\");"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins2InCourse2 \u003d typicalBundle.accountRequests.get(\"instructor2OfCourse2\");"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins1InCourse3 \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse3\");"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins2InCourse3 \u003d typicalBundle.accountRequests.get(\"instructor2OfCourse3\");"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        AccountRequest insInUnregCourse \u003d typicalBundle.accountRequests.get(\"instructor3\");"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        AccountRequest unregisteredInstructor1 \u003d"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"                typicalBundle.accountRequests.get(\"unregisteredInstructor1\");"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        AccountRequest unregisteredInstructor2 \u003d"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"                typicalBundle.accountRequests.get(\"unregisteredInstructor2\");"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; query string does not match anyone\");"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":"        List\u003cAccountRequest\u003e results \u003d"},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"                accountRequestsDb.searchAccountRequestsInWholeSystem(\"non-existent\");"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results);"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; empty query string does not match anyone\");"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\");"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results);"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; query string matches some account requests\");"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"Instructor 1\\\"\");"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins1InCourse1, ins1InCourse2, ins1InCourse3, unregisteredInstructor1, ins1General);"},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; query string should be case-insensitive\");"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"InStRuCtOr 2\\\"\");"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins2InCourse1, ins2InCourse2, ins2InCourse3, unregisteredInstructor2, ins2General);"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; account requests should be searchable by their name\");"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"Instructor 3 of CourseNoRegister\\\"\");"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, insInUnregCourse);"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; account requests should be searchable by their email\");"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"instr2@course2.tmt\");"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins2InCourse2);"},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; account requests should be searchable by their institute\");"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"TEAMMATES Test Institute 2\\\"\");"},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, unregisteredInstructor2);"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; unregistered account requests should be searchable\");"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"unregisteredinstructor1@gmail.tmt\\\"\");"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, unregisteredInstructor1);"},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; deleted account requests no longer searchable\");"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"        accountRequestsDb.deleteAccountRequest(ins1InCourse1);"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"instructor 1\\\"\");"},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins1InCourse2, ins1InCourse3, unregisteredInstructor1, ins1General);"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; account requests created without searchability unsearchable\");"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"        accountRequestsDb.createAccountRequest(ins1InCourse1);"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"instructor 1\\\"\");"},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins1InCourse2, ins1InCourse3, unregisteredInstructor1, ins1General);"},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"success: search for account requests; deleting account request without deleting document:\""},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"                + \"document deleted during search, account request unsearchable\");"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":"        accountRequestsDb.deleteAccountRequest(ins2InCourse1);"},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"instructor 2\\\"\");"},{"lineNumber":114,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins2InCourse2, ins2InCourse3, unregisteredInstructor2, ins2General);"},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":"    public void testSearchAccountRequest_deleteAfterSearch_shouldNotBeSearchable() throws Exception {"},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins1InCourse2 \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse2\");"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"        AccountRequest ins2InCourse2 \u003d typicalBundle.accountRequests.get(\"instructor2OfCourse2\");"},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"        // there is search result before deletion"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"        List\u003cAccountRequest\u003e results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"of Course 2\\\"\");"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins1InCourse2, ins2InCourse2);"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":"        // delete an account request"},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"        accountRequestsDb.deleteAccountRequest(ins1InCourse2);"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"        // the search result will change"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"of Course 2\\\"\");"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, ins2InCourse2);"},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":"        // delete all account requests"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"        accountRequestsDb.deleteAccountRequest(ins2InCourse2);"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"        // there should be no search result"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"        results \u003d accountRequestsDb.searchAccountRequestsInWholeSystem(\"\\\"of Course 2\\\"\");"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results);"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"    public void testSearchAccountRequest_noSearchService_shouldThrowException() {"},{"lineNumber":147,"author":{"gitId":"domoberzin"},"content":"        if (TestProperties.isSearchServiceActive()) {"},{"lineNumber":148,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":151,"author":{"gitId":"domoberzin"},"content":"        assertThrows(SearchServiceException.class,"},{"lineNumber":152,"author":{"gitId":"domoberzin"},"content":"                () -\u003e accountRequestsDb.searchAccountRequestsInWholeSystem(\"anything\"));"},{"lineNumber":153,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":155,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":"     * Verifies that search results match with expected output."},{"lineNumber":157,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"domoberzin"},"content":"     * @param actual the results from the search query."},{"lineNumber":159,"author":{"gitId":"domoberzin"},"content":"     * @param expected the expected results for the search query."},{"lineNumber":160,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"domoberzin"},"content":"    private static void verifySearchResults(List\u003cAccountRequest\u003e actual,"},{"lineNumber":162,"author":{"gitId":"domoberzin"},"content":"            AccountRequest... expected) {"},{"lineNumber":163,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expected.length, actual.size());"},{"lineNumber":164,"author":{"gitId":"domoberzin"},"content":"        AssertHelper.assertSameContentIgnoreOrder(Arrays.asList(expected), actual);"},{"lineNumber":165,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":167,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":167}},{"path":"src/it/java/teammates/it/storage/sqlsearch/InstructorSearchIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlsearch;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.test.AssertHelper;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.test.TestProperties;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link UsersDb},"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * {@link teammates.storage.sqlsearch.InstructorSearchDocument}."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class InstructorSearchIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final SqlDataBundle typicalBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UsersDb usersDb \u003d UsersDb.inst();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        putDocuments(typicalBundle);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void allTests() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Instructor ins1InCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Instructor ins2InCourse1 \u003d typicalBundle.instructors.get(\"instructor2OfCourse1\");"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        Instructor ins1InCourse4 \u003d typicalBundle.instructors.get(\"instructor1OfCourse4\");"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"        Instructor ins2InCourse4 \u003d typicalBundle.instructors.get(\"instructor2YetToJoinCourse4\");"},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":"        Instructor ins3InCourse4 \u003d typicalBundle.instructors.get(\"instructor3YetToJoinCourse4\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Instructor insInArchivedCourse \u003d typicalBundle.instructors.get(\"instructorOfArchivedCourse\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Instructor insInUnregCourse \u003d typicalBundle.instructors.get(\"instructorOfUnregisteredCourse\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Instructor insUniqueDisplayName \u003d typicalBundle.instructors.get(\"instructorOfCourse2WithUniqueDisplayName\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Instructor ins1InCourse3 \u003d typicalBundle.instructors.get(\"instructor1OfCourse3\");"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"        Instructor unregisteredInsInCourse1 \u003d typicalBundle.instructors.get(\"unregisteredInstructorOfCourse1\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; query string does not match anyone\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e results \u003d usersDb.searchInstructorsInWholeSystem(\"non-existent\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        verifySearchResults(results);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; empty query string does not match anyone\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        verifySearchResults(results);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; query string matches some instructors\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor of\\\"\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insInArchivedCourse, insInUnregCourse, insUniqueDisplayName);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; query string should be case-insensitive\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"InStRuCtOr 2\\\"\");"},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results, ins2InCourse1, ins2InCourse4);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors in archived courses should be included\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor Of Archived Course\\\"\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insInArchivedCourse);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ______TS("},{"lineNumber":79,"author":{"gitId":"-"},"content":"                \"success: search for instructors in whole system; instructors in unregistered course should be included\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor Of Unregistered Course\\\"\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insInUnregCourse);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by course id\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":"        verifySearchResults(results, ins1InCourse1, ins2InCourse1, unregisteredInsInCourse1);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by course name\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Typical Course 1\\\"\");"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":"        verifySearchResults(results, ins1InCourse1, ins2InCourse1, unregisteredInsInCourse1);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by their name\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor Of Unregistered Course\\\"\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insInUnregCourse);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by their email\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"instr2@teammates.tmt\");"},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results, ins2InCourse1, ins2InCourse4);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by their role\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Co-owner\\\"\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        verifySearchResults(results, ins1InCourse1, insInArchivedCourse,"},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":"                insInUnregCourse, insUniqueDisplayName, ins1InCourse3,"},{"lineNumber":108,"author":{"gitId":"yuanxi1"},"content":"                ins1InCourse4, ins2InCourse4, ins3InCourse4);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors should be searchable by displayed name\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String displayName \u003d insUniqueDisplayName.getDisplayName();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(displayName);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insUniqueDisplayName);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; deleted instructors no longer searchable\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        usersDb.deleteUser(insUniqueDisplayName);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor of\\\"\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        verifySearchResults(results, insInArchivedCourse, insInUnregCourse);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // This method used to use usersDb.putEntity, not sure if the .createInstructor method has the same functionality"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; instructors created without searchability unsearchable\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        usersDb.createInstructor(insUniqueDisplayName);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor of\\\"\");"},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"        verifySearchResults(results, insInArchivedCourse, insInUnregCourse, insUniqueDisplayName);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        ______TS(\"success: search for instructors in whole system; deleting instructor without deleting document:\""},{"lineNumber":129,"author":{"gitId":"-"},"content":"                + \"document deleted during search, instructor unsearchable\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        usersDb.deleteUser(ins1InCourse3);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"Instructor 1\\\"\");"},{"lineNumber":133,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results, ins1InCourse1, ins1InCourse4);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void testSearchInstructor_deleteAfterSearch_shouldNotBeSearchable() throws Exception {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Instructor ins1InCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Instructor ins2InCourse1 \u003d typicalBundle.instructors.get(\"instructor2OfCourse1\");"},{"lineNumber":144,"author":{"gitId":"dishenggg"},"content":"        Instructor unregisteredInsInCourse1 \u003d typicalBundle.instructors.get(\"unregisteredInstructorOfCourse1\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":147,"author":{"gitId":"dishenggg"},"content":"        verifySearchResults(results, ins1InCourse1, ins2InCourse1, unregisteredInsInCourse1);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        usersDb.deleteUser(ins1InCourse1);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":151,"author":{"gitId":"dishenggg"},"content":"        verifySearchResults(results, ins2InCourse1, unregisteredInsInCourse1);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // This used to test .deleteInstructors, but we don\u0027t seem to have a similar method to delete all users in course"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        usersDb.deleteUser(ins2InCourse1);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":156,"author":{"gitId":"dishenggg"},"content":"        verifySearchResults(results, unregisteredInsInCourse1);"},{"lineNumber":157,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":158,"author":{"gitId":"dishenggg"},"content":"        usersDb.deleteUser(unregisteredInsInCourse1);"},{"lineNumber":159,"author":{"gitId":"dishenggg"},"content":"        results \u003d usersDb.searchInstructorsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        verifySearchResults(results);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void testSearchInstructor_noSearchService_shouldThrowException() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (TestProperties.isSearchServiceActive()) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertThrows(SearchServiceException.class,"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                () -\u003e usersDb.searchInstructorsInWholeSystem(\"anything\"));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Verifies that search results match with expected output."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * @param actual   the results from the search query."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @param expected the expected results for the search query."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private static void verifySearchResults(List\u003cInstructor\u003e actual,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            Instructor... expected) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expected.length, actual.size());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        AssertHelper.assertSameContentIgnoreOrder(Arrays.asList(expected), actual);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":1,"yuanxi1":8,"dishenggg":10,"-":165}},{"path":"src/it/java/teammates/it/storage/sqlsearch/StudentSearchIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuanxi1"},"content":"package teammates.it.storage.sqlsearch;"},{"lineNumber":2,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":3,"author":{"gitId":"yuanxi1"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"yuanxi1"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":6,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":7,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":9,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"yuanxi1"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":14,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":15,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":16,"author":{"gitId":"yuanxi1"},"content":"import teammates.test.AssertHelper;"},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"import teammates.test.TestProperties;"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"yuanxi1"},"content":" * SUT: {@link UsersDb},"},{"lineNumber":21,"author":{"gitId":"yuanxi1"},"content":" * {@link teammates.storage.sqlsearch.InstructorSearchDocument}."},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"public class StudentSearchIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":25,"author":{"gitId":"yuanxi1"},"content":"    private final SqlDataBundle typicalBundle \u003d getTypicalSqlDataBundle();"},{"lineNumber":26,"author":{"gitId":"yuanxi1"},"content":"    private final UsersDb usersDb \u003d UsersDb.inst();"},{"lineNumber":27,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":28,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuanxi1"},"content":"    @BeforeMethod"},{"lineNumber":30,"author":{"gitId":"yuanxi1"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"        super.setUp();"},{"lineNumber":32,"author":{"gitId":"yuanxi1"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":33,"author":{"gitId":"yuanxi1"},"content":"        putDocuments(typicalBundle);"},{"lineNumber":34,"author":{"gitId":"yuanxi1"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":35,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":37,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"    public void allTests() throws Exception {"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":40,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        Student stu2InCourse1 \u003d typicalBundle.students.get(\"student2InCourse1\");"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"        Student stu3InCourse1 \u003d typicalBundle.students.get(\"student3InCourse1\");"},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":"        Student stu4InCourse1 \u003d typicalBundle.students.get(\"student4InCourse1\");"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse2 \u003d typicalBundle.students.get(\"student1InCourse2\");"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"        Student unregisteredStuInCourse1 \u003d typicalBundle.students.get(\"unregisteredStudentInCourse1\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Student stu1InCourse3 \u003d typicalBundle.students.get(\"student1InCourse3\");"},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse4 \u003d typicalBundle.students.get(\"student1InCourse4\");"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"        Student stuOfArchivedCourse \u003d typicalBundle.students.get(\"studentOfArchivedCourse\");"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"        Instructor ins1InCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":"        Instructor ins1InCourse4 \u003d typicalBundle.instructors.get(\"instructor1OfCourse4\");"},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; query string does not match anyone\");"},{"lineNumber":57,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"        List\u003cStudent\u003e results \u003d usersDb.searchStudentsInWholeSystem(\"non-existent\");"},{"lineNumber":59,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results);"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; empty query string does not match anyone\");"},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\");"},{"lineNumber":64,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results);"},{"lineNumber":65,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":66,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; query string matches some students\");"},{"lineNumber":67,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":68,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"student1\\\"\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        verifySearchResults(results, stu1InCourse1, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; query string should be case-insensitive\");"},{"lineNumber":72,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"sTuDeNt1\\\"\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        verifySearchResults(results, stu1InCourse1, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; students in archived courses should be included\");"},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"Student In Archived Course\\\"\");"},{"lineNumber":79,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results, stuOfArchivedCourse);"},{"lineNumber":80,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":81,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; students should be searchable by course id\");"},{"lineNumber":82,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":83,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"course-1\\\"\");"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":"        verifySearchResults(results, stu1InCourse1, stu2InCourse1, stu3InCourse1, stu4InCourse1, unregisteredStuInCourse1);"},{"lineNumber":85,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":86,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; students should be searchable by course name\");"},{"lineNumber":87,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":88,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"Typical Course 1\\\"\");"},{"lineNumber":89,"author":{"gitId":"marquestye"},"content":"        verifySearchResults(results, stu1InCourse1, stu2InCourse1, stu3InCourse1, stu4InCourse1, unregisteredStuInCourse1);"},{"lineNumber":90,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":91,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; students should be searchable by their name\");"},{"lineNumber":92,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":93,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"student3 In Course1\\\"\");"},{"lineNumber":94,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(results, stu3InCourse1);"},{"lineNumber":95,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":96,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; students should be searchable by their email\");"},{"lineNumber":97,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":98,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"student1@teammates.tmt\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        verifySearchResults(results, stu1InCourse1, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":100,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":101,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students; query string matches some students; results restricted \""},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":"                 + \"based on instructor\u0027s privilege\");"},{"lineNumber":103,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":104,"author":{"gitId":"yuanxi1"},"content":"        List\u003cInstructor\u003e ins1OfCourse1 \u003d Arrays.asList("},{"lineNumber":105,"author":{"gitId":"yuanxi1"},"content":"                new Instructor[] { ins1InCourse1 });"},{"lineNumber":106,"author":{"gitId":"yuanxi1"},"content":"        List\u003cInstructor\u003e ins1OfCourse4 \u003d Arrays.asList("},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":"                new Instructor[] { ins1InCourse4 });"},{"lineNumber":108,"author":{"gitId":"yuanxi1"},"content":"        List\u003cStudent\u003e studentList \u003d usersDb.searchStudents(\"student1\", ins1OfCourse1);"},{"lineNumber":109,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":110,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(studentList, stu1InCourse1);"},{"lineNumber":111,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":112,"author":{"gitId":"yuanxi1"},"content":"        studentList \u003d usersDb.searchStudents(\"student1\", ins1OfCourse4);"},{"lineNumber":113,"author":{"gitId":"yuanxi1"},"content":"        verifySearchResults(studentList, stu1InCourse4);"},{"lineNumber":114,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":115,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: search for students in whole system; deleted students no longer searchable\");"},{"lineNumber":116,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":117,"author":{"gitId":"yuanxi1"},"content":"        usersDb.deleteUser(stu1InCourse1);"},{"lineNumber":118,"author":{"gitId":"yuanxi1"},"content":"        results \u003d usersDb.searchStudentsInWholeSystem(\"\\\"student1\\\"\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        verifySearchResults(results, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":120,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":121,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":123,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"yuanxi1"},"content":"    public void testSearchStudent_deleteAfterSearch_shouldNotBeSearchable() throws Exception {"},{"lineNumber":125,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":126,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":127,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":129,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":130,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse2 \u003d typicalBundle.students.get(\"student1InCourse2\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Student stu1InCourse3 \u003d typicalBundle.students.get(\"student1InCourse3\");"},{"lineNumber":132,"author":{"gitId":"yuanxi1"},"content":"        Student stu1InCourse4 \u003d typicalBundle.students.get(\"student1InCourse4\");"},{"lineNumber":133,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":134,"author":{"gitId":"yuanxi1"},"content":"        List\u003cStudent\u003e studentList \u003d usersDb.searchStudentsInWholeSystem(\"student1\");"},{"lineNumber":135,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":136,"author":{"gitId":"yuanxi1"},"content":"        // there is search result before deletion"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        verifySearchResults(studentList, stu1InCourse1, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":138,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":139,"author":{"gitId":"yuanxi1"},"content":"        // delete a student"},{"lineNumber":140,"author":{"gitId":"yuanxi1"},"content":"        usersDb.deleteUser(stu1InCourse1);"},{"lineNumber":141,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":142,"author":{"gitId":"yuanxi1"},"content":"        // the search result will change"},{"lineNumber":143,"author":{"gitId":"yuanxi1"},"content":"        studentList \u003d usersDb.searchStudentsInWholeSystem(\"student1\");"},{"lineNumber":144,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        verifySearchResults(studentList, stu1InCourse2, stu1InCourse3, stu1InCourse4);"},{"lineNumber":146,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":147,"author":{"gitId":"yuanxi1"},"content":"        // delete all students in course 2"},{"lineNumber":148,"author":{"gitId":"yuanxi1"},"content":"        usersDb.deleteUser(stu1InCourse2);"},{"lineNumber":149,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":150,"author":{"gitId":"yuanxi1"},"content":"        // the search result will change"},{"lineNumber":151,"author":{"gitId":"yuanxi1"},"content":"        studentList \u003d usersDb.searchStudentsInWholeSystem(\"student1\");"},{"lineNumber":152,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        verifySearchResults(studentList, stu1InCourse3, stu1InCourse4);"},{"lineNumber":154,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":156,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"yuanxi1"},"content":"    public void testSearchStudent_noSearchService_shouldThrowException() {"},{"lineNumber":158,"author":{"gitId":"yuanxi1"},"content":"        if (TestProperties.isSearchServiceActive()) {"},{"lineNumber":159,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":160,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":162,"author":{"gitId":"yuanxi1"},"content":"        assertThrows(SearchServiceException.class,"},{"lineNumber":163,"author":{"gitId":"yuanxi1"},"content":"                () -\u003e usersDb.searchStudentsInWholeSystem(\"anything\"));"},{"lineNumber":164,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":166,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"yuanxi1"},"content":"     * Verifies that search results match with expected output."},{"lineNumber":168,"author":{"gitId":"yuanxi1"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"yuanxi1"},"content":"     * @param actual   the results from the search query."},{"lineNumber":170,"author":{"gitId":"yuanxi1"},"content":"     * @param expected the expected results for the search query."},{"lineNumber":171,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"yuanxi1"},"content":"    private static void verifySearchResults(List\u003cStudent\u003e actual,"},{"lineNumber":173,"author":{"gitId":"yuanxi1"},"content":"            Student... expected) {"},{"lineNumber":174,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(expected.length, actual.size());"},{"lineNumber":175,"author":{"gitId":"yuanxi1"},"content":"        AssertHelper.assertSameContentIgnoreOrder(Arrays.asList(expected), actual);"},{"lineNumber":176,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"yuanxi1"},"content":"}"}],"authorContributionMap":{"yuanxi1":165,"marquestye":3,"-":9}},{"path":"src/it/java/teammates/it/test/BaseTestCaseWithSqlDatabaseAccess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testcontainers.containers.PostgreSQLContainer;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterSuite;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeSuite;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.google.cloud.datastore.DatastoreOptions;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.google.cloud.datastore.testing.LocalDatastoreHelper;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.ObjectifyFactory;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.ObjectifyService;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.util.Closeable;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.sqllogic.api.Logic;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.LogicStarter;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.api.OfyHelper;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.AccountRequestSearchManager;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.InstructorSearchManager;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.SearchManagerFactory;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.StudentSearchManager;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":53,"author":{"gitId":"-"},"content":" * Base test case for tests that access the database."},{"lineNumber":54,"author":{"gitId":"-"},"content":" */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"@Test(singleThreaded \u003d true)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"public class BaseTestCaseWithSqlDatabaseAccess extends BaseTestCase {"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final PostgreSQLContainer\u003c?\u003e PGSQL \u003d new PostgreSQLContainer\u003c\u003e(\"postgres:15.1-alpine\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final LocalDatastoreHelper LOCAL_DATASTORE_HELPER \u003d LocalDatastoreHelper.newBuilder()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .setConsistency(1.0)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .setPort(TestProperties.TEST_LOCALDATASTORE_PORT)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .setStoreOnDisk(false)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private final Logic logic \u003d Logic.inst();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private Closeable closeable;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @BeforeSuite"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    protected static void setUpSuite() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        PGSQL.start();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Temporarily disable migration utility"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // DbMigrationUtil.resetDb(PGSQL.getJdbcUrl(), PGSQL.getUsername(),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // PGSQL.getPassword());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        HibernateUtil.buildSessionFactory(PGSQL.getJdbcUrl(), PGSQL.getUsername(), PGSQL.getPassword());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        LogicStarter.initializeDependencies();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerAccountRequestSearchManager("},{"lineNumber":81,"author":{"gitId":"-"},"content":"            new AccountRequestSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerInstructorSearchManager("},{"lineNumber":83,"author":{"gitId":"-"},"content":"            new InstructorSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerStudentSearchManager("},{"lineNumber":85,"author":{"gitId":"-"},"content":"            new StudentSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // TODO: remove after migration, needed for dual db support"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.search.SearchManagerFactory.registerAccountRequestSearchManager("},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.search.AccountRequestSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.search.SearchManagerFactory.registerInstructorSearchManager("},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.search.InstructorSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.search.SearchManagerFactory.registerStudentSearchManager("},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.search.StudentSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        teammates.logic.core.LogicStarter.initializeDependencies();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LOCAL_DATASTORE_HELPER.start();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        DatastoreOptions options \u003d LOCAL_DATASTORE_HELPER.getOptions();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ObjectifyService.init(new ObjectifyFactory("},{"lineNumber":100,"author":{"gitId":"-"},"content":"                options.getService()));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        OfyHelper.registerEntityClasses();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setupClass() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        closeable \u003d ObjectifyService.begin();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void tearDownClass() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        closeable.close();"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getAccountRequestSearchManager().resetCollections();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getInstructorSearchManager().resetCollections();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getStudentSearchManager().resetCollections();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @AfterSuite"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    protected static void tearDownSuite() throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        PGSQL.close();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        LOCAL_DATASTORE_HELPER.stop();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        HibernateUtil.beginTransaction();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @AfterMethod"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    protected void tearDown() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        HibernateUtil.rollbackTransaction();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Persist data bundle into the db."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected void persistDataBundle(SqlDataBundle dataBundle)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        logic.persistDataBundle(dataBundle);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Puts searchable documents from the data bundle to the solr database."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    protected void putDocuments(SqlDataBundle dataBundle) throws SearchServiceException {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        logic.putDocuments(dataBundle);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Verifies that two entities are equal."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    protected void verifyEquals(BaseEntity expected, BaseEntity actual) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (expected instanceof Course) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            Course expectedCourse \u003d (Course) expected;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            Course actualCourse \u003d (Course) actual;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedCourse, actualCourse);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedCourse), JsonUtils.toJson(actualCourse));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } else if (expected instanceof DeadlineExtension) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            DeadlineExtension expectedDeadlineExtension \u003d (DeadlineExtension) expected;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            DeadlineExtension actualDeadlineExtension \u003d (DeadlineExtension) actual;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedDeadlineExtension, actualDeadlineExtension);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedDeadlineExtension), JsonUtils.toJson(actualDeadlineExtension));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackSession) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            FeedbackSession expectedSession \u003d (FeedbackSession) expected;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            FeedbackSession actualSession \u003d (FeedbackSession) actual;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedSession, actualSession);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedSession), JsonUtils.toJson(actualSession));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackQuestion) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            FeedbackQuestion expectedQuestion \u003d (FeedbackQuestion) expected;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            FeedbackQuestion actualQuestion \u003d (FeedbackQuestion) actual;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedQuestion, actualQuestion);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedQuestion), JsonUtils.toJson(actualQuestion));"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponse) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            FeedbackResponse expectedResponse \u003d (FeedbackResponse) expected;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            FeedbackResponse actualResponse \u003d (FeedbackResponse) actual;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedResponse, actualResponse);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedResponse), JsonUtils.toJson(actualResponse));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseComment) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            FeedbackResponseComment expectedComment \u003d (FeedbackResponseComment) expected;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            FeedbackResponseComment actualComment \u003d (FeedbackResponseComment) actual;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedComment, actualComment);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedComment), JsonUtils.toJson(actualComment));"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Notification) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            Notification expectedNotification \u003d (Notification) expected;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            Notification actualNotification \u003d (Notification) actual;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedNotification, actualNotification);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedNotification), JsonUtils.toJson(actualNotification));"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Account) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            Account expectedAccount \u003d (Account) expected;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            Account actualAccount \u003d (Account) actual;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedAccount, actualAccount);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccount), JsonUtils.toJson(actualAccount));"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        } else if (expected instanceof AccountRequest) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            AccountRequest expectedAccountRequest \u003d (AccountRequest) expected;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            AccountRequest actualAccountRequest \u003d (AccountRequest) actual;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedAccountRequest, actualAccountRequest);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccountRequest), JsonUtils.toJson(actualAccountRequest));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } else if (expected instanceof UsageStatistics) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            UsageStatistics expectedUsageStatistics \u003d (UsageStatistics) expected;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            UsageStatistics actualUsageStatistics \u003d (UsageStatistics) actual;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedUsageStatistics, actualUsageStatistics);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedUsageStatistics), JsonUtils.toJson(actualUsageStatistics));"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Instructor) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            Instructor expectedInstructor \u003d (Instructor) expected;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            Instructor actualInstructor \u003d (Instructor) actual;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedInstructor, actualInstructor);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedInstructor), JsonUtils.toJson(actualInstructor));"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Student) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            Student expectedStudent \u003d (Student) expected;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            Student actualStudent \u003d (Student) actual;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedStudent, actualStudent);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedStudent), JsonUtils.toJson(actualStudent));"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Section) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            Section expectedSection \u003d (Section) expected;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            Section actualSection \u003d (Section) actual;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedSection, actualSection);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedSection), JsonUtils.toJson(actualSection));"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Team) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            Team expectedTeam \u003d (Team) expected;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            Team actualTeam \u003d (Team) actual;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedTeam, actualTeam);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedTeam), JsonUtils.toJson(actualTeam));"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        } else if (expected instanceof ReadNotification) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            ReadNotification expectedReadNotification \u003d (ReadNotification) expected;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            ReadNotification actualReadNotification \u003d (ReadNotification) actual;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedReadNotification, actualReadNotification);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            fail(\"Unknown entity\");"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Verifies that the given entity is present in the database."},{"lineNumber":240,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    protected void verifyPresentInDatabase(BaseEntity expected) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assertNotNull(expected);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        BaseEntity actual \u003d getEntity(expected);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        verifyEquals(expected, actual);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    private BaseEntity getEntity(BaseEntity entity) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        if (entity instanceof Course) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return logic.getCourse(((Course) entity).getId());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        } else if (entity instanceof FeedbackSession) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return logic.getFeedbackSession(((FeedbackSession) entity).getId());"},{"lineNumber":252,"author":{"gitId":"dishenggg"},"content":"        } else if (entity instanceof FeedbackQuestion) {"},{"lineNumber":253,"author":{"gitId":"dishenggg"},"content":"            return logic.getFeedbackQuestion(((FeedbackQuestion) entity).getId());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        } else if (entity instanceof Account) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return logic.getAccount(((Account) entity).getId());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        } else if (entity instanceof Notification) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            return logic.getNotification(((Notification) entity).getId());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        } else if (entity instanceof AccountRequest) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            AccountRequest accountRequest \u003d (AccountRequest) entity;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return logic.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":261,"author":{"gitId":"yuanxi1"},"content":"        } else if (entity instanceof Instructor) {"},{"lineNumber":262,"author":{"gitId":"yuanxi1"},"content":"            return logic.getInstructor(((Instructor) entity).getId());"},{"lineNumber":263,"author":{"gitId":"yuanxi1"},"content":"        } else if (entity instanceof Student) {"},{"lineNumber":264,"author":{"gitId":"yuanxi1"},"content":"            return logic.getStudent(((Student) entity).getId());"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown entity type\");"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Course expected, Course actual) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(DeadlineExtension expected, DeadlineExtension actual) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackSession expected, FeedbackSession actual) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackQuestion expected, FeedbackQuestion actual) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackResponse expected, FeedbackResponse actual) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackResponseComment expected, FeedbackResponseComment actual) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Notification expected, Notification actual) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Account expected, Account actual) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(AccountRequest expected, AccountRequest actual) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(UsageStatistics expected, UsageStatistics actual) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Instructor expected, Instructor actual) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Student expected, Student actual) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Section expected, Section actual) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Team expected, Team actual) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(ReadNotification expected, ReadNotification actual) {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Generates a UUID that is different from the given {@code uuid}."},{"lineNumber":360,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    protected UUID generateDifferentUuid(UUID uuid) {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        UUID ret \u003d UUID.randomUUID();"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        while (ret.equals(uuid)) {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            ret \u003d UUID.randomUUID();"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        return ret;"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":8,"yuanxi1":4,"dishenggg":2,"-":354}},{"path":"src/it/java/teammates/it/ui/webapi/AccountRequestSearchIndexingWorkerActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.Const.ParamsNames;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.test.TestProperties;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.AccountRequestSearchIndexingWorkerAction;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link AccountRequestSearchIndexingWorkerAction}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"public class AccountRequestSearchIndexingWorkerActionIT extends BaseActionIT\u003cAccountRequestSearchIndexingWorkerAction\u003e {"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"        return Const.TaskQueue.ACCOUNT_REQUEST_SEARCH_INDEXING_WORKER_URL;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return POST;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void testExecute() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        AccountRequest accountRequest \u003d typicalBundle.accountRequests.get(\"instructor1\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ______TS(\"account request not yet indexed should not be searchable\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"        List\u003cAccountRequest\u003e accountRequestsList \u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                logic.searchAccountRequestsInWholeSystem(accountRequest.getEmail());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(0, accountRequestsList.size());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        ______TS(\"account request indexed should be searchable\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                ParamsNames.INSTRUCTOR_EMAIL, accountRequest.getEmail(),"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                ParamsNames.INSTRUCTOR_INSTITUTION, accountRequest.getInstitute(),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AccountRequestSearchIndexingWorkerAction action \u003d getAction(submissionParams);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        getJsonResult(action);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        accountRequestsList \u003d logic.searchAccountRequestsInWholeSystem(accountRequest.getEmail());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(1, accountRequestsList.size());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getName(), accountRequestsList.get(0).getName());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"    protected void testAccessControl() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        verifyOnlyAdminCanAccess(course);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":26,"-":52}},{"path":"src/it/java/teammates/it/ui/webapi/CreateInstructorActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mingyuanc"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":6,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":9,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.request.InstructorCreateRequest;"},{"lineNumber":12,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.webapi.CreateInstructorAction;"},{"lineNumber":13,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.webapi.InvalidOperationException;"},{"lineNumber":14,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":15,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":16,"author":{"gitId":"mingyuanc"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"mingyuanc"},"content":" * SUT: {@link CreateInstructorAction}."},{"lineNumber":18,"author":{"gitId":"mingyuanc"},"content":" */"},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":"public class CreateInstructorActionIT extends BaseActionIT\u003cCreateInstructorAction\u003e {"},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":"    @BeforeMethod"},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"        super.setUp();"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":"    protected String getActionUri() {"},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":"        return Const.ResourceURIs.INSTRUCTOR;"},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":"    protected String getRequestMethod() {"},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":"        return POST;"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":"    protected void testExecute() {"},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":"        // see test cases below"},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":44,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"mingyuanc"},"content":"    protected void testExecute_typicalCase_shouldPass() throws Exception {"},{"lineNumber":46,"author":{"gitId":"mingyuanc"},"content":"        loginAsAdmin();"},{"lineNumber":47,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":48,"author":{"gitId":"mingyuanc"},"content":"        Course course1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":49,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":50,"author":{"gitId":"mingyuanc"},"content":"        String[] params \u003d {"},{"lineNumber":51,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.COURSE_ID, course1.getId(),"},{"lineNumber":52,"author":{"gitId":"mingyuanc"},"content":"        };"},{"lineNumber":53,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":"        InstructorCreateRequest instructorCreateRequest \u003d new InstructorCreateRequest("},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"                \"00000000-0000-4000-8000-000000000006\", \"newInstructorName\","},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":"                \"newInstructorEmail@mail.com\", Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER,"},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":"                \"instructorDisplayName\", false);"},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":"        CreateInstructorAction action \u003d getAction(instructorCreateRequest, params);"},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":60,"author":{"gitId":"mingyuanc"},"content":"        JsonResult response \u003d getJsonResult(action);"},{"lineNumber":61,"author":{"gitId":"mingyuanc"},"content":"        InstructorData instructorData \u003d (InstructorData) response.getOutput();"},{"lineNumber":62,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":63,"author":{"gitId":"mingyuanc"},"content":"        Instructor createdInstructor \u003d logic.getInstructorForEmail(course1.getId(), instructorCreateRequest.getEmail());"},{"lineNumber":64,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":65,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(createdInstructor.getName(), instructorCreateRequest.getName());"},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(createdInstructor.getEmail(), instructorCreateRequest.getEmail());"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(createdInstructor.getName(), instructorData.getName());"},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(createdInstructor.getEmail(), instructorData.getEmail());"},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":"        assertFalse(createdInstructor.isDisplayedToStudents());"},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":"        assertTrue(createdInstructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_MODIFY_COURSE));"},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"        assertTrue(createdInstructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR));"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":"        assertTrue(createdInstructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_MODIFY_SESSION));"},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":"        assertTrue(createdInstructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_MODIFY_STUDENT));"},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":"    protected void testExecute_uniqueEmailClash_shouldFail() throws Exception {"},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructor1OfCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":80,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":81,"author":{"gitId":"mingyuanc"},"content":"        loginAsAdmin();"},{"lineNumber":82,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":83,"author":{"gitId":"mingyuanc"},"content":"        String[] params \u003d {"},{"lineNumber":84,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.COURSE_ID, instructor1OfCourse1.getCourseId(),"},{"lineNumber":85,"author":{"gitId":"mingyuanc"},"content":"        };"},{"lineNumber":86,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":87,"author":{"gitId":"mingyuanc"},"content":"        InstructorCreateRequest instructorCreateRequest \u003d new InstructorCreateRequest("},{"lineNumber":88,"author":{"gitId":"mingyuanc"},"content":"                instructor1OfCourse1.getCourseId(), \"instructor3ofCourse1\","},{"lineNumber":89,"author":{"gitId":"mingyuanc"},"content":"                instructor1OfCourse1.getEmail(), Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_TUTOR,"},{"lineNumber":90,"author":{"gitId":"mingyuanc"},"content":"                \"instructor3ofCourse1\", false);"},{"lineNumber":91,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":92,"author":{"gitId":"mingyuanc"},"content":"        CreateInstructorAction action \u003d getAction(instructorCreateRequest, params);"},{"lineNumber":93,"author":{"gitId":"mingyuanc"},"content":"        assertThrows(InvalidOperationException.class, action::execute);"},{"lineNumber":94,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":96,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"mingyuanc"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":99,"author":{"gitId":"mingyuanc"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":100,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor2OfCourse1\");"},{"lineNumber":101,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":102,"author":{"gitId":"mingyuanc"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":103,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":104,"author":{"gitId":"mingyuanc"},"content":"        };"},{"lineNumber":105,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":106,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"Admins can access\");"},{"lineNumber":107,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":108,"author":{"gitId":"mingyuanc"},"content":"        verifyAccessibleForAdmin(submissionParams);"},{"lineNumber":109,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":110,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"only instructors of the same course can access\");"},{"lineNumber":111,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":112,"author":{"gitId":"mingyuanc"},"content":"        verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess(course,"},{"lineNumber":113,"author":{"gitId":"mingyuanc"},"content":"                Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR, submissionParams);"},{"lineNumber":114,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"instructors of other courses cannot access\");"},{"lineNumber":115,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":116,"author":{"gitId":"mingyuanc"},"content":"        verifyInaccessibleForInstructorsOfOtherCourses(course, submissionParams);"},{"lineNumber":117,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":119,"author":{"gitId":"mingyuanc"},"content":"}"}],"authorContributionMap":{"mingyuanc":119}},{"path":"src/it/java/teammates/it/ui/webapi/DeleteStudentsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.DeleteStudentsAction;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * SUT: {@link DeleteStudentsAction}."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class DeleteStudentsActionIT extends BaseActionIT\u003cDeleteStudentsAction\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.STUDENTS;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return DELETE;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String courseId \u003d instructor.getCourseId();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // TODO Remove limit after migration completes"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"        int deleteLimit \u003d 4;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case delete a limited number of students\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentsToDelete \u003d logic.getStudentsForCourse(courseId);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"marquestye"},"content":"        assertEquals(5, studentsToDelete.size());"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, courseId,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                Const.ParamsNames.LIMIT, String.valueOf(deleteLimit),"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DeleteStudentsAction deleteStudentsAction \u003d getAction(params);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        getJsonResult(deleteStudentsAction);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        for (Student student : studentsToDelete) {"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"            assertNull(logic.getStudentByRegistrationKey(student.getRegKey()));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ______TS(\"Random course given, fails silently\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, \"non-existent-course-id\","},{"lineNumber":68,"author":{"gitId":"-"},"content":"                Const.ParamsNames.LIMIT, String.valueOf(deleteLimit),"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        deleteStudentsAction \u003d getAction(params);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        getJsonResult(deleteStudentsAction);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ______TS(\"Invalid params\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess("},{"lineNumber":88,"author":{"gitId":"-"},"content":"                course, Const.InstructorPermissions.CAN_MODIFY_STUDENT, params);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":1,"dishenggg":2,"-":88}},{"path":"src/it/java/teammates/it/ui/webapi/EnrollStudentsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.EnrollStudentsData;"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.request.StudentsEnrollRequest;"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.EnrollStudentsAction;"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.InvalidOperationException;"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link EnrollStudentsAction}."},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"public class EnrollStudentsActionIT extends BaseActionIT\u003cEnrollStudentsAction\u003e {"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"    protected String getActionUri() {"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"        return Const.ResourceURIs.STUDENTS;"},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"    protected String getRequestMethod() {"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        return PUT;"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"    private StudentsEnrollRequest prepareRequest(List\u003cStudent\u003e students) {"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudentsEnrollRequest.StudentEnrollRequest\u003e studentEnrollRequests \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        students.forEach(student -\u003e {"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"            studentEnrollRequests.add(new StudentsEnrollRequest.StudentEnrollRequest(student.getName(),"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"                    student.getEmail(), student.getTeam().getName(), student.getSection().getName(), student.getComments()));"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"        });"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"        return new StudentsEnrollRequest(studentEnrollRequests);"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"    public void testExecute() throws Exception {"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d typicalBundle.students.get(\"student1InCourse1\").getCourseId();"},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d logic.getCourse(courseId);"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d logic.getSection(courseId, \"Section 1\");"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d logic.getTeamOrCreate(section, \"Team 1\");"},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        Student newStudent \u003d new Student(course, \"Test Student\", \"test@email.com\", \"Test Comment\", team);"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, courseId,"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e(logic.getStudentsForCourse(courseId));"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":"        assertEquals(5, students.size());"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical Success Case For Enrolling a Student\");"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"        StudentsEnrollRequest request \u003d prepareRequest(Arrays.asList(newStudent));"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":"        EnrollStudentsAction enrollStudentsAction \u003d getAction(request, params);"},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"        JsonResult res \u003d getJsonResult(enrollStudentsAction);"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":"        EnrollStudentsData data \u003d (EnrollStudentsData) res.getOutput();"},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"        assertEquals(1, data.getStudentsData().getStudents().size());"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudent\u003e studentsInCourse \u003d logic.getStudentsForCourse(courseId);"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":"        assertEquals(6, studentsInCourse.size());"},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Fail to enroll due to duplicate team name across sections\");"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"        String expectedMessage \u003d \"Team \\\"%s\\\" is detected in both Section \\\"%s\\\" and Section \\\"%s\\\".\""},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"                + \" Please use different team names in different sections.\";"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"        Section newSection \u003d logic.getSection(courseId, \"Section 3\");"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        Team newTeam \u003d new Team(newSection, \"Team 1\");"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"        newStudent \u003d new Student(course, \"Test Student\", \"test@email.com\", \"Test Comment\", newTeam);"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"        Student secondStudent \u003d new Student(course, \"Test Student 2\", \"test2@email.com\", \"Test Comment\","},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"                team);"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        StudentsEnrollRequest req \u003d prepareRequest(Arrays.asList(secondStudent, newStudent));"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":"        InvalidOperationException exception \u003d verifyInvalidOperation(req, params);"},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"        assertEquals(String.format(expectedMessage, \"Team 1\", \"Section 3\", \"Section 1\"), exception.getMessage());"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical Success Case For Changing Details (except email) of a Student\");"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        Section section3 \u003d logic.getSection(courseId, \"Section 3\");"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"        Team team3 \u003d logic.getTeamOrCreate(section3, \"Team 3\");"},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":"        Student changedTeam \u003d new Student(course, \"Student 1\", \"student1@teammates.tmt\", \"Test Comment\", team3);"},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":"        request \u003d prepareRequest(Arrays.asList(changedTeam));"},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":"        enrollStudentsAction \u003d getAction(request, params);"},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"        res \u003d getJsonResult(enrollStudentsAction);"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":"        data \u003d (EnrollStudentsData) res.getOutput();"},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":"        assertEquals(1, data.getStudentsData().getStudents().size());"},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"        studentsInCourse \u003d logic.getStudentsForCourse(courseId);"},{"lineNumber":114,"author":{"gitId":"marquestye"},"content":"        assertEquals(6, studentsInCourse.size());"},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":"        // Verify that changes have cascaded to feedback responses"},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"        String giverEmail \u003d \"student1@teammates.tmt\";"},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesFromUser \u003d"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":"                logic.getFeedbackResponsesFromGiverForCourse(courseId, giverEmail);"},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesFromUser) {"},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"            assertEquals(logic.getSection(courseId, \"Section 3\"), response.getGiverSection());"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesToUser \u003d"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"                logic.getFeedbackResponsesForRecipientForCourse(courseId, giverEmail);"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesToUser) {"},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":"            assertEquals(logic.getSection(courseId, \"Section 3\"), response.getRecipientSection());"},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"            List\u003cFeedbackResponseComment\u003e commentsFromUser \u003d logic.getFeedbackResponseCommentsForResponse(response.getId());"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":"            for (FeedbackResponseComment comment : commentsFromUser) {"},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"                if (comment.getGiver().equals(giverEmail)) {"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"                    assertEquals(logic.getSection(courseId, \"Section 3\"), comment.getGiverSection());"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":147,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":148,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":"        verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess("},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":"                course, Const.InstructorPermissions.CAN_MODIFY_STUDENT, params);"},{"lineNumber":151,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":149,"marquestye":3}},{"path":"src/it/java/teammates/it/ui/webapi/FeedbackSessionClosingRemindersActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.FeedbackSessionClosingRemindersAction;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackSessionClosingRemindersAction}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class FeedbackSessionClosingRemindersActionIT extends BaseActionIT\u003cFeedbackSessionClosingRemindersAction\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        prepareSession();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private void prepareSession() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // DEADLINE EXTENSIONS"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String[] deKeys \u003d {\"student1InCourse1Session1\", \"instructor1InCourse1Session1\"};"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cDeadlineExtension\u003e exts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        for (String deKey : deKeys) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            exts.add(typicalBundle.deadlineExtensions.get(deKey));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // FEEDBACK QUESTIONS"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String[] fqKeys \u003d {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \"qn1InSession1InCourse1\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \"qn2InSession1InCourse1\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \"qn3InSession1InCourse1\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"                \"qn4InSession1InCourse1\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \"qn5InSession1InCourse1\","},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \"qn6InSession1InCourse1NoResponses\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e qns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        for (String fqKey : fqKeys) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            qns.add(typicalBundle.feedbackQuestions.get(fqKey));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        session.setDeadlineExtensions(exts);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        session.setFeedbackQuestions(qns);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return Const.CronJobURIs.AUTOMATED_FEEDBACK_CLOSING_REMINDERS;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess(course);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case 1: email tasks added for 1 all users of 1 session\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        textExecute_typicalSuccess1();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case 2: email tasks added for 1 all users of 1 session and 1 deadline extension\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        textExecute_typicalSuccess2();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case 3: Only 1 email task queued -- \""},{"lineNumber":91,"author":{"gitId":"-"},"content":"                + \"0 for session: already sent, \""},{"lineNumber":92,"author":{"gitId":"-"},"content":"                + \"1 for deadline extension: closing-soon not sent yet\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        textExecute_typicalSuccess3();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case 4: No tasks queued -- \""},{"lineNumber":96,"author":{"gitId":"-"},"content":"                + \"both session and deadline extensions have already sent closing-soon emails\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        textExecute_typicalSuccess4();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case 5: No tasks queued -- session\u0027s closing-soon email disabled\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        textExecute_typicalSuccess5();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void textExecute_typicalSuccess1() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        long oneHour \u003d 60 * 60;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Duration noGracePeriod \u003d Duration.between(now, now);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        session.setClosingSoonEmailSent(false);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        session.setEndTime(now.plusSeconds((oneHour * 23) + 60));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        session.setGracePeriod(noGracePeriod);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String[] params \u003d {};"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        FeedbackSessionClosingRemindersAction action1 \u003d getAction(params);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonResult actionOutput1 \u003d getJsonResult(action1);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        MessageOutput response1 \u003d (MessageOutput) actionOutput1.getOutput();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(\"Successful\", response1.getMessage());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(session.isClosingSoonEmailSent());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(session.getDeadlineExtensions().stream().allMatch(de -\u003e !de.isClosingSoonEmailSent()));"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"marquestye"},"content":"        // 7 email tasks queued:"},{"lineNumber":124,"author":{"gitId":"marquestye"},"content":"        // 1 co-owner, 5 students and 3 instructors,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // but 1 student and 1 instructor have deadline extensions (should not receive email)"},{"lineNumber":126,"author":{"gitId":"marquestye"},"content":"        verifySpecifiedTasksAdded(Const.TaskQueue.SEND_EMAIL_QUEUE_NAME, 7);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void textExecute_typicalSuccess2() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        long oneHour \u003d 60 * 60;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Duration noGracePeriod \u003d Duration.between(now, now);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        session.setClosingSoonEmailSent(false);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        session.setEndTime(now.plusSeconds((oneHour * 23) + 60));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        session.setGracePeriod(noGracePeriod);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        DeadlineExtension de \u003d session.getDeadlineExtensions().get(0);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        de.setEndTime(now.plusSeconds(oneHour * 16));"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String[] params \u003d {};"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        FeedbackSessionClosingRemindersAction action1 \u003d getAction(params);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        JsonResult actionOutput1 \u003d getJsonResult(action1);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        MessageOutput response1 \u003d (MessageOutput) actionOutput1.getOutput();"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(\"Successful\", response1.getMessage());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertTrue(session.isClosingSoonEmailSent());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertTrue(de.isClosingSoonEmailSent());"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"marquestye"},"content":"        // 8 email tasks queued:"},{"lineNumber":153,"author":{"gitId":"marquestye"},"content":"        // - 7 emails: 1 co-owner, 5 students and 3 instructors,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        //             but 1 student and 1 instructor have deadline extensions (should not receive email)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // - 1 email:  1 student deadline extension"},{"lineNumber":156,"author":{"gitId":"marquestye"},"content":"        verifySpecifiedTasksAdded(Const.TaskQueue.SEND_EMAIL_QUEUE_NAME, 8);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private void textExecute_typicalSuccess3() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        long oneHour \u003d 60 * 60;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Duration noGracePeriod \u003d Duration.between(now, now);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        session.setClosingSoonEmailSent(true);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        session.setEndTime(now.plusSeconds((oneHour * 23) + 60));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        session.setGracePeriod(noGracePeriod);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        DeadlineExtension de \u003d session.getDeadlineExtensions().get(0);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        de.setEndTime(now.plusSeconds(oneHour * 16));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        de.setClosingSoonEmailSent(false);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String[] params \u003d {};"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        FeedbackSessionClosingRemindersAction action1 \u003d getAction(params);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        JsonResult actionOutput1 \u003d getJsonResult(action1);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        MessageOutput response1 \u003d (MessageOutput) actionOutput1.getOutput();"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(\"Successful\", response1.getMessage());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertTrue(session.isClosingSoonEmailSent());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertTrue(de.isClosingSoonEmailSent());"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // 1 email tasks queued:"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // - 0 emails: session already sent closing-soon emails"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // - 1 email:  1 student deadline extension where closing-soon email not sent yet"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        verifySpecifiedTasksAdded(Const.TaskQueue.SEND_EMAIL_QUEUE_NAME, 1);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private void textExecute_typicalSuccess4() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        long oneHour \u003d 60 * 60;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Duration noGracePeriod \u003d Duration.between(now, now);"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        session.setClosingSoonEmailSent(true);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        session.setEndTime(now.plusSeconds((oneHour * 23) + 60));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        session.setGracePeriod(noGracePeriod);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        DeadlineExtension de \u003d session.getDeadlineExtensions().get(0);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        de.setEndTime(now.plusSeconds(oneHour * 16));"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        de.setClosingSoonEmailSent(true);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String[] params \u003d {};"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        FeedbackSessionClosingRemindersAction action1 \u003d getAction(params);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        JsonResult actionOutput1 \u003d getJsonResult(action1);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        MessageOutput response1 \u003d (MessageOutput) actionOutput1.getOutput();"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertEquals(\"Successful\", response1.getMessage());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertTrue(session.isClosingSoonEmailSent());"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertTrue(de.isClosingSoonEmailSent());"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        verifyNoTasksAdded();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private void textExecute_typicalSuccess5() {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        long oneHour \u003d 60 * 60;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        Duration noGracePeriod \u003d Duration.between(now, now);"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        FeedbackSession session \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        session.setClosingEmailEnabled(false);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        session.setClosingSoonEmailSent(false);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        session.setEndTime(now.plusSeconds((oneHour * 23) + 60));"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        session.setGracePeriod(noGracePeriod);"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        DeadlineExtension de \u003d session.getDeadlineExtensions().get(0);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        de.setEndTime(now.plusSeconds(oneHour * 16));"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        de.setClosingSoonEmailSent(false);"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        String[] params \u003d {};"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        FeedbackSessionClosingRemindersAction action1 \u003d getAction(params);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        JsonResult actionOutput1 \u003d getJsonResult(action1);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        MessageOutput response1 \u003d (MessageOutput) actionOutput1.getOutput();"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        assertEquals(\"Successful\", response1.getMessage());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertTrue(!session.isClosingSoonEmailSent());"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        assertTrue(!de.isClosingSoonEmailSent());"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        verifyNoTasksAdded();"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":6,"-":237}},{"path":"src/it/java/teammates/it/ui/webapi/GetCourseJoinStatusActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dishenggg"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":3,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":8,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.output.JoinStatus;"},{"lineNumber":9,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.webapi.GetCourseJoinStatusAction;"},{"lineNumber":10,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":11,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":12,"author":{"gitId":"dishenggg"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"dishenggg"},"content":" * SUT: {@link GetCourseJoinStatusAction}."},{"lineNumber":14,"author":{"gitId":"dishenggg"},"content":" */"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"public class GetCourseJoinStatusActionIT extends BaseActionIT\u003cGetCourseJoinStatusAction\u003e {"},{"lineNumber":16,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":17,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"dishenggg"},"content":"    @BeforeMethod"},{"lineNumber":19,"author":{"gitId":"dishenggg"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":20,"author":{"gitId":"dishenggg"},"content":"        super.setUp();"},{"lineNumber":21,"author":{"gitId":"dishenggg"},"content":"        this.typicalBundle \u003d loadSqlDataBundle(\"/typicalDataBundle.json\");"},{"lineNumber":22,"author":{"gitId":"dishenggg"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":23,"author":{"gitId":"dishenggg"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":24,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":26,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"dishenggg"},"content":"    protected String getActionUri() {"},{"lineNumber":28,"author":{"gitId":"dishenggg"},"content":"        return Const.ResourceURIs.JOIN;"},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":31,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"dishenggg"},"content":"    protected String getRequestMethod() {"},{"lineNumber":33,"author":{"gitId":"dishenggg"},"content":"        return GET;"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":"    protected void testExecute() {"},{"lineNumber":39,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":"        loginAsUnregistered(\"unreg.user\");"},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Not enough parameters\");"},{"lineNumber":43,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"        verifyHttpParameterFailure("},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, \"regkey\""},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"        verifyHttpParameterFailure("},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: student is already registered\");"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":"        String registeredStudentKey \u003d"},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"                logic.getStudentForEmail(\"course-1\", \"student1@teammates.tmt\").getRegKey();"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, registeredStudentKey,"},{"lineNumber":58,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":"        GetCourseJoinStatusAction getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"        JsonResult result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":64,"author":{"gitId":"dishenggg"},"content":"        JoinStatus output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":65,"author":{"gitId":"dishenggg"},"content":"        assertTrue(output.getHasJoined());"},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: student is not registered\");"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"        String unregisteredStudentKey \u003d"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":"                logic.getStudentForEmail(\"course-1\", \"unregisteredStudentInCourse1@teammates.tmt\").getRegKey();"},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":71,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":72,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, unregisteredStudentKey,"},{"lineNumber":73,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"        getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"        result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"        assertFalse(output.getHasJoined());"},{"lineNumber":81,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":82,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Failure case: regkey is not valid for student\");"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, \"ANXKJZNZXNJCZXKJDNKSDA\","},{"lineNumber":86,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":88,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":89,"author":{"gitId":"dishenggg"},"content":"        verifyEntityNotFound(params);"},{"lineNumber":90,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":91,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: instructor is already registered\");"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":93,"author":{"gitId":"dishenggg"},"content":"        String registeredInstructorKey \u003d"},{"lineNumber":94,"author":{"gitId":"dishenggg"},"content":"                logic.getInstructorForEmail(\"course-1\", \"instr1@teammates.tmt\").getRegKey();"},{"lineNumber":95,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":96,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":97,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, registeredInstructorKey,"},{"lineNumber":98,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":99,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":100,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":101,"author":{"gitId":"dishenggg"},"content":"        getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":102,"author":{"gitId":"dishenggg"},"content":"        result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":103,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":104,"author":{"gitId":"dishenggg"},"content":"        output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":105,"author":{"gitId":"dishenggg"},"content":"        assertTrue(output.getHasJoined());"},{"lineNumber":106,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":107,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: instructor is not registered\");"},{"lineNumber":108,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":109,"author":{"gitId":"dishenggg"},"content":"        String unregisteredInstructorKey \u003d"},{"lineNumber":110,"author":{"gitId":"dishenggg"},"content":"                logic.getInstructorForEmail(\"course-1\", \"unregisteredInstructor@teammates.tmt\").getRegKey();"},{"lineNumber":111,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":112,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":113,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, unregisteredInstructorKey,"},{"lineNumber":114,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":115,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":116,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":117,"author":{"gitId":"dishenggg"},"content":"        getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":118,"author":{"gitId":"dishenggg"},"content":"        result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":119,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":120,"author":{"gitId":"dishenggg"},"content":"        output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":121,"author":{"gitId":"dishenggg"},"content":"        assertFalse(output.getHasJoined());"},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Failure case: regkey is not valid for instructor\");"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, \"ANXKJZNZXNJCZXKJDNKSDA\","},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":128,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":129,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":130,"author":{"gitId":"dishenggg"},"content":"        verifyEntityNotFound(params);"},{"lineNumber":131,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: account request not used, instructor has not joined course\");"},{"lineNumber":133,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"        String accountRequestNotUsedKey \u003d logic.getAccountRequest(\"unregisteredinstructor1@gmail.tmt\","},{"lineNumber":135,"author":{"gitId":"dishenggg"},"content":"                \"TEAMMATES Test Institute 1\").getRegistrationKey();"},{"lineNumber":136,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":137,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":138,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, accountRequestNotUsedKey,"},{"lineNumber":139,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":140,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.IS_CREATING_ACCOUNT, \"true\","},{"lineNumber":141,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":142,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":143,"author":{"gitId":"dishenggg"},"content":"        getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":144,"author":{"gitId":"dishenggg"},"content":"        result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":145,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":146,"author":{"gitId":"dishenggg"},"content":"        output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":147,"author":{"gitId":"dishenggg"},"content":"        assertFalse(output.getHasJoined());"},{"lineNumber":148,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":149,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Normal case: account request already used, instructor has joined course\");"},{"lineNumber":150,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":151,"author":{"gitId":"dishenggg"},"content":"        String accountRequestUsedKey \u003d"},{"lineNumber":152,"author":{"gitId":"dishenggg"},"content":"                logic.getAccountRequest(\"instr1@teammates.tmt\", \"TEAMMATES Test Institute 1\").getRegistrationKey();"},{"lineNumber":153,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":154,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":155,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, accountRequestUsedKey,"},{"lineNumber":156,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":157,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.IS_CREATING_ACCOUNT, \"true\","},{"lineNumber":158,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":159,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":160,"author":{"gitId":"dishenggg"},"content":"        getCourseJoinStatusAction \u003d getAction(params);"},{"lineNumber":161,"author":{"gitId":"dishenggg"},"content":"        result \u003d getJsonResult(getCourseJoinStatusAction);"},{"lineNumber":162,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":163,"author":{"gitId":"dishenggg"},"content":"        output \u003d (JoinStatus) result.getOutput();"},{"lineNumber":164,"author":{"gitId":"dishenggg"},"content":"        assertTrue(output.getHasJoined());"},{"lineNumber":165,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":166,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Failure case: account request regkey is not valid\");"},{"lineNumber":167,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":168,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":169,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, \"invalid-registration-key\","},{"lineNumber":170,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":171,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.IS_CREATING_ACCOUNT, \"true\","},{"lineNumber":172,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":173,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":174,"author":{"gitId":"dishenggg"},"content":"        verifyEntityNotFound(params);"},{"lineNumber":175,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":176,"author":{"gitId":"dishenggg"},"content":"        ______TS(\"Failure case: invalid entity type\");"},{"lineNumber":177,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":178,"author":{"gitId":"dishenggg"},"content":"        params \u003d new String[] {"},{"lineNumber":179,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.REGKEY, unregisteredStudentKey,"},{"lineNumber":180,"author":{"gitId":"dishenggg"},"content":"                Const.ParamsNames.ENTITY_TYPE, \"unknown\","},{"lineNumber":181,"author":{"gitId":"dishenggg"},"content":"        };"},{"lineNumber":182,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":183,"author":{"gitId":"dishenggg"},"content":"        verifyHttpParameterFailure(params);"},{"lineNumber":184,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":186,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"dishenggg"},"content":"    @Override"},{"lineNumber":188,"author":{"gitId":"dishenggg"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":189,"author":{"gitId":"dishenggg"},"content":"        verifyAnyLoggedInUserCanAccess();"},{"lineNumber":190,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"dishenggg"},"content":"}"}],"authorContributionMap":{"domoberzin":1,"dishenggg":190}},{"path":"src/it/java/teammates/it/ui/webapi/GetFeedbackSessionSubmittedGiverSetActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import com.google.common.collect.Sets;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.FeedbackSessionSubmittedGiverSet;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.GetFeedbackSessionSubmittedGiverSetAction;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link GetFeedbackSessionSubmittedGiverSetAction}."},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"public class GetFeedbackSessionSubmittedGiverSetActionIT extends BaseActionIT\u003cGetFeedbackSessionSubmittedGiverSetAction\u003e {"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"    protected String getActionUri() {"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"        return Const.ResourceURIs.SESSION_SUBMITTED_GIVER_SET;"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"    protected String getRequestMethod() {"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"        return GET;"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"    protected void testExecute() {"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":"        Instructor instructor1OfCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"        String instructorId \u003d instructor1OfCourse1.getGoogleId();"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        FeedbackSession fsa \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        loginAsInstructor(instructorId);"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Not enough parameters\");"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Typical case\");"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, fsa.getName(),"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"        GetFeedbackSessionSubmittedGiverSetAction pageAction \u003d getAction(submissionParams);"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"        JsonResult result \u003d getJsonResult(pageAction);"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        FeedbackSessionSubmittedGiverSet output \u003d (FeedbackSessionSubmittedGiverSet) result.getOutput();"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":"        assertEquals(Sets.newHashSet(\"student1@teammates.tmt\", \"student2@teammates.tmt\","},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"                \"student3@teammates.tmt\"), output.getGiverIdentifiers());"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":"        FeedbackSession fsa \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, fsa.getName(),"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":"        verifyOnlyInstructorsOfTheSameCourseCanAccess(course, submissionParams);"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":78}},{"path":"src/it/java/teammates/it/ui/webapi/GetInstructorsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorsData;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.ui.request.Intent;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.GetInstructorsAction;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link GetInstructorsAction}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class GetInstructorsActionIT extends BaseActionIT\u003cGetInstructorsAction\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.INSTRUCTORS;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case with FULL_DETAIL\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        GetInstructorsAction action \u003d getAction(params);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonResult jsonResult \u003d getJsonResult(action);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        InstructorsData output \u003d (InstructorsData) jsonResult.getOutput();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cInstructorData\u003e instructors \u003d output.getInstructors();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":"        assertEquals(3, instructors.size());"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case with no intent\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, null,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        action \u003d getAction(params);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        jsonResult \u003d getJsonResult(action);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        output \u003d (InstructorsData) jsonResult.getOutput();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        instructors \u003d output.getInstructors();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"        assertEquals(3, instructors.size());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (InstructorData instructorData : instructors) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            assertNull(instructorData.getGoogleId());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            assertNull(instructorData.getJoinState());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            assertNull(instructorData.getIsDisplayedToStudents());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            assertNull(instructorData.getRole());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ______TS(\"Unknown intent\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, \"Unknown\","},{"lineNumber":87,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure(params);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Student student \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        ______TS(\"Course not found, logged in as instructor, intent FULL_DETAIL\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, \"does-not-exist-id\","},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        verifyEntityNotFoundAcl(params);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ______TS(\"Course not found, logged in as student, intent undefined\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        loginAsStudent(student.getGoogleId());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, \"does-not-exist-id\","},{"lineNumber":113,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        verifyEntityNotFoundAcl(params);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        ______TS(\"Unknown login entity, intent FULL_DETAIL\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        loginAsUnregistered(\"unregistered\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        verifyCannotAccess(params);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        ______TS(\"Unknown login entity, intent undefined\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        verifyCannotAccess(params);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        ______TS(\"Unknown intent, logged in as instructor\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, \"Unknown\","},{"lineNumber":140,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailureAcl(params);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        ______TS(\"Intent FULL_DETAIL, should authenticate as instructor\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, instructor.getCourseId(),"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        verifyOnlyInstructorsOfTheSameCourseCanAccess(instructor.getCourse(), params);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        ______TS(\"Intent undefined, should authenticate as student, access own course\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        loginAsStudent(student.getGoogleId());"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, student.getCourseId(),"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        verifyCanAccess(params);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        ______TS(\"Intent undefined, should authenticate as student, access other course\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Student otherStudent \u003d typicalBundle.students.get(\"student1InCourse2\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertNotEquals(otherStudent.getCourse(), student.getCourse());"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, otherStudent.getCourseId(),"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        verifyCannotAccess(params);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":2,"-":171}},{"path":"src/it/java/teammates/it/ui/webapi/GetSessionResponseStatsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.FeedbackSessionStatsData;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.GetSessionResponseStatsAction;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link GetSessionResponseStatsAction}."},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"public class GetSessionResponseStatsActionIT extends BaseActionIT\u003cGetSessionResponseStatsAction\u003e {"},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"    String getActionUri() {"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"        return Const.ResourceURIs.SESSION_STATS;"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"    String getRequestMethod() {"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        return GET;"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"    protected void testExecute() {"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"typical: instructor accesses feedback stats of his/her course\");"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        FeedbackSession accessibleFs \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFs.getName(),"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFs.getCourse().getId(),"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"        GetSessionResponseStatsAction a \u003d getAction(submissionParams);"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        JsonResult r \u003d getJsonResult(a);"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"        FeedbackSessionStatsData output \u003d (FeedbackSessionStatsData) r.getOutput();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(8, output.getExpectedTotal());"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"        assertEquals(3, output.getSubmittedTotal());"},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"fail: instructor accesses stats of non-existent feedback session\");"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"        String nonexistentFeedbackSession \u003d \"nonexistentFeedbackSession\";"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, nonexistentFeedbackSession,"},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFs.getCourse().getId(),"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        verifyEntityNotFound(submissionParams);"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"accessible for admin\");"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        verifyAccessibleForAdmin();"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"accessible for authenticated instructor\");"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"        Course course1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"        FeedbackSession accessibleFs \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFs.getName(),"},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFs.getCourse().getId(),"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":"        };"},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"        verifyOnlyInstructorsOfTheSameCourseCanAccess(course1, submissionParams);"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":85,"-":1}},{"path":"src/it/java/teammates/it/ui/webapi/GetSessionResultsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.Test;"},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":"import teammates.ui.output.SessionResultsData;"},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":"import teammates.ui.request.Intent;"},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"import teammates.ui.webapi.GetSessionResultsAction;"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":" * SUT: {@link GetSessionResultsAction}."},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":"public class GetSessionResultsActionIT extends BaseActionIT\u003cGetSessionResultsAction\u003e {"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"    protected String getActionUri() {"},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"        return Const.ResourceURIs.RESULT;"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"    protected String getRequestMethod() {"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"        return GET;"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"    @BeforeMethod"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        super.setUp();"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"        logoutUser();"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"        HibernateUtil.clearSession();"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"    protected void testExecute() {"},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Typical: Instructor accesses results of their course\");"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":"        FeedbackSession accessibleFeedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFeedbackSession.getName(),"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.name(),"},{"lineNumber":62,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":64,"author":{"gitId":"xenosf"},"content":"        GetSessionResultsAction a \u003d getAction(submissionParams);"},{"lineNumber":65,"author":{"gitId":"xenosf"},"content":"        JsonResult r \u003d getJsonResult(a);"},{"lineNumber":66,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":67,"author":{"gitId":"xenosf"},"content":"        SessionResultsData output \u003d (SessionResultsData) r.getOutput();"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":"        SessionResultsData expectedResults \u003d SessionResultsData.initForInstructor("},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":"                logic.getSessionResultsForCourse(accessibleFeedbackSession,"},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"                        accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"                        instructor.getEmail(),"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"                        null, null, FeedbackResultFetchType.BOTH));"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"        assertTrue(isSessionResultsDataEqual(expectedResults, output));"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Typical: Instructor accesses results of their course with breakdown\");"},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"        Set\u003cSection\u003e sections \u003d new HashSet\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"        typicalBundle.feedbackResponses.values().forEach(resp -\u003e {"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":"            sections.add(resp.getGiverSection());"},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"            sections.add(resp.getRecipientSection());"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResultFetchType fetchType : FeedbackResultFetchType.values()) {"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":"            for (Section section : sections) {"},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"                submissionParams \u003d new String[] {"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"                        Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFeedbackSession.getName(),"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"                        Const.ParamsNames.COURSE_ID, accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"                        Const.ParamsNames.INTENT, Intent.FULL_DETAIL.name(),"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":"                        Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION, section.getName(),"},{"lineNumber":92,"author":{"gitId":"xenosf"},"content":"                        Const.ParamsNames.FEEDBACK_RESULTS_SECTION_BY_GIVER_RECEIVER, fetchType.name(),"},{"lineNumber":93,"author":{"gitId":"xenosf"},"content":"                };"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"                a \u003d getAction(submissionParams);"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":"                r \u003d getJsonResult(a);"},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"                output \u003d (SessionResultsData) r.getOutput();"},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":"                expectedResults \u003d SessionResultsData.initForInstructor("},{"lineNumber":101,"author":{"gitId":"xenosf"},"content":"                        logic.getSessionResultsForCourse(accessibleFeedbackSession,"},{"lineNumber":102,"author":{"gitId":"xenosf"},"content":"                                accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":103,"author":{"gitId":"xenosf"},"content":"                                instructor.getEmail(),"},{"lineNumber":104,"author":{"gitId":"xenosf"},"content":"                                null, section.getName(), fetchType));"},{"lineNumber":105,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":106,"author":{"gitId":"xenosf"},"content":"                assertTrue(isSessionResultsDataEqual(expectedResults, output));"},{"lineNumber":107,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":110,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Typical: Instructor previews session results as student\");"},{"lineNumber":111,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":112,"author":{"gitId":"xenosf"},"content":"        Student student \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":113,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":114,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":115,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFeedbackSession.getName(),"},{"lineNumber":116,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":117,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.name(),"},{"lineNumber":118,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.PREVIEWAS, student.getEmail(),"},{"lineNumber":119,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":120,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":121,"author":{"gitId":"xenosf"},"content":"        a \u003d getAction(submissionParams);"},{"lineNumber":122,"author":{"gitId":"xenosf"},"content":"        r \u003d getJsonResult(a);"},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        output \u003d (SessionResultsData) r.getOutput();"},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":"        expectedResults \u003d SessionResultsData.initForStudent("},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"                logic.getSessionResultsForUser(accessibleFeedbackSession,"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"                        accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"                        student.getEmail(),"},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"                        false, null, true),"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"                student);"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"        assertTrue(isSessionResultsDataEqual(expectedResults, output));"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Typical: Student accesses results of their course\");"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":"        loginAsStudent(student.getGoogleId());"},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, accessibleFeedbackSession.getName(),"},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.name(),"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":143,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":"        a \u003d getAction(submissionParams);"},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":"        r \u003d getJsonResult(a);"},{"lineNumber":146,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":147,"author":{"gitId":"xenosf"},"content":"        output \u003d (SessionResultsData) r.getOutput();"},{"lineNumber":148,"author":{"gitId":"xenosf"},"content":"        expectedResults \u003d SessionResultsData.initForStudent("},{"lineNumber":149,"author":{"gitId":"xenosf"},"content":"                logic.getSessionResultsForUser(accessibleFeedbackSession,"},{"lineNumber":150,"author":{"gitId":"xenosf"},"content":"                        accessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":"                        student.getEmail(),"},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":"                        false, null, false),"},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":"                student);"},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":"        assertTrue(isSessionResultsDataEqual(expectedResults, output));"},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams;"},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"        FeedbackSession publishedFeedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"        FeedbackSession inaccessibleFeedbackSession \u003d typicalBundle.feedbackSessions.get("},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":"                \"unpublishedSession1InTypicalCourse\");"},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Inaccessible for authenticated instructor when unpublished\");"},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, inaccessibleFeedbackSession.getName(),"},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, inaccessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_RESULT.name(),"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"        verifyCannotAccess(submissionParams);"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Inaccessible for authenticated student when unpublished\");"},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, inaccessibleFeedbackSession.getName(),"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, inaccessibleFeedbackSession.getCourse().getId(),"},{"lineNumber":178,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.name(),"},{"lineNumber":179,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":180,"author":{"gitId":"xenosf"},"content":"        Student student1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":181,"author":{"gitId":"xenosf"},"content":"        loginAsStudent(student1InCourse1.getGoogleId());"},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"        verifyCannotAccess(submissionParams);"},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Accessible for authenticated instructor when published\");"},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, publishedFeedbackSession.getName(),"},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_RESULT.name(),"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"        verifyAccessibleForInstructorsOfTheSameCourse(course, submissionParams);"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"        verifyInaccessibleForInstructorsOfOtherCourses(course, submissionParams);"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Accessible for authenticated student when published\");"},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, publishedFeedbackSession.getName(),"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.name(),"},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"        verifyAccessibleForStudentsOfTheSameCourse(course, submissionParams);"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":"        verifyInaccessibleForStudentsOfOtherCourse(course, submissionParams);"},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Invalid intent\");"},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, publishedFeedbackSession.getName(),"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, publishedFeedbackSession.getCourse().getId(),"},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.INSTRUCTOR_SUBMISSION.name(),"},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"        verifyHttpParameterFailure(submissionParams);"},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, publishedFeedbackSession.getName(),"},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, publishedFeedbackSession.getCourse().getId(),"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.name(),"},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"        verifyHttpParameterFailure(submissionParams);"},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"    private boolean isSessionResultsDataEqual(SessionResultsData self, SessionResultsData other) {"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"        List\u003cSessionResultsData.QuestionOutput\u003e thisQuestions \u003d self.getQuestions();"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"        List\u003cSessionResultsData.QuestionOutput\u003e otherQuestions \u003d other.getQuestions();"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":"        if (thisQuestions.size() !\u003d otherQuestions.size()) {"},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":"            return false;"},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":"        for (int i \u003d 0; i \u003c thisQuestions.size(); i++) {"},{"lineNumber":224,"author":{"gitId":"xenosf"},"content":"            SessionResultsData.QuestionOutput thisQuestion \u003d thisQuestions.get(i);"},{"lineNumber":225,"author":{"gitId":"xenosf"},"content":"            SessionResultsData.QuestionOutput otherQuestion \u003d otherQuestions.get(i);"},{"lineNumber":226,"author":{"gitId":"xenosf"},"content":"            if (!isQuestionOutputEqual(thisQuestion, otherQuestion)) {"},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"                return false;"},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":"        return true;"},{"lineNumber":231,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":233,"author":{"gitId":"xenosf"},"content":"    private boolean isQuestionOutputEqual(SessionResultsData.QuestionOutput self,"},{"lineNumber":234,"author":{"gitId":"xenosf"},"content":"                                          SessionResultsData.QuestionOutput other) {"},{"lineNumber":235,"author":{"gitId":"xenosf"},"content":"        if (!JsonUtils.toJson(self.getFeedbackQuestion()).equals(JsonUtils.toJson(other.getFeedbackQuestion()))"},{"lineNumber":236,"author":{"gitId":"xenosf"},"content":"                || !self.getQuestionStatistics().equals(other.getQuestionStatistics())"},{"lineNumber":237,"author":{"gitId":"xenosf"},"content":"                || self.getHasResponseButNotVisibleForPreview() !\u003d other.getHasResponseButNotVisibleForPreview()"},{"lineNumber":238,"author":{"gitId":"xenosf"},"content":"                || self.getHasCommentNotVisibleForPreview() !\u003d other.getHasCommentNotVisibleForPreview()) {"},{"lineNumber":239,"author":{"gitId":"xenosf"},"content":"            return false;"},{"lineNumber":240,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":"        List\u003cSessionResultsData.ResponseOutput\u003e thisResponses;"},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":"        List\u003cSessionResultsData.ResponseOutput\u003e otherResponses;"},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"        thisResponses \u003d self.getAllResponses();"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"        otherResponses \u003d other.getAllResponses();"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"        if (thisResponses.size() !\u003d otherResponses.size()) {"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":"            return false;"},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":"        for (int j \u003d 0; j \u003c thisResponses.size(); j++) {"},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":"            if (!isResponseOutputEqual(thisResponses.get(j), otherResponses.get(j))) {"},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":"                return false;"},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":"        return true;"},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"    private boolean isResponseOutputEqual(SessionResultsData.ResponseOutput self,"},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"                                          SessionResultsData.ResponseOutput other) {"},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"        return self.getGiver().equals(other.getGiver())"},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getGiverTeam().equals(other.getGiverTeam())"},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getGiverSection().equals(other.getGiverSection())"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getRecipient().equals(other.getRecipient())"},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getRecipientTeam().equals(other.getRecipientTeam())"},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getRecipientSection().equals(other.getRecipientSection())"},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 self.getResponseDetails().getJsonString().equals(other.getResponseDetails().getJsonString());"},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_withoutCorrectAuthInfoAccessStudentResult_shouldFail() throws Exception {"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"        Course typicalCourse1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, typicalCourse1.getId(),"},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSession.getName(),"},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.toString(),"},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":"        verifyInaccessibleForUnregisteredUsers(submissionParams);"},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_studentAccessOwnCourseSessionResult_shouldPass() throws Exception {"},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":"        Student student1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        Course typicalCourse1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, typicalCourse1.getId(),"},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSession.getName(),"},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.toString(),"},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"        loginAsStudent(student1InCourse1.getGoogleId());"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"        verifyCanAccess(submissionParams);"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_studentAccessUnpublishedSessionStudentResult_shouldFail() {"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"        Student student1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"        Course typicalCourse \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"        FeedbackSession unpublishedFeedbackSession \u003d typicalBundle.feedbackSessions.get(\"session2InTypicalCourse\");"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, typicalCourse.getId(),"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, unpublishedFeedbackSession.getName(),"},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.toString(),"},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":"        loginAsStudent(student1InCourse1.getGoogleId());"},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"        verifyCannotAccess(submissionParams);"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_accessStudentSessionResultWithMasqueradeMode_shouldPass() throws Exception {"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":"        Student student1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":"        Course typicalCourse1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":316,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":317,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":318,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, typicalCourse1.getId(),"},{"lineNumber":319,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSession.getName(),"},{"lineNumber":320,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.toString(),"},{"lineNumber":321,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":322,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":323,"author":{"gitId":"xenosf"},"content":"        loginAsAdmin();"},{"lineNumber":324,"author":{"gitId":"xenosf"},"content":"        verifyCanMasquerade(student1InCourse1.getGoogleId(), submissionParams);"},{"lineNumber":325,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":327,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":328,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_studentAccessOtherCourseSessionResult_shouldFail() {"},{"lineNumber":329,"author":{"gitId":"xenosf"},"content":"        Student studentInOtherCourse \u003d typicalBundle.students.get(\"student2InCourse1\");"},{"lineNumber":330,"author":{"gitId":"xenosf"},"content":"        Course otherCourse \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":331,"author":{"gitId":"xenosf"},"content":"        Course course \u003d typicalBundle.courses.get(\"course3\");"},{"lineNumber":332,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d typicalBundle.feedbackSessions.get(\"ongoingSession1InCourse3\");"},{"lineNumber":333,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":334,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSession.getName(),"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.STUDENT_RESULT.toString(),"},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":339,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":340,"author":{"gitId":"xenosf"},"content":"        loginAsStudent(studentInOtherCourse.getGoogleId());"},{"lineNumber":341,"author":{"gitId":"xenosf"},"content":"        verifyCannotAccess(submissionParams);"},{"lineNumber":342,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":343,"author":{"gitId":"xenosf"},"content":"        // Malicious api call using course Id of the student to bypass the check"},{"lineNumber":344,"author":{"gitId":"xenosf"},"content":"        submissionParams[1] \u003d otherCourse.getId();"},{"lineNumber":345,"author":{"gitId":"xenosf"},"content":"        verifyEntityNotFoundAcl(submissionParams);"},{"lineNumber":346,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":348,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":349,"author":{"gitId":"xenosf"},"content":"    public void testAccessControl_instructorAccessHisCourseFullDetail_shouldPass() throws Exception {"},{"lineNumber":350,"author":{"gitId":"xenosf"},"content":"        Course typicalCourse1 \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":351,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d typicalBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":352,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":353,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":354,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.COURSE_ID, typicalCourse1.getId(),"},{"lineNumber":355,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSession.getName(),"},{"lineNumber":356,"author":{"gitId":"xenosf"},"content":"                Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString(),"},{"lineNumber":357,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":358,"author":{"gitId":"xenosf"},"content":"        verifyOnlyInstructorsOfTheSameCourseCanAccess(typicalCourse1, submissionParams);"},{"lineNumber":359,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":361,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":361}},{"path":"src/it/java/teammates/it/ui/webapi/GetStudentsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentsData;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.GetStudentsAction;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * SUT: {@link GetStudentsAction}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class GetStudentsActionIT extends BaseActionIT\u003cGetStudentsAction\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        super.setUp();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.STUDENTS;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Student student \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case with only course id, logged in as instructor\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        GetStudentsAction getStudentsAction \u003d getAction(params);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        JsonResult jsonResult \u003d getJsonResult(getStudentsAction);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StudentsData response \u003d (StudentsData) jsonResult.getOutput();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cStudentData\u003e students \u003d response.getStudents();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"marquestye"},"content":"        assertEquals(5, students.size());"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        StudentData firstStudentInStudents \u003d students.get(0);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertNull(firstStudentInStudents.getGoogleId());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNull(firstStudentInStudents.getKey());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(student.getName(), firstStudentInStudents.getName());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(student.getCourseId(), firstStudentInStudents.getCourseId());"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        logoutUser();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        loginAsStudent(student.getGoogleId());"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Success Case with course id and team name, logged in as student\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                Const.ParamsNames.TEAM_NAME, student.getTeamName(),"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        getStudentsAction \u003d getAction(params);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        jsonResult \u003d getJsonResult(getStudentsAction);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        response \u003d (StudentsData) jsonResult.getOutput();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        students \u003d response.getStudents();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Student expectedOtherTeamMember \u003d typicalBundle.students.get(\"student2InCourse1\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":"        assertEquals(4, students.size());"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        StudentData actualOtherTeamMember \u003d students.get(1);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertNull(actualOtherTeamMember.getGoogleId());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertNull(actualOtherTeamMember.getKey());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expectedOtherTeamMember.getName(), actualOtherTeamMember.getName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedOtherTeamMember.getCourseId(), actualOtherTeamMember.getCourseId());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Student student \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ______TS(\"Only instructors with correct privilege can access\");"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        verifyCanAccess(params);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ______TS(\"Student to view team members\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                Const.ParamsNames.TEAM_NAME, student.getTeamName(),"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        loginAsStudent(student.getGoogleId());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        verifyCanAccess(params);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ______TS(\"Unknown login entity\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        loginAsUnregistered(\"does-not-exist-id\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        verifyCannotAccess(params);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Const.ParamsNames.COURSE_ID, course.getId(),"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                Const.ParamsNames.TEAM_NAME, student.getTeamName(),"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        verifyCannotAccess(params);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":1,"dishenggg":1,"-":137}},{"path":"src/it/java/teammates/it/ui/webapi/InstructorSearchIndexingWorkerActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mingyuanc"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":5,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":13,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":14,"author":{"gitId":"mingyuanc"},"content":"import teammates.test.TestProperties;"},{"lineNumber":15,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.webapi.InstructorSearchIndexingWorkerAction;"},{"lineNumber":16,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":17,"author":{"gitId":"mingyuanc"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"mingyuanc"},"content":" * SUT: {@link InstructorSearchIndexingWorkerAction}."},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":" */"},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":"public class InstructorSearchIndexingWorkerActionIT extends BaseActionIT\u003cInstructorSearchIndexingWorkerAction\u003e {"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":"    @BeforeMethod"},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":"        super.setUp();"},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":"    protected String getActionUri() {"},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"        return Const.TaskQueue.INSTRUCTOR_SEARCH_INDEXING_WORKER_URL;"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":"    protected String getRequestMethod() {"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"        return POST;"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":"    public void testExecute() throws Exception {"},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":43,"author":{"gitId":"mingyuanc"},"content":"            return;"},{"lineNumber":44,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":46,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructor1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":47,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":48,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"instructor not yet indexed should not be searchable\");"},{"lineNumber":49,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":50,"author":{"gitId":"mingyuanc"},"content":"        List\u003cInstructor\u003e instructorList \u003d logic.searchInstructorsInWholeSystem(instructor1.getEmail());"},{"lineNumber":51,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(0, instructorList.size());"},{"lineNumber":52,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":53,"author":{"gitId":"mingyuanc"},"content":"        ______TS(\"instructor indexed should be searchable\");"},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.COURSE_ID, instructor1.getCourseId(),"},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, instructor1.getEmail(),"},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":"        };"},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":60,"author":{"gitId":"mingyuanc"},"content":"        InstructorSearchIndexingWorkerAction action \u003d getAction(submissionParams);"},{"lineNumber":61,"author":{"gitId":"mingyuanc"},"content":"        getJsonResult(action);"},{"lineNumber":62,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":63,"author":{"gitId":"mingyuanc"},"content":"        instructorList \u003d logic.searchInstructorsInWholeSystem(instructor1.getEmail());"},{"lineNumber":64,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(1, instructorList.size());"},{"lineNumber":65,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(instructor1.getId(), instructorList.get(0).getId());"},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":"    protected void testAccessControl() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructor1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.COURSE_ID, instructor1.getCourseId(),"},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, instructor1.getEmail(),"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":"        };"},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":"        verifyOnlyAdminCanAccess(course, submissionParams);"},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"}"}],"authorContributionMap":{"mingyuanc":79}},{"path":"src/it/java/teammates/it/ui/webapi/JoinCourseActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuanxi1"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":3,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":6,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":8,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":9,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":12,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.webapi.InvalidOperationException;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.webapi.JoinCourseAction;"},{"lineNumber":14,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":15,"author":{"gitId":"yuanxi1"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"yuanxi1"},"content":" * SUT: {@link JoinCourseAction}."},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":" */"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":"public class JoinCourseActionIT extends BaseActionIT\u003cJoinCourseAction\u003e {"},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":20,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yuanxi1"},"content":"    @BeforeMethod"},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"        super.setUp();"},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":25,"author":{"gitId":"yuanxi1"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":26,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":28,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuanxi1"},"content":"    String getActionUri() {"},{"lineNumber":30,"author":{"gitId":"yuanxi1"},"content":"        return Const.ResourceURIs.JOIN;"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":33,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"yuanxi1"},"content":"    String getRequestMethod() {"},{"lineNumber":35,"author":{"gitId":"yuanxi1"},"content":"        return PUT;"},{"lineNumber":36,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"yuanxi1"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":"        Student studentYetToJoinCourse \u003d typicalBundle.students.get(\"student2YetToJoinCourse4\");"},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"        String student1RegKey \u003d"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"                getRegKeyForStudent(studentYetToJoinCourse.getCourseId(), studentYetToJoinCourse.getEmail());"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        String loggedInGoogleIdStu \u003d \"AccLogicT.student.id\";"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructorYetToJoinCourse \u003d typicalBundle.instructors.get(\"instructor2YetToJoinCourse4\");"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"        String instructor1RegKey \u003d"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"                getRegKeyForInstructor(instructorYetToJoinCourse.getCourseId(), instructorYetToJoinCourse.getEmail());"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"        String loggedInGoogleIdInst \u003d \"AccLogicT.instr.id\";"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: student joins course\");"},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":"        loginAsUnregistered(loggedInGoogleIdStu);"},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":57,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, student1RegKey,"},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":59,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":"        JoinCourseAction joinCourseAction \u003d getAction(submissionParams);"},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":"        getJsonResult(joinCourseAction);"},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":64,"author":{"gitId":"yuanxi1"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":65,"author":{"gitId":"yuanxi1"},"content":"        EmailWrapper email \u003d mockEmailSender.getEmailsSent().get(0);"},{"lineNumber":66,"author":{"gitId":"yuanxi1"},"content":"        assertEquals("},{"lineNumber":67,"author":{"gitId":"yuanxi1"},"content":"                String.format(EmailType.USER_COURSE_REGISTER.getSubject(), \"Typical Course 4\", \"course-4\"),"},{"lineNumber":68,"author":{"gitId":"yuanxi1"},"content":"                email.getSubject());"},{"lineNumber":69,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: student is already registered\");"},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":72,"author":{"gitId":"yuanxi1"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, student1RegKey,"},{"lineNumber":74,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(submissionParams);"},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Student has already joined course\", ioe.getMessage());"},{"lineNumber":79,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":80,"author":{"gitId":"yuanxi1"},"content":"        verifyNoEmailsSent();"},{"lineNumber":81,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":82,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"success: instructor joins course\");"},{"lineNumber":83,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":84,"author":{"gitId":"yuanxi1"},"content":"        loginAsUnregistered(loggedInGoogleIdInst);"},{"lineNumber":85,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":86,"author":{"gitId":"yuanxi1"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":87,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, instructor1RegKey,"},{"lineNumber":88,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":89,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":90,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":91,"author":{"gitId":"yuanxi1"},"content":"        joinCourseAction \u003d getAction(submissionParams);"},{"lineNumber":92,"author":{"gitId":"yuanxi1"},"content":"        getJsonResult(joinCourseAction);"},{"lineNumber":93,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":94,"author":{"gitId":"yuanxi1"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":95,"author":{"gitId":"yuanxi1"},"content":"        email \u003d mockEmailSender.getEmailsSent().get(0);"},{"lineNumber":96,"author":{"gitId":"yuanxi1"},"content":"        assertEquals("},{"lineNumber":97,"author":{"gitId":"yuanxi1"},"content":"                String.format(EmailType.USER_COURSE_REGISTER.getSubject(), \"Typical Course 4\", \"course-4\"),"},{"lineNumber":98,"author":{"gitId":"yuanxi1"},"content":"                email.getSubject());"},{"lineNumber":99,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":100,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: instructor is already registered\");"},{"lineNumber":101,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":103,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, instructor1RegKey,"},{"lineNumber":104,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":105,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":106,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":"        ioe \u003d verifyInvalidOperation(submissionParams);"},{"lineNumber":108,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Instructor has already joined course\", ioe.getMessage());"},{"lineNumber":109,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":110,"author":{"gitId":"yuanxi1"},"content":"        verifyNoEmailsSent();"},{"lineNumber":111,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":112,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: invalid regkey\");"},{"lineNumber":113,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":114,"author":{"gitId":"yuanxi1"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":115,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, \"ANXKJZNZXNJCZXKJDNKSDA\","},{"lineNumber":116,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.STUDENT,"},{"lineNumber":117,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":118,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":119,"author":{"gitId":"yuanxi1"},"content":"        verifyEntityNotFound(submissionParams);"},{"lineNumber":120,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":121,"author":{"gitId":"yuanxi1"},"content":"        verifyNoEmailsSent();"},{"lineNumber":122,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":123,"author":{"gitId":"yuanxi1"},"content":"        ______TS(\"failure: invalid entity type\");"},{"lineNumber":124,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":125,"author":{"gitId":"yuanxi1"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":126,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.REGKEY, student1RegKey,"},{"lineNumber":127,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, \"invalid_entity_type\","},{"lineNumber":128,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":129,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":130,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure(submissionParams);"},{"lineNumber":131,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":132,"author":{"gitId":"yuanxi1"},"content":"        verifyNoEmailsSent();"},{"lineNumber":133,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":135,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"yuanxi1"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":138,"author":{"gitId":"yuanxi1"},"content":"        verifyAnyLoggedInUserCanAccess();"},{"lineNumber":139,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":141,"author":{"gitId":"yuanxi1"},"content":"    private String getRegKeyForStudent(String courseId, String email) {"},{"lineNumber":142,"author":{"gitId":"yuanxi1"},"content":"        return logic.getStudentForEmail(courseId, email).getRegKey();"},{"lineNumber":143,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":145,"author":{"gitId":"yuanxi1"},"content":"    private String getRegKeyForInstructor(String courseId, String email) {"},{"lineNumber":146,"author":{"gitId":"yuanxi1"},"content":"        return logic.getInstructorForEmail(courseId, email).getRegKey();"},{"lineNumber":147,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"yuanxi1"},"content":"}"}],"authorContributionMap":{"yuanxi1":148}},{"path":"src/it/java/teammates/it/ui/webapi/SearchAccountRequestsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domoberzin"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":5,"author":{"gitId":"domoberzin"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":12,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"import teammates.test.TestProperties;"},{"lineNumber":14,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.AccountRequestsData;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.ui.webapi.SearchAccountRequestsAction;"},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":" * SUT: {@link SearchAccountRequestsAction}."},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":" */"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"public class SearchAccountRequestsActionIT extends BaseActionIT\u003cSearchAccountRequestsAction\u003e {"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"    protected void testAccessControl() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        verifyOnlyAdminCanAccess(course);"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"    @BeforeMethod"},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"        super.setUp();"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"        putDocuments(typicalBundle);"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"    protected String getActionUri() {"},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        return Const.ResourceURIs.SEARCH_ACCOUNT_REQUESTS;"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"    protected String getRequestMethod() {"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        return GET;"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"    protected void testExecute() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"            ______TS(\"Search with SearchService disabled\");"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"            String[] submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, \"randomString123\" };"},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"            SearchAccountRequestsAction action \u003d getAction(submissionParams);"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"            JsonResult result \u003d getJsonResult(action, HttpStatus.SC_NOT_IMPLEMENTED);"},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":"            MessageOutput output \u003d (MessageOutput) result.getOutput();"},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"            assertEquals(\"Full-text search is not available.\", output.getMessage());"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":"        AccountRequest accountRequest \u003d typicalBundle.accountRequests.get(\"instructor1\");"},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"        loginAsAdmin();"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Search via Email\");"},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        String[] submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, accountRequest.getEmail() };"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":"        SearchAccountRequestsAction action \u003d getAction(submissionParams);"},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        JsonResult result \u003d getJsonResult(action, 200);"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        AccountRequestsData response \u003d (AccountRequestsData) result.getOutput();"},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().stream()"},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"                .filter(i -\u003e i.getName().equals(accountRequest.getName()))"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"                .findAny()"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"                .isPresent());"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().get(0).getRegistrationKey() !\u003d null);"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Search via Institute\");"},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"        submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, accountRequest.getInstitute() };"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"        action \u003d getAction(submissionParams);"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"        result \u003d getJsonResult(action, 200);"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":"        response \u003d (AccountRequestsData) result.getOutput();"},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().stream()"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":"                .filter(i -\u003e i.getName().equals(accountRequest.getName()))"},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"                .findAny()"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"                .isPresent());"},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().get(0).getRegistrationKey() !\u003d null);"},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Search via Name\");"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"        submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, accountRequest.getName() };"},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"        action \u003d getAction(submissionParams);"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"        result \u003d getJsonResult(action, 200);"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"        response \u003d (AccountRequestsData) result.getOutput();"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().stream()"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"                .filter(i -\u003e i.getName().equals(accountRequest.getName()))"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"                .findAny()"},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"                .isPresent());"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().get(0).getRegistrationKey() !\u003d null);"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Search Duplicate Name\");"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":"        submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, \"Instructor\" };"},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"        action \u003d getAction(submissionParams);"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":"        result \u003d getJsonResult(action, 200);"},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"        response \u003d (AccountRequestsData) result.getOutput();"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"        assertTrue(response.getAccountRequests().get(0).getRegistrationKey() !\u003d null);"},{"lineNumber":105,"author":{"gitId":"domoberzin"},"content":"        assertEquals(11, response.getAccountRequests().size());"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"        ______TS(\"Search result with 0 matches\");"},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":"        submissionParams \u003d new String[] { Const.ParamsNames.SEARCH_KEY, \"randomString123\" };"},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"        action \u003d getAction(submissionParams);"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":"        result \u003d getJsonResult(action, 200);"},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":"        response \u003d (AccountRequestsData) result.getOutput();"},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"        assertEquals(0, response.getAccountRequests().size());"},{"lineNumber":114,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"}"}],"authorContributionMap":{"domoberzin":115}},{"path":"src/it/java/teammates/it/ui/webapi/SearchStudentsActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuanxi1"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":3,"author":{"gitId":"yuanxi1"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":5,"author":{"gitId":"yuanxi1"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":7,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":9,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":12,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":14,"author":{"gitId":"yuanxi1"},"content":"import teammates.test.TestProperties;"},{"lineNumber":15,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":16,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.output.StudentsData;"},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":"import teammates.ui.webapi.SearchStudentsAction;"},{"lineNumber":19,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":20,"author":{"gitId":"yuanxi1"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"yuanxi1"},"content":" * SUT: {@link SearchStudentsAction}."},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"public class SearchStudentsActionIT extends BaseActionIT\u003cSearchStudentsAction\u003e {"},{"lineNumber":24,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":25,"author":{"gitId":"yuanxi1"},"content":"    private final Student student1InCourse1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":26,"author":{"gitId":"yuanxi1"},"content":"    private final Instructor instructor1OfCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":27,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":28,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuanxi1"},"content":"    @BeforeMethod"},{"lineNumber":30,"author":{"gitId":"yuanxi1"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"        super.setUp();"},{"lineNumber":32,"author":{"gitId":"yuanxi1"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":33,"author":{"gitId":"yuanxi1"},"content":"        putDocuments(typicalBundle);"},{"lineNumber":34,"author":{"gitId":"yuanxi1"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":35,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":37,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"    protected String getActionUri() {"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":"        return Const.ResourceURIs.SEARCH_STUDENTS;"},{"lineNumber":40,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"    protected String getRequestMethod() {"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        return GET;"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"    protected void testExecute() {"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"        // See test cases below."},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"    public void execute_invalidParameters_parameterFailure() {"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":57,"author":{"gitId":"yuanxi1"},"content":"        String[] notEnoughParams \u003d new String[] {"},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"dummy\","},{"lineNumber":59,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure(notEnoughParams);"},{"lineNumber":61,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":62,"author":{"gitId":"yuanxi1"},"content":"        String[] invalidEntityParams \u003d new String[] {"},{"lineNumber":63,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"dummy\","},{"lineNumber":64,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, \"dummy\","},{"lineNumber":65,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":66,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure(invalidEntityParams);"},{"lineNumber":67,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":68,"author":{"gitId":"yuanxi1"},"content":"        String[] adminParams \u003d new String[] {"},{"lineNumber":69,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"dummy\","},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":72,"author":{"gitId":"yuanxi1"},"content":"        String[] instructorParams \u003d new String[] {"},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"dummy\","},{"lineNumber":74,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure(instructorParams);"},{"lineNumber":79,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":80,"author":{"gitId":"yuanxi1"},"content":"        loginAsInstructor(instructor1OfCourse1.getGoogleId());"},{"lineNumber":81,"author":{"gitId":"yuanxi1"},"content":"        verifyHttpParameterFailure(adminParams);"},{"lineNumber":82,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":84,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"yuanxi1"},"content":"    public void execute_adminSearchName_success() {"},{"lineNumber":86,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":87,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":88,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":90,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":91,"author":{"gitId":"yuanxi1"},"content":"        String[] accNameParams \u003d new String[] {"},{"lineNumber":92,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, student1InCourse1.getName(),"},{"lineNumber":93,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":94,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":95,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(accNameParams);"},{"lineNumber":96,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a);"},{"lineNumber":97,"author":{"gitId":"yuanxi1"},"content":"        StudentsData response \u003d (StudentsData) result.getOutput();"},{"lineNumber":98,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":99,"author":{"gitId":"marquestye"},"content":"        assertEquals(11, response.getStudents().size());"},{"lineNumber":100,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"yuanxi1"},"content":"    public void execute_adminSearchCourseId_success() {"},{"lineNumber":104,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":105,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":106,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":108,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":109,"author":{"gitId":"yuanxi1"},"content":"        String[] accCourseIdParams \u003d new String[] {"},{"lineNumber":110,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, student1InCourse1.getCourseId(),"},{"lineNumber":111,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":112,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":113,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(accCourseIdParams);"},{"lineNumber":114,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a);"},{"lineNumber":115,"author":{"gitId":"yuanxi1"},"content":"        StudentsData response \u003d (StudentsData) result.getOutput();"},{"lineNumber":116,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":117,"author":{"gitId":"marquestye"},"content":"        assertEquals(11, response.getStudents().size());"},{"lineNumber":118,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":120,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"yuanxi1"},"content":"    public void execute_adminSearchEmail_success() {"},{"lineNumber":122,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":123,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":124,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":126,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":127,"author":{"gitId":"yuanxi1"},"content":"        String[] emailParams \u003d new String[] {"},{"lineNumber":128,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, student1InCourse1.getEmail(),"},{"lineNumber":129,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":130,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":131,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":132,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(emailParams);"},{"lineNumber":133,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a);"},{"lineNumber":134,"author":{"gitId":"yuanxi1"},"content":"        StudentsData response \u003d (StudentsData) result.getOutput();"},{"lineNumber":135,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertEquals(4, response.getStudents().size());"},{"lineNumber":137,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":139,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"yuanxi1"},"content":"    public void execute_adminSearchNoMatch_noMatch() {"},{"lineNumber":141,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":142,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":143,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":145,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":146,"author":{"gitId":"yuanxi1"},"content":"        String[] accNameParams \u003d new String[] {"},{"lineNumber":147,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"minuscoronavirus\","},{"lineNumber":148,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":149,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":150,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(accNameParams);"},{"lineNumber":151,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a);"},{"lineNumber":152,"author":{"gitId":"yuanxi1"},"content":"        StudentsData response \u003d (StudentsData) result.getOutput();"},{"lineNumber":153,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":154,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(0, response.getStudents().size());"},{"lineNumber":155,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":157,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"yuanxi1"},"content":"    public void execute_instructorSearchGoogleId_matchOnlyStudentsInCourse() {"},{"lineNumber":159,"author":{"gitId":"yuanxi1"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":160,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":161,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":163,"author":{"gitId":"yuanxi1"},"content":"        loginAsInstructor(instructor1OfCourse1.getGoogleId());"},{"lineNumber":164,"author":{"gitId":"yuanxi1"},"content":"        String[] googleIdParams \u003d new String[] {"},{"lineNumber":165,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"student1\","},{"lineNumber":166,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":167,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":168,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":169,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(googleIdParams);"},{"lineNumber":170,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a);"},{"lineNumber":171,"author":{"gitId":"yuanxi1"},"content":"        StudentsData response \u003d (StudentsData) result.getOutput();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(3, response.getStudents().size());"},{"lineNumber":173,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":175,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"yuanxi1"},"content":"    public void execute_noSearchService_shouldReturn501() {"},{"lineNumber":177,"author":{"gitId":"yuanxi1"},"content":"        if (TestProperties.isSearchServiceActive()) {"},{"lineNumber":178,"author":{"gitId":"yuanxi1"},"content":"            return;"},{"lineNumber":179,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":181,"author":{"gitId":"yuanxi1"},"content":"        loginAsInstructor(instructor1OfCourse1.getGoogleId());"},{"lineNumber":182,"author":{"gitId":"yuanxi1"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":183,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"anything\","},{"lineNumber":184,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR,"},{"lineNumber":185,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":186,"author":{"gitId":"yuanxi1"},"content":"        SearchStudentsAction a \u003d getAction(params);"},{"lineNumber":187,"author":{"gitId":"yuanxi1"},"content":"        JsonResult result \u003d getJsonResult(a, HttpStatus.SC_NOT_IMPLEMENTED);"},{"lineNumber":188,"author":{"gitId":"yuanxi1"},"content":"        MessageOutput output \u003d (MessageOutput) result.getOutput();"},{"lineNumber":189,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":190,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Full-text search is not available.\", output.getMessage());"},{"lineNumber":191,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":192,"author":{"gitId":"yuanxi1"},"content":"        loginAsAdmin();"},{"lineNumber":193,"author":{"gitId":"yuanxi1"},"content":"        params \u003d new String[] {"},{"lineNumber":194,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.SEARCH_KEY, \"anything\","},{"lineNumber":195,"author":{"gitId":"yuanxi1"},"content":"                Const.ParamsNames.ENTITY_TYPE, Const.EntityType.ADMIN,"},{"lineNumber":196,"author":{"gitId":"yuanxi1"},"content":"        };"},{"lineNumber":197,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":198,"author":{"gitId":"yuanxi1"},"content":"        a \u003d getAction(params);"},{"lineNumber":199,"author":{"gitId":"yuanxi1"},"content":"        result \u003d getJsonResult(a, HttpStatus.SC_NOT_IMPLEMENTED);"},{"lineNumber":200,"author":{"gitId":"yuanxi1"},"content":"        output \u003d (MessageOutput) result.getOutput();"},{"lineNumber":201,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":202,"author":{"gitId":"yuanxi1"},"content":"        assertEquals(\"Full-text search is not available.\", output.getMessage());"},{"lineNumber":203,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":205,"author":{"gitId":"yuanxi1"},"content":"    @Override"},{"lineNumber":206,"author":{"gitId":"yuanxi1"},"content":"    @Test"},{"lineNumber":207,"author":{"gitId":"yuanxi1"},"content":"    protected void testAccessControl() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":208,"author":{"gitId":"yuanxi1"},"content":"        verifyAccessibleForAdmin();"},{"lineNumber":209,"author":{"gitId":"yuanxi1"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":210,"author":{"gitId":"yuanxi1"},"content":"        verifyOnlyInstructorsCanAccess(course);"},{"lineNumber":211,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"yuanxi1"},"content":"}"}],"authorContributionMap":{"yuanxi1":208,"marquestye":2,"-":2}},{"path":"src/it/java/teammates/it/ui/webapi/StudentSearchIndexingWorkerActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const.ParamsNames;"},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const.TaskQueue;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlsearch.SearchManagerFactory;"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"import teammates.test.TestProperties;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"import teammates.ui.webapi.StudentSearchIndexingWorkerAction;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":" * SUT: {@link StudentSearchIndexingWorkerAction}."},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"public class StudentSearchIndexingWorkerActionIT extends BaseActionIT\u003cStudentSearchIndexingWorkerAction\u003e {"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"    private final Student student \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":"    @BeforeMethod"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"        super.setUp();"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"        SearchManagerFactory.getStudentSearchManager().resetCollections();"},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"    protected String getActionUri() {"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"        return TaskQueue.STUDENT_SEARCH_INDEXING_WORKER_URL;"},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"    protected String getRequestMethod() {"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        return POST;"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"        // See test cases below"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"    protected void testExecute_studentNotYetIndexed_shouldNotBeSearchable() throws Exception {"},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"        List\u003cStudent\u003e studentList \u003d logic.searchStudentsInWholeSystem(student.getEmail());"},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, studentList.size());"},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"    protected void testExecute_studentIndexed_shouldBeSearchable() throws Exception {"},{"lineNumber":62,"author":{"gitId":"xenosf"},"content":"        if (!TestProperties.isSearchServiceActive()) {"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":"            return;"},{"lineNumber":64,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":66,"author":{"gitId":"xenosf"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":67,"author":{"gitId":"xenosf"},"content":"                ParamsNames.COURSE_ID, student.getCourseId(),"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":"                ParamsNames.STUDENT_EMAIL, student.getEmail(),"},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":"        };"},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"        StudentSearchIndexingWorkerAction action \u003d getAction(submissionParams);"},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"        getJsonResult(action);"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"        List\u003cStudent\u003e studentList \u003d logic.searchStudentsInWholeSystem(student.getEmail());"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"        assertEquals(1, studentList.size());"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":"        assertEquals(student.getName(), studentList.get(0).getName());"},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":"    protected void testAccessControl() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"        verifyOnlyAdminCanAccess(course);"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":85}},{"path":"src/it/java/teammates/it/ui/webapi/UpdateStudentActionIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marquestye"},"content":"package teammates.it.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":3,"author":{"gitId":"marquestye"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"marquestye"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":6,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":7,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":9,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":11,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":12,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":13,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":14,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.StringHelperExtension;"},{"lineNumber":15,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":16,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":17,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":18,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":19,"author":{"gitId":"marquestye"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":20,"author":{"gitId":"marquestye"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":21,"author":{"gitId":"marquestye"},"content":"import teammates.ui.request.StudentUpdateRequest;"},{"lineNumber":22,"author":{"gitId":"marquestye"},"content":"import teammates.ui.webapi.EntityNotFoundException;"},{"lineNumber":23,"author":{"gitId":"marquestye"},"content":"import teammates.ui.webapi.InvalidOperationException;"},{"lineNumber":24,"author":{"gitId":"marquestye"},"content":"import teammates.ui.webapi.JsonResult;"},{"lineNumber":25,"author":{"gitId":"marquestye"},"content":"import teammates.ui.webapi.UpdateStudentAction;"},{"lineNumber":26,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":27,"author":{"gitId":"marquestye"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"marquestye"},"content":" * SUT: {@link UpdateStudentAction}."},{"lineNumber":29,"author":{"gitId":"marquestye"},"content":" */"},{"lineNumber":30,"author":{"gitId":"marquestye"},"content":"public class UpdateStudentActionIT extends BaseActionIT\u003cUpdateStudentAction\u003e {"},{"lineNumber":31,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":32,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"marquestye"},"content":"    @BeforeMethod"},{"lineNumber":34,"author":{"gitId":"marquestye"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":35,"author":{"gitId":"marquestye"},"content":"        super.setUp();"},{"lineNumber":36,"author":{"gitId":"marquestye"},"content":"        persistDataBundle(typicalBundle);"},{"lineNumber":37,"author":{"gitId":"marquestye"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":38,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":40,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"marquestye"},"content":"    protected String getActionUri() {"},{"lineNumber":42,"author":{"gitId":"marquestye"},"content":"        return Const.ResourceURIs.STUDENT;"},{"lineNumber":43,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":45,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":"    protected String getRequestMethod() {"},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"        return PUT;"},{"lineNumber":48,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":50,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"marquestye"},"content":"    public void testExecute() throws Exception {"},{"lineNumber":53,"author":{"gitId":"marquestye"},"content":"        assert true;"},{"lineNumber":54,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":56,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"marquestye"},"content":"    public void testExecute_invalidParameters_failure() throws Exception {"},{"lineNumber":58,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":59,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":60,"author":{"gitId":"marquestye"},"content":"        ______TS(\"no parameters\");"},{"lineNumber":61,"author":{"gitId":"marquestye"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":62,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":63,"author":{"gitId":"marquestye"},"content":"        ______TS(\"null student email\");"},{"lineNumber":64,"author":{"gitId":"marquestye"},"content":"        String[] invalidParams \u003d new String[] {"},{"lineNumber":65,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":66,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":67,"author":{"gitId":"marquestye"},"content":"        verifyHttpParameterFailure(invalidParams);"},{"lineNumber":68,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":69,"author":{"gitId":"marquestye"},"content":"        ______TS(\"null course id\");"},{"lineNumber":70,"author":{"gitId":"marquestye"},"content":"        invalidParams \u003d new String[] {"},{"lineNumber":71,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":72,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":73,"author":{"gitId":"marquestye"},"content":"        verifyHttpParameterFailure(invalidParams);"},{"lineNumber":74,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":75,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"marquestye"},"content":"    public void testExecute_typicalCase_success() throws Exception {"},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"        String originalEmail \u003d student1.getEmail();"},{"lineNumber":82,"author":{"gitId":"marquestye"},"content":"        Team originalTeam \u003d student1.getTeam();"},{"lineNumber":83,"author":{"gitId":"marquestye"},"content":"        String originalComments \u003d student1.getComments();"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":85,"author":{"gitId":"marquestye"},"content":"        String newStudentEmail \u003d \"newemail@gmail.tmt\";"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":"        String newStudentTeam \u003d \"new student\u0027s team\";"},{"lineNumber":87,"author":{"gitId":"marquestye"},"content":"        String newStudentComments \u003d \"this is new comment after editing\";"},{"lineNumber":88,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), newStudentEmail,"},{"lineNumber":89,"author":{"gitId":"marquestye"},"content":"                newStudentTeam, student1.getSectionName(), newStudentComments, true);"},{"lineNumber":90,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":91,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":92,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":93,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":94,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":95,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":96,"author":{"gitId":"marquestye"},"content":"        UpdateStudentAction updateAction \u003d getAction(updateRequest, submissionParams);"},{"lineNumber":97,"author":{"gitId":"marquestye"},"content":"        JsonResult actionOutput \u003d getJsonResult(updateAction);"},{"lineNumber":98,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":99,"author":{"gitId":"marquestye"},"content":"        MessageOutput msgOutput \u003d (MessageOutput) actionOutput.getOutput();"},{"lineNumber":100,"author":{"gitId":"marquestye"},"content":"        assertEquals(\"Student has been updated and email sent\", msgOutput.getMessage());"},{"lineNumber":101,"author":{"gitId":"marquestye"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":102,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":103,"author":{"gitId":"marquestye"},"content":"        Student updatedStudent \u003d logic.getStudent(student1.getId());"},{"lineNumber":104,"author":{"gitId":"marquestye"},"content":"        assertEquals(updatedStudent.getEmail(), newStudentEmail);"},{"lineNumber":105,"author":{"gitId":"marquestye"},"content":"        assertEquals(updatedStudent.getTeamName(), newStudentTeam);"},{"lineNumber":106,"author":{"gitId":"marquestye"},"content":"        assertEquals(updatedStudent.getComments(), newStudentComments);"},{"lineNumber":107,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":108,"author":{"gitId":"marquestye"},"content":"        EmailWrapper email \u003d getEmailsSent().get(0);"},{"lineNumber":109,"author":{"gitId":"marquestye"},"content":"        String courseName \u003d logic.getCourse(student1.getCourseId()).getName();"},{"lineNumber":110,"author":{"gitId":"marquestye"},"content":"        assertEquals(String.format(EmailType.STUDENT_EMAIL_CHANGED.getSubject(), courseName,"},{"lineNumber":111,"author":{"gitId":"marquestye"},"content":"                student1.getCourseId()), email.getSubject());"},{"lineNumber":112,"author":{"gitId":"marquestye"},"content":"        assertEquals(newStudentEmail, email.getRecipient());"},{"lineNumber":113,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":114,"author":{"gitId":"marquestye"},"content":"        verifySpecifiedTasksAdded(Const.TaskQueue.SEARCH_INDEXING_QUEUE_NAME, 1);"},{"lineNumber":115,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":116,"author":{"gitId":"marquestye"},"content":"        resetStudent(student1.getId(), originalEmail, originalTeam, originalComments);"},{"lineNumber":117,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":119,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"marquestye"},"content":"    public void testExecute_studentDetailsWithWhitespace_success() throws Exception {"},{"lineNumber":121,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":122,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":123,"author":{"gitId":"marquestye"},"content":"        String originalEmail \u003d student1.getEmail();"},{"lineNumber":124,"author":{"gitId":"marquestye"},"content":"        Team originalTeam \u003d student1.getTeam();"},{"lineNumber":125,"author":{"gitId":"marquestye"},"content":"        String originalComments \u003d student1.getComments();"},{"lineNumber":126,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":127,"author":{"gitId":"marquestye"},"content":"        String newStudentEmailToBeTrimmed \u003d \"  student1@teammates.tmt   \"; // after trim, this is equal to originalEmail"},{"lineNumber":128,"author":{"gitId":"marquestye"},"content":"        String newStudentTeamToBeTrimmed \u003d \"  New team   \";"},{"lineNumber":129,"author":{"gitId":"marquestye"},"content":"        String newStudentCommentsToBeTrimmed \u003d \"  this is new comment after editing   \";"},{"lineNumber":130,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), newStudentEmailToBeTrimmed,"},{"lineNumber":131,"author":{"gitId":"marquestye"},"content":"                newStudentTeamToBeTrimmed, student1.getSectionName(), newStudentCommentsToBeTrimmed, true);"},{"lineNumber":132,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":133,"author":{"gitId":"marquestye"},"content":"        String[] submissionParamsToBeTrimmed \u003d new String[] {"},{"lineNumber":134,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":135,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":136,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":137,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":138,"author":{"gitId":"marquestye"},"content":"        UpdateStudentAction actionToBeTrimmed \u003d getAction(updateRequest, submissionParamsToBeTrimmed);"},{"lineNumber":139,"author":{"gitId":"marquestye"},"content":"        JsonResult outputToBeTrimmed \u003d getJsonResult(actionToBeTrimmed);"},{"lineNumber":140,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":141,"author":{"gitId":"marquestye"},"content":"        MessageOutput msgTrimmedOutput \u003d (MessageOutput) outputToBeTrimmed.getOutput();"},{"lineNumber":142,"author":{"gitId":"marquestye"},"content":"        assertEquals(\"Student has been updated\", msgTrimmedOutput.getMessage());"},{"lineNumber":143,"author":{"gitId":"marquestye"},"content":"        verifyNoEmailsSent();"},{"lineNumber":144,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":145,"author":{"gitId":"marquestye"},"content":"        resetStudent(student1.getId(), originalEmail, originalTeam, originalComments);"},{"lineNumber":146,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":148,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"marquestye"},"content":"    public void testExecute_emailHasTooManyCharacters_failure() throws Exception {"},{"lineNumber":150,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":151,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":152,"author":{"gitId":"marquestye"},"content":"        String invalidStudentEmail \u003d StringHelperExtension.generateStringOfLength(255 - \"@gmail.tmt\".length())"},{"lineNumber":153,"author":{"gitId":"marquestye"},"content":"                + \"@gmail.tmt\";"},{"lineNumber":154,"author":{"gitId":"marquestye"},"content":"        assertEquals(FieldValidator.EMAIL_MAX_LENGTH + 1, invalidStudentEmail.length());"},{"lineNumber":155,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":156,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), invalidStudentEmail,"},{"lineNumber":157,"author":{"gitId":"marquestye"},"content":"                student1.getTeamName(), student1.getSectionName(), student1.getComments(), false);"},{"lineNumber":158,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":159,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":160,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":161,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":162,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":163,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":164,"author":{"gitId":"marquestye"},"content":"        InvalidHttpRequestBodyException ihrbe \u003d verifyHttpRequestBodyFailure(updateRequest, submissionParams);"},{"lineNumber":165,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":166,"author":{"gitId":"marquestye"},"content":"        assertEquals(getPopulatedErrorMessage(FieldValidator.EMAIL_ERROR_MESSAGE, invalidStudentEmail,"},{"lineNumber":167,"author":{"gitId":"marquestye"},"content":"                FieldValidator.EMAIL_FIELD_NAME, FieldValidator.REASON_TOO_LONG,"},{"lineNumber":168,"author":{"gitId":"marquestye"},"content":"                FieldValidator.EMAIL_MAX_LENGTH),"},{"lineNumber":169,"author":{"gitId":"marquestye"},"content":"                ihrbe.getMessage());"},{"lineNumber":170,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":171,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":172,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":174,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"marquestye"},"content":"    public void testExecute_emailTakenByOthers_failure() {"},{"lineNumber":176,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":177,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":178,"author":{"gitId":"marquestye"},"content":"        Student student2 \u003d typicalBundle.students.get(\"student2InCourse1\");"},{"lineNumber":179,"author":{"gitId":"marquestye"},"content":"        String takenStudentEmail \u003d student2.getEmail();"},{"lineNumber":180,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":181,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), takenStudentEmail,"},{"lineNumber":182,"author":{"gitId":"marquestye"},"content":"                student1.getTeamName(), student1.getSectionName(), student1.getComments(), false);"},{"lineNumber":183,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":184,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":185,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":186,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":187,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":188,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":189,"author":{"gitId":"marquestye"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(updateRequest, submissionParams);"},{"lineNumber":190,"author":{"gitId":"marquestye"},"content":"        assertEquals(\"Trying to update to an email that is already in use\", ioe.getMessage());"},{"lineNumber":191,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":192,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":193,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":195,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"marquestye"},"content":"    public void testExecute_studentDoesNotExist_failure() {"},{"lineNumber":197,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":198,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":199,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), student1.getEmail(),"},{"lineNumber":200,"author":{"gitId":"marquestye"},"content":"                student1.getTeamName(), student1.getSectionName(), student1.getComments(), false);"},{"lineNumber":201,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":202,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":203,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":204,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, \"notinuseemail@gmail.tmt\","},{"lineNumber":205,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":206,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":207,"author":{"gitId":"marquestye"},"content":"        EntityNotFoundException enfe \u003d verifyEntityNotFound(updateRequest, submissionParams);"},{"lineNumber":208,"author":{"gitId":"marquestye"},"content":"        assertEquals(\"The student you tried to edit does not exist. \""},{"lineNumber":209,"author":{"gitId":"marquestye"},"content":"                + \"If the student was created during the last few minutes, \""},{"lineNumber":210,"author":{"gitId":"marquestye"},"content":"                + \"try again in a few more minutes as the student may still be being saved.\","},{"lineNumber":211,"author":{"gitId":"marquestye"},"content":"                enfe.getMessage());"},{"lineNumber":212,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":213,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":214,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":216,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"marquestye"},"content":"    public void testExecute_studentTeamExistsInAnotherSection_failure() throws Exception {"},{"lineNumber":218,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":219,"author":{"gitId":"marquestye"},"content":"        Student student4 \u003d typicalBundle.students.get(\"student4InCourse1\");"},{"lineNumber":220,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":221,"author":{"gitId":"marquestye"},"content":"        assertNotEquals(student1.getSection(), student4.getSection());"},{"lineNumber":222,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":223,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d new StudentUpdateRequest(student1.getName(), student1.getEmail(),"},{"lineNumber":224,"author":{"gitId":"marquestye"},"content":"                student4.getTeamName(), student1.getSectionName(), student1.getComments(), true);"},{"lineNumber":225,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":226,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":227,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":228,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":229,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":230,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":231,"author":{"gitId":"marquestye"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(updateRequest, submissionParams);"},{"lineNumber":232,"author":{"gitId":"marquestye"},"content":"        String expectedErrorMessage \u003d String.format(\"Team \\\"%s\\\" is detected in both Section \\\"%s\\\" and Section \\\"%s\\\".\""},{"lineNumber":233,"author":{"gitId":"marquestye"},"content":"                + \" Please use different team names in different sections.\", student4.getTeamName(),"},{"lineNumber":234,"author":{"gitId":"marquestye"},"content":"                student1.getSectionName(), student4.getSectionName());"},{"lineNumber":235,"author":{"gitId":"marquestye"},"content":"        assertEquals(expectedErrorMessage, ioe.getMessage());"},{"lineNumber":236,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":237,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":238,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":240,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":241,"author":{"gitId":"marquestye"},"content":"    public void testExecute_sectionFull_failure() throws Exception {"},{"lineNumber":242,"author":{"gitId":"marquestye"},"content":"        Student studentToJoinMaxSection \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":243,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":244,"author":{"gitId":"marquestye"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":245,"author":{"gitId":"marquestye"},"content":"        String courseId \u003d studentToJoinMaxSection.getCourseId();"},{"lineNumber":246,"author":{"gitId":"marquestye"},"content":"        String sectionInMaxCapacity \u003d \"sectionInMaxCapacity\";"},{"lineNumber":247,"author":{"gitId":"marquestye"},"content":"        Section section \u003d logic.getSectionOrCreate(courseId, sectionInMaxCapacity);"},{"lineNumber":248,"author":{"gitId":"marquestye"},"content":"        Team team \u003d logic.getTeamOrCreate(section, \"randomTeamName\");"},{"lineNumber":249,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":250,"author":{"gitId":"marquestye"},"content":"        for (int i \u003d 0; i \u003c Const.SECTION_SIZE_LIMIT; i++) {"},{"lineNumber":251,"author":{"gitId":"marquestye"},"content":"            Student addedStudent \u003d new Student(course, \"Name \" + i, i + \"email@test.com\", \"cmt\" + i, team);"},{"lineNumber":252,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":253,"author":{"gitId":"marquestye"},"content":"            logic.createStudent(addedStudent);"},{"lineNumber":254,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":256,"author":{"gitId":"marquestye"},"content":"        List\u003cStudent\u003e studentList \u003d logic.getStudentsForCourse(courseId);"},{"lineNumber":257,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":258,"author":{"gitId":"marquestye"},"content":"        assertEquals(Const.SECTION_SIZE_LIMIT,"},{"lineNumber":259,"author":{"gitId":"marquestye"},"content":"                studentList.stream().filter(student -\u003e student.getSectionName().equals(sectionInMaxCapacity)).count());"},{"lineNumber":260,"author":{"gitId":"marquestye"},"content":"        assertEquals(courseId, studentToJoinMaxSection.getCourseId());"},{"lineNumber":261,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":262,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d"},{"lineNumber":263,"author":{"gitId":"marquestye"},"content":"                new StudentUpdateRequest(studentToJoinMaxSection.getName(), studentToJoinMaxSection.getEmail(),"},{"lineNumber":264,"author":{"gitId":"marquestye"},"content":"                        \"randomTeamName\", sectionInMaxCapacity,"},{"lineNumber":265,"author":{"gitId":"marquestye"},"content":"                        studentToJoinMaxSection.getComments(), true);"},{"lineNumber":266,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":267,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":268,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, studentToJoinMaxSection.getCourseId(),"},{"lineNumber":269,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, studentToJoinMaxSection.getEmail(),"},{"lineNumber":270,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":271,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":272,"author":{"gitId":"marquestye"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(updateRequest, submissionParams);"},{"lineNumber":273,"author":{"gitId":"marquestye"},"content":"        String expectedErrorMessage \u003d String.format(\"You are trying enroll more than %d students in section \\\"%s\\\". \""},{"lineNumber":274,"author":{"gitId":"marquestye"},"content":"                + \"To avoid performance problems, please do not enroll more than %d students in a single section.\","},{"lineNumber":275,"author":{"gitId":"marquestye"},"content":"                Const.SECTION_SIZE_LIMIT, sectionInMaxCapacity, Const.SECTION_SIZE_LIMIT);"},{"lineNumber":276,"author":{"gitId":"marquestye"},"content":"        assertEquals(expectedErrorMessage, ioe.getMessage());"},{"lineNumber":277,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":278,"author":{"gitId":"marquestye"},"content":"        verifyNoTasksAdded();"},{"lineNumber":279,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":281,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":282,"author":{"gitId":"marquestye"},"content":"    public void testExecute_renameEmptySectionNameToDefault_success() {"},{"lineNumber":283,"author":{"gitId":"marquestye"},"content":"        Student student4 \u003d typicalBundle.students.get(\"student4InCourse1\");"},{"lineNumber":284,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":285,"author":{"gitId":"marquestye"},"content":"        Team originalTeam \u003d student4.getTeam();"},{"lineNumber":286,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":287,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest emptySectionUpdateRequest \u003d new StudentUpdateRequest(student4.getName(), student4.getEmail(),"},{"lineNumber":288,"author":{"gitId":"marquestye"},"content":"                student4.getTeamName(), \"\", student4.getComments(), true);"},{"lineNumber":289,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":290,"author":{"gitId":"marquestye"},"content":"        String[] emptySectionSubmissionParams \u003d new String[] {"},{"lineNumber":291,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student4.getCourseId(),"},{"lineNumber":292,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student4.getEmail(),"},{"lineNumber":293,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":294,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":295,"author":{"gitId":"marquestye"},"content":"        UpdateStudentAction updateEmptySectionAction \u003d getAction(emptySectionUpdateRequest, emptySectionSubmissionParams);"},{"lineNumber":296,"author":{"gitId":"marquestye"},"content":"        JsonResult emptySectionActionOutput \u003d getJsonResult(updateEmptySectionAction);"},{"lineNumber":297,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":298,"author":{"gitId":"marquestye"},"content":"        MessageOutput emptySectionMsgOutput \u003d (MessageOutput) emptySectionActionOutput.getOutput();"},{"lineNumber":299,"author":{"gitId":"marquestye"},"content":"        assertEquals(\"Student has been updated\", emptySectionMsgOutput.getMessage());"},{"lineNumber":300,"author":{"gitId":"marquestye"},"content":"        verifyNoEmailsSent();"},{"lineNumber":301,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":302,"author":{"gitId":"marquestye"},"content":"        // verify student in database"},{"lineNumber":303,"author":{"gitId":"marquestye"},"content":"        Student actualStudent \u003d"},{"lineNumber":304,"author":{"gitId":"marquestye"},"content":"                logic.getStudentForEmail(student4.getCourseId(), student4.getEmail());"},{"lineNumber":305,"author":{"gitId":"marquestye"},"content":"        assertEquals(student4.getCourse(), actualStudent.getCourse());"},{"lineNumber":306,"author":{"gitId":"marquestye"},"content":"        assertEquals(student4.getName(), actualStudent.getName());"},{"lineNumber":307,"author":{"gitId":"marquestye"},"content":"        assertEquals(student4.getEmail(), actualStudent.getEmail());"},{"lineNumber":308,"author":{"gitId":"marquestye"},"content":"        assertEquals(student4.getTeam(), actualStudent.getTeam());"},{"lineNumber":309,"author":{"gitId":"marquestye"},"content":"        assertEquals(Const.DEFAULT_SECTION, actualStudent.getSectionName());"},{"lineNumber":310,"author":{"gitId":"marquestye"},"content":"        assertEquals(student4.getComments(), actualStudent.getComments());"},{"lineNumber":311,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":312,"author":{"gitId":"marquestye"},"content":"        resetStudent(student4.getId(), student4.getEmail(), originalTeam, student4.getComments());"},{"lineNumber":313,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":315,"author":{"gitId":"marquestye"},"content":"    @Override"},{"lineNumber":316,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":317,"author":{"gitId":"marquestye"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":318,"author":{"gitId":"marquestye"},"content":"        Student student1 \u003d typicalBundle.students.get(\"student1InCourse1\");"},{"lineNumber":319,"author":{"gitId":"marquestye"},"content":"        Course course \u003d typicalBundle.courses.get(\"course1\");"},{"lineNumber":320,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":321,"author":{"gitId":"marquestye"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":322,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.COURSE_ID, student1.getCourseId(),"},{"lineNumber":323,"author":{"gitId":"marquestye"},"content":"                Const.ParamsNames.STUDENT_EMAIL, student1.getEmail(),"},{"lineNumber":324,"author":{"gitId":"marquestye"},"content":"        };"},{"lineNumber":325,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":326,"author":{"gitId":"marquestye"},"content":"        verifyOnlyInstructorsOfTheSameCourseWithCorrectCoursePrivilegeCanAccess("},{"lineNumber":327,"author":{"gitId":"marquestye"},"content":"                course, Const.InstructorPermissions.CAN_MODIFY_STUDENT, submissionParams);"},{"lineNumber":328,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":330,"author":{"gitId":"marquestye"},"content":"    private void resetStudent(UUID studentId, String originalEmail, Team originalTeam, String originalComments) {"},{"lineNumber":331,"author":{"gitId":"marquestye"},"content":"        Student updatedStudent \u003d logic.getStudent(studentId);"},{"lineNumber":332,"author":{"gitId":"marquestye"},"content":"        updatedStudent.setEmail(originalEmail);"},{"lineNumber":333,"author":{"gitId":"marquestye"},"content":"        updatedStudent.setTeam(originalTeam);"},{"lineNumber":334,"author":{"gitId":"marquestye"},"content":"        updatedStudent.setComments(originalComments);"},{"lineNumber":335,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":337,"author":{"gitId":"marquestye"},"content":"}"}],"authorContributionMap":{"marquestye":337}},{"path":"src/main/java/teammates/common/datatransfer/SqlSessionResultsBundle.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.common.datatransfer;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.LinkedHashMap;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":" * Represents detailed results for a feedback session."},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"public class SqlSessionResultsBundle {"},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":"    private final List\u003cFeedbackQuestion\u003e questions;"},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"    private final Set\u003cFeedbackQuestion\u003e questionsNotVisibleForPreviewSet;"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"    private final Set\u003cFeedbackQuestion\u003e questionsWithCommentNotVisibleForPreviewSet;"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e questionResponseMap;"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e questionMissingResponseMap;"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cFeedbackResponse, List\u003cFeedbackResponseComment\u003e\u003e responseCommentsMap;"},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cFeedbackResponse, Boolean\u003e responseGiverVisibilityTable;"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cFeedbackResponse, Boolean\u003e responseRecipientVisibilityTable;"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"    private final Map\u003cLong, Boolean\u003e commentGiverVisibilityTable;"},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"    private final SqlCourseRoster roster;"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"    public SqlSessionResultsBundle(List\u003cFeedbackQuestion\u003e questions,"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"                                Set\u003cFeedbackQuestion\u003e questionsNotVisibleForPreviewSet,"},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"                                Set\u003cFeedbackQuestion\u003e questionsWithCommentNotVisibleForPreviewSet,"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":"                                List\u003cFeedbackResponse\u003e responses,"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"                                List\u003cFeedbackResponse\u003e missingResponses,"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"                                Map\u003cFeedbackResponse, Boolean\u003e responseGiverVisibilityTable,"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"                                Map\u003cFeedbackResponse, Boolean\u003e responseRecipientVisibilityTable,"},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":"                                Map\u003cFeedbackResponse, List\u003cFeedbackResponseComment\u003e\u003e responseCommentsMap,"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"                                Map\u003cLong, Boolean\u003e commentGiverVisibilityTable,"},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"                                SqlCourseRoster roster) {"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        this.questions \u003d questions;"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"        this.questionsNotVisibleForPreviewSet \u003d questionsNotVisibleForPreviewSet;"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":"        this.questionsWithCommentNotVisibleForPreviewSet \u003d questionsWithCommentNotVisibleForPreviewSet;"},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"        this.responseCommentsMap \u003d responseCommentsMap;"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"        this.responseGiverVisibilityTable \u003d responseGiverVisibilityTable;"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"        this.responseRecipientVisibilityTable \u003d responseRecipientVisibilityTable;"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        this.commentGiverVisibilityTable \u003d commentGiverVisibilityTable;"},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"        this.roster \u003d roster;"},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"        this.questionResponseMap \u003d buildQuestionToResponseMap(responses);"},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"        this.questionMissingResponseMap \u003d buildQuestionToResponseMap(missingResponses);"},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":"    private Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e buildQuestionToResponseMap("},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e responses) {"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"        // build question to response map"},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e questionToResponseMap \u003d new LinkedHashMap\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":"            questionToResponseMap.put(question, new ArrayList\u003c\u003e());"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":62,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e responsesForQuestion \u003d questionToResponseMap.get(question);"},{"lineNumber":64,"author":{"gitId":"xenosf"},"content":"            responsesForQuestion.add(response);"},{"lineNumber":65,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"xenosf"},"content":"        return questionToResponseMap;"},{"lineNumber":67,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":"     * Returns true if the giver of a response is visible to the current user."},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"     * Returns false otherwise."},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"    public boolean isResponseGiverVisible(FeedbackResponse response) {"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"        return isResponseParticipantVisible(true, response);"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":"     * Returns true if the recipient of a response is visible to the current user."},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"     * Returns false otherwise."},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":"    public boolean isResponseRecipientVisible(FeedbackResponse response) {"},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"        return isResponseParticipantVisible(false, response);"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":"     * Checks if the giver/recipient for a response is visible/hidden from the current user."},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"    private boolean isResponseParticipantVisible(boolean isGiver, FeedbackResponse response) {"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"        FeedbackParticipantType participantType;"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":92,"author":{"gitId":"xenosf"},"content":"        boolean isVisible;"},{"lineNumber":93,"author":{"gitId":"xenosf"},"content":"        if (isGiver) {"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":"            isVisible \u003d responseGiverVisibilityTable.get(response);"},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"            participantType \u003d question.getGiverType();"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":"            isVisible \u003d responseRecipientVisibilityTable.get(response);"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"            participantType \u003d question.getRecipientType();"},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":"        boolean isTypeNone \u003d participantType \u003d\u003d FeedbackParticipantType.NONE;"},{"lineNumber":101,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":102,"author":{"gitId":"xenosf"},"content":"        return isVisible || isTypeNone;"},{"lineNumber":103,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":105,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"xenosf"},"content":"     * Returns true if the giver of a comment is visible to the current user."},{"lineNumber":107,"author":{"gitId":"xenosf"},"content":"     * Returns false otherwise."},{"lineNumber":108,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"xenosf"},"content":"    public boolean isCommentGiverVisible(FeedbackResponseComment comment) {"},{"lineNumber":110,"author":{"gitId":"xenosf"},"content":"        return commentGiverVisibilityTable.get(comment.getId());"},{"lineNumber":111,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":113,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"xenosf"},"content":"     * Gets the anonymous name for a given name."},{"lineNumber":115,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"xenosf"},"content":"     * \u003cp\u003eThe anonymous name will be deterministic based on {@code name}."},{"lineNumber":117,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"xenosf"},"content":"    public static String getAnonName(FeedbackParticipantType type, String name) {"},{"lineNumber":119,"author":{"gitId":"xenosf"},"content":"        String hashedEncryptedName \u003d getHashOfName(getEncryptedName(name));"},{"lineNumber":120,"author":{"gitId":"xenosf"},"content":"        String participantType \u003d type.toSingularFormString();"},{"lineNumber":121,"author":{"gitId":"xenosf"},"content":"        return String.format("},{"lineNumber":122,"author":{"gitId":"xenosf"},"content":"                Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" %s %s\", participantType, hashedEncryptedName);"},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":"    public Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e getQuestionResponseMap() {"},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"        return questionResponseMap;"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"    public Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e getQuestionMissingResponseMap() {"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"        return questionMissingResponseMap;"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":"    private static String getEncryptedName(String name) {"},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"        return StringHelper.encrypt(name);"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":"    private static String getHashOfName(String name) {"},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"        return Long.toString(Math.abs((long) name.hashCode()));"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackQuestion\u003e getQuestions() {"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"        return questions;"},{"lineNumber":143,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":"    public Map\u003cFeedbackResponse, List\u003cFeedbackResponseComment\u003e\u003e getResponseCommentsMap() {"},{"lineNumber":146,"author":{"gitId":"xenosf"},"content":"        return responseCommentsMap;"},{"lineNumber":147,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":149,"author":{"gitId":"xenosf"},"content":"    public SqlCourseRoster getRoster() {"},{"lineNumber":150,"author":{"gitId":"xenosf"},"content":"        return roster;"},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":"    public Map\u003cFeedbackResponse, Boolean\u003e getResponseGiverVisibilityTable() {"},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":"        return responseGiverVisibilityTable;"},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":"    public Map\u003cFeedbackResponse, Boolean\u003e getResponseRecipientVisibilityTable() {"},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"        return responseRecipientVisibilityTable;"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"    public Map\u003cLong, Boolean\u003e getCommentGiverVisibilityTable() {"},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"        return commentGiverVisibilityTable;"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":"    public Set\u003cFeedbackQuestion\u003e getQuestionsNotVisibleForPreviewSet() {"},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":"        return questionsNotVisibleForPreviewSet;"},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"    public Set\u003cFeedbackQuestion\u003e getQuestionsWithCommentNotVisibleForPreviewSet() {"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"        return questionsWithCommentNotVisibleForPreviewSet;"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":172}},{"path":"src/main/java/teammates/common/datatransfer/attributes/StudentAttributes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.datatransfer.attributes;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.entity.CourseStudent;"},{"lineNumber":14,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The data transfer object for {@link CourseStudent} entities."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public final class StudentAttributes extends EntityAttributes\u003cCourseStudent\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private String email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private String course;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private String googleId;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private String comments;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String team;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String section;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private transient String key;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private transient Instant createdAt;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private transient Instant updatedAt;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private StudentAttributes(String courseId, String email) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.course \u003d courseId;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.googleId \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.section \u003d Const.DEFAULT_SECTION;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.createdAt \u003d Const.TIME_REPRESENTS_DEFAULT_TIMESTAMP;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d Const.TIME_REPRESENTS_DEFAULT_TIMESTAMP;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Gets the {@link StudentAttributes} instance of the given {@link CourseStudent}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static StudentAttributes valueOf(CourseStudent student) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StudentAttributes studentAttributes \u003d new StudentAttributes(student.getCourseId(), student.getEmail());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        studentAttributes.name \u003d student.getName();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (student.getGoogleId() !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            studentAttributes.googleId \u003d student.getGoogleId();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        studentAttributes.team \u003d student.getTeamName();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (student.getSectionName() !\u003d null) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            studentAttributes.section \u003d student.getSectionName();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        studentAttributes.comments \u003d student.getComments();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        studentAttributes.key \u003d student.getRegistrationKey();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (student.getCreatedAt() !\u003d null) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            studentAttributes.createdAt \u003d student.getCreatedAt();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (student.getUpdatedAt() !\u003d null) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            studentAttributes.updatedAt \u003d student.getUpdatedAt();"},{"lineNumber":62,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":64,"author":{"gitId":"marquestye"},"content":"        return studentAttributes;"},{"lineNumber":65,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":67,"author":{"gitId":"marquestye"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"marquestye"},"content":"     * Gets the {@link StudentAttributes} instance of the given {@link Student}."},{"lineNumber":69,"author":{"gitId":"marquestye"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"marquestye"},"content":"    public static StudentAttributes valueOf(Student student) {"},{"lineNumber":71,"author":{"gitId":"marquestye"},"content":"        StudentAttributes studentAttributes \u003d new StudentAttributes(student.getCourseId(), student.getEmail());"},{"lineNumber":72,"author":{"gitId":"marquestye"},"content":"        studentAttributes.name \u003d student.getName();"},{"lineNumber":73,"author":{"gitId":"marquestye"},"content":"        if (student.getGoogleId() !\u003d null) {"},{"lineNumber":74,"author":{"gitId":"marquestye"},"content":"            studentAttributes.googleId \u003d student.getGoogleId();"},{"lineNumber":75,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":"        studentAttributes.team \u003d student.getTeamName();"},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":"        if (student.getSectionName() !\u003d null) {"},{"lineNumber":78,"author":{"gitId":"marquestye"},"content":"            studentAttributes.section \u003d student.getSectionName();"},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":"        studentAttributes.comments \u003d student.getComments();"},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"        // studentAttributes.key \u003d student.getRegistrationKey();"},{"lineNumber":82,"author":{"gitId":"marquestye"},"content":"        if (student.getCreatedAt() !\u003d null) {"},{"lineNumber":83,"author":{"gitId":"marquestye"},"content":"            studentAttributes.createdAt \u003d student.getCreatedAt();"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"marquestye"},"content":"        if (student.getUpdatedAt() !\u003d null) {"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":"            studentAttributes.updatedAt \u003d student.getUpdatedAt();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return studentAttributes;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Return a builder for {@link StudentAttributes}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static Builder builder(String courseId, String email) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Builder(courseId, email);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Gets a deep copy of this object."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public StudentAttributes getCopy() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        StudentAttributes studentAttributes \u003d new StudentAttributes(course, email);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        studentAttributes.name \u003d name;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        studentAttributes.googleId \u003d googleId;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        studentAttributes.team \u003d team;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        studentAttributes.section \u003d section;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        studentAttributes.comments \u003d comments;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        studentAttributes.key \u003d key;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        studentAttributes.createdAt \u003d createdAt;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        studentAttributes.updatedAt \u003d updatedAt;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return studentAttributes;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean isRegistered() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return googleId !\u003d null \u0026\u0026 !googleId.trim().isEmpty();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public String getRegistrationUrl() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return Config.getFrontEndAppUrl(Const.WebPageURIs.JOIN_PAGE)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .withRegistrationKey(key)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .withEntityType(Const.EntityType.STUDENT)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setName(String name) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public String getEmail() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void setEmail(String email) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public String getCourse() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return course;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setCourse(String course) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        this.course \u003d course;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public String getGoogleId() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return googleId;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void setGoogleId(String googleId) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        this.googleId \u003d googleId;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public String getKey() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return key;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void setKey(String key) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        this.key \u003d key;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Format: email%courseId e.g., adam@gmail.com%cs1101."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public String getId() {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return email + \"%\" + course;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public String getSection() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return section;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void setSection(String section) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        this.section \u003d section;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public String getTeam() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return team;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void setTeam(String team) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        this.team \u003d team;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public String getComments() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return comments;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void setComments(String comments) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        this.comments \u003d comments;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            StudentAttributes otherStudent \u003d (StudentAttributes) other;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return Objects.equals(this.course, otherStudent.course)"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.name, otherStudent.name)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.email, otherStudent.email)"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.googleId, otherStudent.googleId)"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.comments, otherStudent.comments)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.team, otherStudent.team)"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(this.section, otherStudent.section);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // id is allowed to be null when the student is not registered"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assert team !\u003d null;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assert comments !\u003d null;"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        if (isRegistered()) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            addNonEmptyError(FieldValidator.getInvalidityInfoForGoogleId(googleId), errors);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForCourseId(course), errors);"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(email), errors);"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTeamName(team), errors);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForSectionName(section), errors);"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForStudentRoleComments(comments), errors);"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(name), errors);"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * Sorts the list of students by the section name, then team name, then name."},{"lineNumber":248,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public static void sortBySectionName(List\u003cStudentAttributes\u003e students) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        students.sort(Comparator.comparing((StudentAttributes student) -\u003e student.section)"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                .thenComparing(student -\u003e student.team)"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                .thenComparing(student -\u003e student.name));"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * Sorts the list of students by the team name, then name."},{"lineNumber":257,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    public static void sortByTeamName(List\u003cStudentAttributes\u003e students) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        students.sort(Comparator.comparing((StudentAttributes student) -\u003e student.team)"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                .thenComparing(student -\u003e student.name));"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    public CourseStudent toEntity() {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        return new CourseStudent(email, name, googleId, comments, course, team, section);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        stringBuilder.append(this.email).append(this.name).append(this.course)"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            .append(this.googleId).append(this.team).append(this.section).append(this.comments);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        return stringBuilder.toString().hashCode();"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        return \"Student:\" + name + \"[\" + email + \"]\";"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    public void sanitizeForSaving() {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        googleId \u003d SanitizationHelper.sanitizeGoogleId(googleId);"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        name \u003d SanitizationHelper.sanitizeName(name);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        comments \u003d SanitizationHelper.sanitizeTextField(comments);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    public Instant getCreatedAt() {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        return createdAt;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"    public void setCreatedAt(Instant createdAt) {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        this.createdAt \u003d createdAt;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":305,"author":{"gitId":"-"},"content":"     * Updates with {@link UpdateOptions}."},{"lineNumber":306,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public void update(UpdateOptions updateOptions) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        updateOptions.newEmailOption.ifPresent(s -\u003e email \u003d s);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        updateOptions.nameOption.ifPresent(s -\u003e name \u003d s);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        updateOptions.commentOption.ifPresent(s -\u003e comments \u003d s);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        updateOptions.googleIdOption.ifPresent(s -\u003e googleId \u003d s);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        updateOptions.teamNameOption.ifPresent(s -\u003e team \u003d s);"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        updateOptions.sectionNameOption.ifPresent(s -\u003e section \u003d s);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":317,"author":{"gitId":"-"},"content":"     * Returns a {@link UpdateOptions.Builder} to build {@link UpdateOptions} for a student."},{"lineNumber":318,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    public static UpdateOptions.Builder updateOptionsBuilder(String courseId, String email) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        return new UpdateOptions.Builder(courseId, email);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":324,"author":{"gitId":"-"},"content":"     * A builder class for {@link StudentAttributes}."},{"lineNumber":325,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    public static class Builder extends BasicBuilder\u003cStudentAttributes, Builder\u003e {"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        private final StudentAttributes studentAttributes;"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"        private Builder(String courseId, String email) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            super(new UpdateOptions(courseId, email));"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            thisBuilder \u003d this;"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"            studentAttributes \u003d new StudentAttributes(courseId, email);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        public StudentAttributes build() {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            studentAttributes.update(updateOptions);"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"            return studentAttributes;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":346,"author":{"gitId":"-"},"content":"     * Helper class to specify the fields to update in {@link StudentAttributes}."},{"lineNumber":347,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    public static class UpdateOptions {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        private String courseId;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        private String email;"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e newEmailOption \u003d UpdateOption.empty();"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e nameOption \u003d UpdateOption.empty();"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e commentOption \u003d UpdateOption.empty();"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e googleIdOption \u003d UpdateOption.empty();"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e teamNameOption \u003d UpdateOption.empty();"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        private UpdateOption\u003cString\u003e sectionNameOption \u003d UpdateOption.empty();"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"        private UpdateOptions(String courseId, String email) {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            assert courseId !\u003d null;"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            assert email !\u003d null;"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"            this.courseId \u003d courseId;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"        public String getCourseId() {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            return courseId;"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"        public String getEmail() {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            return email;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        public String toString() {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"            return \"StudentAttributes.UpdateOptions [\""},{"lineNumber":378,"author":{"gitId":"-"},"content":"                    + \"courseId \u003d \" + courseId"},{"lineNumber":379,"author":{"gitId":"-"},"content":"                    + \", email \u003d \" + email"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                    + \", newEmail \u003d \" + newEmailOption"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                    + \", name \u003d \" + nameOption"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                    + \", comment \u003d \" + commentOption"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                    + \", googleId \u003d \" + googleIdOption"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                    + \", teamName \u003d \" + teamNameOption"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                    + \", sectionName \u003d \" + sectionNameOption"},{"lineNumber":386,"author":{"gitId":"-"},"content":"                    + \"]\";"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":390,"author":{"gitId":"-"},"content":"         * Builder class to build {@link UpdateOptions}."},{"lineNumber":391,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        public static class Builder extends BasicBuilder\u003cUpdateOptions, Builder\u003e {"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"            private Builder(String courseId, String email) {"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                super(new UpdateOptions(courseId, email));"},{"lineNumber":396,"author":{"gitId":"-"},"content":"                thisBuilder \u003d this;"},{"lineNumber":397,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"            public Builder withNewEmail(String email) {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"                assert email !\u003d null;"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"                updateOptions.newEmailOption \u003d UpdateOption.of(email);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                return thisBuilder;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"            @Override"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            public UpdateOptions build() {"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                return updateOptions;"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * Basic builder to build {@link StudentAttributes} related classes."},{"lineNumber":417,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":418,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e type to be built"},{"lineNumber":419,"author":{"gitId":"-"},"content":"     * @param \u003cB\u003e type of the builder"},{"lineNumber":420,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    private abstract static class BasicBuilder\u003cT, B extends BasicBuilder\u003cT, B\u003e\u003e {"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"        UpdateOptions updateOptions;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        B thisBuilder;"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"        BasicBuilder(UpdateOptions updateOptions) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            this.updateOptions \u003d updateOptions;"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"        public B withName(String name) {"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            assert name !\u003d null;"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"            updateOptions.nameOption \u003d UpdateOption.of(name);"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            return thisBuilder;"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"        public B withComment(String comment) {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            assert comment !\u003d null;"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"            updateOptions.commentOption \u003d UpdateOption.of(comment);"},{"lineNumber":441,"author":{"gitId":"-"},"content":"            return thisBuilder;"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"        public B withGoogleId(String googleId) {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            // google id can be set to null"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            updateOptions.googleIdOption \u003d UpdateOption.of(googleId);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"            return thisBuilder;"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"        public B withTeamName(String teamName) {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"            assert teamName !\u003d null;"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"            updateOptions.teamNameOption \u003d UpdateOption.of(teamName);"},{"lineNumber":454,"author":{"gitId":"-"},"content":"            return thisBuilder;"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"        public B withSectionName(String sectionName) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"            assert sectionName !\u003d null;"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"            updateOptions.sectionNameOption \u003d UpdateOption.of(sectionName);"},{"lineNumber":461,"author":{"gitId":"-"},"content":"            return thisBuilder;"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"        public abstract T build();"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":467,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":26,"-":441}},{"path":"src/main/java/teammates/common/datatransfer/questions/FeedbackQuestionDetails.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.datatransfer.questions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SessionResultsBundle;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlSessionResultsBundle;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class holding the details for a specific question type."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * This abstract class is inherited by concrete Feedback*QuestionDetails"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * classes which provides the implementation for the various abstract methods"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * such that pages can render the correct information/forms depending on the"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * question type"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public abstract class FeedbackQuestionDetails {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private FeedbackQuestionType questionType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private String questionText;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    protected FeedbackQuestionDetails(FeedbackQuestionType questionType) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    protected FeedbackQuestionDetails(FeedbackQuestionType questionType, String questionText) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.questionText \u003d questionText;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Get question result statistics as JSON string."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @SuppressWarnings(\"PMD.EmptyMethodInAbstractClassShouldBeAbstract\")"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String getQuestionResultStatisticsJson("},{"lineNumber":37,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, String studentEmail, SessionResultsBundle bundle) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // Statistics are calculated in the front-end as it is dependent on the responses being filtered."},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // The only exception is contribution question, where there is only one statistics for the entire question."},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // It is also necessary to calculate contribution question statistics here"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // to be displayed in student result page as students are not supposed to be able to see the exact responses."},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"    * Get question result statistics as JSON string."},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"    */"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"    @SuppressWarnings(\"PMD.EmptyMethodInAbstractClassShouldBeAbstract\")"},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"    public String getQuestionResultStatisticsJson("},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question, String studentEmail, SqlSessionResultsBundle bundle) {"},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"        // Statistics are calculated in the front-end as it is dependent on the responses being filtered."},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"        // The only exception is contribution question, where there is only one statistics for the entire question."},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"        // It is also necessary to calculate contribution question statistics here"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":"        // to be displayed in student result page as students are not supposed to be able to see the exact responses."},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":"        return \"\";"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Checks whether the changes to the question details require deletion of corresponding responses."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public abstract boolean shouldChangesRequireResponseDeletion(FeedbackQuestionDetails newDetails);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Individual responses are shown by default."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Override for specific question types if necessary."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @return boolean indicating if individual responses are to be shown to students."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isIndividualResponsesShownToStudents() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Validates the question details."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @return A {@code List\u003cString\u003e} of error messages (to show as status message to user) if any, or an"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *         empty list if question details are valid."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public abstract List\u003cString\u003e validateQuestionDetails();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Validates the list of response details."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @return A {@code List\u003cString\u003e} of error messages (to show as status message to user) if any, or an"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *         empty list if all response details are valid."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public abstract List\u003cString\u003e validateResponsesDetails(List\u003cFeedbackResponseDetails\u003e responseDetails, int numRecipients);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Validates if giverType and recipientType are valid for the question type."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Validates visibility options as well."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * \u003cp\u003eOverride in Feedback*QuestionDetails if necessary."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @return error message detailing the error, or an empty string if valid."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public abstract String validateGiverRecipientVisibility(FeedbackQuestionAttributes feedbackQuestionAttributes);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Validates if giverType and recipientType are valid for the question type."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Validates visibility options as well."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * \u003cp\u003eOverride in Feedback*QuestionDetails if necessary."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @return error message detailing the error, or an empty string if valid."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public abstract String validateGiverRecipientVisibility(FeedbackQuestion feedbackQuestion);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Checks whether instructor comments are allowed for the question."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean isInstructorCommentsOnResponsesAllowed() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Checks whether missing responses should be generated."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean shouldGenerateMissingResponses(FeedbackQuestionAttributes question) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // generate combinations against all students/teams are meaningless"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return question.getRecipientType() !\u003d FeedbackParticipantType.STUDENTS"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.STUDENTS_EXCLUDING_SELF"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"     * Checks whether missing responses should be generated."},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"    public boolean shouldGenerateMissingResponses(FeedbackQuestion question) {"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"        // generate combinations against all students/teams are meaningless"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"        return question.getRecipientType() !\u003d FeedbackParticipantType.STUDENTS"},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.STUDENTS_EXCLUDING_SELF"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF;"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // Json string contains all attributes of a `FeedbackQuestionDetails` object,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // so it is sufficient to use it to compare two `FeedbackQuestionDetails` objects."},{"lineNumber":146,"author":{"gitId":"-"},"content":"        FeedbackQuestionDetails other \u003d (FeedbackQuestionDetails) obj;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return this.getJsonString().equals(other.getJsonString());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return this.getJsonString().hashCode();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Returns a JSON string representation of the question details."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public String getJsonString() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assert questionType !\u003d null;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return JsonUtils.toJson(this, questionType.getQuestionDetailsClass());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Returns a deep copy of the question details."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public FeedbackQuestionDetails getDeepCopy() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assert questionType !\u003d null;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        String serializedDetails \u003d getJsonString();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(serializedDetails, questionType.getQuestionDetailsClass());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public FeedbackQuestionType getQuestionType() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return questionType;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void setQuestionType(FeedbackQuestionType questionType) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public String getQuestionText() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return questionText;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void setQuestionText(String questionText) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        this.questionText \u003d questionText;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":25,"-":162}},{"path":"src/main/java/teammates/common/util/Const.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.charset.Charset;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Stores constants that are widely used across classes."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * this class contains several nested classes, each containing a specific"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * category of constants."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public final class Const {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // This section holds constants that are defined as constants primarily because they are repeated in many places."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String USER_NOBODY_TEXT \u003d \"-\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String USER_TEAM_FOR_INSTRUCTOR \u003d \"Instructors\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR \u003d \"Instructor\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT \u003d \"Anonymous\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final int SECTION_SIZE_LIMIT \u003d 100;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_SECTION \u003d \"None\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Section DEFAULT_SQL_SECTION \u003d null;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String UNKNOWN_INSTITUTION \u003d \"Unknown Institution\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_TIME_ZONE \u003d \"UTC\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Charset ENCODING \u003d StandardCharsets.UTF_8;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Duration FEEDBACK_SESSIONS_SEARCH_WINDOW \u003d Duration.ofDays(30);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Duration LOGS_RETENTION_PERIOD \u003d Duration.ofDays(30);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Duration COOKIE_VALIDITY_PERIOD \u003d Duration.ofDays(7);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final int SEARCH_QUERY_SIZE_LIMIT \u003d 50;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String ERROR_CREATE_ENTITY_ALREADY_EXISTS \u003d \"Trying to create an entity that exists: %s\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String ERROR_UPDATE_NON_EXISTENT \u003d \"Trying to update non-existent Entity: \";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"    public static final String MISSING_RESPONSE_TEXT \u003d \"No Response\";"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // These constants are used as variable values to mean that the variable is in a \u0027special\u0027 state."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final int INT_UNINITIALIZED \u003d -9999;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final int MAX_POSSIBLE_RECIPIENTS \u003d -100;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final int POINTS_EQUAL_SHARE \u003d 100;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final int POINTS_NOT_SURE \u003d -101;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final int POINTS_NOT_SUBMITTED \u003d -999;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final int POINTS_NO_VALUE \u003d Integer.MIN_VALUE;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String GENERAL_QUESTION \u003d \"%GENERAL%\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_FOLLOW_OPENING;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_FOLLOW_VISIBLE;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_LATER;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_NOW;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_DEFAULT_TIMESTAMP;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_FOLLOW_OPENING \u003d TimeHelper.parseInstant(\"1970-12-31T00:00:00Z\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_FOLLOW_VISIBLE \u003d TimeHelper.parseInstant(\"1970-06-22T00:00:00Z\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_LATER \u003d TimeHelper.parseInstant(\"1970-01-01T00:00:00Z\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_NOW \u003d TimeHelper.parseInstant(\"1970-02-14T00:00:00Z\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_DEFAULT_TIMESTAMP \u003d TimeHelper.parseInstant(\"2011-01-01T00:00:00Z\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String TEST_EMAIL_DOMAIN \u003d \"@gmail.tmt\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // Other Constants"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private Const() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Utility class containing constants"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Represents role names for instructors based on their permission settings."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static class InstructorPermissionRoleNames {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_COOWNER \u003d \"Co-owner\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_MANAGER \u003d \"Manager\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_OBSERVER \u003d \"Observer\";"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_TUTOR \u003d \"Tutor\";"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_CUSTOM \u003d \"Custom\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Represents atomic permission for instructors."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static class InstructorPermissions {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_COURSE \u003d \"canmodifycourse\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_INSTRUCTOR \u003d \"canmodifyinstructor\";"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_SESSION \u003d \"canmodifysession\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_STUDENT \u003d \"canmodifystudent\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public static final String CAN_VIEW_STUDENT_IN_SECTIONS \u003d \"canviewstudentinsection\";"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public static final String CAN_VIEW_SESSION_IN_SECTIONS \u003d \"canviewsessioninsection\";"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public static final String CAN_SUBMIT_SESSION_IN_SECTIONS \u003d \"cansubmitsessioninsection\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS \u003d \"canmodifysessioncommentinsection\";"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Represents keys for HTTP requests to the API layer."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static class ParamsNames {"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public static final String IS_IN_RECYCLE_BIN \u003d \"isinrecyclebin\";"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public static final String IS_STUDENT_REJOINING \u003d \"isstudentrejoining\";"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public static final String IS_INSTRUCTOR_REJOINING \u003d \"isinstructorrejoining\";"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public static final String COURSE_ID \u003d \"courseid\";"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public static final String COURSE_STATUS \u003d \"coursestatus\";"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_ID \u003d \"instructorid\";"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_EMAIL \u003d \"instructoremail\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_INSTITUTION \u003d \"instructorinstitution\";"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public static final String IS_CREATING_ACCOUNT \u003d \"iscreatingaccount\";"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public static final String IS_INSTRUCTOR \u003d \"isinstructor\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_NAME \u003d \"fsname\";"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_STARTTIME \u003d \"starttime\";"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_ENDTIME \u003d \"endtime\";"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_MODERATED_PERSON \u003d \"moderatedperson\";"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_TYPE \u003d \"fsltype\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_STARTTIME \u003d \"fslstarttime\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_ENDTIME \u003d \"fslendtime\";"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_QUESTION_ID \u003d \"questionid\";"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public static final String SINGLE_RECIPIENT_ID_FOR_SUBMISSION \u003d \"singlerecipientidforsubmission\";"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESPONSE_ID \u003d \"responseid\";"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESPONSE_COMMENT_ID \u003d \"responsecommentid\";"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESULTS_GROUPBYSECTION \u003d \"frgroupbysection\";"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESULTS_SECTION_BY_GIVER_RECEIVER \u003d \"frsessionbygiverreceiver\";"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public static final String PREVIEWAS \u003d \"previewas\";"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public static final String STUDENT_ID \u003d \"googleid\";"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public static final String INVITER_ID \u003d \"invitergoogleid\";"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public static final String REGKEY \u003d \"key\";"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public static final String STUDENT_EMAIL \u003d \"studentemail\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public static final String SECTION_NAME \u003d \"sectionname\";"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public static final String TEAM_NAME \u003d \"teamname\";"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public static final String ERROR \u003d \"error\";"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public static final String USER_ID \u003d \"user\";"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public static final String SEARCH_KEY \u003d \"searchkey\";"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public static final String USER_CAPTCHA_RESPONSE \u003d \"captcharesponse\";"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public static final String EMAIL_TYPE \u003d \"emailtype\";"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public static final String USER_EMAIL \u003d \"useremail\";"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public static final String ENTITY_TYPE \u003d \"entitytype\";"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public static final String INTENT \u003d \"intent\";"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public static final String TIMEZONE \u003d \"timezone\";"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public static final String NOTIFY_ABOUT_DEADLINES \u003d \"notifydeadlines\";"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_STARTTIME \u003d \"starttime\";"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ENDTIME \u003d \"endtime\";"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SEVERITY \u003d \"severity\";"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_MIN_SEVERITY \u003d \"minseverity\";"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_TRACE \u003d \"traceid\";"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ACTION_CLASS \u003d \"actionclass\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EMAIL \u003d \"email\";"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EVENT \u003d \"logevent\";"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SOURCE_LOCATION_FILE \u003d \"sourcelocationfile\";"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SOURCE_LOCATION_FUNCTION \u003d \"sourcelocationfunction\";"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EXCEPTION_CLASS \u003d \"exceptionclass\";"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_LATENCY \u003d \"latency\";"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_STATUS \u003d \"status\";"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_VERSION \u003d \"version\";"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EXTRA_FILTERS \u003d \"extrafilters\";"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ORDER \u003d \"order\";"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public static final String LIMIT \u003d \"limit\";"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_ID \u003d \"notificationid\";"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_TARGET_USER \u003d \"usertype\";"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_IS_FETCHING_ALL \u003d \"isfetchingall\";"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public static final String NOTFICATION_END_TIME \u003d \"endtime\";"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public static final String CONTINUE_URL \u003d \"continueurl\";"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Represents custom header names used by the system."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public static class HeaderNames {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public static final String BACKDOOR_KEY \u003d \"Backdoor-Key\";"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public static final String CSRF_KEY \u003d \"CSRF-Key\";"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public static final String WEB_VERSION \u003d \"X-WEB-VERSION\";"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public static final String CSRF_TOKEN \u003d \"X-CSRF-TOKEN\";"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * The course status respect to the instructor\u0027s point of view."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * This parameter is used to get a course list for instructor."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public static class CourseStatus {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public static final String ACTIVE \u003d \"active\";"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public static final String ARCHIVED \u003d \"archived\";"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public static final String SOFT_DELETED \u003d \"softDeleted\";"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * Represents user types."},{"lineNumber":223,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public static class EntityType {"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public static final String STUDENT \u003d \"student\";"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR \u003d \"instructor\";"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public static final String ADMIN \u003d \"admin\";"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public static final String MAINTAINER \u003d \"maintainer\";"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Represents security-related configuration."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public static class SecurityConfig {"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public static final String CSRF_COOKIE_NAME \u003d \"CSRF-TOKEN\";"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        public static final String AUTH_COOKIE_NAME \u003d \"AUTH-TOKEN\";"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * Represents URIs of accessible pages in the front-end in past versions (V6 and before)."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    @Deprecated"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    public static class LegacyURIs {"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN \u003d \"/page/instructorCourseJoin\";"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN \u003d \"/page/studentCourseJoin\";"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_NEW \u003d \"/page/studentCourseJoinAuthentication\";"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_HOME_PAGE \u003d \"/page/instructorHomePage\";"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        public static final String STUDENT_HOME_PAGE \u003d \"/page/studentHomePage\";"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public static final String STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE \u003d \"/page/studentFeedbackSubmissionEditPage\";"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        public static final String STUDENT_FEEDBACK_RESULTS_PAGE \u003d \"/page/studentFeedbackResultsPage\";"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT_PAGE \u003d \"/page/instructorFeedbackSubmissionEditPage\";"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_FEEDBACK_RESULTS_PAGE \u003d \"/page/instructorFeedbackResultsPage\";"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     * Represents URIs of accessible pages in the front-end."},{"lineNumber":263,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    public static class WebPageURIs {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        public static final String LOGIN \u003d \"/login\";"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public static final String LOGOUT \u003d \"/logout\";"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/web\";"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        private static final String STUDENT_PAGE \u003d URI_PREFIX + \"/\" + EntityType.STUDENT;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        private static final String INSTRUCTOR_PAGE \u003d URI_PREFIX + \"/\" + EntityType.INSTRUCTOR;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        private static final String ADMIN_PAGE \u003d URI_PREFIX + \"/\" + EntityType.ADMIN;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        private static final String MAINTAINER_PAGE \u003d URI_PREFIX + \"/\" + EntityType.MAINTAINER;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        private static final String FRONT_PAGE \u003d URI_PREFIX + \"/front\";"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        public static final String JOIN_PAGE \u003d URI_PREFIX + \"/join\";"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        public static final String ADMIN_HOME_PAGE \u003d ADMIN_PAGE + \"/home\";"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        public static final String ADMIN_ACCOUNTS_PAGE \u003d ADMIN_PAGE + \"/accounts\";"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        public static final String ADMIN_SEARCH_PAGE \u003d ADMIN_PAGE + \"/search\";"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        public static final String ADMIN_SESSIONS_PAGE \u003d ADMIN_PAGE + \"/sessions\";"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        public static final String ADMIN_TIMEZONE_PAGE \u003d ADMIN_PAGE + \"/timezone\";"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        public static final String ADMIN_LOGS_PAGE \u003d ADMIN_PAGE + \"/logs\";"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        public static final String ADMIN_NOTIFICATIONS_PAGE \u003d ADMIN_PAGE + \"/notifications\";"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        public static final String MAINTAINER_HOME_PAGE \u003d MAINTAINER_PAGE + \"/home\";"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_HOME_PAGE \u003d INSTRUCTOR_PAGE + \"/home\";"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SEARCH_PAGE \u003d INSTRUCTOR_PAGE + \"/search\";"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSIONS_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions\";"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_SUBMISSION_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/submission\";"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/edit\";"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_INDIVIDUAL_EXTENSION_PAGE \u003d INSTRUCTOR_PAGE"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                + \"/sessions/individual-extension\";"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_RESULTS_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/result\";"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_REPORT_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/report\";"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSES_PAGE \u003d INSTRUCTOR_PAGE + \"/courses\";"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_DETAILS_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/details\";"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/edit\";"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_ENROLL_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/enroll\";"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_STUDENT_DETAILS_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/student/details\";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_STUDENT_DETAILS_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/student/edit\";"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_LIST_PAGE \u003d INSTRUCTOR_PAGE + \"/students\";"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_RECORDS_PAGE \u003d INSTRUCTOR_PAGE + \"/students/records\";"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_ACTIVITY_LOGS_PAGE \u003d INSTRUCTOR_PAGE"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                + \"/courses/student-activity-logs\";"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_NOTIFICATIONS_PAGE \u003d INSTRUCTOR_PAGE + \"/notifications\";"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"        public static final String STUDENT_HOME_PAGE \u003d STUDENT_PAGE + \"/home\";"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_DETAILS_PAGE \u003d STUDENT_PAGE + \"/course\";"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SESSION_SUBMISSION_PAGE \u003d STUDENT_PAGE + \"/sessions/submission\";"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SESSION_RESULTS_PAGE \u003d STUDENT_PAGE + \"/sessions/result\";"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        public static final String STUDENT_NOTIFICATIONS_PAGE \u003d STUDENT_PAGE + \"/notifications\";"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        public static final String SESSION_RESULTS_PAGE \u003d URI_PREFIX + \"/sessions/result\";"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        public static final String SESSION_SUBMISSION_PAGE \u003d URI_PREFIX + \"/sessions/submission\";"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        public static final String SESSIONS_LINK_RECOVERY_PAGE \u003d FRONT_PAGE + \"/help/session-links-recovery\";"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"-"},"content":"     * Represents URIs of resource endpoints."},{"lineNumber":320,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    public static class ResourceURIs {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/webapi\";"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"        public static final String DATABUNDLE \u003d URI_PREFIX + \"/databundle\";"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        public static final String SQL_DATABUNDLE \u003d URI_PREFIX + \"/databundle/sql\";"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        public static final String DATABUNDLE_DOCUMENTS \u003d URI_PREFIX + \"/databundle/documents\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        public static final String DEADLINE_EXTENSION \u003d URI_PREFIX + \"/deadlineextension\";"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        public static final String EXCEPTION \u003d URI_PREFIX + \"/exception\";"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        public static final String ERROR_REPORT \u003d URI_PREFIX + \"/errorreport\";"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        public static final String AUTH \u003d URI_PREFIX + \"/auth\";"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        public static final String AUTH_REGKEY \u003d URI_PREFIX + \"/auth/regkey\";"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT \u003d URI_PREFIX + \"/account\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_RESET \u003d URI_PREFIX + \"/account/reset\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST \u003d URI_PREFIX + \"/account/request\";"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST_RESET \u003d ACCOUNT_REQUEST + \"/reset\";"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        public static final String ACCOUNTS \u003d URI_PREFIX + \"/accounts\";"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        public static final String RESPONSE_COMMENT \u003d URI_PREFIX + \"/responsecomment\";"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        public static final String COURSE \u003d URI_PREFIX + \"/course\";"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        public static final String COURSE_ARCHIVE \u003d URI_PREFIX + \"/course/archive\";"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        public static final String BIN_COURSE \u003d URI_PREFIX + \"/bin/course\";"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        public static final String COURSE_SECTIONS \u003d URI_PREFIX + \"/course/sections\";"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        public static final String COURSES \u003d URI_PREFIX + \"/courses\";"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTORS \u003d URI_PREFIX + \"/instructors\";"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR \u003d URI_PREFIX + \"/instructor\";"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PRIVILEGE \u003d URI_PREFIX + \"/instructor/privilege\";"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_KEY \u003d URI_PREFIX + \"/instructor/key\";"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        public static final String RESULT \u003d URI_PREFIX + \"/result\";"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        public static final String STUDENTS \u003d URI_PREFIX + \"/students\";"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        public static final String STUDENT \u003d URI_PREFIX + \"/student\";"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        public static final String STUDENT_KEY \u003d URI_PREFIX + \"/student/key\";"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION \u003d URI_PREFIX + \"/notification\";"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATIONS \u003d URI_PREFIX + \"/notifications\";"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_READ \u003d URI_PREFIX + \"/notification/read\";"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        public static final String SESSIONS_ONGOING \u003d URI_PREFIX + \"/sessions/ongoing\";"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        public static final String SESSION \u003d URI_PREFIX + \"/session\";"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        public static final String SESSION_PUBLISH \u003d URI_PREFIX + \"/session/publish\";"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        public static final String SESSION_REMIND_SUBMISSION \u003d URI_PREFIX + \"/session/remind/submission\";"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        public static final String SESSION_REMIND_RESULT \u003d URI_PREFIX + \"/session/remind/result\";"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        public static final String SESSION_STATS \u003d URI_PREFIX + \"/session/stats\";"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        public static final String SESSION_SUBMITTED_GIVER_SET \u003d URI_PREFIX + \"/session/submitted/giverset\";"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        public static final String SESSIONS \u003d URI_PREFIX + \"/sessions\";"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        public static final String SEARCH_ACCOUNT_REQUESTS \u003d URI_PREFIX + \"/search/accountrequests\";"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        public static final String SEARCH_INSTRUCTORS \u003d URI_PREFIX + \"/search/instructors\";"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        public static final String SEARCH_STUDENTS \u003d URI_PREFIX + \"/search/students\";"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        public static final String BIN_SESSION \u003d URI_PREFIX + \"/bin/session\";"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        public static final String QUESTIONS \u003d URI_PREFIX + \"/questions\";"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        public static final String QUESTION \u003d URI_PREFIX + \"/question\";"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        public static final String QUESTION_RECIPIENTS \u003d URI_PREFIX + \"/question/recipients\";"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        public static final String RESPONSES \u003d URI_PREFIX + \"/responses\";"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        public static final String USAGE_STATISTICS \u003d URI_PREFIX + \"/usagestats\";"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        public static final String HAS_RESPONSES \u003d URI_PREFIX + \"/hasResponses\";"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        public static final String JOIN \u003d URI_PREFIX + \"/join\";"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        public static final String JOIN_REMIND \u003d URI_PREFIX + \"/join/remind\";"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        public static final String TIMEZONE \u003d URI_PREFIX + \"/timezone\";"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        public static final String SESSION_LINKS_RECOVERY \u003d URI_PREFIX + \"/sessionlinksrecovery\";"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        public static final String EMAIL \u003d URI_PREFIX + \"/email\";"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        public static final String LOGIN_EMAIL \u003d URI_PREFIX + \"/email/login\";"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        public static final String SESSION_LOGS \u003d URI_PREFIX + \"/logs/session\";"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        public static final String LOGS \u003d URI_PREFIX + \"/logs/query\";"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        public static final String ACTION_CLASS \u003d URI_PREFIX + \"/actionclass\";"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        public static final String USER_COOKIE \u003d URI_PREFIX + \"/cookie\";"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":385,"author":{"gitId":"-"},"content":"     * Represents URIs of endpoints used by cron jobs."},{"lineNumber":386,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    public static class CronJobURIs {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/auto\";"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_LOG_COMPILATION \u003d URI_PREFIX + \"/compileLogs\";"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_DATASTORE_BACKUP \u003d URI_PREFIX + \"/datastoreBackup\";"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_OPENING_SOON_REMINDERS \u003d"},{"lineNumber":393,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionOpeningSoonReminders\";"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_OPENING_REMINDERS \u003d"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionOpeningReminders\";"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_CLOSED_REMINDERS \u003d"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionClosedReminders\";"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_CLOSING_REMINDERS \u003d"},{"lineNumber":399,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionClosingReminders\";"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_PUBLISHED_REMINDERS \u003d"},{"lineNumber":401,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionPublishedReminders\";"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_USAGE_STATISTICS_COLLECTION \u003d"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/calculateUsageStatistics\";"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":407,"author":{"gitId":"-"},"content":"     * Configurations for task queue."},{"lineNumber":408,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    public static class TaskQueue {"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        public static final String URI_PREFIX \u003d \"/worker\";"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                \"feedback-session-published-email-queue\";"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_PUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":415,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionPublishedEmail\";"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_RESEND_PUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                \"feedback-session-resend-published-email-queue\";"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_RESEND_PUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":420,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionResendPublishedEmail\";"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_EMAIL_QUEUE_NAME \u003d \"feedback-session-remind-email-queue\";"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/feedbackSessionRemindEmail\";"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_PARTICULAR_USERS_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":426,"author":{"gitId":"-"},"content":"                \"feedback-session-remind-particular-users-email-queue\";"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_PARTICULAR_USERS_EMAIL_WORKER_URL \u003d"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionRemindParticularUsersEmail\";"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_UNPUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                \"feedback-session-unpublished-email-queue\";"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_UNPUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionUnpublishedEmail\";"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN_EMAIL_QUEUE_NAME \u003d \"instructor-course-join-email-queue\";"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/instructorCourseJoinEmail\";"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"        public static final String SEND_EMAIL_QUEUE_NAME \u003d \"send-email-queue\";"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        public static final String SEND_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/sendEmail\";"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_EMAIL_QUEUE_NAME \u003d \"student-course-join-email-queue\";"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/studentCourseJoinEmail\";"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"        public static final String SEARCH_INDEXING_QUEUE_NAME \u003d \"search-indexing-queue\";"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SEARCH_INDEXING_WORKER_URL \u003d URI_PREFIX + \"/instructorSearchIndexing\";"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST_SEARCH_INDEXING_WORKER_URL \u003d"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/accountRequestSearchIndexing\";"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SEARCH_INDEXING_WORKER_URL \u003d URI_PREFIX + \"/studentSearchIndexing\";"},{"lineNumber":449,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":2,"-":449}},{"path":"src/main/java/teammates/sqllogic/api/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.api;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackQuestionRecipient;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlSessionResultsBundle;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EnrollException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.exception.InstructorUpdateException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.exception.StudentUpdateException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.AccountRequestsLogic;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.AccountsLogic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.CoursesLogic;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.DataBundleLogic;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.DeadlineExtensionsLogic;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackQuestionsLogic;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackResponseCommentsLogic;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackResponsesLogic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackSessionsLogic;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.NotificationsLogic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.UsageStatisticsLogic;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.UsersLogic;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackQuestionUpdateRequest;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackResponseCommentUpdateRequest;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import teammates.ui.request.InstructorCreateRequest;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":56,"author":{"gitId":"-"},"content":" * Provides the business logic for production usage of the system."},{"lineNumber":57,"author":{"gitId":"-"},"content":" *"},{"lineNumber":58,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis is a Facade class which simply forwards the method to internal classes."},{"lineNumber":59,"author":{"gitId":"-"},"content":" */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"public class Logic {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final Logic instance \u003d new Logic();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    final AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    final AccountRequestsLogic accountRequestLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    final CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    final DeadlineExtensionsLogic deadlineExtensionsLogic \u003d DeadlineExtensionsLogic.inst();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    final FeedbackQuestionsLogic feedbackQuestionsLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    final FeedbackResponsesLogic feedbackResponsesLogic \u003d FeedbackResponsesLogic.inst();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    final FeedbackResponseCommentsLogic feedbackResponseCommentsLogic \u003d FeedbackResponseCommentsLogic.inst();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    final FeedbackSessionsLogic feedbackSessionsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    final UsageStatisticsLogic usageStatisticsLogic \u003d UsageStatisticsLogic.inst();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    final UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    final NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    final DataBundleLogic dataBundleLogic \u003d DataBundleLogic.inst();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    Logic() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Logic inst() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Creates an account request."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @return newly created account request."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the account request details are invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account request already exists."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public AccountRequest createAccountRequest(String name, String email, String institute)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return accountRequestLogic.createAccountRequest(name, email, institute);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates a or gets an account request."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return newly created account request."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the account request details are invalid."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account request already exists."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public AccountRequest createAccountRequestWithTransaction(String name, String email, String institute)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throws InvalidParametersException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return accountRequestLogic.createOrGetAccountRequestWithTransaction(name, email, institute);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Gets the account request with the given email and institute."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @return account request with the given email and institute."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return accountRequestLogic.getAccountRequest(email, institute);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"dishenggg"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"dishenggg"},"content":"     * Gets the account request with the associated {@code regkey}."},{"lineNumber":121,"author":{"gitId":"dishenggg"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":"     * @return account request with the associated {@code regkey}."},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":"    public AccountRequest getAccountRequestByRegistrationKey(String regkey) {"},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"        return accountRequestLogic.getAccountRequestByRegistrationKey(regkey);"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Updates the given account request."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @return the updated account request."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public AccountRequest updateAccountRequest(AccountRequest accountRequest)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return accountRequestLogic.updateAccountRequest(accountRequest);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Creates/Resets the account request with the given email and institute"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * such that it is not registered."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @return account request that is unregistered with the"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     *         email and institute."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public AccountRequest resetAccountRequest(String email, String institute)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return accountRequestLogic.resetAccountRequest(email, institute);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Deletes account request by email and institute."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * \u003cli\u003eFails silently if no such account request.\u003c/li\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * All parameters are non-null."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void deleteAccountRequest(String email, String institute) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        accountRequestLogic.deleteAccountRequest(email, institute);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Gets an account."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public Account getAccount(UUID id) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return accountsLogic.getAccount(id);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Gets an account by googleId."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public Account getAccountForGoogleId(String googleId) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return accountsLogic.getAccountForGoogleId(googleId);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Get a list of accounts associated with email provided."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public List\u003cAccount\u003e getAccountsForEmail(String email) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return accountsLogic.getAccountsForEmail(email);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Creates an account."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * @return the created account"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the account is not valid"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account already exists in the database."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public Account createAccount(Account account)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return accountsLogic.createAccount(account);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Deletes account by googleId."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * \u003cli\u003eFails silently if no such account.\u003c/li\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * All parameters are non-null."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void deleteAccount(String googleId) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        accountsLogic.deleteAccount(googleId);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Deletes account and all users by googleId."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * \u003cli\u003eFails silently if no such account.\u003c/li\u003e"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * All parameters are non-null."},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void deleteAccountCascade(String googleId) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        accountsLogic.deleteAccountCascade(googleId);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Gets all students associated with a googleId."},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsByGoogleId(String googleId) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentsByGoogleId(googleId);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Gets a course by course id."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * @param courseId courseId of the course."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * @return the specified course."},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    public Course getCourse(String courseId) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        return coursesLogic.getCourse(courseId);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"domoberzin"},"content":"     * Gets a section from a course by section name."},{"lineNumber":243,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"domoberzin"},"content":"    public Section getSection(String courseId, String section) {"},{"lineNumber":245,"author":{"gitId":"domoberzin"},"content":"        return usersLogic.getSection(courseId, section);"},{"lineNumber":246,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * Gets courses associated with student."},{"lineNumber":250,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getCoursesForStudentAccount(String googleId) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return coursesLogic.getCoursesForStudentAccount(googleId);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * Gets courses associated with instructors."},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":263,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * @return Courses the given instructors is in except for courses in Recycle Bin."},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getCoursesForInstructors(List\u003cInstructor\u003e instructorsList) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        assert instructorsList !\u003d null;"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        return coursesLogic.getCoursesForInstructors(instructorsList);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Gets courses associated with instructors that are soft deleted."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":276,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":277,"author":{"gitId":"-"},"content":"     * @return Courses in Recycle Bin that the given instructors is in."},{"lineNumber":278,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getSoftDeletedCoursesForInstructors(List\u003cInstructor\u003e instructorsList) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        assert instructorsList !\u003d null;"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return coursesLogic.getSoftDeletedCoursesForInstructors(instructorsList);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":286,"author":{"gitId":"yuanxi1"},"content":"     * Gets the institute of the course."},{"lineNumber":287,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":288,"author":{"gitId":"yuanxi1"},"content":"    public String getCourseInstitute(String courseId) {"},{"lineNumber":289,"author":{"gitId":"yuanxi1"},"content":"        return coursesLogic.getCourseInstitute(courseId);"},{"lineNumber":290,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Creates a course."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * @param course the course to create."},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * @return the created course."},{"lineNumber":296,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the course is not valid."},{"lineNumber":297,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the course already exists."},{"lineNumber":298,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    public Course createCourse(Course course) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        return coursesLogic.createCourse(course);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":304,"author":{"gitId":"-"},"content":"     * Deletes a course by course id."},{"lineNumber":305,"author":{"gitId":"-"},"content":"     * @param courseId of course."},{"lineNumber":306,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public void deleteCourseCascade(String courseId) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        coursesLogic.deleteCourseCascade(courseId);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"domoberzin"},"content":"     * Updates a student by {@link Student}."},{"lineNumber":313,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":314,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eIf email changed, update by recreating the student and cascade update all responses"},{"lineNumber":315,"author":{"gitId":"marquestye"},"content":"     * and comments the student gives/receives."},{"lineNumber":316,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":317,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eIf team changed, cascade delete all responses the student gives/receives within that team."},{"lineNumber":318,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":319,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eIf section changed, cascade update all responses the student gives/receives."},{"lineNumber":320,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":321,"author":{"gitId":"domoberzin"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":322,"author":{"gitId":"marquestye"},"content":"     * * Student parameter is non-null."},{"lineNumber":323,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":324,"author":{"gitId":"domoberzin"},"content":"     * @return updated student"},{"lineNumber":325,"author":{"gitId":"domoberzin"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":326,"author":{"gitId":"domoberzin"},"content":"     * @throws EntityDoesNotExistException if the student cannot be found"},{"lineNumber":327,"author":{"gitId":"domoberzin"},"content":"     * @throws EntityAlreadyExistsException if the student cannot be updated"},{"lineNumber":328,"author":{"gitId":"domoberzin"},"content":"     *         by recreation because of an existent student"},{"lineNumber":329,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":330,"author":{"gitId":"domoberzin"},"content":"    public Student updateStudentCascade(Student student)"},{"lineNumber":331,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":332,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":333,"author":{"gitId":"domoberzin"},"content":"        assert student !\u003d null;"},{"lineNumber":334,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":335,"author":{"gitId":"domoberzin"},"content":"        return usersLogic.updateStudentCascade(student);"},{"lineNumber":336,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * Moves a course to Recycle Bin by its given corresponding ID."},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * @return the deletion timestamp assigned to the course."},{"lineNumber":341,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    public Course moveCourseToRecycleBin(String courseId) throws EntityDoesNotExistException {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        return coursesLogic.moveCourseToRecycleBin(courseId);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * Restores a course and all data related to the course from Recycle Bin by"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * its given corresponding ID."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    public void restoreCourseFromRecycleBin(String courseId) throws EntityDoesNotExistException {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        coursesLogic.restoreCourseFromRecycleBin(courseId);"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * Updates a course."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":357,"author":{"gitId":"-"},"content":"     * @return updated course"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the course cannot be found"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public Course updateCourse(String courseId, String name, String timezone)"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        return coursesLogic.updateCourse(courseId, name, timezone);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"-"},"content":"     * Gets a list of section names for the given {@code courseId}."},{"lineNumber":368,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getSectionNamesForCourse(String courseId)"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        return coursesLogic.getSectionNamesForCourse(courseId);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":375,"author":{"gitId":"-"},"content":"     * Get section by {@code courseId} and {@code teamName}."},{"lineNumber":376,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    public Section getSectionByCourseIdAndTeam(String courseId, String teamName) {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        return coursesLogic.getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":382,"author":{"gitId":"-"},"content":"     * Creates a deadline extension."},{"lineNumber":383,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":384,"author":{"gitId":"-"},"content":"     * @return created deadline extension"},{"lineNumber":385,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the deadline extension is not valid"},{"lineNumber":386,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the deadline extension already exist"},{"lineNumber":387,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    public DeadlineExtension createDeadlineExtension(DeadlineExtension deadlineExtension)"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.createDeadlineExtension(deadlineExtension);"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":394,"author":{"gitId":"-"},"content":"     * Updates a deadline extension."},{"lineNumber":395,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":396,"author":{"gitId":"-"},"content":"     * @return updated deadline extension"},{"lineNumber":397,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the deadline extension does not exist"},{"lineNumber":398,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the deadline extension is not valid"},{"lineNumber":399,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":400,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    public DeadlineExtension updateDeadlineExtension(DeadlineExtension de)"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.updateDeadlineExtension(de);"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":407,"author":{"gitId":"-"},"content":"     * Deletes a deadline extension."},{"lineNumber":408,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    public void deleteDeadlineExtension(DeadlineExtension de) {"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        deadlineExtensionsLogic.deleteDeadlineExtension(de);"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":414,"author":{"gitId":"-"},"content":"     * Fetch the deadline extension for a given user and session feedback."},{"lineNumber":415,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * @return deadline extension instant if exists, else the default end time instant"},{"lineNumber":417,"author":{"gitId":"-"},"content":"     *         for the session feedback."},{"lineNumber":418,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    public Instant getDeadlineForUser(FeedbackSession session, User user) {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.getDeadlineForUser(session, user);"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":424,"author":{"gitId":"-"},"content":"     * Fetch the deadline extension for a given user and session feedback."},{"lineNumber":425,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":426,"author":{"gitId":"-"},"content":"     * @return deadline extension instant if exists, else return null since no deadline extensions."},{"lineNumber":427,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    public Instant getExtendedDeadlineForUser(FeedbackSession session, User user) {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.getExtendedDeadlineForUser(session, user);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":433,"author":{"gitId":"-"},"content":"     * Gets a list of deadline extensions with endTime coming up soon"},{"lineNumber":434,"author":{"gitId":"-"},"content":"     * and possibly need a closing email to be sent."},{"lineNumber":435,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    public List\u003cDeadlineExtension\u003e getDeadlineExtensionsPossiblyNeedingClosingEmail() {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.getDeadlineExtensionsPossiblyNeedingClosingEmail();"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":441,"author":{"gitId":"-"},"content":"     * Gets a feedback session."},{"lineNumber":442,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":443,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":444,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(UUID id) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSession(id);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":450,"author":{"gitId":"-"},"content":"     * Gets a feedback session for {@code feedbackSessionName} and {@code courseId}."},{"lineNumber":451,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":452,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":453,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":454,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":459,"author":{"gitId":"-"},"content":"     * Gets a feedback session from the recycle bin."},{"lineNumber":460,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":461,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":462,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":463,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":464,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":465,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":466,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) {"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":474,"author":{"gitId":"-"},"content":"     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors."},{"lineNumber":475,"author":{"gitId":"-"},"content":"     * \u003cbr\u003e"},{"lineNumber":476,"author":{"gitId":"-"},"content":"     * Omits sessions if the corresponding courses are archived or in Recycle Bin"},{"lineNumber":477,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":478,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getSoftDeletedFeedbackSessionsForInstructors("},{"lineNumber":479,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorList) {"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        assert instructorList !\u003d null;"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getSoftDeletedFeedbackSessionsForInstructors(instructorList);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":486,"author":{"gitId":"-"},"content":"     * Gets a list of feedback sessions for instructors."},{"lineNumber":487,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsForInstructors("},{"lineNumber":489,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorList) {"},{"lineNumber":490,"author":{"gitId":"-"},"content":"        assert instructorList !\u003d null;"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsForInstructors(instructorList);"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":496,"author":{"gitId":"-"},"content":"     * Gets all and only the feedback sessions ongoing within a range of time."},{"lineNumber":497,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":498,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getOngoingSessions(Instant rangeStart, Instant rangeEnd) {"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getOngoingSessions(rangeStart, rangeEnd);"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":503,"author":{"gitId":"-"},"content":"     * Gets a set of giver identifiers that has at least one response under a feedback session."},{"lineNumber":504,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":505,"author":{"gitId":"-"},"content":"    public Set\u003cString\u003e getGiverSetThatAnsweredFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getGiverSetThatAnsweredFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":513,"author":{"gitId":"-"},"content":"     * Updates a feedback session."},{"lineNumber":514,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":515,"author":{"gitId":"-"},"content":"     * @return returns the updated feedback session."},{"lineNumber":516,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    public FeedbackSession updateFeedbackSession(FeedbackSession feedbackSession)"},{"lineNumber":518,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.updateFeedbackSession(feedbackSession);"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":523,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that require automated emails to be sent as they are published."},{"lineNumber":524,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent() {"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent();"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":530,"author":{"gitId":"-"},"content":"     * Creates a feedback session."},{"lineNumber":531,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":532,"author":{"gitId":"-"},"content":"     * @return returns the created feedback session."},{"lineNumber":533,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":534,"author":{"gitId":"-"},"content":"    public FeedbackSession createFeedbackSession(FeedbackSession feedbackSession)"},{"lineNumber":535,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":537,"author":{"gitId":"-"},"content":"        assert feedbackSession.getCourse() !\u003d null \u0026\u0026 feedbackSession.getCourse().getId() !\u003d null;"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.createFeedbackSession(feedbackSession);"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":543,"author":{"gitId":"-"},"content":"     * Gets all feedback sessions of a course, except those that are soft-deleted."},{"lineNumber":544,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsForCourse(String courseId) {"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsForCourse(courseId);"},{"lineNumber":547,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":550,"author":{"gitId":"-"},"content":"     * Creates a new feedback question."},{"lineNumber":551,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":552,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":553,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":554,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":555,"author":{"gitId":"-"},"content":"     * @return the created question"},{"lineNumber":556,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the question is invalid"},{"lineNumber":557,"author":{"gitId":"marquestye"},"content":"     * @throws EntityAlreadyExistsException if the question already exists"},{"lineNumber":558,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":559,"author":{"gitId":"marquestye"},"content":"    public FeedbackQuestion createFeedbackQuestion(FeedbackQuestion feedbackQuestion)"},{"lineNumber":560,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.createFeedbackQuestion(feedbackQuestion);"},{"lineNumber":562,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":565,"author":{"gitId":"-"},"content":"     * Publishes a feedback session."},{"lineNumber":566,"author":{"gitId":"-"},"content":"     * @return the published feedback session"},{"lineNumber":567,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":568,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if session is already published"},{"lineNumber":569,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":570,"author":{"gitId":"-"},"content":"    public FeedbackSession publishFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.publishFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":577,"author":{"gitId":"-"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":579,"author":{"gitId":"-"},"content":"     * Checks whether a student has attempted a feedback session."},{"lineNumber":580,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":581,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf there is no question for students, the feedback session is considered as attempted.\u003c/p\u003e"},{"lineNumber":582,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":583,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionAttemptedByStudent(FeedbackSession session, String userEmail, String userTeam) {"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.isFeedbackSessionAttemptedByStudent(session, userEmail, userTeam);"},{"lineNumber":585,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":586,"author":{"gitId":"-"},"content":""},{"lineNumber":587,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":588,"author":{"gitId":"-"},"content":"     * Checks whether an instructor has attempted a feedback session."},{"lineNumber":589,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":590,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf there is no question for instructors, the feedback session is considered as attempted.\u003c/p\u003e"},{"lineNumber":591,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionAttemptedByInstructor(FeedbackSession session, String userEmail) {"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.isFeedbackSessionAttemptedByInstructor(session, userEmail);"},{"lineNumber":594,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":595,"author":{"gitId":"-"},"content":""},{"lineNumber":596,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":597,"author":{"gitId":"-"},"content":"     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments."},{"lineNumber":598,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":599,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":600,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":601,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":602,"author":{"gitId":"-"},"content":"    public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId) {"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        feedbackSessionsLogic.deleteFeedbackSessionCascade(feedbackSessionName, courseId);"},{"lineNumber":604,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":605,"author":{"gitId":"-"},"content":""},{"lineNumber":606,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":607,"author":{"gitId":"-"},"content":"     * Soft-deletes a specific  session to Recycle Bin."},{"lineNumber":608,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":609,"author":{"gitId":"-"},"content":"    public void moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId)"},{"lineNumber":610,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":611,"author":{"gitId":"-"},"content":""},{"lineNumber":612,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":614,"author":{"gitId":"-"},"content":""},{"lineNumber":615,"author":{"gitId":"-"},"content":"        feedbackSessionsLogic.moveFeedbackSessionToRecycleBin(feedbackSessionName, courseId);"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":619,"author":{"gitId":"-"},"content":"     * Restores a specific session from Recycle Bin to feedback sessions table."},{"lineNumber":620,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)"},{"lineNumber":622,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"        feedbackSessionsLogic.restoreFeedbackSessionFromRecycleBin(feedbackSessionName, courseId);"},{"lineNumber":628,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":629,"author":{"gitId":"-"},"content":""},{"lineNumber":630,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":631,"author":{"gitId":"-"},"content":"     * Unpublishes a feedback session."},{"lineNumber":632,"author":{"gitId":"-"},"content":"     * @return the unpublished feedback session"},{"lineNumber":633,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":634,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException"},{"lineNumber":635,"author":{"gitId":"-"},"content":"     *             if the feedback session is not ready to be unpublished."},{"lineNumber":636,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":637,"author":{"gitId":"-"},"content":"    public FeedbackSession unpublishFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":638,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":639,"author":{"gitId":"-"},"content":""},{"lineNumber":640,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":642,"author":{"gitId":"-"},"content":""},{"lineNumber":643,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.unpublishFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":644,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":647,"author":{"gitId":"-"},"content":"     * After an update to feedback session\u0027s fields, may need to adjust the email status of the session."},{"lineNumber":648,"author":{"gitId":"-"},"content":"     * @param session recently updated session."},{"lineNumber":649,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":650,"author":{"gitId":"-"},"content":"    public void adjustFeedbackSessionEmailStatusAfterUpdate(FeedbackSession session) {"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        feedbackSessionsLogic.adjustFeedbackSessionEmailStatusAfterUpdate(session);"},{"lineNumber":653,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":654,"author":{"gitId":"-"},"content":""},{"lineNumber":655,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":656,"author":{"gitId":"domoberzin"},"content":"     * Gets the expected number of submissions for a feedback session."},{"lineNumber":657,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":658,"author":{"gitId":"domoberzin"},"content":"     * \u003cbr\u003ePreconditions: \u003cbr\u003e"},{"lineNumber":659,"author":{"gitId":"domoberzin"},"content":"     * * All parameters are non-null."},{"lineNumber":660,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":661,"author":{"gitId":"domoberzin"},"content":"    public int getExpectedTotalSubmission(FeedbackSession fs) {"},{"lineNumber":662,"author":{"gitId":"domoberzin"},"content":"        assert fs !\u003d null;"},{"lineNumber":663,"author":{"gitId":"domoberzin"},"content":"        return feedbackSessionsLogic.getExpectedTotalSubmission(fs);"},{"lineNumber":664,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":665,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":666,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":667,"author":{"gitId":"domoberzin"},"content":"     * Gets the actual number of submissions for a feedback session."},{"lineNumber":668,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":669,"author":{"gitId":"domoberzin"},"content":"     * \u003cbr\u003ePreconditions: \u003cbr\u003e"},{"lineNumber":670,"author":{"gitId":"domoberzin"},"content":"     * * All parameters are non-null."},{"lineNumber":671,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":672,"author":{"gitId":"domoberzin"},"content":"    public int getActualTotalSubmission(FeedbackSession fs) {"},{"lineNumber":673,"author":{"gitId":"domoberzin"},"content":"        assert fs !\u003d null;"},{"lineNumber":674,"author":{"gitId":"domoberzin"},"content":"        return feedbackSessionsLogic.getActualTotalSubmission(fs);"},{"lineNumber":675,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":676,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":678,"author":{"gitId":"-"},"content":"     * Get usage statistics within a time range."},{"lineNumber":679,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":680,"author":{"gitId":"-"},"content":"    public List\u003cUsageStatistics\u003e getUsageStatisticsForTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":681,"author":{"gitId":"-"},"content":"        return usageStatisticsLogic.getUsageStatisticsForTimeRange(startTime, endTime);"},{"lineNumber":682,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":683,"author":{"gitId":"-"},"content":""},{"lineNumber":684,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":685,"author":{"gitId":"-"},"content":"     * Calculate usage statistics within a time range."},{"lineNumber":686,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":687,"author":{"gitId":"-"},"content":"    public UsageStatistics calculateEntitiesStatisticsForTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":688,"author":{"gitId":"-"},"content":"        return usageStatisticsLogic.calculateEntitiesStatisticsForTimeRange(startTime, endTime);"},{"lineNumber":689,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":690,"author":{"gitId":"-"},"content":""},{"lineNumber":691,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":692,"author":{"gitId":"-"},"content":"     * Create usage statistics within a time range."},{"lineNumber":693,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":694,"author":{"gitId":"-"},"content":"    public void createUsageStatistics(UsageStatistics attributes)"},{"lineNumber":695,"author":{"gitId":"-"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        usageStatisticsLogic.createUsageStatistics(attributes);"},{"lineNumber":697,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":700,"author":{"gitId":"-"},"content":"     * Creates a notification."},{"lineNumber":701,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":702,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":703,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":704,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":705,"author":{"gitId":"-"},"content":"     * @return created notification"},{"lineNumber":706,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the notification is not valid"},{"lineNumber":707,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the notification exists in the database"},{"lineNumber":708,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":709,"author":{"gitId":"-"},"content":"    public Notification createNotification(Notification notification) throws"},{"lineNumber":710,"author":{"gitId":"-"},"content":"            InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":711,"author":{"gitId":"-"},"content":"        return notificationsLogic.createNotification(notification);"},{"lineNumber":712,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":715,"author":{"gitId":"-"},"content":"     * Gets a notification by ID."},{"lineNumber":716,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":717,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":718,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":719,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":720,"author":{"gitId":"-"},"content":"     * @return Null if no match found."},{"lineNumber":721,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":722,"author":{"gitId":"-"},"content":"    public Notification getNotification(UUID notificationId) {"},{"lineNumber":723,"author":{"gitId":"-"},"content":"        return notificationsLogic.getNotification(notificationId);"},{"lineNumber":724,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":725,"author":{"gitId":"-"},"content":""},{"lineNumber":726,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":727,"author":{"gitId":"-"},"content":"     * Updates a notification."},{"lineNumber":728,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":729,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":730,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":731,"author":{"gitId":"-"},"content":"     * @return updated notification"},{"lineNumber":732,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the notification is not valid"},{"lineNumber":733,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the notification does not exist in the database"},{"lineNumber":734,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":735,"author":{"gitId":"-"},"content":"    public Notification updateNotification(UUID notificationId, Instant startTime, Instant endTime,"},{"lineNumber":736,"author":{"gitId":"-"},"content":"                                           NotificationStyle style, NotificationTargetUser targetUser, String title,"},{"lineNumber":737,"author":{"gitId":"-"},"content":"                                           String message) throws"},{"lineNumber":738,"author":{"gitId":"-"},"content":"            InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":739,"author":{"gitId":"-"},"content":"        return notificationsLogic.updateNotification(notificationId, startTime, endTime, style, targetUser, title, message);"},{"lineNumber":740,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":743,"author":{"gitId":"-"},"content":"     * Deletes notification by ID."},{"lineNumber":744,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":745,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":746,"author":{"gitId":"-"},"content":"     * \u003cli\u003eFails silently if no such notification.\u003c/li\u003e"},{"lineNumber":747,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":748,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":749,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":750,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":751,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":752,"author":{"gitId":"-"},"content":"    public void deleteNotification(UUID notificationId) {"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        notificationsLogic.deleteNotification(notificationId);"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":755,"author":{"gitId":"-"},"content":""},{"lineNumber":756,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":757,"author":{"gitId":"-"},"content":"     * Get a list of IDs of the read notifications of the account."},{"lineNumber":758,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":759,"author":{"gitId":"-"},"content":"    public List\u003cUUID\u003e getReadNotificationsId(String id) {"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        return accountsLogic.getReadNotificationsId(id);"},{"lineNumber":761,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":764,"author":{"gitId":"-"},"content":"     * Updates user read status for notification with ID {@code notificationId} and expiry time {@code endTime}."},{"lineNumber":765,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":766,"author":{"gitId":"-"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":767,"author":{"gitId":"-"},"content":"     * * All parameters are non-null. {@code endTime} must be after current moment."},{"lineNumber":768,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":769,"author":{"gitId":"-"},"content":"    public List\u003cUUID\u003e updateReadNotifications(String id, UUID notificationId, Instant endTime)"},{"lineNumber":770,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        return accountsLogic.updateReadNotifications(id, notificationId, endTime);"},{"lineNumber":772,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":773,"author":{"gitId":"-"},"content":""},{"lineNumber":774,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":775,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code id}."},{"lineNumber":776,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":777,"author":{"gitId":"-"},"content":"     * @param id    Id of Instructor."},{"lineNumber":778,"author":{"gitId":"-"},"content":"     * @return      Returns Instructor if found else null."},{"lineNumber":779,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":780,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":781,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructor(id);"},{"lineNumber":782,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":783,"author":{"gitId":"-"},"content":""},{"lineNumber":784,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":785,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code courseId} and {@code email}."},{"lineNumber":786,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":787,"author":{"gitId":"-"},"content":"    public Instructor getInstructorForEmail(String courseId, String email) {"},{"lineNumber":788,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorForEmail(courseId, email);"},{"lineNumber":789,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":790,"author":{"gitId":"-"},"content":""},{"lineNumber":791,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":792,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code regkey}."},{"lineNumber":793,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":794,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegistrationKey(String regKey) {"},{"lineNumber":795,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorByRegistrationKey(regKey);"},{"lineNumber":796,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":797,"author":{"gitId":"-"},"content":""},{"lineNumber":798,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":799,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code googleId}."},{"lineNumber":800,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":801,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":802,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorByGoogleId(courseId, googleId);"},{"lineNumber":803,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":804,"author":{"gitId":"-"},"content":""},{"lineNumber":805,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":806,"author":{"gitId":"-"},"content":"     * Gets list of instructors by {@code googleId}."},{"lineNumber":807,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":808,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForGoogleId(String googleId) {"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorsForGoogleId(googleId);"},{"lineNumber":810,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":813,"author":{"gitId":"-"},"content":"     * Gets instructors by associated {@code courseId}."},{"lineNumber":814,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":815,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsByCourse(String courseId) {"},{"lineNumber":816,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorsForCourse(courseId);"},{"lineNumber":817,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":818,"author":{"gitId":"-"},"content":""},{"lineNumber":819,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":820,"author":{"gitId":"-"},"content":"     * Creates an instructor."},{"lineNumber":821,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":822,"author":{"gitId":"-"},"content":"    public Instructor createInstructor(Instructor instructor)"},{"lineNumber":823,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":824,"author":{"gitId":"-"},"content":"        return usersLogic.createInstructor(instructor);"},{"lineNumber":825,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":826,"author":{"gitId":"-"},"content":""},{"lineNumber":827,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":828,"author":{"gitId":"-"},"content":"     * Make the instructor join the course, i.e. associate the Google ID to the instructor.\u003cbr\u003e"},{"lineNumber":829,"author":{"gitId":"-"},"content":"     * Creates an account for the instructor if no existing account is found."},{"lineNumber":830,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":831,"author":{"gitId":"-"},"content":"     * * Parameters regkey and googleId are non-null."},{"lineNumber":832,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":833,"author":{"gitId":"-"},"content":"    public Instructor joinCourseForInstructor(String regkey, String googleId)"},{"lineNumber":834,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":835,"author":{"gitId":"-"},"content":""},{"lineNumber":836,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        assert regkey !\u003d null;"},{"lineNumber":838,"author":{"gitId":"-"},"content":""},{"lineNumber":839,"author":{"gitId":"-"},"content":"        return accountsLogic.joinCourseForInstructor(regkey, googleId);"},{"lineNumber":840,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":841,"author":{"gitId":"-"},"content":""},{"lineNumber":842,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":843,"author":{"gitId":"-"},"content":"     * Validates that the join course request is valid, then"},{"lineNumber":844,"author":{"gitId":"-"},"content":"     * makes the instructor join the course, i.e. associate an account to the instructor with the given googleId."},{"lineNumber":845,"author":{"gitId":"-"},"content":"     * Creates an account for the instructor if no existing account is found."},{"lineNumber":846,"author":{"gitId":"-"},"content":"     * Preconditions:"},{"lineNumber":847,"author":{"gitId":"-"},"content":"     * Parameters regkey and googleId are non-null."},{"lineNumber":848,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":849,"author":{"gitId":"-"},"content":"    public Instructor joinCourseForInstructor(String googleId, Instructor instructor)"},{"lineNumber":850,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        if (googleId \u003d\u003d null) {"},{"lineNumber":852,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Instructor\u0027s googleId cannot be null\");"},{"lineNumber":853,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":854,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":855,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Instructor cannot be null\");"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":857,"author":{"gitId":"-"},"content":""},{"lineNumber":858,"author":{"gitId":"-"},"content":"        validateJoinCourseRequest(googleId, instructor);"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        return usersLogic.joinCourseForInstructor(googleId, instructor);"},{"lineNumber":860,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":861,"author":{"gitId":"-"},"content":""},{"lineNumber":862,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":863,"author":{"gitId":"-"},"content":"     * Validates that the instructor can join the course it has as courseId field."},{"lineNumber":864,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":865,"author":{"gitId":"-"},"content":"     * @return true if the instructor can join the course."},{"lineNumber":866,"author":{"gitId":"-"},"content":"     * @throws Exception if the instructor cannot join the course."},{"lineNumber":867,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":868,"author":{"gitId":"-"},"content":"    private boolean validateJoinCourseRequest(String googleId, Instructor instructor)"},{"lineNumber":869,"author":{"gitId":"-"},"content":"            throws EntityAlreadyExistsException, EntityDoesNotExistException {"},{"lineNumber":870,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":871,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Instructor not found\");"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":873,"author":{"gitId":"-"},"content":""},{"lineNumber":874,"author":{"gitId":"-"},"content":"        // check course exists and has not been deleted"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        Course course \u003d getCourse(instructor.getCourseId());"},{"lineNumber":876,"author":{"gitId":"-"},"content":""},{"lineNumber":877,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":878,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Course with id \" + instructor.getCourseId() + \" does not exist\");"},{"lineNumber":879,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":880,"author":{"gitId":"-"},"content":"        if (course.isCourseDeleted()) {"},{"lineNumber":881,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"The course you are trying to join has been deleted by an instructor\");"},{"lineNumber":882,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"        if (instructor.isRegistered()) {"},{"lineNumber":885,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException(\"Instructor has already joined course\");"},{"lineNumber":886,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":887,"author":{"gitId":"-"},"content":"            // Check if this Google ID has already joined this course with courseId"},{"lineNumber":888,"author":{"gitId":"-"},"content":"            Instructor existingInstructor \u003d"},{"lineNumber":889,"author":{"gitId":"-"},"content":"                    usersLogic.getInstructorByGoogleId(instructor.getCourseId(), googleId);"},{"lineNumber":890,"author":{"gitId":"-"},"content":"            if (existingInstructor !\u003d null) {"},{"lineNumber":891,"author":{"gitId":"-"},"content":"                throw new EntityAlreadyExistsException(\"Instructor has already joined course\");"},{"lineNumber":892,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":893,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":894,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":895,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":896,"author":{"gitId":"-"},"content":""},{"lineNumber":897,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":898,"author":{"gitId":"-"},"content":"     * Searches instructors in the whole system. Used by admin only."},{"lineNumber":899,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":900,"author":{"gitId":"-"},"content":"     * @return List of found instructors in the whole system. Null if no result found."},{"lineNumber":901,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":902,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e searchInstructorsInWholeSystem(String queryString)"},{"lineNumber":903,"author":{"gitId":"-"},"content":"            throws SearchServiceException {"},{"lineNumber":904,"author":{"gitId":"-"},"content":"        assert queryString !\u003d null;"},{"lineNumber":905,"author":{"gitId":"-"},"content":""},{"lineNumber":906,"author":{"gitId":"-"},"content":"        return usersLogic.searchInstructorsInWholeSystem(queryString);"},{"lineNumber":907,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":908,"author":{"gitId":"-"},"content":""},{"lineNumber":909,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":910,"author":{"gitId":"-"},"content":"     * Updates an instructor and cascades to responses and comments if needed."},{"lineNumber":911,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":912,"author":{"gitId":"-"},"content":"     * @return updated instructor"},{"lineNumber":913,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the instructor update request is invalid"},{"lineNumber":914,"author":{"gitId":"-"},"content":"     * @throws InstructorUpdateException if the update violates instructor validity"},{"lineNumber":915,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the instructor does not exist in the database"},{"lineNumber":916,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":917,"author":{"gitId":"-"},"content":"    public Instructor updateInstructorCascade(String courseId, InstructorCreateRequest instructorRequest) throws"},{"lineNumber":918,"author":{"gitId":"-"},"content":"            InvalidParametersException, InstructorUpdateException, EntityDoesNotExistException {"},{"lineNumber":919,"author":{"gitId":"-"},"content":"        return usersLogic.updateInstructorCascade(courseId, instructorRequest);"},{"lineNumber":920,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":921,"author":{"gitId":"-"},"content":""},{"lineNumber":922,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":923,"author":{"gitId":"-"},"content":"     * Checks if an instructor with {@code googleId} can create a course with {@code institute}."},{"lineNumber":924,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":925,"author":{"gitId":"-"},"content":"    public boolean canInstructorCreateCourse(String googleId, String institute) {"},{"lineNumber":926,"author":{"gitId":"-"},"content":"        return usersLogic.canInstructorCreateCourse(googleId, institute);"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":930,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code id}."},{"lineNumber":931,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":932,"author":{"gitId":"-"},"content":"     * @param id    Id of Student."},{"lineNumber":933,"author":{"gitId":"-"},"content":"     * @return      Returns Student if found else null."},{"lineNumber":934,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":935,"author":{"gitId":"-"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":936,"author":{"gitId":"-"},"content":"        return usersLogic.getStudent(id);"},{"lineNumber":937,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":938,"author":{"gitId":"-"},"content":""},{"lineNumber":939,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":940,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code courseId} and {@code email}."},{"lineNumber":941,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":942,"author":{"gitId":"-"},"content":"    public Student getStudentForEmail(String courseId, String email) {"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentForEmail(courseId, email);"},{"lineNumber":944,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":945,"author":{"gitId":"-"},"content":""},{"lineNumber":946,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":947,"author":{"gitId":"-"},"content":"     * Check if the students with the provided emails exist in the course."},{"lineNumber":948,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":949,"author":{"gitId":"-"},"content":"    public boolean verifyStudentsExistInCourse(String courseId, List\u003cString\u003e emails) {"},{"lineNumber":950,"author":{"gitId":"-"},"content":"        return usersLogic.verifyStudentsExistInCourse(courseId, emails);"},{"lineNumber":951,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":952,"author":{"gitId":"-"},"content":""},{"lineNumber":953,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":954,"author":{"gitId":"-"},"content":"     * Check if the instructors with the provided emails exist in the course."},{"lineNumber":955,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":956,"author":{"gitId":"-"},"content":"    public boolean verifyInstructorsExistInCourse(String courseId, List\u003cString\u003e emails) {"},{"lineNumber":957,"author":{"gitId":"-"},"content":"        return usersLogic.verifyInstructorsExistInCourse(courseId, emails);"},{"lineNumber":958,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":959,"author":{"gitId":"-"},"content":""},{"lineNumber":960,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":961,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":962,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":963,"author":{"gitId":"-"},"content":"     * @return Empty list if none found."},{"lineNumber":964,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":965,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForCourse(String courseId) {"},{"lineNumber":966,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentsForCourse(courseId);"},{"lineNumber":968,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":969,"author":{"gitId":"-"},"content":""},{"lineNumber":970,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":971,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":972,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":973,"author":{"gitId":"-"},"content":"     * @return Empty list if none found."},{"lineNumber":974,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":975,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getUnregisteredStudentsForCourse(String courseId) {"},{"lineNumber":976,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":977,"author":{"gitId":"-"},"content":"        return usersLogic.getUnregisteredStudentsForCourse(courseId);"},{"lineNumber":978,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":979,"author":{"gitId":"-"},"content":""},{"lineNumber":980,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":981,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code regkey}."},{"lineNumber":982,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":983,"author":{"gitId":"-"},"content":"    public Student getStudentByRegistrationKey(String regKey) {"},{"lineNumber":984,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentByRegistrationKey(regKey);"},{"lineNumber":985,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":986,"author":{"gitId":"-"},"content":""},{"lineNumber":987,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":988,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code googleId}."},{"lineNumber":989,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":990,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentByGoogleId(courseId, googleId);"},{"lineNumber":992,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":993,"author":{"gitId":"-"},"content":""},{"lineNumber":994,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":995,"author":{"gitId":"-"},"content":"     * Gets students by associated {@code teamName} and {@code courseId}."},{"lineNumber":996,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":997,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsByTeamName(String teamName, String courseId) {"},{"lineNumber":998,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentsForTeam(teamName, courseId);"},{"lineNumber":999,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1000,"author":{"gitId":"-"},"content":""},{"lineNumber":1001,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1002,"author":{"gitId":"domoberzin"},"content":"     * Gets a team by associated {@code courseId} and {@code sectionName}."},{"lineNumber":1003,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1004,"author":{"gitId":"domoberzin"},"content":"    public Section getSectionOrCreate(String courseId, String sectionName) {"},{"lineNumber":1005,"author":{"gitId":"domoberzin"},"content":"        return usersLogic.getSectionOrCreate(courseId, sectionName);"},{"lineNumber":1006,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1007,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1008,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1009,"author":{"gitId":"domoberzin"},"content":"     * Gets a team by associated {@code section} and {@code teamName}."},{"lineNumber":1010,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1011,"author":{"gitId":"domoberzin"},"content":"    public Team getTeamOrCreate(Section section, String teamName) {"},{"lineNumber":1012,"author":{"gitId":"domoberzin"},"content":"        return usersLogic.getTeamOrCreate(section, teamName);"},{"lineNumber":1013,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1014,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1015,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"     * Creates a student."},{"lineNumber":1017,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"     * @return the created student"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the student is not valid"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the student already exists in the database."},{"lineNumber":1021,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"    public Student createStudent(Student student) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"        return usersLogic.createStudent(student);"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1025,"author":{"gitId":"-"},"content":""},{"lineNumber":1026,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":1027,"author":{"gitId":"yuanxi1"},"content":"     * Search for students. Preconditions: all parameters are non-null."},{"lineNumber":1028,"author":{"gitId":"yuanxi1"},"content":"     * @param instructors   a list of Instructors associated to a googleId,"},{"lineNumber":1029,"author":{"gitId":"yuanxi1"},"content":"     *                      used for filtering of search result"},{"lineNumber":1030,"author":{"gitId":"yuanxi1"},"content":"     * @return Null if no match found"},{"lineNumber":1031,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":1032,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudents(String queryString, List\u003cInstructor\u003e instructors)"},{"lineNumber":1033,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":1034,"author":{"gitId":"yuanxi1"},"content":"        assert queryString !\u003d null;"},{"lineNumber":1035,"author":{"gitId":"yuanxi1"},"content":"        assert instructors !\u003d null;"},{"lineNumber":1036,"author":{"gitId":"yuanxi1"},"content":"        return usersLogic.searchStudents(queryString, instructors);"},{"lineNumber":1037,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":1038,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1039,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":1040,"author":{"gitId":"yuanxi1"},"content":"     * This method should be used by admin only since the searching does not restrict the"},{"lineNumber":1041,"author":{"gitId":"yuanxi1"},"content":"     * visibility according to the logged-in user\u0027s google ID. This is used by admin to"},{"lineNumber":1042,"author":{"gitId":"yuanxi1"},"content":"     * search students in the whole system."},{"lineNumber":1043,"author":{"gitId":"yuanxi1"},"content":"     * @return Null if no match found."},{"lineNumber":1044,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":1045,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudentsInWholeSystem(String queryString)"},{"lineNumber":1046,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":1047,"author":{"gitId":"yuanxi1"},"content":"        assert queryString !\u003d null;"},{"lineNumber":1048,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1049,"author":{"gitId":"yuanxi1"},"content":"        return usersLogic.searchStudentsInWholeSystem(queryString);"},{"lineNumber":1050,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":1051,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1052,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"     * Deletes a student cascade its associated feedback responses, deadline"},{"lineNumber":1054,"author":{"gitId":"-"},"content":"     * extensions and comments."},{"lineNumber":1055,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1056,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the student does not exist."},{"lineNumber":1057,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003e"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr/\u003e"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1061,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1062,"author":{"gitId":"-"},"content":"    public void deleteStudentCascade(String courseId, String studentEmail) {"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"        assert studentEmail !\u003d null;"},{"lineNumber":1065,"author":{"gitId":"-"},"content":""},{"lineNumber":1066,"author":{"gitId":"-"},"content":"        usersLogic.deleteStudentCascade(courseId, studentEmail);"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1068,"author":{"gitId":"-"},"content":""},{"lineNumber":1069,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"     * Deletes all the students in the course cascade their associated responses, deadline extensions and comments."},{"lineNumber":1071,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr\u003e"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"     * Parameter is non-null."},{"lineNumber":1074,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"    public void deleteStudentsInCourseCascade(String courseId) {"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1077,"author":{"gitId":"-"},"content":""},{"lineNumber":1078,"author":{"gitId":"-"},"content":"        usersLogic.deleteStudentsInCourseCascade(courseId);"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1080,"author":{"gitId":"-"},"content":""},{"lineNumber":1081,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":1082,"author":{"gitId":"yuanxi1"},"content":"     * Make the student join the course, i.e. associate the Google ID to the student.\u003cbr\u003e"},{"lineNumber":1083,"author":{"gitId":"yuanxi1"},"content":"     * Create an account for the student if no existing account is found."},{"lineNumber":1084,"author":{"gitId":"yuanxi1"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":1085,"author":{"gitId":"yuanxi1"},"content":"     * * All parameters are non-null."},{"lineNumber":1086,"author":{"gitId":"yuanxi1"},"content":"     * @param key the registration key"},{"lineNumber":1087,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":1088,"author":{"gitId":"yuanxi1"},"content":"    public Student joinCourseForStudent(String key, String googleId)"},{"lineNumber":1089,"author":{"gitId":"yuanxi1"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":1090,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1091,"author":{"gitId":"yuanxi1"},"content":"        assert googleId !\u003d null;"},{"lineNumber":1092,"author":{"gitId":"yuanxi1"},"content":"        assert key !\u003d null;"},{"lineNumber":1093,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1094,"author":{"gitId":"yuanxi1"},"content":"        return accountsLogic.joinCourseForStudent(key, googleId);"},{"lineNumber":1095,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1096,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":1097,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":1098,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1099,"author":{"gitId":"-"},"content":"     * Gets all instructors and students by associated {@code googleId}."},{"lineNumber":1100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"    public List\u003cUser\u003e getAllUsersByGoogleId(String googleId) {"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"        return usersLogic.getAllUsersByGoogleId(googleId);"},{"lineNumber":1103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1104,"author":{"gitId":"-"},"content":""},{"lineNumber":1105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"     * Deletes a user."},{"lineNumber":1107,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1108,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the user does not exist.\u003c/p\u003e"},{"lineNumber":1109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"    public \u003cT extends User\u003e void deleteUser(T user) {"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"        usersLogic.deleteUser(user);"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1113,"author":{"gitId":"-"},"content":""},{"lineNumber":1114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"     * Deletes an instructor and cascades deletion to"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"     * associated feedback responses, deadline extensions and comments."},{"lineNumber":1117,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the instructor does not exist."},{"lineNumber":1119,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"    public void deleteInstructorCascade(String courseId, String email) {"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1125,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":1126,"author":{"gitId":"-"},"content":""},{"lineNumber":1127,"author":{"gitId":"-"},"content":"        usersLogic.deleteInstructorCascade(courseId, email);"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1129,"author":{"gitId":"-"},"content":""},{"lineNumber":1130,"author":{"gitId":"-"},"content":"    public List\u003cNotification\u003e getAllNotifications() {"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        return notificationsLogic.getAllNotifications();"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1133,"author":{"gitId":"-"},"content":""},{"lineNumber":1134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1135,"author":{"gitId":"-"},"content":"     * Resets the googleId associated with the instructor."},{"lineNumber":1136,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1137,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1139,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1140,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException If instructor cannot be found with given email and courseId."},{"lineNumber":1141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"    public void resetInstructorGoogleId(String email, String courseId, String googleId)"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":1144,"author":{"gitId":"-"},"content":"        usersLogic.resetInstructorGoogleId(email, courseId, googleId);"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1146,"author":{"gitId":"-"},"content":""},{"lineNumber":1147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"     * Resets the googleId associated with the student."},{"lineNumber":1149,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1152,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException If student cannot be found with given email and courseId."},{"lineNumber":1154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1155,"author":{"gitId":"-"},"content":"    public void resetStudentGoogleId(String email, String courseId, String googleId)"},{"lineNumber":1156,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"        usersLogic.resetStudentGoogleId(email, courseId, googleId);"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1159,"author":{"gitId":"-"},"content":""},{"lineNumber":1160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}."},{"lineNumber":1162,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"     * @return the instructor with the new registration key."},{"lineNumber":1164,"author":{"gitId":"-"},"content":"     * @throws InstructorUpdateException if system was unable to generate a new registration key."},{"lineNumber":1165,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the instructor does not exist."},{"lineNumber":1166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"    public Instructor regenerateInstructorRegistrationKey(String courseId, String email)"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InstructorUpdateException {"},{"lineNumber":1169,"author":{"gitId":"-"},"content":""},{"lineNumber":1170,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":1172,"author":{"gitId":"-"},"content":""},{"lineNumber":1173,"author":{"gitId":"-"},"content":"        return usersLogic.regenerateInstructorRegistrationKey(courseId, email);"},{"lineNumber":1174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1175,"author":{"gitId":"-"},"content":""},{"lineNumber":1176,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1177,"author":{"gitId":"-"},"content":"     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}."},{"lineNumber":1178,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1179,"author":{"gitId":"-"},"content":"     * @return the student with the new registration key."},{"lineNumber":1180,"author":{"gitId":"-"},"content":"     * @throws StudentUpdateException if system was unable to generate a new registration key."},{"lineNumber":1181,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the student does not exist."},{"lineNumber":1182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"    public Student regenerateStudentRegistrationKey(String courseId, String email)"},{"lineNumber":1184,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, StudentUpdateException {"},{"lineNumber":1185,"author":{"gitId":"-"},"content":""},{"lineNumber":1186,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":1188,"author":{"gitId":"-"},"content":""},{"lineNumber":1189,"author":{"gitId":"-"},"content":"        return usersLogic.regenerateStudentRegistrationKey(courseId, email);"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1191,"author":{"gitId":"-"},"content":""},{"lineNumber":1192,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1193,"author":{"gitId":"-"},"content":"     * Updates the instructor being edited to ensure validity of instructors for the course."},{"lineNumber":1194,"author":{"gitId":"-"},"content":"     * * Preconditions: \u003cbr\u003e"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1196,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1197,"author":{"gitId":"-"},"content":"     * @see UsersLogic#updateToEnsureValidityOfInstructorsForTheCourse(String, Instructor)"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1199,"author":{"gitId":"-"},"content":"    public void updateToEnsureValidityOfInstructorsForTheCourse(String courseId, Instructor instructorToEdit) {"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1201,"author":{"gitId":"-"},"content":"        assert instructorToEdit !\u003d null;"},{"lineNumber":1202,"author":{"gitId":"-"},"content":""},{"lineNumber":1203,"author":{"gitId":"-"},"content":"        usersLogic.updateToEnsureValidityOfInstructorsForTheCourse(courseId, instructorToEdit);"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1205,"author":{"gitId":"-"},"content":""},{"lineNumber":1206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"     * Returns active notification for general users and the specified {@code targetUser}."},{"lineNumber":1208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"    public List\u003cNotification\u003e getActiveNotificationsByTargetUser(NotificationTargetUser targetUser) {"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"        return notificationsLogic.getActiveNotificationsByTargetUser(targetUser);"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1212,"author":{"gitId":"-"},"content":""},{"lineNumber":1213,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"     * Gets all questions for a feedback session.\u003cbr\u003e"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"     * Returns an empty list if they are no questions"},{"lineNumber":1216,"author":{"gitId":"-"},"content":"     * for the session."},{"lineNumber":1217,"author":{"gitId":"-"},"content":"     * Preconditions: \u003cbr\u003e"},{"lineNumber":1218,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1219,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1220,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForSession(FeedbackSession feedbackSession) {"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":1222,"author":{"gitId":"-"},"content":""},{"lineNumber":1223,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.getFeedbackQuestionsForSession(feedbackSession);"},{"lineNumber":1224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1225,"author":{"gitId":"-"},"content":""},{"lineNumber":1226,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"     * Gets a list of all questions for the given session that"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"     * students can view/submit."},{"lineNumber":1229,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForStudents(FeedbackSession feedbackSession) {"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":1232,"author":{"gitId":"-"},"content":""},{"lineNumber":1233,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.getFeedbackQuestionsForStudents(feedbackSession);"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1235,"author":{"gitId":"-"},"content":""},{"lineNumber":1236,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"     * Gets a {@code List} of all questions for the given session that"},{"lineNumber":1238,"author":{"gitId":"-"},"content":"     * instructor can view/submit."},{"lineNumber":1239,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForInstructors("},{"lineNumber":1241,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, String instructorEmail) {"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":1243,"author":{"gitId":"-"},"content":""},{"lineNumber":1244,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.getFeedbackQuestionsForInstructors(feedbackSession, instructorEmail);"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1246,"author":{"gitId":"-"},"content":""},{"lineNumber":1247,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1248,"author":{"gitId":"xenosf"},"content":"     * Gets the session result for a feedback session."},{"lineNumber":1249,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":1250,"author":{"gitId":"xenosf"},"content":"     * @see FeedbackResponsesLogic#getSessionResultsForCourse("},{"lineNumber":1251,"author":{"gitId":"xenosf"},"content":"     * FeedbackSession, String, String, String, Section, FeedbackResultFetchType)"},{"lineNumber":1252,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1253,"author":{"gitId":"xenosf"},"content":"    public SqlSessionResultsBundle getSessionResultsForCourse("},{"lineNumber":1254,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, String userEmail,"},{"lineNumber":1255,"author":{"gitId":"xenosf"},"content":"            @Nullable UUID questionId, @Nullable String sectionName, @Nullable FeedbackResultFetchType fetchType) {"},{"lineNumber":1256,"author":{"gitId":"xenosf"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":1257,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1258,"author":{"gitId":"xenosf"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":1259,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1260,"author":{"gitId":"xenosf"},"content":"        return feedbackResponsesLogic.getSessionResultsForCourse("},{"lineNumber":1261,"author":{"gitId":"xenosf"},"content":"                feedbackSession, courseId, userEmail, questionId, sectionName, fetchType);"},{"lineNumber":1262,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1263,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1264,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1265,"author":{"gitId":"xenosf"},"content":"     * Gets the session result for a feedback session for the given user."},{"lineNumber":1266,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":1267,"author":{"gitId":"xenosf"},"content":"     * @see FeedbackResponsesLogic#getSessionResultsForUser(FeedbackSession, String, String, boolean, String)"},{"lineNumber":1268,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1269,"author":{"gitId":"xenosf"},"content":"    public SqlSessionResultsBundle getSessionResultsForUser("},{"lineNumber":1270,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, String userEmail, boolean isInstructor,"},{"lineNumber":1271,"author":{"gitId":"xenosf"},"content":"            @Nullable UUID questionId, boolean isPreviewResults) {"},{"lineNumber":1272,"author":{"gitId":"xenosf"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":1273,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1274,"author":{"gitId":"xenosf"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":1275,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1276,"author":{"gitId":"xenosf"},"content":"        return feedbackResponsesLogic.getSessionResultsForUser("},{"lineNumber":1277,"author":{"gitId":"xenosf"},"content":"                feedbackSession, courseId, userEmail, isInstructor, questionId, isPreviewResults);"},{"lineNumber":1278,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1279,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1280,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"     * Persists the given data bundle to the database."},{"lineNumber":1282,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1283,"author":{"gitId":"-"},"content":"    public SqlDataBundle persistDataBundle(SqlDataBundle dataBundle)"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {"},{"lineNumber":1285,"author":{"gitId":"-"},"content":"        return dataBundleLogic.persistDataBundle(dataBundle);"},{"lineNumber":1286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1287,"author":{"gitId":"-"},"content":""},{"lineNumber":1288,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1289,"author":{"gitId":"-"},"content":"     * Puts searchable documents from the data bundle to the database."},{"lineNumber":1290,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1291,"author":{"gitId":"-"},"content":"     * @see DataBundleLogic#putDocuments(DataBundle)"},{"lineNumber":1292,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1293,"author":{"gitId":"-"},"content":"    public void putDocuments(SqlDataBundle dataBundle) throws SearchServiceException {"},{"lineNumber":1294,"author":{"gitId":"-"},"content":"        dataBundleLogic.putDocuments(dataBundle);"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1296,"author":{"gitId":"-"},"content":""},{"lineNumber":1297,"author":{"gitId":"mingyuanc"},"content":"    /**"},{"lineNumber":1298,"author":{"gitId":"mingyuanc"},"content":"     * Puts searchable instructor to the database."},{"lineNumber":1299,"author":{"gitId":"mingyuanc"},"content":"     */"},{"lineNumber":1300,"author":{"gitId":"mingyuanc"},"content":"    public void putInstructorDocument(Instructor instructor) throws SearchServiceException {"},{"lineNumber":1301,"author":{"gitId":"mingyuanc"},"content":"        usersLogic.putInstructorDocument(instructor);"},{"lineNumber":1302,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":1303,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":1304,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1305,"author":{"gitId":"domoberzin"},"content":"     * Creates or updates search document for the given account request."},{"lineNumber":1306,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":1307,"author":{"gitId":"domoberzin"},"content":"     * @see AccountRequestsLogic#putDocument(AccountRequest)"},{"lineNumber":1308,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1309,"author":{"gitId":"domoberzin"},"content":"    public void putAccountRequestDocument(AccountRequest accountRequest) throws SearchServiceException {"},{"lineNumber":1310,"author":{"gitId":"domoberzin"},"content":"        accountRequestLogic.putDocument(accountRequest);"},{"lineNumber":1311,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1312,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1313,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1314,"author":{"gitId":"-"},"content":"     * Removes the given data bundle from the database."},{"lineNumber":1315,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1316,"author":{"gitId":"-"},"content":"    public void removeDataBundle(SqlDataBundle dataBundle) throws InvalidParametersException {"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"        dataBundleLogic.removeDataBundle(dataBundle);"},{"lineNumber":1318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1319,"author":{"gitId":"-"},"content":""},{"lineNumber":1320,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1321,"author":{"gitId":"-"},"content":"     * Populates fields that need dynamic generation in a question."},{"lineNumber":1322,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1323,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCurrently, only MCQ/MSQ needs to generate choices dynamically.\u003c/p\u003e"},{"lineNumber":1324,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1325,"author":{"gitId":"-"},"content":"     * @param feedbackQuestion the question to populate"},{"lineNumber":1326,"author":{"gitId":"-"},"content":"     * @param courseId the ID of the course"},{"lineNumber":1327,"author":{"gitId":"-"},"content":"     * @param emailOfEntityDoingQuestion the email of the entity doing the question"},{"lineNumber":1328,"author":{"gitId":"-"},"content":"     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"     *                                  it can be {@code null}."},{"lineNumber":1330,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"    public void populateFieldsToGenerateInQuestion(FeedbackQuestion feedbackQuestion,"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"            String courseId, String emailOfEntityDoingQuestion,"},{"lineNumber":1333,"author":{"gitId":"-"},"content":"            String teamOfEntityDoingQuestion) {"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"        assert feedbackQuestion !\u003d null;"},{"lineNumber":1335,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1336,"author":{"gitId":"-"},"content":"        assert emailOfEntityDoingQuestion !\u003d null;"},{"lineNumber":1337,"author":{"gitId":"-"},"content":""},{"lineNumber":1338,"author":{"gitId":"-"},"content":"        feedbackQuestionsLogic.populateFieldsToGenerateInQuestion("},{"lineNumber":1339,"author":{"gitId":"-"},"content":"                feedbackQuestion, courseId, emailOfEntityDoingQuestion, teamOfEntityDoingQuestion);"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1341,"author":{"gitId":"-"},"content":""},{"lineNumber":1342,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"     * Gets a feedback question."},{"lineNumber":1344,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":1346,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1347,"author":{"gitId":"-"},"content":"    public FeedbackQuestion getFeedbackQuestion(UUID id) {"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.getFeedbackQuestion(id);"},{"lineNumber":1349,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1350,"author":{"gitId":"-"},"content":""},{"lineNumber":1351,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"     * Deletes a feedback question cascade its responses and comments."},{"lineNumber":1353,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1354,"author":{"gitId":"-"},"content":"     * \u003cp\u003eSilently fail if question does not exist."},{"lineNumber":1355,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1356,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1357,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1358,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1359,"author":{"gitId":"-"},"content":"    public void deleteFeedbackQuestionCascade(UUID questionId) {"},{"lineNumber":1360,"author":{"gitId":"-"},"content":"        feedbackQuestionsLogic.deleteFeedbackQuestionCascade(questionId);"},{"lineNumber":1361,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1362,"author":{"gitId":"-"},"content":""},{"lineNumber":1363,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"     * Gets the recipients of a feedback question for student."},{"lineNumber":1365,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"     * @see FeedbackQuestionsLogic#getRecipientsOfQuestion"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1368,"author":{"gitId":"-"},"content":"    public Map\u003cString, FeedbackQuestionRecipient\u003e getRecipientsOfQuestion("},{"lineNumber":1369,"author":{"gitId":"-"},"content":"            FeedbackQuestion question,"},{"lineNumber":1370,"author":{"gitId":"-"},"content":"            @Nullable Instructor instructorGiver, @Nullable Student studentGiver) {"},{"lineNumber":1371,"author":{"gitId":"-"},"content":"        assert question !\u003d null;"},{"lineNumber":1372,"author":{"gitId":"-"},"content":""},{"lineNumber":1373,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.getRecipientsOfQuestion(question, instructorGiver, studentGiver, null);"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1375,"author":{"gitId":"-"},"content":""},{"lineNumber":1376,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1377,"author":{"gitId":"-"},"content":"     * Gets a feedbackResponse or null if it does not exist."},{"lineNumber":1378,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1379,"author":{"gitId":"-"},"content":"    public FeedbackResponse getFeedbackResponse(UUID frId) {"},{"lineNumber":1380,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.getFeedbackResponse(frId);"},{"lineNumber":1381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1382,"author":{"gitId":"-"},"content":""},{"lineNumber":1383,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1384,"author":{"gitId":"-"},"content":"     * Creates a feedback response."},{"lineNumber":1385,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1386,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1388,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1389,"author":{"gitId":"-"},"content":"     * @return created feedback response"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the response is not valid"},{"lineNumber":1391,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the response already exist"},{"lineNumber":1392,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1393,"author":{"gitId":"-"},"content":"    public FeedbackResponse createFeedbackResponse(FeedbackResponse feedbackResponse)"},{"lineNumber":1394,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":1395,"author":{"gitId":"-"},"content":"        assert feedbackResponse !\u003d null;"},{"lineNumber":1396,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.createFeedbackResponse(feedbackResponse);"},{"lineNumber":1397,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1398,"author":{"gitId":"-"},"content":""},{"lineNumber":1399,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1400,"author":{"gitId":"-"},"content":"     * Deletes a feedback response and cascades its associated comments."},{"lineNumber":1401,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1402,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1403,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1404,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1405,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesAndCommentsCascade(FeedbackResponse feedbackResponse) {"},{"lineNumber":1406,"author":{"gitId":"-"},"content":"        assert feedbackResponse !\u003d null;"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"        feedbackResponsesLogic.deleteFeedbackResponsesAndCommentsCascade(feedbackResponse);"},{"lineNumber":1408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1409,"author":{"gitId":"-"},"content":""},{"lineNumber":1410,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1411,"author":{"gitId":"-"},"content":"     * Get existing feedback responses from instructor for the given question."},{"lineNumber":1412,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1413,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromInstructorForQuestion("},{"lineNumber":1414,"author":{"gitId":"-"},"content":"            FeedbackQuestion question, Instructor instructor) {"},{"lineNumber":1415,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.getFeedbackResponsesFromInstructorForQuestion("},{"lineNumber":1416,"author":{"gitId":"-"},"content":"                question, instructor);"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1418,"author":{"gitId":"-"},"content":""},{"lineNumber":1419,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1420,"author":{"gitId":"-"},"content":"     * Get existing feedback responses from student or his team for the given"},{"lineNumber":1421,"author":{"gitId":"-"},"content":"     * question."},{"lineNumber":1422,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1423,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromStudentOrTeamForQuestion("},{"lineNumber":1424,"author":{"gitId":"-"},"content":"            FeedbackQuestion question, Student student) {"},{"lineNumber":1425,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.getFeedbackResponsesFromStudentOrTeamForQuestion("},{"lineNumber":1426,"author":{"gitId":"-"},"content":"                question, student);"},{"lineNumber":1427,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1428,"author":{"gitId":"-"},"content":""},{"lineNumber":1429,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1430,"author":{"gitId":"-"},"content":"     * Gets an feedback response comment by feedback response comment id."},{"lineNumber":1431,"author":{"gitId":"-"},"content":"     * @param id of feedback response comment."},{"lineNumber":1432,"author":{"gitId":"-"},"content":"     * @return the specified feedback response comment."},{"lineNumber":1433,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseComment(Long id) {"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"        return feedbackResponseCommentsLogic.getFeedbackResponseComment(id);"},{"lineNumber":1436,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1437,"author":{"gitId":"-"},"content":""},{"lineNumber":1438,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1439,"author":{"gitId":"-"},"content":"     * Updates a feedback response comment."},{"lineNumber":1440,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment does not exist"},{"lineNumber":1441,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1442,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment updateFeedbackResponseComment(Long frcId,"},{"lineNumber":1443,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentUpdateRequest updateRequest, String updaterEmail)"},{"lineNumber":1444,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":1445,"author":{"gitId":"-"},"content":"        return feedbackResponseCommentsLogic.updateFeedbackResponseComment(frcId, updateRequest, updaterEmail);"},{"lineNumber":1446,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1447,"author":{"gitId":"-"},"content":""},{"lineNumber":1448,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1449,"author":{"gitId":"-"},"content":"     * Updates a feedback response and comments by {@link FeedbackResponse}."},{"lineNumber":1450,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1451,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade updates its associated feedback response comment"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003ePreconditions: \u003cbr/\u003e"},{"lineNumber":1454,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1455,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1456,"author":{"gitId":"-"},"content":"     * @return updated feedback response"},{"lineNumber":1457,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":1458,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment cannot be found"},{"lineNumber":1459,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1460,"author":{"gitId":"-"},"content":"    public FeedbackResponse updateFeedbackResponseCascade(FeedbackResponse feedbackResponse)"},{"lineNumber":1461,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":1462,"author":{"gitId":"-"},"content":"        assert feedbackResponse !\u003d null;"},{"lineNumber":1463,"author":{"gitId":"-"},"content":""},{"lineNumber":1464,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.updateFeedbackResponseCascade(feedbackResponse);"},{"lineNumber":1465,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1466,"author":{"gitId":"-"},"content":""},{"lineNumber":1467,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1468,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a question."},{"lineNumber":1469,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"    public boolean areThereResponsesForQuestion(UUID questionId) {"},{"lineNumber":1471,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.areThereResponsesForQuestion(questionId);"},{"lineNumber":1472,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1473,"author":{"gitId":"-"},"content":""},{"lineNumber":1474,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a course."},{"lineNumber":1476,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"    public boolean hasResponsesForCourse(String courseId) {"},{"lineNumber":1478,"author":{"gitId":"-"},"content":"        return feedbackResponsesLogic.hasResponsesForCourse(courseId);"},{"lineNumber":1479,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1480,"author":{"gitId":"-"},"content":""},{"lineNumber":1481,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1482,"author":{"gitId":"-"},"content":"     * Gets the comment associated with the response."},{"lineNumber":1483,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseCommentForResponseFromParticipant("},{"lineNumber":1485,"author":{"gitId":"-"},"content":"            UUID feedbackResponseId) {"},{"lineNumber":1486,"author":{"gitId":"-"},"content":"        return feedbackResponseCommentsLogic.getFeedbackResponseCommentForResponseFromParticipant(feedbackResponseId);"},{"lineNumber":1487,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1488,"author":{"gitId":"-"},"content":""},{"lineNumber":1489,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1490,"author":{"gitId":"-"},"content":"     * Creates a feedback response comment."},{"lineNumber":1491,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the comment alreadty exists"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the comment is invalid"},{"lineNumber":1493,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1494,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment createFeedbackResponseComment(FeedbackResponseComment frc)"},{"lineNumber":1495,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":1496,"author":{"gitId":"-"},"content":"        return feedbackResponseCommentsLogic.createFeedbackResponseComment(frc);"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1498,"author":{"gitId":"-"},"content":""},{"lineNumber":1499,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1500,"author":{"gitId":"-"},"content":"     * Deletes a feedbackResponseComment."},{"lineNumber":1501,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponseComment(Long frcId) {"},{"lineNumber":1503,"author":{"gitId":"-"},"content":"        feedbackResponseCommentsLogic.deleteFeedbackResponseComment(frcId);"},{"lineNumber":1504,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1505,"author":{"gitId":"-"},"content":""},{"lineNumber":1506,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1507,"author":{"gitId":"domoberzin"},"content":"     * Gets all feedback responses from a giver for a question."},{"lineNumber":1508,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1509,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromGiverForCourse(String courseId, String giverEmail) {"},{"lineNumber":1510,"author":{"gitId":"domoberzin"},"content":"        return feedbackResponsesLogic.getFeedbackResponsesFromGiverForCourse(courseId, giverEmail);"},{"lineNumber":1511,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1512,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1513,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1514,"author":{"gitId":"domoberzin"},"content":"     * Gets all feedback responses for a recipient for a course."},{"lineNumber":1515,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1516,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForRecipientForCourse(String courseId, String recipientEmail) {"},{"lineNumber":1517,"author":{"gitId":"domoberzin"},"content":"        return feedbackResponsesLogic.getFeedbackResponsesForRecipientForCourse(courseId, recipientEmail);"},{"lineNumber":1518,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1519,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1520,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1521,"author":{"gitId":"domoberzin"},"content":"     * Gets all feedback response comments for a feedback response."},{"lineNumber":1522,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1523,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForResponse(UUID feedbackResponse) {"},{"lineNumber":1524,"author":{"gitId":"domoberzin"},"content":"        return feedbackResponseCommentsLogic.getFeedbackResponseCommentsForResponse(feedbackResponse);"},{"lineNumber":1525,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1526,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1527,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1528,"author":{"gitId":"domoberzin"},"content":"     * Validates sections for any limit violations and teams for any team name violations."},{"lineNumber":1529,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":1530,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003ePreconditions: \u003cbr\u003e"},{"lineNumber":1531,"author":{"gitId":"domoberzin"},"content":"     * * All parameters are non-null."},{"lineNumber":1532,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":1533,"author":{"gitId":"domoberzin"},"content":"     * @see StudentsLogic#validateSectionsAndTeams(List, String)"},{"lineNumber":1534,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1535,"author":{"gitId":"domoberzin"},"content":"    public void validateSectionsAndTeams("},{"lineNumber":1536,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudent\u003e studentList, String courseId) throws EnrollException {"},{"lineNumber":1537,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1538,"author":{"gitId":"domoberzin"},"content":"        assert studentList !\u003d null;"},{"lineNumber":1539,"author":{"gitId":"domoberzin"},"content":"        assert courseId !\u003d null;"},{"lineNumber":1540,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1541,"author":{"gitId":"domoberzin"},"content":"        usersLogic.validateSectionsAndTeams(studentList, courseId);"},{"lineNumber":1542,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1543,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1544,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1545,"author":{"gitId":"domoberzin"},"content":"     * Updates a feedback question by {@code FeedbackQuestionUpdateRequest}."},{"lineNumber":1546,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1547,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade adjust the question number of questions in the same session."},{"lineNumber":1548,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade adjust the existing response of the question."},{"lineNumber":1550,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1551,"author":{"gitId":"-"},"content":"     * \u003cbr/\u003e Preconditions: \u003cbr/\u003e"},{"lineNumber":1552,"author":{"gitId":"-"},"content":"     * * All parameters are non-null."},{"lineNumber":1553,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"     * @return updated feedback question"},{"lineNumber":1555,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":1556,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback question cannot be found"},{"lineNumber":1557,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"    public FeedbackQuestion updateFeedbackQuestionCascade(UUID questionId, FeedbackQuestionUpdateRequest updateRequest)"},{"lineNumber":1559,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":1560,"author":{"gitId":"-"},"content":"        return feedbackQuestionsLogic.updateFeedbackQuestionCascade(questionId, updateRequest);"},{"lineNumber":1561,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1562,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1563,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1564,"author":{"gitId":"-"},"content":"     * Returns a list of feedback sessions that need an \"Open\" email to be sent."},{"lineNumber":1565,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1566,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsWhichNeedOpenEmailsToBeSent() {"},{"lineNumber":1567,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsWhichNeedOpenEmailsToBeSent();"},{"lineNumber":1568,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1569,"author":{"gitId":"-"},"content":""},{"lineNumber":1570,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1571,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that were closed within past hour."},{"lineNumber":1572,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1573,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsClosedWithinThePastHour() {"},{"lineNumber":1574,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsClosedWithinThePastHour();"},{"lineNumber":1575,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1576,"author":{"gitId":"-"},"content":""},{"lineNumber":1577,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1578,"author":{"gitId":"xenosf"},"content":"     * Creates or updates search document for the given student."},{"lineNumber":1579,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":1580,"author":{"gitId":"xenosf"},"content":"     * @see UsersLogic#putStudentDocument(Student)"},{"lineNumber":1581,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1582,"author":{"gitId":"xenosf"},"content":"    public void putStudentDocument(Student student) throws SearchServiceException {"},{"lineNumber":1583,"author":{"gitId":"xenosf"},"content":"        usersLogic.putStudentDocument(student);"},{"lineNumber":1584,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1585,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1586,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":1587,"author":{"gitId":"domoberzin"},"content":"     * This is used by admin to search account requests in the whole system."},{"lineNumber":1588,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":1589,"author":{"gitId":"domoberzin"},"content":"     * @return A list of {@link AccountRequest} or {@code null} if no match found."},{"lineNumber":1590,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":1591,"author":{"gitId":"domoberzin"},"content":"    public List\u003cAccountRequest\u003e searchAccountRequestsInWholeSystem(String queryString)"},{"lineNumber":1592,"author":{"gitId":"domoberzin"},"content":"            throws SearchServiceException {"},{"lineNumber":1593,"author":{"gitId":"domoberzin"},"content":"        assert queryString !\u003d null;"},{"lineNumber":1594,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":1595,"author":{"gitId":"domoberzin"},"content":"        return accountRequestLogic.searchAccountRequestsInWholeSystem(queryString);"},{"lineNumber":1596,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":1597,"author":{"gitId":"-"},"content":""},{"lineNumber":1598,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1599,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that are going to close soon."},{"lineNumber":1600,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1601,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsClosingWithinTimeLimit() {"},{"lineNumber":1602,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsClosingWithinTimeLimit();"},{"lineNumber":1603,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1604,"author":{"gitId":"-"},"content":""},{"lineNumber":1605,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1606,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that are going to open soon."},{"lineNumber":1607,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsOpeningWithinTimeLimit() {"},{"lineNumber":1609,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSessionsOpeningWithinTimeLimit();"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":130,"yuanxi1":50,"marquestye":5,"xenosf":44,"dishenggg":9,"mingyuanc":7,"-":1366}},{"path":"src/main/java/teammates/sqllogic/api/SqlEmailGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.api;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.ErrorLogEntry;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.util.RequestTracer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.util.Templates;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.util.Templates.EmailTemplates;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.CoursesLogic;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.DeadlineExtensionsLogic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackSessionsLogic;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.UsersLogic;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Handles operations related to generating emails to be sent from provided templates."},{"lineNumber":37,"author":{"gitId":"-"},"content":" *"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * @see EmailTemplates"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * @see EmailType"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * @see EmailWrapper"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public final class SqlEmailGenerator {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // feedback action strings"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW \u003d \"submit, edit or view\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_ACTION_VIEW \u003d \"view\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_ACTION_SUBMIT_OR_UPDATE \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                            \", in case you have not submitted yet or wish to update your submission. \";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String HTML_NO_ACTION_REQUIRED \u003d \"\u003cmark\u003eNo action is required if you have already submitted\u003c/mark\u003e\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // status-related strings"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_STATUS_SESSION_OPEN \u003d \"is still open for submissions\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"                                            + FEEDBACK_ACTION_SUBMIT_OR_UPDATE + HTML_NO_ACTION_REQUIRED;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_STATUS_SESSION_OPENING \u003d \"is now open\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_STATUS_SESSION_CLOSING \u003d \"is closing soon\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"                                            + FEEDBACK_ACTION_SUBMIT_OR_UPDATE + HTML_NO_ACTION_REQUIRED;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_STATUS_SESSION_CLOSED \u003d \"is now closed for submission\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String FEEDBACK_STATUS_SESSION_OPENING_SOON \u003d \"is due to open soon\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String DATETIME_DISPLAY_FORMAT \u003d \"EEE, dd MMM yyyy, hh:mm a z\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final long SESSION_LINK_RECOVERY_DURATION_IN_DAYS \u003d 90;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final SqlEmailGenerator instance \u003d new SqlEmailGenerator();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private final CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private final DeadlineExtensionsLogic deLogic \u003d DeadlineExtensionsLogic.inst();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private final FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private final UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private SqlEmailGenerator() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static SqlEmailGenerator inst() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Generate Feedback Session Opening emails."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionOpeningEmails(FeedbackSession session) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionOpeningOrClosingEmails(session, EmailType.FEEDBACK_OPENING);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private List\u003cEmailWrapper\u003e generateFeedbackSessionOpeningOrClosingEmails("},{"lineNumber":86,"author":{"gitId":"-"},"content":"            FeedbackSession session, EmailType emailType) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Course course \u003d session.getCourse();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForStudents \u003d fsLogic.isFeedbackSessionForUserTypeToAnswer(session, false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForInstructors \u003d fsLogic.isFeedbackSessionForUserTypeToAnswer(session, true);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorsToNotify \u003d isEmailNeededForStudents"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                ? usersLogic.getCoOwnersForCourse(course.getId())"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d isEmailNeededForStudents"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                ? usersLogic.getStudentsForCourse(course.getId())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d isEmailNeededForInstructors"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                ? usersLogic.getInstructorsForCourse(course.getId())"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (emailType \u003d\u003d EmailType.FEEDBACK_CLOSING) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            List\u003cDeadlineExtension\u003e deadlines \u003d session.getDeadlineExtensions();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Set\u003cUUID\u003e userIds \u003d deadlines.stream()"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    .map(d -\u003e d.getUser().getId())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toSet());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"            // student."},{"lineNumber":107,"author":{"gitId":"-"},"content":"            students \u003d students.stream()"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    .filter(x -\u003e !userIds.contains(x.getId()))"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"            // instructor."},{"lineNumber":112,"author":{"gitId":"-"},"content":"            instructors \u003d instructors.stream()"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                    .filter(x -\u003e !userIds.contains(x.getId()))"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String status \u003d emailType \u003d\u003d EmailType.FEEDBACK_OPENING"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                ? FEEDBACK_STATUS_SESSION_OPENING"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                : FEEDBACK_STATUS_SESSION_CLOSING;"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String template \u003d emailType \u003d\u003d EmailType.FEEDBACK_OPENING"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                ? EmailTemplates.USER_FEEDBACK_SESSION_OPENING.replace(\"${status}\", status)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                : EmailTemplates.USER_FEEDBACK_SESSION.replace(\"${status}\", status);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionEmailBases(course, session, students, instructors, instructorsToNotify, template,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                emailType, FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Generates the feedback session opening soon emails for the given {@code session}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis is useful for e.g. in case the feedback session opening info was set wrongly."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionOpeningSoonEmails(FeedbackSession session) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionOpeningSoonOrClosedEmails(session, EmailType.FEEDBACK_OPENING_SOON);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private List\u003cEmailWrapper\u003e generateFeedbackSessionOpeningSoonOrClosedEmails("},{"lineNumber":139,"author":{"gitId":"-"},"content":"            FeedbackSession session, EmailType emailType) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Course course \u003d session.getCourse();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // Notify only course co-owners"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e coOwners \u003d usersLogic.getCoOwnersForCourse(course.getId());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return coOwners.stream()"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .map(coOwner -\u003e generateFeedbackSessionEmailBaseForCoowner(course, session, coOwner, emailType))"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private EmailWrapper generateFeedbackSessionEmailBaseForCoowner("},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, Instructor coOwner, EmailType emailType) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        String additionalNotes;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String status;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (emailType \u003d\u003d EmailType.FEEDBACK_OPENING_SOON) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            String editUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_EDIT_PAGE)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    .withCourseId(course.getId())"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    .withSessionName(session.getName())"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                    .toAbsoluteString();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            // If instructor has not joined the course, populate additional notes with information to join course."},{"lineNumber":158,"author":{"gitId":"-"},"content":"            if (coOwner.isRegistered()) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                additionalNotes \u003d fillUpEditFeedbackSessionDetailsFragment(editUrl);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                additionalNotes \u003d fillUpJoinCourseBeforeEditFeedbackSessionDetailsFragment(editUrl,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                        getInstructorCourseJoinUrl(coOwner));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            status \u003d FEEDBACK_STATUS_SESSION_OPENING_SOON;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            String reportUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.INSTRUCTOR_SESSION_REPORT_PAGE)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                    .withCourseId(course.getId())"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                    .withSessionName(session.getName())"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    .toAbsoluteString();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            additionalNotes \u003d fillUpViewResponsesDetailsFragment(reportUrl);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            status \u003d FEEDBACK_STATUS_SESSION_CLOSED;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Instant startTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":175,"author":{"gitId":"-"},"content":"                session.getStartTime(), session.getCourse().getTimeZone(), false);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":177,"author":{"gitId":"-"},"content":"                session.getEndTime(), session.getCourse().getTimeZone(), false);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(EmailTemplates.OWNER_FEEDBACK_SESSION,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                \"${status}\", status,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(coOwner.getName()),"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \"${feedbackSessionName}\", SanitizationHelper.sanitizeForHtml(session.getName()),"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                \"${deadline}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":185,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(endTime, session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)),"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                \"${sessionInstructions}\", session.getInstructionsString(),"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                \"${startTime}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":188,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(startTime, session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)),"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                \"${additionalNotes}\", additionalNotes);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(coOwner.getEmail());"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        email.setType(emailType);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), session.getName());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl}."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private String fillUpEditFeedbackSessionDetailsFragment(String editUrl) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.FRAGMENT_OPENING_SOON_EDIT_DETAILS,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                \"${sessionEditUrl}\", editUrl);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Generates the fragment for instructions on how to view responses for feedback session at {@code reportUrl}."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    private String fillUpViewResponsesDetailsFragment(String reportUrl) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.FRAGMENT_CLOSED_VIEW_RESPONSES,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                \"${reportUrl}\", reportUrl);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Generates the fragment for instructions on how to edit details for feedback session at {@code editUrl} and"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * how to join the course at {@code joinUrl}."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private String fillUpJoinCourseBeforeEditFeedbackSessionDetailsFragment(String editUrl, String joinUrl) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.FRAGMENT_OPENING_SOON_JOIN_COURSE_BEFORE_EDIT_DETAILS,"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                \"${sessionEditUrl}\", editUrl,"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                \"${joinUrl}\", joinUrl"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Generates the feedback session reminder emails for the given {@code session} for {@code students}"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * and {@code instructorsToRemind}. In addition, the emails will also be forwarded to {@code instructorsToNotify}."},{"lineNumber":228,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionReminderEmails("},{"lineNumber":230,"author":{"gitId":"-"},"content":"            FeedbackSession session, List\u003cStudent\u003e students,"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorsToRemind, Instructor instructorToNotify) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Course course \u003d session.getCourse();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        String template \u003d EmailTemplates.USER_FEEDBACK_SESSION.replace(\"${status}\", FEEDBACK_STATUS_SESSION_OPEN);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorToNotifyAsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        if (instructorToNotify !\u003d null) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            instructorToNotifyAsList.add(instructorToNotify);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionEmailBases(course, session, students, instructorsToRemind, instructorToNotifyAsList,"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                template, EmailType.FEEDBACK_SESSION_REMINDER, FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Generates the email containing the summary of the feedback sessions"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * email for the given {@code courseId} for {@code userEmail}."},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * @param courseId - ID of the course"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @param userEmail - Email of student to send feedback session summary to"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * @param emailType - The email type which corresponds to the reason behind why the links are being resent"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public EmailWrapper generateFeedbackSessionSummaryOfCourse("},{"lineNumber":252,"author":{"gitId":"-"},"content":"            String courseId, String userEmail, EmailType emailType) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assert emailType \u003d\u003d EmailType.STUDENT_EMAIL_CHANGED"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                || emailType \u003d\u003d EmailType.STUDENT_COURSE_LINKS_REGENERATED"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                || emailType \u003d\u003d EmailType.INSTRUCTOR_COURSE_LINKS_REGENERATED;"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        Course course \u003d coursesLogic.getCourse(courseId);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        boolean isInstructor \u003d emailType \u003d\u003d EmailType.INSTRUCTOR_COURSE_LINKS_REGENERATED;"},{"lineNumber":259,"author":{"gitId":"domoberzin"},"content":"        Student student \u003d usersLogic.getStudentForEmail(courseId, userEmail);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d null;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        if (isInstructor) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            instructor \u003d usersLogic.getInstructorForEmail(courseId, userEmail);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e fsInCourse \u003d fsLogic.getFeedbackSessionsForCourse(courseId);"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"        for (FeedbackSession fs : fsInCourse) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            if (fs.isOpenEmailSent() || fs.isPublishedEmailSent()) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                sessions.add(fs);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        StringBuilder linksFragmentValue \u003d new StringBuilder(1000);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        String joinUrl \u003d Config.getFrontEndAppUrl("},{"lineNumber":276,"author":{"gitId":"-"},"content":"                isInstructor ? instructor.getRegistrationUrl() : student.getRegistrationUrl()).toAbsoluteString();"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        boolean isYetToJoinCourse \u003d isInstructor ? isYetToJoinCourse(instructor) : isYetToJoinCourse(student);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        String joinFragmentTemplate \u003d isInstructor"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                ? EmailTemplates.FRAGMENT_INSTRUCTOR_COURSE_REJOIN_AFTER_REGKEY_RESET"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                : emailType \u003d\u003d EmailType.STUDENT_EMAIL_CHANGED"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                        ? EmailTemplates.FRAGMENT_STUDENT_COURSE_JOIN"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                        : EmailTemplates.FRAGMENT_STUDENT_COURSE_REJOIN_AFTER_REGKEY_RESET;"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        String joinFragmentValue \u003d isYetToJoinCourse"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                ? Templates.populateTemplate(joinFragmentTemplate,"},{"lineNumber":286,"author":{"gitId":"-"},"content":"                        \"${joinUrl}\", joinUrl,"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                        \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                        \"${coOwnersEmails}\", generateCoOwnersEmailsLine(course.getId()),"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                        \"${supportEmail}\", Config.SUPPORT_EMAIL)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                : \"\";"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"        for (FeedbackSession fs : sessions) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            String submitUrlHtml \u003d \"(Feedback session is not yet opened)\";"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            String reportUrlHtml \u003d \"(Feedback session is not yet published)\";"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"            String userKey \u003d isInstructor ? instructor.getRegKey() : student.getRegKey();"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"            if (fs.isOpened() || fs.isClosed()) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                String submitUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_SUBMISSION_PAGE)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                        .withCourseId(course.getId())"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                        .withSessionName(fs.getName())"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                        .withRegistrationKey(userKey)"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                        .withEntityType(isInstructor ? Const.EntityType.INSTRUCTOR : \"\")"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                        .toAbsoluteString();"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                submitUrlHtml \u003d \"\u003ca href\u003d\\\"\" + submitUrl + \"\\\"\u003e\" + submitUrl + \"\u003c/a\u003e\";"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"            if (fs.isPublished()) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                String reportUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                        .withCourseId(course.getId())"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                        .withSessionName(fs.getName())"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                        .withRegistrationKey(userKey)"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                        .withEntityType(isInstructor ? Const.EntityType.INSTRUCTOR : \"\")"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                        .toAbsoluteString();"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                reportUrlHtml \u003d \"\u003ca href\u003d\\\"\" + reportUrl + \"\\\"\u003e\" + reportUrl + \"\u003c/a\u003e\";"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"            Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":319,"author":{"gitId":"-"},"content":"                    fs.getEndTime(), fs.getCourse().getTimeZone(), false);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            linksFragmentValue.append(Templates.populateTemplate("},{"lineNumber":321,"author":{"gitId":"-"},"content":"                    EmailTemplates.FRAGMENT_SINGLE_FEEDBACK_SESSION_LINKS,"},{"lineNumber":322,"author":{"gitId":"-"},"content":"                    \"${feedbackSessionName}\", fs.getName(),"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                    \"${deadline}\", TimeHelper.formatInstant(endTime, fs.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)"},{"lineNumber":324,"author":{"gitId":"-"},"content":"                            + (fs.isClosed() ? \" (Passed)\" : \"\"),"},{"lineNumber":325,"author":{"gitId":"-"},"content":"                    \"${submitUrl}\", submitUrlHtml,"},{"lineNumber":326,"author":{"gitId":"-"},"content":"                    \"${reportUrl}\", reportUrlHtml));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"        if (linksFragmentValue.length() \u003d\u003d 0) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            linksFragmentValue.append(\"No links found.\");"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"        String additionalContactInformation \u003d getAdditionalContactInformationFragment(course, isInstructor);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        String resendLinksTemplate \u003d emailType \u003d\u003d EmailType.STUDENT_EMAIL_CHANGED"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                ? Templates.EmailTemplates.USER_FEEDBACK_SESSION_RESEND_ALL_LINKS"},{"lineNumber":336,"author":{"gitId":"-"},"content":"                : Templates.EmailTemplates.USER_REGKEY_REGENERATION_RESEND_ALL_COURSE_LINKS;"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"        String userName \u003d isInstructor ? instructor.getName() : student.getName();"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(resendLinksTemplate,"},{"lineNumber":340,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(userName),"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                \"${userEmail}\", userEmail,"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                \"${courseId}\", course.getId(),"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                \"${joinFragment}\", joinFragmentValue,"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                \"${linksFragment}\", linksFragmentValue.toString(),"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                \"${additionalContactInformation}\", additionalContactInformation);"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(userEmail);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        email.setType(emailType);"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * Generates for the student an recovery email listing the links to submit/view responses for all feedback sessions"},{"lineNumber":357,"author":{"gitId":"-"},"content":"     * under {@code recoveryEmailAddress} in the past 180 days. If no student with {@code recoveryEmailAddress} is"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * found, generate an email stating that there is no such student in the system. If no feedback sessions are found,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * generate an email stating no feedback sessions found."},{"lineNumber":360,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public EmailWrapper generateSessionLinksRecoveryEmailForStudent(String recoveryEmailAddress,"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            String studentNameFromDatastore, Map\u003cCourseAttributes, StringBuilder\u003e dataStoreLinkFragmentMap) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"        // Datastore attributes should be removed once migration is completed"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        String emptyName \u003d \"\";"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        boolean noDataStoreStudent \u003d studentNameFromDatastore.equals(emptyName); // student name cannot be empty"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentsForEmail \u003d usersLogic.getAllStudentsForEmail(recoveryEmailAddress);"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"        if (studentsForEmail.isEmpty() \u0026\u0026 noDataStoreStudent) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"            return generateSessionLinksRecoveryEmailForNonExistentStudent(recoveryEmailAddress);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            return generateSessionLinksRecoveryEmailForExistingStudent(recoveryEmailAddress, studentsForEmail,"},{"lineNumber":374,"author":{"gitId":"-"},"content":"            studentNameFromDatastore, dataStoreLinkFragmentMap);"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    private EmailWrapper generateSessionLinksRecoveryEmailForNonExistentStudent(String recoveryEmailAddress) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        String recoveryUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSIONS_LINK_RECOVERY_PAGE).toAbsoluteString();"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate("},{"lineNumber":381,"author":{"gitId":"-"},"content":"                EmailTemplates.SESSION_LINKS_RECOVERY_EMAIL_NOT_FOUND,"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                \"${userEmail}\", SanitizationHelper.sanitizeForHtml(recoveryEmailAddress),"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL,"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                \"${teammateHomePageLink}\", Config.getFrontEndAppUrl(\"/\").toAbsoluteString(),"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                \"${sessionsRecoveryLink}\", recoveryUrl);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(recoveryEmailAddress);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        email.setType(EmailType.SESSION_LINKS_RECOVERY);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        email.setSubjectFromType();"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"    private EmailWrapper generateSessionLinksRecoveryEmailForExistingStudent(String recoveryEmailAddress,"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e studentsForEmail, String studentNameFromDatastore,"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            Map\u003cCourseAttributes, StringBuilder\u003e dataStoreLinkFragmentMap) {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        assert !studentsForEmail.isEmpty() || studentNameFromDatastore !\u003d null;"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        int firstStudentIdx \u003d 0;"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"        Map\u003cCourse, StringBuilder\u003e linkFragmentsMap \u003d generateLinkFragmentsMap(studentsForEmail);"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"        String emailBody;"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"        String studentName;"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        if (studentsForEmail.isEmpty()) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            studentName \u003d studentNameFromDatastore;"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            studentName \u003d studentsForEmail.get(firstStudentIdx).getName();"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"        var recoveryUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSIONS_LINK_RECOVERY_PAGE).toAbsoluteString();"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"        if (linkFragmentsMap.isEmpty() \u0026\u0026 dataStoreLinkFragmentMap.isEmpty()) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            emailBody \u003d Templates.populateTemplate("},{"lineNumber":415,"author":{"gitId":"-"},"content":"                    EmailTemplates.SESSION_LINKS_RECOVERY_ACCESS_LINKS_NONE,"},{"lineNumber":416,"author":{"gitId":"-"},"content":"                    \"${teammateHomePageLink}\", Config.getFrontEndAppUrl(\"/\").toAbsoluteString(),"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                    \"${userEmail}\", SanitizationHelper.sanitizeForHtml(recoveryEmailAddress),"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                    \"${supportEmail}\", Config.SUPPORT_EMAIL,"},{"lineNumber":419,"author":{"gitId":"-"},"content":"                    \"${sessionsRecoveryLink}\", recoveryUrl);"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":421,"author":{"gitId":"-"},"content":"            var courseFragments \u003d new StringBuilder(10000);"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            linkFragmentsMap.forEach((course, linksFragments) -\u003e {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"                String courseBody \u003d Templates.populateTemplate("},{"lineNumber":424,"author":{"gitId":"-"},"content":"                        EmailTemplates.FRAGMENT_SESSION_LINKS_RECOVERY_ACCESS_LINKS_BY_COURSE,"},{"lineNumber":425,"author":{"gitId":"-"},"content":"                        \"${sessionFragment}\", linksFragments.toString(),"},{"lineNumber":426,"author":{"gitId":"-"},"content":"                        \"${courseName}\", course.getName());"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                courseFragments.append(courseBody);"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"            // To remove after migrating to postgres"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            dataStoreLinkFragmentMap.forEach((course, linksFragments) -\u003e {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"                String courseBody \u003d Templates.populateTemplate("},{"lineNumber":433,"author":{"gitId":"-"},"content":"                        EmailTemplates.FRAGMENT_SESSION_LINKS_RECOVERY_ACCESS_LINKS_BY_COURSE,"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                        \"${sessionFragment}\", linksFragments.toString(),"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                        \"${courseName}\", course.getName());"},{"lineNumber":436,"author":{"gitId":"-"},"content":"                courseFragments.append(courseBody);"},{"lineNumber":437,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            emailBody \u003d Templates.populateTemplate("},{"lineNumber":439,"author":{"gitId":"-"},"content":"                    EmailTemplates.SESSION_LINKS_RECOVERY_ACCESS_LINKS,"},{"lineNumber":440,"author":{"gitId":"-"},"content":"                    \"${userName}\", SanitizationHelper.sanitizeForHtml(studentName),"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                    \"${linksFragment}\", courseFragments.toString(),"},{"lineNumber":442,"author":{"gitId":"-"},"content":"                    \"${userEmail}\", SanitizationHelper.sanitizeForHtml(recoveryEmailAddress),"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                    \"${teammateHomePageLink}\", Config.getFrontEndAppUrl(\"/\").toAbsoluteString(),"},{"lineNumber":444,"author":{"gitId":"-"},"content":"                    \"${supportEmail}\", Config.SUPPORT_EMAIL,"},{"lineNumber":445,"author":{"gitId":"-"},"content":"                    \"${sessionsRecoveryLink}\", recoveryUrl);"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"        var email \u003d getEmptyEmailAddressedToEmail(recoveryEmailAddress);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        email.setType(EmailType.SESSION_LINKS_RECOVERY);"},{"lineNumber":450,"author":{"gitId":"-"},"content":"        email.setSubjectFromType();"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"    private Map\u003cCourse, StringBuilder\u003e generateLinkFragmentsMap(List\u003cStudent\u003e studentsForEmail) {"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        Instant searchStartTime \u003d TimeHelper.getInstantDaysOffsetBeforeNow(SESSION_LINK_RECOVERY_DURATION_IN_DAYS);"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        Map\u003cCourse, StringBuilder\u003e linkFragmentsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"        for (var student : studentsForEmail) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"            RequestTracer.checkRemainingTime();"},{"lineNumber":461,"author":{"gitId":"-"},"content":"            // Query students\u0027 courses first"},{"lineNumber":462,"author":{"gitId":"-"},"content":"            // as a student will likely be in only a small number of courses."},{"lineNumber":463,"author":{"gitId":"-"},"content":"            Course course \u003d student.getCourse();"},{"lineNumber":464,"author":{"gitId":"-"},"content":"            String courseId \u003d course.getId();"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"            StringBuilder linksFragmentValue;"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            if (linkFragmentsMap.containsKey(course)) {"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                linksFragmentValue \u003d linkFragmentsMap.get(course);"},{"lineNumber":469,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":470,"author":{"gitId":"-"},"content":"                linksFragmentValue \u003d new StringBuilder(5000);"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"            for (var session : fsLogic.getFeedbackSessionsForCourseStartingAfter(courseId, searchStartTime)) {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                RequestTracer.checkRemainingTime();"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                var submitUrlHtml \u003d \"\";"},{"lineNumber":476,"author":{"gitId":"-"},"content":"                var reportUrlHtml \u003d \"\";"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"                if (session.isOpened() || session.isClosed()) {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                    var submitUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_SUBMISSION_PAGE)"},{"lineNumber":480,"author":{"gitId":"-"},"content":"                            .withCourseId(course.getId())"},{"lineNumber":481,"author":{"gitId":"-"},"content":"                            .withSessionName(session.getName())"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                            .withRegistrationKey(student.getRegKey())"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                            .toAbsoluteString();"},{"lineNumber":484,"author":{"gitId":"-"},"content":"                    submitUrlHtml \u003d \"[\u003ca href\u003d\\\"\" + submitUrl + \"\\\"\u003esubmission link\u003c/a\u003e]\";"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"                if (session.isPublished()) {"},{"lineNumber":488,"author":{"gitId":"-"},"content":"                    var reportUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)"},{"lineNumber":489,"author":{"gitId":"-"},"content":"                            .withCourseId(course.getId())"},{"lineNumber":490,"author":{"gitId":"-"},"content":"                            .withSessionName(session.getName())"},{"lineNumber":491,"author":{"gitId":"-"},"content":"                            .withRegistrationKey(student.getRegKey())"},{"lineNumber":492,"author":{"gitId":"-"},"content":"                            .toAbsoluteString();"},{"lineNumber":493,"author":{"gitId":"-"},"content":"                    reportUrlHtml \u003d \"[\u003ca href\u003d\\\"\" + reportUrl + \"\\\"\u003eresult link\u003c/a\u003e]\";"},{"lineNumber":494,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"                if (submitUrlHtml.isEmpty() \u0026\u0026 reportUrlHtml.isEmpty()) {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":498,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"                linksFragmentValue.append(Templates.populateTemplate("},{"lineNumber":501,"author":{"gitId":"-"},"content":"                        EmailTemplates.FRAGMENT_SESSION_LINKS_RECOVERY_ACCESS_LINKS_BY_SESSION,"},{"lineNumber":502,"author":{"gitId":"-"},"content":"                        \"${sessionName}\", session.getName(),"},{"lineNumber":503,"author":{"gitId":"-"},"content":"                        \"${submitUrl}\", submitUrlHtml,"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                        \"${reportUrl}\", reportUrlHtml));"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"                linkFragmentsMap.putIfAbsent(course, linksFragmentValue);"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        return linkFragmentsMap;"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":514,"author":{"gitId":"-"},"content":"     * Generates the feedback session closing emails for the given {@code session}."},{"lineNumber":515,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":516,"author":{"gitId":"-"},"content":"     * \u003cp\u003eStudents and instructors with deadline extensions are not notified."},{"lineNumber":517,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":518,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionClosingEmails(FeedbackSession session) {"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionOpeningOrClosingEmails(session, EmailType.FEEDBACK_CLOSING);"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":523,"author":{"gitId":"-"},"content":"     * Generates the feedback session closed emails for the given {@code session}."},{"lineNumber":524,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionClosedEmails(FeedbackSession session) {"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionOpeningSoonOrClosedEmails(session, EmailType.FEEDBACK_CLOSED);"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":530,"author":{"gitId":"-"},"content":"     * Generates the feedback session closing emails for users with deadline extensions."},{"lineNumber":531,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionClosingWithExtensionEmails("},{"lineNumber":533,"author":{"gitId":"-"},"content":"            FeedbackSession session, List\u003cDeadlineExtension\u003e deadlineExtensions) {"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        Course course \u003d session.getCourse();"},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForStudents \u003d"},{"lineNumber":537,"author":{"gitId":"-"},"content":"                !deadlineExtensions.isEmpty() \u0026\u0026 fsLogic.isFeedbackSessionForUserTypeToAnswer(session, false);"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForInstructors \u003d"},{"lineNumber":539,"author":{"gitId":"-"},"content":"                !deadlineExtensions.isEmpty() \u0026\u0026 fsLogic.isFeedbackSessionForUserTypeToAnswer(session, true);"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        if (isEmailNeededForStudents) {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"            for (DeadlineExtension de : deadlineExtensions) {"},{"lineNumber":544,"author":{"gitId":"-"},"content":"                Student student \u003d usersLogic.getStudentForEmail(course.getId(), de.getUser().getEmail());"},{"lineNumber":545,"author":{"gitId":"-"},"content":"                if (student !\u003d null) {"},{"lineNumber":546,"author":{"gitId":"-"},"content":"                    students.add(student);"},{"lineNumber":547,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":548,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":549,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        if (isEmailNeededForInstructors) {"},{"lineNumber":553,"author":{"gitId":"-"},"content":"            for (DeadlineExtension de : deadlineExtensions) {"},{"lineNumber":554,"author":{"gitId":"-"},"content":"                Instructor instructor \u003d"},{"lineNumber":555,"author":{"gitId":"-"},"content":"                        usersLogic.getInstructorForEmail(course.getId(), de.getUser().getEmail());"},{"lineNumber":556,"author":{"gitId":"-"},"content":"                if (instructor !\u003d null) {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"                    instructors.add(instructor);"},{"lineNumber":558,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":559,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"        String template \u003d EmailTemplates.USER_FEEDBACK_SESSION.replace(\"${status}\", FEEDBACK_STATUS_SESSION_CLOSING);"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        EmailType type \u003d EmailType.FEEDBACK_CLOSING;"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        String feedbackAction \u003d FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW;"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        List\u003cEmailWrapper\u003e emails \u003d new ArrayList\u003c\u003e();"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        for (Student student : students) {"},{"lineNumber":567,"author":{"gitId":"-"},"content":"            emails.addAll(generateFeedbackSessionEmailBases(course, session, Collections.singletonList(student),"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                    Collections.emptyList(), Collections.emptyList(), template, type, feedbackAction));"},{"lineNumber":569,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            emails.addAll(generateFeedbackSessionEmailBases(course, session, Collections.emptyList(),"},{"lineNumber":572,"author":{"gitId":"-"},"content":"                    Collections.singletonList(instructor), Collections.emptyList(), template, type, feedbackAction));"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        return emails;"},{"lineNumber":575,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":576,"author":{"gitId":"-"},"content":""},{"lineNumber":577,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":578,"author":{"gitId":"-"},"content":"     * Generates the feedback session published emails for the given {@code session}."},{"lineNumber":579,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionPublishedEmails(FeedbackSession session) {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionPublishedOrUnpublishedEmails(session, EmailType.FEEDBACK_PUBLISHED);"},{"lineNumber":582,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":583,"author":{"gitId":"-"},"content":""},{"lineNumber":584,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":585,"author":{"gitId":"-"},"content":"     * Generates the feedback session published emails for the given {@code students} and"},{"lineNumber":586,"author":{"gitId":"-"},"content":"     * {@code instructors} in {@code session}."},{"lineNumber":587,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":588,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionPublishedEmails(FeedbackSession session,"},{"lineNumber":589,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e students, List\u003cInstructor\u003e instructors,"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorsToNotify) {"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionPublishedOrUnpublishedEmails("},{"lineNumber":592,"author":{"gitId":"-"},"content":"                session, students, instructors, instructorsToNotify, EmailType.FEEDBACK_PUBLISHED);"},{"lineNumber":593,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":594,"author":{"gitId":"-"},"content":""},{"lineNumber":595,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":596,"author":{"gitId":"-"},"content":"     * Generates the feedback session unpublished emails for the given {@code session}."},{"lineNumber":597,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateFeedbackSessionUnpublishedEmails(FeedbackSession session) {"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionPublishedOrUnpublishedEmails(session, EmailType.FEEDBACK_UNPUBLISHED);"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":601,"author":{"gitId":"-"},"content":""},{"lineNumber":602,"author":{"gitId":"-"},"content":"    private List\u003cEmailWrapper\u003e generateFeedbackSessionPublishedOrUnpublishedEmails("},{"lineNumber":603,"author":{"gitId":"-"},"content":"            FeedbackSession session, EmailType emailType) {"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForStudents \u003d fsLogic.isFeedbackSessionViewableToUserType(session, false);"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        boolean isEmailNeededForInstructors \u003d fsLogic.isFeedbackSessionViewableToUserType(session, true);"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorsToNotify \u003d isEmailNeededForStudents"},{"lineNumber":607,"author":{"gitId":"-"},"content":"                ? usersLogic.getCoOwnersForCourse(session.getCourse().getId())"},{"lineNumber":608,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d isEmailNeededForStudents"},{"lineNumber":610,"author":{"gitId":"-"},"content":"                ? usersLogic.getStudentsForCourse(session.getCourse().getId())"},{"lineNumber":611,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":612,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d isEmailNeededForInstructors"},{"lineNumber":613,"author":{"gitId":"-"},"content":"                ? usersLogic.getInstructorsForCourse(session.getCourse().getId())"},{"lineNumber":614,"author":{"gitId":"-"},"content":"                : new ArrayList\u003c\u003e();"},{"lineNumber":615,"author":{"gitId":"-"},"content":""},{"lineNumber":616,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionPublishedOrUnpublishedEmails("},{"lineNumber":617,"author":{"gitId":"-"},"content":"                session, students, instructors, instructorsToNotify, emailType);"},{"lineNumber":618,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":619,"author":{"gitId":"-"},"content":""},{"lineNumber":620,"author":{"gitId":"-"},"content":"    private List\u003cEmailWrapper\u003e generateFeedbackSessionPublishedOrUnpublishedEmails("},{"lineNumber":621,"author":{"gitId":"-"},"content":"            FeedbackSession session, List\u003cStudent\u003e students,"},{"lineNumber":622,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructors, List\u003cInstructor\u003e instructorsToNotify, EmailType emailType) {"},{"lineNumber":623,"author":{"gitId":"-"},"content":"        Course course \u003d session.getCourse();"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        String template;"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        String action;"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        if (emailType \u003d\u003d EmailType.FEEDBACK_PUBLISHED) {"},{"lineNumber":627,"author":{"gitId":"-"},"content":"            template \u003d EmailTemplates.USER_FEEDBACK_SESSION_PUBLISHED;"},{"lineNumber":628,"author":{"gitId":"-"},"content":"            action \u003d FEEDBACK_ACTION_VIEW;"},{"lineNumber":629,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":630,"author":{"gitId":"-"},"content":"            template \u003d EmailTemplates.USER_FEEDBACK_SESSION_UNPUBLISHED;"},{"lineNumber":631,"author":{"gitId":"-"},"content":"            action \u003d FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW;"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"        return generateFeedbackSessionEmailBases(course, session, students, instructors, instructorsToNotify, template,"},{"lineNumber":635,"author":{"gitId":"-"},"content":"                emailType, action);"},{"lineNumber":636,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":637,"author":{"gitId":"-"},"content":""},{"lineNumber":638,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":639,"author":{"gitId":"-"},"content":"     * Generates deadline extension granted emails."},{"lineNumber":640,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":641,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateDeadlineGrantedEmails(Course course,"},{"lineNumber":642,"author":{"gitId":"-"},"content":"            FeedbackSession session, Map\u003cString, Instant\u003e createdDeadlines, boolean areInstructors) {"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        return createdDeadlines.entrySet()"},{"lineNumber":644,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":645,"author":{"gitId":"-"},"content":"                .map(entry -\u003e"},{"lineNumber":646,"author":{"gitId":"-"},"content":"                        generateDeadlineExtensionEmail(course, session,"},{"lineNumber":647,"author":{"gitId":"-"},"content":"                                session.getEndTime(), entry.getValue(), EmailType.DEADLINE_EXTENSION_GRANTED,"},{"lineNumber":648,"author":{"gitId":"-"},"content":"                                entry.getKey(), areInstructors))"},{"lineNumber":649,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":650,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"-"},"content":""},{"lineNumber":652,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":653,"author":{"gitId":"-"},"content":"     * Generates deadline extension updated emails."},{"lineNumber":654,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":655,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateDeadlineUpdatedEmails(Course course, FeedbackSession session,"},{"lineNumber":656,"author":{"gitId":"-"},"content":"            Map\u003cString, Instant\u003e updatedDeadlines, Map\u003cString, Instant\u003e oldDeadlines, boolean areInstructors) {"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        return updatedDeadlines.entrySet()"},{"lineNumber":658,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":659,"author":{"gitId":"-"},"content":"                .map(entry -\u003e"},{"lineNumber":660,"author":{"gitId":"-"},"content":"                        generateDeadlineExtensionEmail(course, session,"},{"lineNumber":661,"author":{"gitId":"-"},"content":"                                oldDeadlines.get(entry.getKey()), entry.getValue(), EmailType.DEADLINE_EXTENSION_UPDATED,"},{"lineNumber":662,"author":{"gitId":"-"},"content":"                                entry.getKey(), areInstructors))"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":664,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":667,"author":{"gitId":"-"},"content":"     * Generates deadline extension revoked emails."},{"lineNumber":668,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":669,"author":{"gitId":"-"},"content":"    public List\u003cEmailWrapper\u003e generateDeadlineRevokedEmails(Course course,"},{"lineNumber":670,"author":{"gitId":"-"},"content":"            FeedbackSession session, Map\u003cString, Instant\u003e revokedDeadlines, boolean areInstructors) {"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        return revokedDeadlines.entrySet()"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":673,"author":{"gitId":"-"},"content":"                .map(entry -\u003e"},{"lineNumber":674,"author":{"gitId":"-"},"content":"                        generateDeadlineExtensionEmail(course, session,"},{"lineNumber":675,"author":{"gitId":"-"},"content":"                                entry.getValue(), session.getEndTime(), EmailType.DEADLINE_EXTENSION_REVOKED,"},{"lineNumber":676,"author":{"gitId":"-"},"content":"                                entry.getKey(), areInstructors))"},{"lineNumber":677,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"    private EmailWrapper generateDeadlineExtensionEmail("},{"lineNumber":681,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, Instant oldEndTime, Instant endTime,"},{"lineNumber":682,"author":{"gitId":"-"},"content":"            EmailType emailType, String userEmail, boolean isInstructor) {"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        String status;"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"        switch (emailType) {"},{"lineNumber":686,"author":{"gitId":"-"},"content":"        case DEADLINE_EXTENSION_GRANTED:"},{"lineNumber":687,"author":{"gitId":"-"},"content":"            status \u003d \"You have been granted a deadline extension for the following feedback session.\";"},{"lineNumber":688,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":689,"author":{"gitId":"-"},"content":"        case DEADLINE_EXTENSION_UPDATED:"},{"lineNumber":690,"author":{"gitId":"-"},"content":"            status \u003d \"Your deadline for the following feedback session has been updated.\";"},{"lineNumber":691,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        case DEADLINE_EXTENSION_REVOKED:"},{"lineNumber":693,"author":{"gitId":"-"},"content":"            status \u003d \"Your deadline extension for the following feedback session has been revoked.\";"},{"lineNumber":694,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":696,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Invalid email type: \" + emailType);"},{"lineNumber":697,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"        String additionalContactInformation \u003d getAdditionalContactInformationFragment(course, isInstructor);"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        Instant oldEndTimeFormatted \u003d"},{"lineNumber":701,"author":{"gitId":"-"},"content":"                TimeHelper.getMidnightAdjustedInstantBasedOnZone(oldEndTime, session.getCourse().getTimeZone(), false);"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        Instant newEndTimeFormatted \u003d"},{"lineNumber":703,"author":{"gitId":"-"},"content":"                TimeHelper.getMidnightAdjustedInstantBasedOnZone(endTime, session.getCourse().getTimeZone(), false);"},{"lineNumber":704,"author":{"gitId":"-"},"content":"        String template \u003d EmailTemplates.USER_DEADLINE_EXTENSION"},{"lineNumber":705,"author":{"gitId":"-"},"content":"                .replace(\"${status}\", status)"},{"lineNumber":706,"author":{"gitId":"-"},"content":"                .replace(\"${oldEndTime}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":707,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(oldEndTimeFormatted,"},{"lineNumber":708,"author":{"gitId":"-"},"content":"                                session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)))"},{"lineNumber":709,"author":{"gitId":"-"},"content":"                .replace(\"${newEndTime}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":710,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(newEndTimeFormatted,"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                                session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)));"},{"lineNumber":712,"author":{"gitId":"-"},"content":"        String feedbackAction \u003d FEEDBACK_ACTION_SUBMIT_EDIT_OR_VIEW;"},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"        if (isInstructor) {"},{"lineNumber":715,"author":{"gitId":"-"},"content":"            Instructor instructor \u003d usersLogic.getInstructorForEmail(course.getId(), userEmail);"},{"lineNumber":716,"author":{"gitId":"-"},"content":"            if (instructor \u003d\u003d null) {"},{"lineNumber":717,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":718,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":719,"author":{"gitId":"-"},"content":"            return generateFeedbackSessionEmailBaseForInstructors("},{"lineNumber":720,"author":{"gitId":"-"},"content":"                    course, session, instructor, template, emailType, feedbackAction, additionalContactInformation);"},{"lineNumber":721,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":722,"author":{"gitId":"-"},"content":"            Student student \u003d usersLogic.getStudentForEmail(course.getId(), userEmail);"},{"lineNumber":723,"author":{"gitId":"-"},"content":"            if (student \u003d\u003d null) {"},{"lineNumber":724,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":725,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":726,"author":{"gitId":"-"},"content":"            return generateFeedbackSessionEmailBaseForStudents("},{"lineNumber":727,"author":{"gitId":"-"},"content":"                    course, session, student, template, emailType, feedbackAction, additionalContactInformation);"},{"lineNumber":728,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":729,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":730,"author":{"gitId":"-"},"content":""},{"lineNumber":731,"author":{"gitId":"-"},"content":"    private List\u003cEmailWrapper\u003e generateFeedbackSessionEmailBases("},{"lineNumber":732,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, List\u003cStudent\u003e students,"},{"lineNumber":733,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructors, List\u003cInstructor\u003e instructorsToNotify, String template,"},{"lineNumber":734,"author":{"gitId":"-"},"content":"            EmailType type, String feedbackAction) {"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        StringBuilder studentAdditionalContactBuilder \u003d new StringBuilder();"},{"lineNumber":736,"author":{"gitId":"-"},"content":"        StringBuilder instructorAdditionalContactBuilder \u003d new StringBuilder();"},{"lineNumber":737,"author":{"gitId":"-"},"content":"        studentAdditionalContactBuilder.append(getAdditionalContactInformationFragment(course, false));"},{"lineNumber":738,"author":{"gitId":"-"},"content":"        instructorAdditionalContactBuilder.append(getAdditionalContactInformationFragment(course, true));"},{"lineNumber":739,"author":{"gitId":"-"},"content":""},{"lineNumber":740,"author":{"gitId":"-"},"content":"        List\u003cEmailWrapper\u003e emails \u003d new ArrayList\u003c\u003e();"},{"lineNumber":741,"author":{"gitId":"-"},"content":"        for (Student student : students) {"},{"lineNumber":742,"author":{"gitId":"-"},"content":"            emails.add(generateFeedbackSessionEmailBaseForStudents(course, session, student,"},{"lineNumber":743,"author":{"gitId":"-"},"content":"                    template, type, feedbackAction, studentAdditionalContactBuilder.toString()));"},{"lineNumber":744,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":745,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":746,"author":{"gitId":"-"},"content":"            emails.add(generateFeedbackSessionEmailBaseForInstructors(course, session, instructor,"},{"lineNumber":747,"author":{"gitId":"-"},"content":"                    template, type, feedbackAction, instructorAdditionalContactBuilder.toString()));"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":749,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructorsToNotify) {"},{"lineNumber":750,"author":{"gitId":"-"},"content":"            emails.add(generateFeedbackSessionEmailBaseForNotifiedInstructors(course, session, instructor,"},{"lineNumber":751,"author":{"gitId":"-"},"content":"                    template, type, feedbackAction, studentAdditionalContactBuilder.toString()));"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        return emails;"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":755,"author":{"gitId":"-"},"content":""},{"lineNumber":756,"author":{"gitId":"-"},"content":"    private EmailWrapper generateFeedbackSessionEmailBaseForStudents("},{"lineNumber":757,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, Student student, String template,"},{"lineNumber":758,"author":{"gitId":"-"},"content":"            EmailType type, String feedbackAction, String additionalContactInformation) {"},{"lineNumber":759,"author":{"gitId":"-"},"content":"        String submitUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_SUBMISSION_PAGE)"},{"lineNumber":760,"author":{"gitId":"-"},"content":"                .withCourseId(course.getId())"},{"lineNumber":761,"author":{"gitId":"-"},"content":"                .withSessionName(session.getName())"},{"lineNumber":762,"author":{"gitId":"-"},"content":"                .withRegistrationKey(student.getRegKey())"},{"lineNumber":763,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":764,"author":{"gitId":"-"},"content":""},{"lineNumber":765,"author":{"gitId":"-"},"content":"        String reportUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)"},{"lineNumber":766,"author":{"gitId":"-"},"content":"                .withCourseId(course.getId())"},{"lineNumber":767,"author":{"gitId":"-"},"content":"                .withSessionName(session.getName())"},{"lineNumber":768,"author":{"gitId":"-"},"content":"                .withRegistrationKey(student.getRegKey())"},{"lineNumber":769,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":770,"author":{"gitId":"-"},"content":""},{"lineNumber":771,"author":{"gitId":"-"},"content":"        Instant deadline \u003d deLogic.getDeadlineForUser(session, student);"},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"        Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":774,"author":{"gitId":"-"},"content":"                deadline, session.getCourse().getTimeZone(), false);"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(template,"},{"lineNumber":776,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(student.getName()),"},{"lineNumber":777,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":778,"author":{"gitId":"-"},"content":"                \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":779,"author":{"gitId":"-"},"content":"                \"${feedbackSessionName}\", SanitizationHelper.sanitizeForHtml(session.getName()),"},{"lineNumber":780,"author":{"gitId":"-"},"content":"                \"${deadline}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":781,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(endTime, session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT))"},{"lineNumber":782,"author":{"gitId":"-"},"content":"                        + (session.getEndTime().equals(deadline) ? \"\" : \" (after extension)\"),"},{"lineNumber":783,"author":{"gitId":"-"},"content":"                \"${instructorPreamble}\", \"\","},{"lineNumber":784,"author":{"gitId":"-"},"content":"                \"${sessionInstructions}\", session.getInstructionsString(),"},{"lineNumber":785,"author":{"gitId":"-"},"content":"                \"${submitUrl}\", submitUrl,"},{"lineNumber":786,"author":{"gitId":"-"},"content":"                \"${reportUrl}\", reportUrl,"},{"lineNumber":787,"author":{"gitId":"-"},"content":"                \"${feedbackAction}\", feedbackAction,"},{"lineNumber":788,"author":{"gitId":"-"},"content":"                \"${additionalContactInformation}\", additionalContactInformation);"},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(student.getEmail());"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        email.setType(type);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), session.getName());"},{"lineNumber":793,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":794,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":795,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":796,"author":{"gitId":"-"},"content":""},{"lineNumber":797,"author":{"gitId":"-"},"content":"    private EmailWrapper generateFeedbackSessionEmailBaseForInstructors("},{"lineNumber":798,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, Instructor instructor,"},{"lineNumber":799,"author":{"gitId":"-"},"content":"            String template, EmailType type, String feedbackAction, String additionalContactInformation) {"},{"lineNumber":800,"author":{"gitId":"-"},"content":"        String submitUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_SUBMISSION_PAGE)"},{"lineNumber":801,"author":{"gitId":"-"},"content":"                .withCourseId(course.getId())"},{"lineNumber":802,"author":{"gitId":"-"},"content":"                .withSessionName(session.getName())"},{"lineNumber":803,"author":{"gitId":"-"},"content":"                .withRegistrationKey(instructor.getRegKey())"},{"lineNumber":804,"author":{"gitId":"-"},"content":"                .withEntityType(Const.EntityType.INSTRUCTOR)"},{"lineNumber":805,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":806,"author":{"gitId":"-"},"content":""},{"lineNumber":807,"author":{"gitId":"-"},"content":"        String reportUrl \u003d Config.getFrontEndAppUrl(Const.WebPageURIs.SESSION_RESULTS_PAGE)"},{"lineNumber":808,"author":{"gitId":"-"},"content":"                .withCourseId(course.getId())"},{"lineNumber":809,"author":{"gitId":"-"},"content":"                .withSessionName(session.getName())"},{"lineNumber":810,"author":{"gitId":"-"},"content":"                .withRegistrationKey(instructor.getRegKey())"},{"lineNumber":811,"author":{"gitId":"-"},"content":"                .withEntityType(Const.EntityType.INSTRUCTOR)"},{"lineNumber":812,"author":{"gitId":"-"},"content":"                .toAbsoluteString();"},{"lineNumber":813,"author":{"gitId":"-"},"content":""},{"lineNumber":814,"author":{"gitId":"-"},"content":"        Instant deadline \u003d deLogic.getDeadlineForUser(session, instructor);"},{"lineNumber":815,"author":{"gitId":"-"},"content":""},{"lineNumber":816,"author":{"gitId":"-"},"content":"        Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":817,"author":{"gitId":"-"},"content":"                deadline, session.getCourse().getTimeZone(), false);"},{"lineNumber":818,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(template,"},{"lineNumber":819,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(instructor.getName()),"},{"lineNumber":820,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":821,"author":{"gitId":"-"},"content":"                \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":822,"author":{"gitId":"-"},"content":"                \"${feedbackSessionName}\", SanitizationHelper.sanitizeForHtml(session.getName()),"},{"lineNumber":823,"author":{"gitId":"-"},"content":"                \"${deadline}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":824,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(endTime, session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT))"},{"lineNumber":825,"author":{"gitId":"-"},"content":"                        + (session.getEndTime().equals(deadline) ? \"\" : \" (after extension)\"),"},{"lineNumber":826,"author":{"gitId":"-"},"content":"                \"${instructorPreamble}\", \"\","},{"lineNumber":827,"author":{"gitId":"-"},"content":"                \"${sessionInstructions}\", session.getInstructionsString(),"},{"lineNumber":828,"author":{"gitId":"-"},"content":"                \"${submitUrl}\", submitUrl,"},{"lineNumber":829,"author":{"gitId":"-"},"content":"                \"${reportUrl}\", reportUrl,"},{"lineNumber":830,"author":{"gitId":"-"},"content":"                \"${feedbackAction}\", feedbackAction,"},{"lineNumber":831,"author":{"gitId":"-"},"content":"                \"${additionalContactInformation}\", additionalContactInformation);"},{"lineNumber":832,"author":{"gitId":"-"},"content":""},{"lineNumber":833,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(instructor.getEmail());"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        email.setType(type);"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), session.getName());"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":838,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"    private EmailWrapper generateFeedbackSessionEmailBaseForNotifiedInstructors("},{"lineNumber":841,"author":{"gitId":"-"},"content":"            Course course, FeedbackSession session, Instructor instructor,"},{"lineNumber":842,"author":{"gitId":"-"},"content":"            String template, EmailType type, String feedbackAction, String additionalContactInformation) {"},{"lineNumber":843,"author":{"gitId":"-"},"content":""},{"lineNumber":844,"author":{"gitId":"-"},"content":"        Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":845,"author":{"gitId":"-"},"content":"                session.getEndTime(), session.getCourse().getTimeZone(), false);"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(template,"},{"lineNumber":847,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(instructor.getName()),"},{"lineNumber":848,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":849,"author":{"gitId":"-"},"content":"                \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                \"${feedbackSessionName}\", SanitizationHelper.sanitizeForHtml(session.getName()),"},{"lineNumber":851,"author":{"gitId":"-"},"content":"                \"${deadline}\", SanitizationHelper.sanitizeForHtml("},{"lineNumber":852,"author":{"gitId":"-"},"content":"                        TimeHelper.formatInstant(endTime, session.getCourse().getTimeZone(), DATETIME_DISPLAY_FORMAT)),"},{"lineNumber":853,"author":{"gitId":"-"},"content":"                \"${instructorPreamble}\", fillUpInstructorPreamble(course),"},{"lineNumber":854,"author":{"gitId":"-"},"content":"                \"${sessionInstructions}\", session.getInstructionsString(),"},{"lineNumber":855,"author":{"gitId":"-"},"content":"                \"${submitUrl}\", \"{in the actual email sent to the students, this will be the unique link}\","},{"lineNumber":856,"author":{"gitId":"-"},"content":"                \"${reportUrl}\", \"{in the actual email sent to the students, this will be the unique link}\","},{"lineNumber":857,"author":{"gitId":"-"},"content":"                \"${feedbackAction}\", feedbackAction,"},{"lineNumber":858,"author":{"gitId":"-"},"content":"                \"${additionalContactInformation}\", additionalContactInformation);"},{"lineNumber":859,"author":{"gitId":"-"},"content":""},{"lineNumber":860,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(instructor.getEmail());"},{"lineNumber":861,"author":{"gitId":"-"},"content":"        email.setType(type);"},{"lineNumber":862,"author":{"gitId":"-"},"content":"        email.setIsCopy(true);"},{"lineNumber":863,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), session.getName());"},{"lineNumber":864,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":865,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":866,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":867,"author":{"gitId":"-"},"content":""},{"lineNumber":868,"author":{"gitId":"-"},"content":"    private boolean isYetToJoinCourse(Student student) {"},{"lineNumber":869,"author":{"gitId":"domoberzin"},"content":"        return student.getAccount() \u003d\u003d null || student.getAccount().getGoogleId().isEmpty();"},{"lineNumber":870,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":871,"author":{"gitId":"-"},"content":""},{"lineNumber":872,"author":{"gitId":"-"},"content":"    private boolean isYetToJoinCourse(Instructor instructor) {"},{"lineNumber":873,"author":{"gitId":"domoberzin"},"content":"        return instructor.getAccount() \u003d\u003d null || instructor.getAccount().getGoogleId().isEmpty();"},{"lineNumber":874,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":875,"author":{"gitId":"-"},"content":""},{"lineNumber":876,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":877,"author":{"gitId":"-"},"content":"     * Generates the new instructor account join email for the given {@code instructor}."},{"lineNumber":878,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":879,"author":{"gitId":"-"},"content":"    public EmailWrapper generateNewInstructorAccountJoinEmail("},{"lineNumber":880,"author":{"gitId":"-"},"content":"            String instructorEmail, String instructorName, String joinUrl) {"},{"lineNumber":881,"author":{"gitId":"-"},"content":""},{"lineNumber":882,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(EmailTemplates.NEW_INSTRUCTOR_ACCOUNT_WELCOME,"},{"lineNumber":883,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(instructorName),"},{"lineNumber":884,"author":{"gitId":"-"},"content":"                \"${joinUrl}\", joinUrl);"},{"lineNumber":885,"author":{"gitId":"-"},"content":""},{"lineNumber":886,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(instructorEmail);"},{"lineNumber":887,"author":{"gitId":"-"},"content":"        email.setBcc(Config.SUPPORT_EMAIL);"},{"lineNumber":888,"author":{"gitId":"-"},"content":"        email.setType(EmailType.NEW_INSTRUCTOR_ACCOUNT);"},{"lineNumber":889,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(SanitizationHelper.sanitizeForHtml(instructorName));"},{"lineNumber":890,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":891,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":892,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":893,"author":{"gitId":"-"},"content":""},{"lineNumber":894,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":895,"author":{"gitId":"-"},"content":"     * Generates the course join email for the given {@code student} in {@code course}."},{"lineNumber":896,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":897,"author":{"gitId":"-"},"content":"    public EmailWrapper generateStudentCourseJoinEmail(Course course, Student student) {"},{"lineNumber":898,"author":{"gitId":"-"},"content":""},{"lineNumber":899,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate("},{"lineNumber":900,"author":{"gitId":"-"},"content":"                fillUpStudentJoinFragment(student),"},{"lineNumber":901,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(student.getName()),"},{"lineNumber":902,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":903,"author":{"gitId":"-"},"content":"                \"${coOwnersEmails}\", generateCoOwnersEmailsLine(course.getId()),"},{"lineNumber":904,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":905,"author":{"gitId":"-"},"content":""},{"lineNumber":906,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(student.getEmail());"},{"lineNumber":907,"author":{"gitId":"-"},"content":"        email.setType(EmailType.STUDENT_COURSE_JOIN);"},{"lineNumber":908,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":909,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":910,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":911,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":912,"author":{"gitId":"-"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":914,"author":{"gitId":"-"},"content":"     * Generates the course re-join email for the given {@code student} in {@code course}."},{"lineNumber":915,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":916,"author":{"gitId":"-"},"content":"    public EmailWrapper generateStudentCourseRejoinEmailAfterGoogleIdReset("},{"lineNumber":917,"author":{"gitId":"-"},"content":"            Course course, Student student) {"},{"lineNumber":918,"author":{"gitId":"-"},"content":""},{"lineNumber":919,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate("},{"lineNumber":920,"author":{"gitId":"-"},"content":"                fillUpStudentRejoinAfterGoogleIdResetFragment(student),"},{"lineNumber":921,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(student.getName()),"},{"lineNumber":922,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":923,"author":{"gitId":"-"},"content":"                \"${coOwnersEmails}\", generateCoOwnersEmailsLine(course.getId()),"},{"lineNumber":924,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":925,"author":{"gitId":"-"},"content":""},{"lineNumber":926,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(student.getEmail());"},{"lineNumber":927,"author":{"gitId":"-"},"content":"        email.setType(EmailType.STUDENT_COURSE_REJOIN_AFTER_GOOGLE_ID_RESET);"},{"lineNumber":928,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":929,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":930,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":931,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":932,"author":{"gitId":"-"},"content":""},{"lineNumber":933,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":934,"author":{"gitId":"-"},"content":"     * Generates the course join email for the given {@code instructor} in {@code course}."},{"lineNumber":935,"author":{"gitId":"-"},"content":"     * Also specifies contact information of {@code inviter}."},{"lineNumber":936,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":937,"author":{"gitId":"-"},"content":"    public EmailWrapper generateInstructorCourseJoinEmail(Account inviter,"},{"lineNumber":938,"author":{"gitId":"-"},"content":"            Instructor instructor, Course course) {"},{"lineNumber":939,"author":{"gitId":"-"},"content":""},{"lineNumber":940,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate("},{"lineNumber":941,"author":{"gitId":"-"},"content":"                fillUpInstructorJoinFragment(instructor),"},{"lineNumber":942,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(instructor.getName()),"},{"lineNumber":943,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":944,"author":{"gitId":"-"},"content":"                \"${inviterName}\", SanitizationHelper.sanitizeForHtml(inviter.getName()),"},{"lineNumber":945,"author":{"gitId":"-"},"content":"                \"${inviterEmail}\", SanitizationHelper.sanitizeForHtml(inviter.getEmail()),"},{"lineNumber":946,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":947,"author":{"gitId":"-"},"content":""},{"lineNumber":948,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(instructor.getEmail());"},{"lineNumber":949,"author":{"gitId":"-"},"content":"        email.setType(EmailType.INSTRUCTOR_COURSE_JOIN);"},{"lineNumber":950,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":951,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":952,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":953,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":954,"author":{"gitId":"-"},"content":""},{"lineNumber":955,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":956,"author":{"gitId":"-"},"content":"     * Generates the course re-join email for the given {@code instructor} in {@code course}."},{"lineNumber":957,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":958,"author":{"gitId":"-"},"content":"    public EmailWrapper generateInstructorCourseRejoinEmailAfterGoogleIdReset("},{"lineNumber":959,"author":{"gitId":"-"},"content":"            Instructor instructor, Course course) {"},{"lineNumber":960,"author":{"gitId":"-"},"content":""},{"lineNumber":961,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate("},{"lineNumber":962,"author":{"gitId":"-"},"content":"                fillUpInstructorRejoinAfterGoogleIdResetFragment(instructor),"},{"lineNumber":963,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(instructor.getName()),"},{"lineNumber":964,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":965,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":966,"author":{"gitId":"-"},"content":""},{"lineNumber":967,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(instructor.getEmail());"},{"lineNumber":968,"author":{"gitId":"-"},"content":"        email.setType(EmailType.INSTRUCTOR_COURSE_REJOIN_AFTER_GOOGLE_ID_RESET);"},{"lineNumber":969,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":970,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":972,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":975,"author":{"gitId":"-"},"content":"     * Generates the course registered email for the user with the given details in {@code course}."},{"lineNumber":976,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":977,"author":{"gitId":"-"},"content":"    public EmailWrapper generateUserCourseRegisteredEmail("},{"lineNumber":978,"author":{"gitId":"-"},"content":"            String name, String emailAddress, String googleId, boolean isInstructor, Course course) {"},{"lineNumber":979,"author":{"gitId":"-"},"content":"        String emailBody \u003d Templates.populateTemplate(EmailTemplates.USER_COURSE_REGISTER,"},{"lineNumber":980,"author":{"gitId":"-"},"content":"                \"${userName}\", SanitizationHelper.sanitizeForHtml(name),"},{"lineNumber":981,"author":{"gitId":"-"},"content":"                \"${userType}\", isInstructor ? \"an instructor\" : \"a student\","},{"lineNumber":982,"author":{"gitId":"-"},"content":"                \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":983,"author":{"gitId":"-"},"content":"                \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()),"},{"lineNumber":984,"author":{"gitId":"-"},"content":"                \"${googleId}\", SanitizationHelper.sanitizeForHtml(googleId),"},{"lineNumber":985,"author":{"gitId":"-"},"content":"                \"${appUrl}\", isInstructor"},{"lineNumber":986,"author":{"gitId":"-"},"content":"                        ? Config.getFrontEndAppUrl(Const.WebPageURIs.INSTRUCTOR_HOME_PAGE).toAbsoluteString()"},{"lineNumber":987,"author":{"gitId":"-"},"content":"                        : Config.getFrontEndAppUrl(Const.WebPageURIs.STUDENT_HOME_PAGE).toAbsoluteString(),"},{"lineNumber":988,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":989,"author":{"gitId":"-"},"content":""},{"lineNumber":990,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(emailAddress);"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        email.setType(EmailType.USER_COURSE_REGISTER);"},{"lineNumber":992,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(course.getName(), course.getId());"},{"lineNumber":993,"author":{"gitId":"-"},"content":"        email.setContent(emailBody);"},{"lineNumber":994,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":995,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":996,"author":{"gitId":"-"},"content":""},{"lineNumber":997,"author":{"gitId":"-"},"content":"    private String fillUpStudentJoinFragment(Student student) {"},{"lineNumber":998,"author":{"gitId":"-"},"content":"        String joinUrl \u003d Config.getFrontEndAppUrl(student.getRegistrationUrl()).toAbsoluteString();"},{"lineNumber":999,"author":{"gitId":"-"},"content":""},{"lineNumber":1000,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.USER_COURSE_JOIN,"},{"lineNumber":1001,"author":{"gitId":"-"},"content":"            \"${joinFragment}\", EmailTemplates.FRAGMENT_STUDENT_COURSE_JOIN,"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"            \"${joinUrl}\", joinUrl);"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1004,"author":{"gitId":"-"},"content":""},{"lineNumber":1005,"author":{"gitId":"-"},"content":"    private String fillUpStudentRejoinAfterGoogleIdResetFragment(Student student) {"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"        String joinUrl \u003d Config.getFrontEndAppUrl(student.getRegistrationUrl()).toAbsoluteString();"},{"lineNumber":1007,"author":{"gitId":"-"},"content":""},{"lineNumber":1008,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.USER_COURSE_JOIN,"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"            \"${joinFragment}\", EmailTemplates.FRAGMENT_STUDENT_COURSE_REJOIN_AFTER_GOOGLE_ID_RESET,"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"            \"${joinUrl}\", joinUrl,"},{"lineNumber":1011,"author":{"gitId":"-"},"content":"            \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1013,"author":{"gitId":"-"},"content":""},{"lineNumber":1014,"author":{"gitId":"-"},"content":"    private String getInstructorCourseJoinUrl(Instructor instructor) {"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"        return Config.getFrontEndAppUrl(instructor.getRegistrationUrl()).toAbsoluteString();"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1017,"author":{"gitId":"-"},"content":""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"    private String fillUpInstructorJoinFragment(Instructor instructor) {"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.USER_COURSE_JOIN,"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"            \"${joinFragment}\", EmailTemplates.FRAGMENT_INSTRUCTOR_COURSE_JOIN,"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"            \"${joinUrl}\", getInstructorCourseJoinUrl(instructor));"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1023,"author":{"gitId":"-"},"content":""},{"lineNumber":1024,"author":{"gitId":"-"},"content":"    private String fillUpInstructorRejoinAfterGoogleIdResetFragment(Instructor instructor) {"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"        String joinUrl \u003d Config.getFrontEndAppUrl(instructor.getRegistrationUrl()).toAbsoluteString();"},{"lineNumber":1026,"author":{"gitId":"-"},"content":""},{"lineNumber":1027,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.USER_COURSE_JOIN,"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"            \"${joinFragment}\", EmailTemplates.FRAGMENT_INSTRUCTOR_COURSE_REJOIN_AFTER_GOOGLE_ID_RESET,"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"            \"${joinUrl}\", joinUrl,"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"            \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1032,"author":{"gitId":"-"},"content":""},{"lineNumber":1033,"author":{"gitId":"-"},"content":"    private String fillUpInstructorPreamble(Course course) {"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.FRAGMENT_INSTRUCTOR_COPY_PREAMBLE,"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"            \"${courseId}\", SanitizationHelper.sanitizeForHtml(course.getId()),"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"            \"${courseName}\", SanitizationHelper.sanitizeForHtml(course.getName()));"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"     * Generates the logs compilation email for the given {@code logs}."},{"lineNumber":1041,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"    public EmailWrapper generateCompiledLogsEmail(List\u003cErrorLogEntry\u003e logs) {"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"        StringBuilder emailBody \u003d new StringBuilder();"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c logs.size(); i++) {"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"            emailBody.append(generateSevereErrorLogLine(i, logs.get(i).getMessage(),"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"                    logs.get(i).getSeverity(), logs.get(i).getTraceId()));"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1048,"author":{"gitId":"-"},"content":""},{"lineNumber":1049,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d getEmptyEmailAddressedToEmail(Config.SUPPORT_EMAIL);"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"        email.setType(EmailType.SEVERE_LOGS_COMPILATION);"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"        email.setSubjectFromType(Config.APP_VERSION);"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"        email.setContent(emailBody.toString());"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":1054,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1055,"author":{"gitId":"-"},"content":""},{"lineNumber":1056,"author":{"gitId":"-"},"content":"    private String generateSevereErrorLogLine(int index, String logMessage, String logLevel, String traceId) {"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate("},{"lineNumber":1058,"author":{"gitId":"-"},"content":"            EmailTemplates.SEVERE_ERROR_LOG_LINE,"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"            \"${index}\", String.valueOf(index),"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"            \"${errorType}\", logLevel,"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"            \"${errorMessage}\", logMessage.replaceAll(\"\\n\", \"\\n\u003cbr\u003e\"),"},{"lineNumber":1062,"author":{"gitId":"-"},"content":"            \"${traceId}\", traceId);"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1064,"author":{"gitId":"-"},"content":""},{"lineNumber":1065,"author":{"gitId":"-"},"content":"    private EmailWrapper getEmptyEmailAddressedToEmail(String recipient) {"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d new EmailWrapper();"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"        email.setRecipient(recipient);"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"        email.setSenderEmail(Config.EMAIL_SENDEREMAIL);"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"        email.setSenderName(Config.EMAIL_SENDERNAME);"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"        email.setReplyTo(Config.EMAIL_REPLYTO);"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1073,"author":{"gitId":"-"},"content":""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"    private String generateCoOwnersEmailsLine(String courseId) {"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e coOwners \u003d usersLogic.getCoOwnersForCourse(courseId);"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        if (coOwners.isEmpty()) {"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"            return \"(No contactable instructors found)\";"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"        StringBuilder coOwnersEmailsLine \u003d new StringBuilder();"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"        for (Instructor coOwner : coOwners) {"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"            coOwnersEmailsLine"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"                    .append(SanitizationHelper.sanitizeForHtml(coOwner.getName()))"},{"lineNumber":1083,"author":{"gitId":"-"},"content":"                    .append(\" (\")"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"                    .append(coOwner.getEmail())"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"                    .append(\"), \");"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"        return coOwnersEmailsLine.substring(0, coOwnersEmailsLine.length() - 2);"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1089,"author":{"gitId":"-"},"content":""},{"lineNumber":1090,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"     * Generates additional contact information for User Email Templates."},{"lineNumber":1092,"author":{"gitId":"-"},"content":"     * @return The contact information after replacing the placeholders."},{"lineNumber":1093,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1094,"author":{"gitId":"-"},"content":"    private String getAdditionalContactInformationFragment(Course course, boolean isInstructor) {"},{"lineNumber":1095,"author":{"gitId":"-"},"content":"        String particulars \u003d isInstructor ? \"instructor data (e.g. wrong permission, misspelled name)\""},{"lineNumber":1096,"author":{"gitId":"-"},"content":"                : \"team/student data (e.g. wrong team, misspelled name)\";"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"        return Templates.populateTemplate(EmailTemplates.FRAGMENT_SESSION_ADDITIONAL_CONTACT_INFORMATION,"},{"lineNumber":1098,"author":{"gitId":"-"},"content":"                \"${particulars}\", particulars,"},{"lineNumber":1099,"author":{"gitId":"-"},"content":"                \"${coOwnersEmails}\", generateCoOwnersEmailsLine(course.getId()),"},{"lineNumber":1100,"author":{"gitId":"-"},"content":"                \"${supportEmail}\", Config.SUPPORT_EMAIL);"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":3,"-":1099}},{"path":"src/main/java/teammates/sqllogic/core/AccountRequestsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.AccountRequestSearchManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Handles operations related to account requests."},{"lineNumber":16,"author":{"gitId":"-"},"content":" *"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @see AccountRequest"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * @see AccountRequestsDb"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public final class AccountRequestsLogic {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final AccountRequestsLogic instance \u003d new AccountRequestsLogic();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private AccountRequestsDb accountRequestDb;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private AccountRequestsLogic() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // prevent notification"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static AccountRequestsLogic inst() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initialise dependencies for {@code AccountRequestLogic} object."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void initLogicDependencies(AccountRequestsDb accountRequestDb) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.accountRequestDb \u003d accountRequestDb;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private AccountRequestSearchManager getSearchManager() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return accountRequestDb.getSearchManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates or updates search document for the given account request."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void putDocument(AccountRequest accountRequest) throws SearchServiceException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        getSearchManager().putDocument(accountRequest);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates an account request."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public AccountRequest createAccountRequest(AccountRequest accountRequest)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates an account request."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public AccountRequest createAccountRequest(String name, String email, String institute)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AccountRequest toCreate \u003d new AccountRequest(email, name, institute);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return accountRequestDb.createAccountRequest(toCreate);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Gets account request associated with the {@code email} and {@code institute}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Updates an account request."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public AccountRequest updateAccountRequest(AccountRequest accountRequest)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"dishenggg"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":"     * Gets account request associated with the {@code regkey}."},{"lineNumber":88,"author":{"gitId":"dishenggg"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"dishenggg"},"content":"    public AccountRequest getAccountRequestByRegistrationKey(String regkey) {"},{"lineNumber":90,"author":{"gitId":"dishenggg"},"content":"        return accountRequestDb.getAccountRequestByRegistrationKey(regkey);"},{"lineNumber":91,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Creates/resets the account request with the given email and institute such that it is not registered."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public AccountRequest resetAccountRequest(String email, String institute)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest \u003d accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (accountRequest \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Failed to reset since AccountRequest with \""},{"lineNumber":102,"author":{"gitId":"-"},"content":"                + \"the given email and institute cannot be found.\");"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        accountRequest.setRegisteredAt(null);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Deletes account request associated with the {@code email} and {@code institute}."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if no account requests with the given email and institute to delete can be found.\u003c/p\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void deleteAccountRequest(String email, String institute) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        AccountRequest toDelete \u003d accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        accountRequestDb.deleteAccountRequest(toDelete);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":"     * Searches for account requests in the whole system."},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"     * @return A list of {@link AccountRequest} or {@code null} if no match found."},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"    public List\u003cAccountRequest\u003e searchAccountRequestsInWholeSystem(String queryString)"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"            throws SearchServiceException {"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"        return accountRequestDb.searchAccountRequestsInWholeSystem(queryString);"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Creates an or gets an account request."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public AccountRequest createOrGetAccountRequestWithTransaction(String name, String email, String institute)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throws InvalidParametersException {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        AccountRequest toCreate \u003d new AccountRequest(email, name, institute);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        HibernateUtil.beginTransaction();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        AccountRequest accountRequest;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            accountRequest \u003d accountRequestDb.createAccountRequest(toCreate);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            HibernateUtil.commitTransaction();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            HibernateUtil.rollbackTransaction();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(ipe);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            // Use existing account request"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            accountRequest \u003d getAccountRequest(email, institute);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            HibernateUtil.commitTransaction();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return accountRequest;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":12,"dishenggg":7,"-":133}},{"path":"src/main/java/teammates/sqllogic/core/AccountsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":13,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Handles operations related to accounts."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Account"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see AccountsDb"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public final class AccountsLogic {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final AccountsLogic instance \u003d new AccountsLogic();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private AccountsDb accountsDb;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private NotificationsLogic notificationsLogic;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"yuanxi1"},"content":"    private CoursesLogic coursesLogic;"},{"lineNumber":37,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private AccountsLogic() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"    void initLogicDependencies(AccountsDb accountsDb, NotificationsLogic notificationsLogic,"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"            UsersLogic usersLogic, CoursesLogic coursesLogic) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.accountsDb \u003d accountsDb;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.notificationsLogic \u003d notificationsLogic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"        this.coursesLogic \u003d coursesLogic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static AccountsLogic inst() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Gets an account."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Account getAccount(UUID id) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return accountsDb.getAccount(id);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Gets an account by googleId."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Account getAccountForGoogleId(String googleId) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Gets accounts associated with email."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public List\u003cAccount\u003e getAccountsForEmail(String email) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return accountsDb.getAccountsByEmail(email);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Creates an account."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @return the created account"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException   if the account is not valid"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account already exists in the"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *                                      database."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public Account createAccount(Account account)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assert account !\u003d null;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return accountsDb.createAccount(account);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Deletes account associated with the {@code googleId}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the account doesn\u0027t exist.\u003c/p\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void deleteAccount(String googleId) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Account account \u003d getAccountForGoogleId(googleId);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        accountsDb.deleteAccount(account);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Deletes account and all users associated with the {@code googleId}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the account doesn\u0027t exist.\u003c/p\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void deleteAccountCascade(String googleId) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cUser\u003e usersToDelete \u003d usersLogic.getAllUsersByGoogleId(googleId);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (User user : usersToDelete) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            usersLogic.deleteUser(user);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        deleteAccount(googleId);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Updates the readNotifications of an account."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @param googleId       google ID of the user who read the notification."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @param notificationId ID of notification to be marked as read."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @param endTime        the expiry time of the notification, i.e. notification"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *                       will not be shown after this time."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @return the account with updated read notifications."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException  if the notification has expired."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if account or notification does not"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *                                     exist."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public List\u003cUUID\u003e updateReadNotifications(String googleId, UUID notificationId, Instant endTime)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Account account \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (account \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to update the read notifications of a non-existent account.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Notification notification \u003d notificationsLogic.getNotification(notificationId);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (notification \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to mark as read a notification that does not exist.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (endTime.isBefore(Instant.now())) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Trying to mark an expired notification as read.\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        ReadNotification readNotification \u003d new ReadNotification(account, notification);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        account.addReadNotification(readNotification);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return account.getReadNotifications().stream()"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .map(n -\u003e n.getNotification().getId())"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Gets ids of read notifications in an account."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public List\u003cUUID\u003e getReadNotificationsId(String googleId) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return accountsDb.getAccountByGoogleId(googleId).getReadNotifications().stream()"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .map(n -\u003e n.getNotification().getId())"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":167,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"yuanxi1"},"content":"     * Joins the user as a student."},{"lineNumber":169,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"yuanxi1"},"content":"    public Student joinCourseForStudent(String registrationKey, String googleId)"},{"lineNumber":171,"author":{"gitId":"yuanxi1"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":172,"author":{"gitId":"yuanxi1"},"content":"        Student student \u003d validateStudentJoinRequest(registrationKey, googleId);"},{"lineNumber":173,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":174,"author":{"gitId":"yuanxi1"},"content":"        Account account \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":175,"author":{"gitId":"yuanxi1"},"content":"        // Create an account if it doesn\u0027t exist"},{"lineNumber":176,"author":{"gitId":"yuanxi1"},"content":"        if (account \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitId":"yuanxi1"},"content":"            account \u003d new Account(googleId, student.getName(), student.getEmail());"},{"lineNumber":178,"author":{"gitId":"yuanxi1"},"content":"            createAccount(account);"},{"lineNumber":179,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":181,"author":{"gitId":"yuanxi1"},"content":"        if (student.getAccount() \u003d\u003d null) {"},{"lineNumber":182,"author":{"gitId":"yuanxi1"},"content":"            student.setAccount(account);"},{"lineNumber":183,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":185,"author":{"gitId":"yuanxi1"},"content":"        return student;"},{"lineNumber":186,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":188,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"yuanxi1"},"content":"     * Joins the user as an instructor."},{"lineNumber":190,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"yuanxi1"},"content":"    public Instructor joinCourseForInstructor(String key, String googleId)"},{"lineNumber":192,"author":{"gitId":"yuanxi1"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":193,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructor \u003d validateInstructorJoinRequest(key, googleId);"},{"lineNumber":194,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":195,"author":{"gitId":"yuanxi1"},"content":"        Account account \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":196,"author":{"gitId":"yuanxi1"},"content":"        if (account \u003d\u003d null) {"},{"lineNumber":197,"author":{"gitId":"yuanxi1"},"content":"            try {"},{"lineNumber":198,"author":{"gitId":"yuanxi1"},"content":"                account \u003d new Account(googleId, instructor.getName(), instructor.getEmail());"},{"lineNumber":199,"author":{"gitId":"yuanxi1"},"content":"                createAccount(account);"},{"lineNumber":200,"author":{"gitId":"yuanxi1"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":201,"author":{"gitId":"yuanxi1"},"content":"                assert false : \"Account already exists.\";"},{"lineNumber":202,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":205,"author":{"gitId":"yuanxi1"},"content":"        instructor.setAccount(account);"},{"lineNumber":206,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":207,"author":{"gitId":"yuanxi1"},"content":"        // Update the googleId of the student entity for the instructor which was created from sample data."},{"lineNumber":208,"author":{"gitId":"yuanxi1"},"content":"        Student student \u003d usersLogic.getStudentForEmail(instructor.getCourseId(), instructor.getEmail());"},{"lineNumber":209,"author":{"gitId":"yuanxi1"},"content":"        if (student !\u003d null) {"},{"lineNumber":210,"author":{"gitId":"yuanxi1"},"content":"            student.setAccount(account);"},{"lineNumber":211,"author":{"gitId":"yuanxi1"},"content":"            usersLogic.updateStudentCascade(student);"},{"lineNumber":212,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":214,"author":{"gitId":"yuanxi1"},"content":"        return instructor;"},{"lineNumber":215,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":217,"author":{"gitId":"yuanxi1"},"content":"    private Instructor validateInstructorJoinRequest(String registrationKey, String googleId)"},{"lineNumber":218,"author":{"gitId":"yuanxi1"},"content":"            throws EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":219,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructorForKey \u003d usersLogic.getInstructorByRegistrationKey(registrationKey);"},{"lineNumber":220,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":221,"author":{"gitId":"yuanxi1"},"content":"        if (instructorForKey \u003d\u003d null) {"},{"lineNumber":222,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"No instructor with given registration key: \" + registrationKey);"},{"lineNumber":223,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":225,"author":{"gitId":"yuanxi1"},"content":"        Course course \u003d coursesLogic.getCourse(instructorForKey.getCourseId());"},{"lineNumber":226,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":227,"author":{"gitId":"yuanxi1"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":228,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"Course with id \" + instructorForKey.getCourseId() + \" does not exist\");"},{"lineNumber":229,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":231,"author":{"gitId":"yuanxi1"},"content":"        if (course.isCourseDeleted()) {"},{"lineNumber":232,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"The course you are trying to join has been deleted by an instructor\");"},{"lineNumber":233,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":235,"author":{"gitId":"yuanxi1"},"content":"        if (instructorForKey.isRegistered()) {"},{"lineNumber":236,"author":{"gitId":"yuanxi1"},"content":"            if (instructorForKey.getGoogleId().equals(googleId)) {"},{"lineNumber":237,"author":{"gitId":"yuanxi1"},"content":"                Account existingAccount \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":238,"author":{"gitId":"yuanxi1"},"content":"                if (existingAccount !\u003d null) {"},{"lineNumber":239,"author":{"gitId":"yuanxi1"},"content":"                    throw new EntityAlreadyExistsException(\"Instructor has already joined course\");"},{"lineNumber":240,"author":{"gitId":"yuanxi1"},"content":"                }"},{"lineNumber":241,"author":{"gitId":"yuanxi1"},"content":"            } else {"},{"lineNumber":242,"author":{"gitId":"yuanxi1"},"content":"                throw new EntityAlreadyExistsException(\"Instructor has already joined course\");"},{"lineNumber":243,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":244,"author":{"gitId":"yuanxi1"},"content":"        } else {"},{"lineNumber":245,"author":{"gitId":"yuanxi1"},"content":"            // Check if this Google ID has already joined this course"},{"lineNumber":246,"author":{"gitId":"yuanxi1"},"content":"            Instructor existingInstructor \u003d"},{"lineNumber":247,"author":{"gitId":"yuanxi1"},"content":"                    usersLogic.getInstructorByGoogleId(instructorForKey.getCourseId(), googleId);"},{"lineNumber":248,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":249,"author":{"gitId":"yuanxi1"},"content":"            if (existingInstructor !\u003d null) {"},{"lineNumber":250,"author":{"gitId":"yuanxi1"},"content":"                throw new EntityAlreadyExistsException(\"Instructor has already joined course\");"},{"lineNumber":251,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":252,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":254,"author":{"gitId":"yuanxi1"},"content":"        return instructorForKey;"},{"lineNumber":255,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":257,"author":{"gitId":"yuanxi1"},"content":"    private Student validateStudentJoinRequest(String registrationKey, String googleId)"},{"lineNumber":258,"author":{"gitId":"yuanxi1"},"content":"            throws EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":259,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":260,"author":{"gitId":"yuanxi1"},"content":"        Student studentRole \u003d usersLogic.getStudentByRegistrationKey(registrationKey);"},{"lineNumber":261,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":262,"author":{"gitId":"yuanxi1"},"content":"        if (studentRole \u003d\u003d null) {"},{"lineNumber":263,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"No student with given registration key: \" + registrationKey);"},{"lineNumber":264,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":266,"author":{"gitId":"yuanxi1"},"content":"        Course course \u003d coursesLogic.getCourse(studentRole.getCourseId());"},{"lineNumber":267,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":268,"author":{"gitId":"yuanxi1"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":269,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"Course with id \" + studentRole.getCourseId() + \" does not exist\");"},{"lineNumber":270,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":272,"author":{"gitId":"yuanxi1"},"content":"        if (course.isCourseDeleted()) {"},{"lineNumber":273,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityDoesNotExistException(\"The course you are trying to join has been deleted by an instructor\");"},{"lineNumber":274,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":276,"author":{"gitId":"yuanxi1"},"content":"        if (studentRole.isRegistered()) {"},{"lineNumber":277,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityAlreadyExistsException(\"Student has already joined course\");"},{"lineNumber":278,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":280,"author":{"gitId":"yuanxi1"},"content":"        // Check if this Google ID has already joined this course"},{"lineNumber":281,"author":{"gitId":"yuanxi1"},"content":"        Student existingStudent \u003d"},{"lineNumber":282,"author":{"gitId":"yuanxi1"},"content":"                usersLogic.getStudentByGoogleId(studentRole.getCourseId(), googleId);"},{"lineNumber":283,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":284,"author":{"gitId":"yuanxi1"},"content":"        if (existingStudent !\u003d null) {"},{"lineNumber":285,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityAlreadyExistsException(\"Student has already joined course\");"},{"lineNumber":286,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":288,"author":{"gitId":"yuanxi1"},"content":"        return studentRole;"},{"lineNumber":289,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":132,"-":158}},{"path":"src/main/java/teammates/sqllogic/core/CoursesLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Handles operations related to courses."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Course"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see CoursesDb"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public final class CoursesLogic {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final CoursesLogic instance \u003d new CoursesLogic();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private CoursesDb coursesDb;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private FeedbackSessionsLogic fsLogic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private CoursesLogic() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static CoursesLogic inst() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void initLogicDependencies(CoursesDb coursesDb, FeedbackSessionsLogic fsLogic, UsersLogic usersLogic) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.coursesDb \u003d coursesDb;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.fsLogic \u003d fsLogic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates a course."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return the created course"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException   if the course is not valid"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the course already exists in the"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *                                      database."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Course createCourse(Course course) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return coursesDb.createCourse(course);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Gets a course by course id."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param courseId of course."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @return the specified course."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Course getCourse(String courseId) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return coursesDb.getCourse(courseId);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns a list of {@link Course} for all courses a given student is enrolled in."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @param googleId The Google ID of the student"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getCoursesForStudentAccount(String googleId) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d usersLogic.getAllStudentsByGoogleId(googleId);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return students"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .map(Student::getCourse)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .filter(course -\u003e !course.isCourseDeleted())"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns a list of {@link Course} for all courses for a given list of instructors"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * except for courses in Recycle Bin."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getCoursesForInstructors(List\u003cInstructor\u003e instructors) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assert instructors !\u003d null;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return instructors"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .map(Instructor::getCourse)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .filter(course -\u003e !course.isCourseDeleted())"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a list of soft-deleted {@link Course} for a given list of instructors."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public List\u003cCourse\u003e getSoftDeletedCoursesForInstructors(List\u003cInstructor\u003e instructors) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assert instructors !\u003d null;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return instructors"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .map(Instructor::getCourse)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .filter(course -\u003e course.isCourseDeleted())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Deletes a course and cascade its students, instructors, sessions, responses, deadline extensions and comments."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Fails silently if no such course."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void deleteCourseCascade(String courseId) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Course course \u003d coursesDb.getCourse(courseId);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        usersLogic.deleteStudentsInCourseCascade(courseId);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e feedbackSessions \u003d fsLogic.getFeedbackSessionsForCourse(courseId);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        feedbackSessions.forEach(feedbackSession -\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            fsLogic.deleteFeedbackSessionCascade(feedbackSession.getName(), courseId);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        coursesDb.deleteSectionsByCourseId(courseId);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d usersLogic.getInstructorsForCourse(courseId);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        instructors.forEach(instructor -\u003e {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            usersLogic.deleteInstructorCascade(courseId, instructor.getEmail());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        coursesDb.deleteCourse(course);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Moves a course to Recycle Bin by its given corresponding ID."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @return the time when the course is moved to the recycle bin."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public Course moveCourseToRecycleBin(String courseId) throws EntityDoesNotExistException {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Course course \u003d coursesDb.getCourse(courseId);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to move a non-existent course to recycling bin.\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        course.setDeletedAt(now);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return course;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Restores a course from Recycle Bin by its given corresponding ID."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void restoreCourseFromRecycleBin(String courseId) throws EntityDoesNotExistException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Course course \u003d coursesDb.getCourse(courseId);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to restore a non-existent course from recycling bin.\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        course.setDeletedAt(null);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Updates a course."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * @return updated course"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException  if attributes to update are not valid"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the course cannot be found"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public Course updateCourse(String courseId, String name, String timezone)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Course course \u003d getCourse(courseId);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT + Course.class);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        course.setName(name);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        course.setTimeZone(timezone);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        if (!course.isValid()) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(course.getInvalidityInfo());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return course;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Creates a section."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public Section createSection(Section section) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return coursesDb.createSection(section);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Get section by {@code courseId} and {@code teamName}."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public Section getSectionByCourseIdAndTeam(String courseId, String teamName) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assert teamName !\u003d null;"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return coursesDb.getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Gets a list of section names for the given {@code courseId}."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getSectionNamesForCourse(String courseId) throws EntityDoesNotExistException {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Course course \u003d getCourse(courseId);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        if (course \u003d\u003d null) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to get section names for a non-existent course.\");"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        return course.getSections()"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                .map(section -\u003e section.getName())"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"yuanxi1"},"content":"     * Gets the institute of the course."},{"lineNumber":226,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"yuanxi1"},"content":"    public String getCourseInstitute(String courseId) {"},{"lineNumber":228,"author":{"gitId":"yuanxi1"},"content":"        Course course \u003d getCourse(courseId);"},{"lineNumber":229,"author":{"gitId":"yuanxi1"},"content":"        assert course !\u003d null : \"Trying to getCourseInstitute for inexistent course with id \" + courseId;"},{"lineNumber":230,"author":{"gitId":"yuanxi1"},"content":"        return course.getInstitute();"},{"lineNumber":231,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Creates a team."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public Team createTeam(Team team) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return coursesDb.createTeam(team);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Returns teams for a particular section."},{"lineNumber":242,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public List\u003cTeam\u003e getTeamsForSection(Section section) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        return coursesDb.getTeamsForSection(section);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * Returns teams for a course."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public List\u003cTeam\u003e getTeamsForCourse(String courseId) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return coursesDb.getTeamsForCourse(courseId);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Sorts the courses list alphabetically by id."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public static void sortById(List\u003cCourse\u003e courses) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        courses.sort(Comparator.comparing(Course::getId));"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":9,"-":251}},{"path":"src/main/java/teammates/sqllogic/core/DataBundleLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Handles operations related to data bundles."},{"lineNumber":32,"author":{"gitId":"-"},"content":" *"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * @see DataBundle"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public final class DataBundleLogic {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final DataBundleLogic instance \u003d new DataBundleLogic();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private AccountsLogic accountsLogic;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private AccountRequestsLogic accountRequestsLogic;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private CoursesLogic coursesLogic;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private DeadlineExtensionsLogic deadlineExtensionsLogic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private FeedbackSessionsLogic fsLogic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic frLogic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsLogic frcLogic;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private NotificationsLogic notificationsLogic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private DataBundleLogic() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static DataBundleLogic inst() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void initLogicDependencies(AccountsLogic accountsLogic, AccountRequestsLogic accountRequestsLogic,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            CoursesLogic coursesLogic,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            DeadlineExtensionsLogic deadlineExtensionsLogic, FeedbackSessionsLogic fsLogic,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            FeedbackQuestionsLogic fqLogic, FeedbackResponsesLogic frLogic,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentsLogic frcLogic,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            NotificationsLogic notificationsLogic, UsersLogic usersLogic) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.accountsLogic \u003d accountsLogic;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.accountRequestsLogic \u003d accountRequestsLogic;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.coursesLogic \u003d coursesLogic;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.deadlineExtensionsLogic \u003d deadlineExtensionsLogic;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.fsLogic \u003d fsLogic;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.fqLogic \u003d fqLogic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.frLogic \u003d frLogic;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.frcLogic \u003d frcLogic;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.notificationsLogic \u003d notificationsLogic;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Deserialize JSON into a data bundle."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * \u003cp\u003eNOTE: apart from for Course, ids used in the jsonString may be any valid UUID"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and are used only to link entities together. They will be replaced by a random"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * UUID when deserialized and hence do not need to be checked if they exist in the"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * database previously.\u003c/p\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonString containing entities to persist at once to the database."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *         CourseID must be a valid UUID not currently in use."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *         For other entities, replaces the given ids with randomly generated UUIDs."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @return newly created DataBundle"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static SqlDataBundle deserializeDataBundle(String jsonString) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        SqlDataBundle dataBundle \u003d JsonUtils.fromJson(jsonString, SqlDataBundle.class);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Collection\u003cAccount\u003e accounts \u003d dataBundle.accounts.values();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Collection\u003cAccountRequest\u003e accountRequests \u003d dataBundle.accountRequests.values();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Collection\u003cCourse\u003e courses \u003d dataBundle.courses.values();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Collection\u003cSection\u003e sections \u003d dataBundle.sections.values();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Collection\u003cTeam\u003e teams \u003d dataBundle.teams.values();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Collection\u003cInstructor\u003e instructors \u003d dataBundle.instructors.values();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Collection\u003cStudent\u003e students \u003d dataBundle.students.values();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackSession\u003e sessions \u003d dataBundle.feedbackSessions.values();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackQuestion\u003e questions \u003d dataBundle.feedbackQuestions.values();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackResponse\u003e responses \u003d dataBundle.feedbackResponses.values();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackResponseComment\u003e responseComments \u003d dataBundle.feedbackResponseComments.values();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Collection\u003cDeadlineExtension\u003e deadlineExtensions \u003d dataBundle.deadlineExtensions.values();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Collection\u003cNotification\u003e notifications \u003d dataBundle.notifications.values();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Collection\u003cReadNotification\u003e readNotifications \u003d dataBundle.readNotifications.values();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Mapping of IDs or placeholder IDs to actual entity"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Map\u003cString, Course\u003e coursesMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Map\u003cUUID, Section\u003e sectionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Map\u003cUUID, Team\u003e teamsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Map\u003cUUID, FeedbackSession\u003e sessionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Map\u003cUUID, FeedbackQuestion\u003e questionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Map\u003cUUID, FeedbackResponse\u003e responseMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Map\u003cUUID, Account\u003e accountsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Map\u003cUUID, User\u003e usersMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Map\u003cUUID, Notification\u003e notificationsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // Replace any placeholder IDs with newly generated UUIDs"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // Store mapping of placeholder ID to actual entity to keep track of"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // associations between entities"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        for (AccountRequest accountRequest : accountRequests) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            accountRequest.setId(UUID.randomUUID());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            accountRequest.generateNewRegistrationKey();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        for (Course course : courses) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            coursesMap.put(course.getId(), course);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        for (Section section : sections) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d section.getId();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            section.setId(UUID.randomUUID());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            sectionsMap.put(placeholderId, section);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            Course course \u003d coursesMap.get(section.getCourse().getId());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            section.setCourse(course);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        for (Team team : teams) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d team.getId();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            team.setId(UUID.randomUUID());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            teamsMap.put(placeholderId, team);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            Section section \u003d sectionsMap.get(team.getSection().getId());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            team.setSection(section);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d session.getId();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            session.setId(UUID.randomUUID());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            sessionsMap.put(placeholderId, session);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Course course \u003d coursesMap.get(session.getCourse().getId());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            session.setCourse(course);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d question.getId();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            question.setId(UUID.randomUUID());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            questionMap.put(placeholderId, question);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            FeedbackSession fs \u003d sessionsMap.get(question.getFeedbackSession().getId());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            question.setFeedbackSession(fs);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d response.getId();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            response.setId(UUID.randomUUID());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            responseMap.put(placeholderId, response);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            FeedbackQuestion fq \u003d questionMap.get(response.getFeedbackQuestion().getId());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            Section giverSection \u003d sectionsMap.get(response.getGiverSection().getId());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            Section recipientSection \u003d response.getRecipientSection() !\u003d null"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    ? sectionsMap.get(response.getRecipientSection().getId()) : null;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            response.setFeedbackQuestion(fq);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            response.setGiverSection(giverSection);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            response.setRecipientSection(recipientSection);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        for (FeedbackResponseComment responseComment : responseComments) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            FeedbackResponse fr \u003d responseMap.get(responseComment.getFeedbackResponse().getId());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            Section giverSection \u003d sectionsMap.get(responseComment.getGiverSection().getId());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            Section recipientSection \u003d sectionsMap.get(responseComment.getRecipientSection().getId());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            responseComment.setFeedbackResponse(fr);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            responseComment.setGiverSection(giverSection);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            responseComment.setRecipientSection(recipientSection);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        for (Account account : accounts) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d account.getId();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            account.setId(UUID.randomUUID());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            accountsMap.put(placeholderId, account);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d instructor.getId();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            instructor.setId(UUID.randomUUID());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            usersMap.put(placeholderId, instructor);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            Course course \u003d coursesMap.get(instructor.getCourse().getId());"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            instructor.setCourse(course);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (instructor.getAccount() !\u003d null) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                Account account \u003d accountsMap.get(instructor.getAccount().getId());"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                instructor.setAccount(account);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            instructor.generateNewRegistrationKey();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        for (Student student : students) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d student.getId();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            student.setId(UUID.randomUUID());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            usersMap.put(placeholderId, student);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            Course course \u003d coursesMap.get(student.getCourse().getId());"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            student.setCourse(course);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            Team team \u003d teamsMap.get(student.getTeam().getId());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            student.setTeam(team);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (student.getAccount() !\u003d null) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                Account account \u003d accountsMap.get(student.getAccount().getId());"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                student.setAccount(account);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            student.generateNewRegistrationKey();"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        for (Notification notification : notifications) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            UUID placeholderId \u003d notification.getId();"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            notification.setId(UUID.randomUUID());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            notificationsMap.put(placeholderId, notification);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        for (ReadNotification readNotification : readNotifications) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            readNotification.setId(UUID.randomUUID());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            Account account \u003d accountsMap.get(readNotification.getAccount().getId());"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            readNotification.setAccount(account);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            account.addReadNotification(readNotification);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            Notification notification \u003d notificationsMap.get(readNotification.getNotification().getId());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            readNotification.setNotification(notification);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        for (DeadlineExtension deadlineExtension : deadlineExtensions) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            deadlineExtension.setId(UUID.randomUUID());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            FeedbackSession session \u003d sessionsMap.get(deadlineExtension.getFeedbackSession().getId());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            deadlineExtension.setFeedbackSession(session);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            User user \u003d usersMap.get(deadlineExtension.getUser().getId());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            deadlineExtension.setUser(user);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return dataBundle;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Persists data in the given {@link DataBundle} to the database."},{"lineNumber":246,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if invalid data is encountered."},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if an entity was not found."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     *         (ReadNotification requires Account and Notification to be created)"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public SqlDataBundle persistDataBundle(SqlDataBundle dataBundle)"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException, EntityDoesNotExistException {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        if (dataBundle \u003d\u003d null) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Null data bundle\");"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"yuanxi1"},"content":"        linkEntities(dataBundle);"},{"lineNumber":258,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        Collection\u003cAccount\u003e accounts \u003d dataBundle.accounts.values();"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        Collection\u003cAccountRequest\u003e accountRequests \u003d dataBundle.accountRequests.values();"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        Collection\u003cCourse\u003e courses \u003d dataBundle.courses.values();"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        Collection\u003cSection\u003e sections \u003d dataBundle.sections.values();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        Collection\u003cTeam\u003e teams \u003d dataBundle.teams.values();"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        Collection\u003cInstructor\u003e instructors \u003d dataBundle.instructors.values();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        Collection\u003cStudent\u003e students \u003d dataBundle.students.values();"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackSession\u003e sessions \u003d dataBundle.feedbackSessions.values();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackQuestion\u003e questions \u003d dataBundle.feedbackQuestions.values();"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackResponse\u003e responses \u003d dataBundle.feedbackResponses.values();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        Collection\u003cFeedbackResponseComment\u003e responseComments \u003d dataBundle.feedbackResponseComments.values();"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Collection\u003cDeadlineExtension\u003e deadlineExtensions \u003d dataBundle.deadlineExtensions.values();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        Collection\u003cNotification\u003e notifications \u003d dataBundle.notifications.values();"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        Collection\u003cReadNotification\u003e readNotifications \u003d dataBundle.readNotifications.values();"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        for (AccountRequest accountRequest : accountRequests) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            accountRequestsLogic.createAccountRequest(accountRequest);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"        for (Notification notification : notifications) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            notificationsLogic.createNotification(notification);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"        for (Course course : courses) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            coursesLogic.createCourse(course);"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        for (Section section : sections) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            coursesLogic.createSection(section);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"        for (Team team : teams) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            coursesLogic.createTeam(team);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            fsLogic.createFeedbackSession(session);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            fqLogic.createFeedbackQuestion(question);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            frLogic.createFeedbackResponse(response);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        for (FeedbackResponseComment responseComment : responseComments) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            responseComment.setId(null);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            frcLogic.createFeedbackResponseComment(responseComment);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"        for (Account account : accounts) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            accountsLogic.createAccount(account);"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            usersLogic.createInstructor(instructor);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"        for (Student student : students) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            usersLogic.createStudent(student);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        for (ReadNotification readNotification : readNotifications) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            accountsLogic.updateReadNotifications(readNotification.getAccount().getGoogleId(),"},{"lineNumber":325,"author":{"gitId":"-"},"content":"                    readNotification.getNotification().getId(), readNotification.getNotification().getEndTime());"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        for (DeadlineExtension deadlineExtension : deadlineExtensions) {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            deadlineExtensionsLogic.createDeadlineExtension(deadlineExtension);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return dataBundle;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":336,"author":{"gitId":"-"},"content":"     * Removes the items in the data bundle from the database."},{"lineNumber":337,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    public void removeDataBundle(SqlDataBundle dataBundle) throws InvalidParametersException {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (dataBundle \u003d\u003d null) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Data bundle is null\");"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"yuanxi1"},"content":"        linkEntities(dataBundle);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        dataBundle.courses.values().forEach(course -\u003e {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"            coursesLogic.deleteCourseCascade(course.getId());"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        dataBundle.notifications.values().forEach(notification -\u003e {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            notificationsLogic.deleteNotification(notification.getId());"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        dataBundle.accounts.values().forEach(account -\u003e {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            accountsLogic.deleteAccount(account.getGoogleId());"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        dataBundle.accountRequests.values().forEach(accountRequest -\u003e {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            accountRequestsLogic.deleteAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Creates document for entities that have document, i.e. searchable."},{"lineNumber":360,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public void putDocuments(SqlDataBundle dataBundle) throws SearchServiceException {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        Map\u003cString, Student\u003e students \u003d dataBundle.students;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        for (Student student : students.values()) {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            usersLogic.putStudentDocument(student);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"        Map\u003cString, Instructor\u003e instructors \u003d dataBundle.instructors;"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors.values()) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            usersLogic.putInstructorDocument(instructor);"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"        Map\u003cString, AccountRequest\u003e accountRequests \u003d dataBundle.accountRequests;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        for (AccountRequest accountRequest : accountRequests.values()) {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"            accountRequestsLogic.putDocument(accountRequest);"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"yuanxi1"},"content":"    private static void linkEntities(SqlDataBundle dataBundle) {"},{"lineNumber":379,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cAccount\u003e accounts \u003d dataBundle.accounts.values();"},{"lineNumber":380,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cCourse\u003e courses \u003d dataBundle.courses.values();"},{"lineNumber":381,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cSection\u003e sections \u003d dataBundle.sections.values();"},{"lineNumber":382,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cTeam\u003e teams \u003d dataBundle.teams.values();"},{"lineNumber":383,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cInstructor\u003e instructors \u003d dataBundle.instructors.values();"},{"lineNumber":384,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cStudent\u003e students \u003d dataBundle.students.values();"},{"lineNumber":385,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cFeedbackSession\u003e sessions \u003d dataBundle.feedbackSessions.values();"},{"lineNumber":386,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cFeedbackQuestion\u003e questions \u003d dataBundle.feedbackQuestions.values();"},{"lineNumber":387,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cFeedbackResponse\u003e responses \u003d dataBundle.feedbackResponses.values();"},{"lineNumber":388,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cFeedbackResponseComment\u003e responseComments \u003d dataBundle.feedbackResponseComments.values();"},{"lineNumber":389,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cDeadlineExtension\u003e deadlineExtensions \u003d dataBundle.deadlineExtensions.values();"},{"lineNumber":390,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cNotification\u003e notifications \u003d dataBundle.notifications.values();"},{"lineNumber":391,"author":{"gitId":"yuanxi1"},"content":"        Collection\u003cReadNotification\u003e readNotifications \u003d dataBundle.readNotifications.values();"},{"lineNumber":392,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":393,"author":{"gitId":"yuanxi1"},"content":"        // Mapping of IDs or placeholder IDs to actual entity"},{"lineNumber":394,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cString, Course\u003e coursesMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":395,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, Section\u003e sectionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":396,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, Team\u003e teamsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":397,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, FeedbackSession\u003e sessionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":398,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, FeedbackQuestion\u003e questionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":399,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, FeedbackResponse\u003e responseMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":400,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, Account\u003e accountsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":401,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, User\u003e usersMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":402,"author":{"gitId":"yuanxi1"},"content":"        Map\u003cUUID, Notification\u003e notificationsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":403,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":404,"author":{"gitId":"yuanxi1"},"content":"        for (Course course : courses) {"},{"lineNumber":405,"author":{"gitId":"yuanxi1"},"content":"            coursesMap.put(course.getId(), course);"},{"lineNumber":406,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":407,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":408,"author":{"gitId":"yuanxi1"},"content":"        for (Section section : sections) {"},{"lineNumber":409,"author":{"gitId":"yuanxi1"},"content":"            sectionsMap.put(section.getId(), section);"},{"lineNumber":410,"author":{"gitId":"yuanxi1"},"content":"            Course course \u003d coursesMap.get(section.getCourse().getId());"},{"lineNumber":411,"author":{"gitId":"yuanxi1"},"content":"            section.setCourse(course);"},{"lineNumber":412,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":413,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":414,"author":{"gitId":"yuanxi1"},"content":"        for (Team team : teams) {"},{"lineNumber":415,"author":{"gitId":"yuanxi1"},"content":"            teamsMap.put(team.getId(), team);"},{"lineNumber":416,"author":{"gitId":"yuanxi1"},"content":"            Section section \u003d sectionsMap.get(team.getSection().getId());"},{"lineNumber":417,"author":{"gitId":"yuanxi1"},"content":"            team.setSection(section);"},{"lineNumber":418,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":419,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":420,"author":{"gitId":"yuanxi1"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":421,"author":{"gitId":"yuanxi1"},"content":"            sessionsMap.put(session.getId(), session);"},{"lineNumber":422,"author":{"gitId":"yuanxi1"},"content":"            Course course \u003d coursesMap.get(session.getCourse().getId());"},{"lineNumber":423,"author":{"gitId":"yuanxi1"},"content":"            session.setCourse(course);"},{"lineNumber":424,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":425,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":426,"author":{"gitId":"yuanxi1"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":427,"author":{"gitId":"yuanxi1"},"content":"            questionMap.put(question.getId(), question);"},{"lineNumber":428,"author":{"gitId":"yuanxi1"},"content":"            FeedbackSession fs \u003d sessionsMap.get(question.getFeedbackSession().getId());"},{"lineNumber":429,"author":{"gitId":"yuanxi1"},"content":"            question.setFeedbackSession(fs);"},{"lineNumber":430,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":431,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":432,"author":{"gitId":"yuanxi1"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":433,"author":{"gitId":"yuanxi1"},"content":"            UUID placeholderId \u003d response.getId();"},{"lineNumber":434,"author":{"gitId":"yuanxi1"},"content":"            responseMap.put(placeholderId, response);"},{"lineNumber":435,"author":{"gitId":"yuanxi1"},"content":"            FeedbackQuestion fq \u003d questionMap.get(response.getFeedbackQuestion().getId());"},{"lineNumber":436,"author":{"gitId":"yuanxi1"},"content":"            Section giverSection \u003d sectionsMap.get(response.getGiverSection().getId());"},{"lineNumber":437,"author":{"gitId":"yuanxi1"},"content":"            Section recipientSection \u003d response.getRecipientSection() !\u003d null"},{"lineNumber":438,"author":{"gitId":"yuanxi1"},"content":"                    ? sectionsMap.get(response.getRecipientSection().getId()) : null;"},{"lineNumber":439,"author":{"gitId":"yuanxi1"},"content":"            response.setFeedbackQuestion(fq);"},{"lineNumber":440,"author":{"gitId":"yuanxi1"},"content":"            response.setGiverSection(giverSection);"},{"lineNumber":441,"author":{"gitId":"yuanxi1"},"content":"            response.setRecipientSection(recipientSection);"},{"lineNumber":442,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":443,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":444,"author":{"gitId":"yuanxi1"},"content":"        for (FeedbackResponseComment responseComment : responseComments) {"},{"lineNumber":445,"author":{"gitId":"yuanxi1"},"content":"            FeedbackResponse fr \u003d responseMap.get(responseComment.getFeedbackResponse().getId());"},{"lineNumber":446,"author":{"gitId":"yuanxi1"},"content":"            Section giverSection \u003d sectionsMap.get(responseComment.getGiverSection().getId());"},{"lineNumber":447,"author":{"gitId":"yuanxi1"},"content":"            Section recipientSection \u003d sectionsMap.get(responseComment.getRecipientSection().getId());"},{"lineNumber":448,"author":{"gitId":"yuanxi1"},"content":"            responseComment.setFeedbackResponse(fr);"},{"lineNumber":449,"author":{"gitId":"yuanxi1"},"content":"            responseComment.setGiverSection(giverSection);"},{"lineNumber":450,"author":{"gitId":"yuanxi1"},"content":"            responseComment.setRecipientSection(recipientSection);"},{"lineNumber":451,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":452,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":453,"author":{"gitId":"yuanxi1"},"content":"        for (Account account : accounts) {"},{"lineNumber":454,"author":{"gitId":"yuanxi1"},"content":"            accountsMap.put(account.getId(), account);"},{"lineNumber":455,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":456,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":457,"author":{"gitId":"yuanxi1"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":458,"author":{"gitId":"yuanxi1"},"content":"            usersMap.put(instructor.getId(), instructor);"},{"lineNumber":459,"author":{"gitId":"yuanxi1"},"content":"            Course course \u003d coursesMap.get(instructor.getCourse().getId());"},{"lineNumber":460,"author":{"gitId":"yuanxi1"},"content":"            instructor.setCourse(course);"},{"lineNumber":461,"author":{"gitId":"yuanxi1"},"content":"            if (instructor.getAccount() !\u003d null) {"},{"lineNumber":462,"author":{"gitId":"yuanxi1"},"content":"                Account account \u003d accountsMap.get(instructor.getAccount().getId());"},{"lineNumber":463,"author":{"gitId":"yuanxi1"},"content":"                instructor.setAccount(account);"},{"lineNumber":464,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":465,"author":{"gitId":"yuanxi1"},"content":"            instructor.generateNewRegistrationKey();"},{"lineNumber":466,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":467,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":468,"author":{"gitId":"yuanxi1"},"content":"        for (Student student : students) {"},{"lineNumber":469,"author":{"gitId":"yuanxi1"},"content":"            usersMap.put(student.getId(), student);"},{"lineNumber":470,"author":{"gitId":"yuanxi1"},"content":"            Course course \u003d coursesMap.get(student.getCourse().getId());"},{"lineNumber":471,"author":{"gitId":"yuanxi1"},"content":"            student.setCourse(course);"},{"lineNumber":472,"author":{"gitId":"yuanxi1"},"content":"            Team team \u003d teamsMap.get(student.getTeam().getId());"},{"lineNumber":473,"author":{"gitId":"yuanxi1"},"content":"            student.setTeam(team);"},{"lineNumber":474,"author":{"gitId":"yuanxi1"},"content":"            if (student.getAccount() !\u003d null) {"},{"lineNumber":475,"author":{"gitId":"yuanxi1"},"content":"                Account account \u003d accountsMap.get(student.getAccount().getId());"},{"lineNumber":476,"author":{"gitId":"yuanxi1"},"content":"                student.setAccount(account);"},{"lineNumber":477,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":478,"author":{"gitId":"yuanxi1"},"content":"            student.generateNewRegistrationKey();"},{"lineNumber":479,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":480,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":481,"author":{"gitId":"yuanxi1"},"content":"        for (Notification notification : notifications) {"},{"lineNumber":482,"author":{"gitId":"yuanxi1"},"content":"            notificationsMap.put(notification.getId(), notification);"},{"lineNumber":483,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":484,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":485,"author":{"gitId":"yuanxi1"},"content":"        for (ReadNotification readNotification : readNotifications) {"},{"lineNumber":486,"author":{"gitId":"yuanxi1"},"content":"            Account account \u003d accountsMap.get(readNotification.getAccount().getId());"},{"lineNumber":487,"author":{"gitId":"yuanxi1"},"content":"            readNotification.setAccount(account);"},{"lineNumber":488,"author":{"gitId":"yuanxi1"},"content":"            Notification notification \u003d notificationsMap.get(readNotification.getNotification().getId());"},{"lineNumber":489,"author":{"gitId":"yuanxi1"},"content":"            readNotification.setNotification(notification);"},{"lineNumber":490,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":491,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":492,"author":{"gitId":"yuanxi1"},"content":"        for (DeadlineExtension deadlineExtension : deadlineExtensions) {"},{"lineNumber":493,"author":{"gitId":"yuanxi1"},"content":"            FeedbackSession session \u003d sessionsMap.get(deadlineExtension.getFeedbackSession().getId());"},{"lineNumber":494,"author":{"gitId":"yuanxi1"},"content":"            deadlineExtension.setFeedbackSession(session);"},{"lineNumber":495,"author":{"gitId":"yuanxi1"},"content":"            User user \u003d usersMap.get(deadlineExtension.getUser().getId());"},{"lineNumber":496,"author":{"gitId":"yuanxi1"},"content":"            deadlineExtension.setUser(user);"},{"lineNumber":497,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":498,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":499,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":124,"-":375}},{"path":"src/main/java/teammates/sqllogic/core/FeedbackQuestionsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackQuestionRecipient;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlCourseRoster;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":22,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackQuestionsDb;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackMcqQuestion;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackMsqQuestion;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackQuestionUpdateRequest;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Handles operations related to feedback questions."},{"lineNumber":38,"author":{"gitId":"-"},"content":" *"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * @see FeedbackQuestion"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * @see FeedbackQuestionsDb"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public final class FeedbackQuestionsLogic {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    static final String USER_NAME_FOR_SELF \u003d \"Myself\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final FeedbackQuestionsLogic instance \u003d new FeedbackQuestionsLogic();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsDb fqDb;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private CoursesLogic coursesLogic;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic frLogic;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private FeedbackSessionsLogic feedbackSessionsLogic;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static FeedbackQuestionsLogic inst() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    void initLogicDependencies(FeedbackQuestionsDb fqDb, CoursesLogic coursesLogic, FeedbackResponsesLogic frLogic,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                               UsersLogic usersLogic, FeedbackSessionsLogic feedbackSessionsLogic) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.fqDb \u003d fqDb;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.coursesLogic \u003d coursesLogic;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.frLogic \u003d frLogic;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.feedbackSessionsLogic \u003d feedbackSessionsLogic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates a new feedback question."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @return the created question"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the question is invalid"},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":"     * @throws EntityAlreadyExistsException if the question already exists"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"    public FeedbackQuestion createFeedbackQuestion(FeedbackQuestion feedbackQuestion)"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion createdQuestion \u003d fqDb.createFeedbackQuestion(feedbackQuestion);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsBefore \u003d getFeedbackQuestionsForSession(feedbackQuestion.getFeedbackSession());"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":"        questionsBefore.remove(createdQuestion);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        adjustQuestionNumbers(questionsBefore.size() + 1, createdQuestion.getQuestionNumber(), questionsBefore);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return createdQuestion;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Gets an feedback question by feedback question id."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param id of feedback question."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @return the specified feedback question."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public FeedbackQuestion getFeedbackQuestion(UUID id) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return fqDb.getFeedbackQuestion(id);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Gets a {@link List} of every FeedbackQuestion in the given session."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForSession(FeedbackSession feedbackSession) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questions \u003d fqDb.getFeedbackQuestionsForSession(feedbackSession.getId());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        questions.sort(null);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // check whether the question numbers are consistent"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (questions.size() \u003e 1 \u0026\u0026 !areQuestionNumbersConsistent(questions)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            log.severe(feedbackSession.getCourse().getId() + \": \" + feedbackSession.getName()"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                    + \" has invalid question numbers\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return questions;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Checks if there are any questions for the given session that instructors can view/submit."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean hasFeedbackQuestionsForInstructors(List\u003cFeedbackQuestion\u003e fqs, boolean isCreator) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        boolean hasQuestions \u003d hasFeedbackQuestionsForGiverType(fqs, FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (hasQuestions) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (isCreator) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            hasQuestions \u003d hasFeedbackQuestionsForGiverType(fqs, FeedbackParticipantType.SELF);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return hasQuestions;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Gets a {@code List} of all questions for the given session that instructors can view/submit."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForInstructors("},{"lineNumber":136,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, String userEmail) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        questions.addAll("},{"lineNumber":140,"author":{"gitId":"-"},"content":"                fqDb.getFeedbackQuestionsForGiverType("},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    feedbackSession, FeedbackParticipantType.INSTRUCTORS));"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (feedbackSession.getCreatorEmail().equals(userEmail)) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            questions.addAll("},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    fqDb.getFeedbackQuestionsForGiverType("},{"lineNumber":146,"author":{"gitId":"-"},"content":"                        feedbackSession, FeedbackParticipantType.SELF));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return questions;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Gets a {@code List} of all questions for the given session that students can view/submit."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForStudents(FeedbackSession feedbackSession) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        questions.addAll(fqDb.getFeedbackQuestionsForGiverType(feedbackSession, FeedbackParticipantType.STUDENTS));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        questions.addAll(fqDb.getFeedbackQuestionsForGiverType(feedbackSession, FeedbackParticipantType.SELF));"},{"lineNumber":160,"author":{"gitId":"dishenggg"},"content":"        questions.sort(null);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return questions;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Updates a feedback question."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade adjust the question number of questions in the same session."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade adjust the existing response of the question."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * @return updated feedback question"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback question cannot be found"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public FeedbackQuestion updateFeedbackQuestionCascade(UUID questionId, FeedbackQuestionUpdateRequest updateRequest)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        FeedbackQuestion question \u003d fqDb.getFeedbackQuestion(questionId);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to update a feedback question that does not exist.\");"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        int oldQuestionNumber \u003d question.getQuestionNumber();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        int newQuestionNumber \u003d updateRequest.getQuestionNumber();"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e previousQuestionsInSession \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (oldQuestionNumber !\u003d newQuestionNumber) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            // get questions in session before update"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            previousQuestionsInSession \u003d getFeedbackQuestionsForSession(question.getFeedbackSession());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // update question"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        question.setQuestionNumber(updateRequest.getQuestionNumber());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        question.setDescription(updateRequest.getQuestionDescription());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        question.setQuestionDetails(updateRequest.getQuestionDetails());"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        question.setGiverType(updateRequest.getGiverType());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        question.setRecipientType(updateRequest.getRecipientType());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        question.setNumOfEntitiesToGiveFeedbackTo(updateRequest.getNumberOfEntitiesToGiveFeedbackTo());"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        question.setShowResponsesTo(updateRequest.getShowResponsesTo());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        question.setShowGiverNameTo(updateRequest.getShowGiverNameTo());"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        question.setShowRecipientNameTo(updateRequest.getShowRecipientNameTo());"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // validate questions (giver \u0026 recipient)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        String err \u003d question.getQuestionDetailsCopy().validateGiverRecipientVisibility(question);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (!err.isEmpty()) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(err);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        // validate questions (question details)"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetailsCopy();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        List\u003cString\u003e questionDetailsErrors \u003d questionDetails.validateQuestionDetails();"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        if (!questionDetailsErrors.isEmpty()) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(questionDetailsErrors.toString());"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        if (oldQuestionNumber !\u003d newQuestionNumber) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // shift other feedback questions (generate an empty \"slot\")"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            adjustQuestionNumbers(oldQuestionNumber, newQuestionNumber, previousQuestionsInSession);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // adjust responses"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (question.areResponseDeletionsRequiredForChanges(updateRequest.getGiverType(),"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                updateRequest.getRecipientType(), updateRequest.getQuestionDetails())) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            frLogic.deleteFeedbackResponsesForQuestionCascade(question.getId());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return question;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Checks if there are any questions for the given session that students can view/submit."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public boolean hasFeedbackQuestionsForStudents(List\u003cFeedbackQuestion\u003e fqs) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return hasFeedbackQuestionsForGiverType(fqs, FeedbackParticipantType.STUDENTS)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                || hasFeedbackQuestionsForGiverType(fqs, FeedbackParticipantType.TEAMS);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * Checks if there is any feedback questions in a session in a course for the given giver type."},{"lineNumber":239,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public boolean hasFeedbackQuestionsForGiverType("},{"lineNumber":241,"author":{"gitId":"-"},"content":"            List\u003cFeedbackQuestion\u003e feedbackQuestions, FeedbackParticipantType giverType) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assert feedbackQuestions !\u003d null;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        assert giverType !\u003d null;"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion fq : feedbackQuestions) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            if (fq.getGiverType() \u003d\u003d giverType) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    // TODO can be removed once we are sure that question numbers will be consistent"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    private boolean areQuestionNumbersConsistent(List\u003cFeedbackQuestion\u003e questions) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        Set\u003cInteger\u003e questionNumbersInSession \u003d new HashSet\u003c\u003e();"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            if (!questionNumbersInSession.add(question.getQuestionNumber())) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c\u003d questions.size(); i++) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            if (!questionNumbersInSession.contains(i)) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitId":"-"},"content":"     * Adjust questions between the old and new number,"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * if the new number is smaller, then shift up (increase qn#) all questions in between."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * if the new number is bigger, then shift down(decrease qn#) all questions in between."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    private void adjustQuestionNumbers(int oldQuestionNumber, int newQuestionNumber, List\u003cFeedbackQuestion\u003e questions) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        if (oldQuestionNumber \u003e newQuestionNumber \u0026\u0026 oldQuestionNumber \u003e\u003d 1) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            for (int i \u003d oldQuestionNumber - 1; i \u003e\u003d newQuestionNumber; i--) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                FeedbackQuestion question \u003d questions.get(i - 1);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                question.setQuestionNumber(question.getQuestionNumber() + 1);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        } else if (oldQuestionNumber \u003c newQuestionNumber \u0026\u0026 oldQuestionNumber \u003c questions.size()) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            for (int i \u003d oldQuestionNumber + 1; i \u003c\u003d newQuestionNumber; i++) {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                FeedbackQuestion question \u003d questions.get(i - 1);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                question.setQuestionNumber(question.getQuestionNumber() - 1);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * Populates fields that need dynamic generation in a question."},{"lineNumber":292,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCurrently, only MCQ/MSQ needs to generate choices dynamically.\u003c/p\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * @param feedbackQuestion the question to populate"},{"lineNumber":296,"author":{"gitId":"-"},"content":"     * @param courseId the ID of the course"},{"lineNumber":297,"author":{"gitId":"-"},"content":"     * @param emailOfEntityDoingQuestion the email of the entity doing the question"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     * @param teamOfEntityDoingQuestion the team of the entity doing the question. If the entity is an instructor,"},{"lineNumber":299,"author":{"gitId":"-"},"content":"     *                                  it can be {@code null}."},{"lineNumber":300,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public void populateFieldsToGenerateInQuestion(FeedbackQuestion feedbackQuestion,"},{"lineNumber":302,"author":{"gitId":"-"},"content":"            String courseId, String emailOfEntityDoingQuestion, String teamOfEntityDoingQuestion) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        List\u003cString\u003e optionList;"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"        FeedbackParticipantType generateOptionsFor;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        FeedbackQuestionType questionType \u003d feedbackQuestion.getQuestionDetailsCopy().getQuestionType();"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        if (questionType \u003d\u003d FeedbackQuestionType.MCQ) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"            FeedbackMcqQuestionDetails feedbackMcqQuestionDetails \u003d"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                    (FeedbackMcqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            optionList \u003d feedbackMcqQuestionDetails.getMcqChoices();"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            generateOptionsFor \u003d feedbackMcqQuestionDetails.getGenerateOptionsFor();"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        } else if (questionType \u003d\u003d FeedbackQuestionType.MSQ) {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            FeedbackMsqQuestionDetails feedbackMsqQuestionDetails \u003d"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                    (FeedbackMsqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            optionList \u003d feedbackMsqQuestionDetails.getMsqChoices();"},{"lineNumber":317,"author":{"gitId":"-"},"content":"            generateOptionsFor \u003d feedbackMsqQuestionDetails.getGenerateOptionsFor();"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            // other question types"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"        switch (generateOptionsFor) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        case NONE:"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e studentList;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            if (generateOptionsFor \u003d\u003d FeedbackParticipantType.STUDENTS_IN_SAME_SECTION) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                Student student \u003d"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                        usersLogic.getStudentForEmail(courseId, emailOfEntityDoingQuestion);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                studentList \u003d usersLogic.getStudentsForSection(student.getSectionName(), courseId);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                studentList \u003d usersLogic.getStudentsForCourse(courseId);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"            if (generateOptionsFor \u003d\u003d FeedbackParticipantType.STUDENTS_EXCLUDING_SELF) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"                studentList.removeIf(studentInList -\u003e studentInList.getEmail().equals(emailOfEntityDoingQuestion));"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"            for (Student student : studentList) {"},{"lineNumber":343,"author":{"gitId":"dishenggg"},"content":"                optionList.add(student.getName() + \" (\" + student.getTeam().getName() + \")\");"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"            optionList.sort(null);"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            List\u003cString\u003e teams;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"            if (generateOptionsFor \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"                Student student \u003d"},{"lineNumber":354,"author":{"gitId":"-"},"content":"                        usersLogic.getStudentForEmail(courseId, emailOfEntityDoingQuestion);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"                teams \u003d coursesLogic.getTeamsForSection(student.getSection())"},{"lineNumber":356,"author":{"gitId":"-"},"content":"                                    .stream()"},{"lineNumber":357,"author":{"gitId":"-"},"content":"                                    .map(team -\u003e { return team.getName(); })"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                                    .collect(Collectors.toList());"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                teams \u003d coursesLogic.getTeamsForCourse(courseId)"},{"lineNumber":361,"author":{"gitId":"-"},"content":"                                    .stream()"},{"lineNumber":362,"author":{"gitId":"-"},"content":"                                    .map(team -\u003e { return team.getName(); })"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                                    .collect(Collectors.toList());"},{"lineNumber":364,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"            if (generateOptionsFor \u003d\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"                teams.removeIf(team -\u003e team.equals(teamOfEntityDoingQuestion));"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"            for (String team : teams) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                optionList.add(team);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"            optionList.sort(null);"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            if (teamOfEntityDoingQuestion !\u003d null) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"                List\u003cStudent\u003e teamMembers \u003d usersLogic.getStudentsForTeam(teamOfEntityDoingQuestion,"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                        courseId);"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"                if (generateOptionsFor \u003d\u003d FeedbackParticipantType.OWN_TEAM_MEMBERS) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                    teamMembers.removeIf(teamMember -\u003e teamMember.getEmail().equals(emailOfEntityDoingQuestion));"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"                teamMembers.forEach(teamMember -\u003e optionList.add(teamMember.getName()));"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"                optionList.sort(null);"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":392,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorList \u003d"},{"lineNumber":393,"author":{"gitId":"-"},"content":"                    usersLogic.getInstructorsForCourse(courseId);"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"            for (Instructor instructor : instructorList) {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"                optionList.add(instructor.getName());"},{"lineNumber":397,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"            optionList.sort(null);"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            assert false : \"Trying to generate options for neither students, teams nor instructors\";"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        if (questionType \u003d\u003d FeedbackQuestionType.MCQ) {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            FeedbackMcqQuestionDetails feedbackMcqQuestionDetails \u003d"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                    (FeedbackMcqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            feedbackMcqQuestionDetails.setMcqChoices(optionList);"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            ((FeedbackMcqQuestion) feedbackQuestion).setFeedBackQuestionDetails(feedbackMcqQuestionDetails);"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        } else if (questionType \u003d\u003d FeedbackQuestionType.MSQ) {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            FeedbackMsqQuestionDetails feedbackMsqQuestionDetails \u003d"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                    (FeedbackMsqQuestionDetails) feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            feedbackMsqQuestionDetails.setMsqChoices(optionList);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            ((FeedbackMsqQuestion) feedbackQuestion).setFeedBackQuestionDetails(feedbackMsqQuestionDetails);"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":420,"author":{"gitId":"-"},"content":"     * Gets the recipients of a feedback question including recipient section and team."},{"lineNumber":421,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":422,"author":{"gitId":"-"},"content":"     * @param question the feedback question"},{"lineNumber":423,"author":{"gitId":"-"},"content":"     * @param instructorGiver can be null for student giver"},{"lineNumber":424,"author":{"gitId":"-"},"content":"     * @param studentGiver can be null for instructor giver"},{"lineNumber":425,"author":{"gitId":"-"},"content":"     * @param courseRoster if provided, the function can be completed without touching database"},{"lineNumber":426,"author":{"gitId":"-"},"content":"     * @return a Map of {@code FeedbackQuestionRecipient} as the value and identifier as the key."},{"lineNumber":427,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    public Map\u003cString, FeedbackQuestionRecipient\u003e getRecipientsOfQuestion("},{"lineNumber":429,"author":{"gitId":"-"},"content":"            FeedbackQuestion question,"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            @Nullable Instructor instructorGiver, @Nullable Student studentGiver,"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            @Nullable SqlCourseRoster courseRoster) {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        assert instructorGiver !\u003d null || studentGiver !\u003d null;"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"        String courseId \u003d question.getCourseId();"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"        Map\u003cString, FeedbackQuestionRecipient\u003e recipients \u003d new HashMap\u003c\u003e();"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"        boolean isStudentGiver \u003d studentGiver !\u003d null;"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        boolean isInstructorGiver \u003d instructorGiver !\u003d null;"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"        String giverEmail \u003d \"\";"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        String giverTeam \u003d \"\";"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        String giverSection \u003d \"\";"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        if (isStudentGiver) {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            giverEmail \u003d studentGiver.getEmail();"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            giverTeam \u003d studentGiver.getTeamName();"},{"lineNumber":447,"author":{"gitId":"-"},"content":"            giverSection \u003d studentGiver.getSectionName();"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        } else if (isInstructorGiver) {"},{"lineNumber":449,"author":{"gitId":"-"},"content":"            giverEmail \u003d instructorGiver.getEmail();"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            giverTeam \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"},{"lineNumber":451,"author":{"gitId":"-"},"content":"            giverSection \u003d Const.DEFAULT_SECTION;"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"        FeedbackParticipantType recipientType \u003d question.getRecipientType();"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        FeedbackParticipantType generateOptionsFor \u003d recipientType;"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"        switch (recipientType) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":459,"author":{"gitId":"-"},"content":"            if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"                recipients.put(giverTeam,"},{"lineNumber":461,"author":{"gitId":"-"},"content":"                       new FeedbackQuestionRecipient(giverTeam, giverTeam));"},{"lineNumber":462,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":463,"author":{"gitId":"-"},"content":"                recipients.put(giverEmail,"},{"lineNumber":464,"author":{"gitId":"-"},"content":"                        new FeedbackQuestionRecipient(USER_NAME_FOR_SELF, giverEmail));"},{"lineNumber":465,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":466,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e studentList;"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            if (courseRoster \u003d\u003d null) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"                if (generateOptionsFor \u003d\u003d FeedbackParticipantType.STUDENTS_IN_SAME_SECTION) {"},{"lineNumber":473,"author":{"gitId":"-"},"content":"                    studentList \u003d usersLogic.getStudentsForSection(giverSection, courseId);"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                    studentList \u003d usersLogic.getStudentsForCourse(courseId);"},{"lineNumber":476,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":477,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                if (generateOptionsFor \u003d\u003d FeedbackParticipantType.STUDENTS_IN_SAME_SECTION) {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                    final String finalGiverSection \u003d giverSection;"},{"lineNumber":480,"author":{"gitId":"-"},"content":"                    studentList \u003d courseRoster.getStudents().stream()"},{"lineNumber":481,"author":{"gitId":"-"},"content":"                            .filter(studentAttributes -\u003e studentAttributes.getSectionName()"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                                    .equals(finalGiverSection)).collect(Collectors.toList());"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":484,"author":{"gitId":"-"},"content":"                    studentList \u003d courseRoster.getStudents();"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":486,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            for (Student student : studentList) {"},{"lineNumber":488,"author":{"gitId":"-"},"content":"                if (isInstructorGiver \u0026\u0026 !instructorGiver.isAllowedForPrivilege("},{"lineNumber":489,"author":{"gitId":"-"},"content":"                        student.getSectionName(), question.getFeedbackSession().getName(),"},{"lineNumber":490,"author":{"gitId":"-"},"content":"                        Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS)) {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"                    // instructor can only see students in allowed sections for him/her"},{"lineNumber":492,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":493,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":494,"author":{"gitId":"-"},"content":"                // Ensure student does not evaluate him/herself if it\u0027s STUDENTS_EXCLUDING_SELF or"},{"lineNumber":495,"author":{"gitId":"-"},"content":"                // STUDENTS_IN_SAME_SECTION"},{"lineNumber":496,"author":{"gitId":"-"},"content":"                if (giverEmail.equals(student.getEmail()) \u0026\u0026 generateOptionsFor !\u003d FeedbackParticipantType.STUDENTS) {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":498,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":499,"author":{"gitId":"-"},"content":"                recipients.put(student.getEmail(), new FeedbackQuestionRecipient(student.getName(), student.getEmail(),"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                        student.getSectionName(), student.getTeamName()));"},{"lineNumber":501,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":502,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":504,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorsInCourse;"},{"lineNumber":505,"author":{"gitId":"-"},"content":"            if (courseRoster \u003d\u003d null) {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"                instructorsInCourse \u003d usersLogic.getInstructorsForCourse(courseId);"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"                instructorsInCourse \u003d courseRoster.getInstructors();"},{"lineNumber":509,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":510,"author":{"gitId":"-"},"content":"            for (Instructor instr : instructorsInCourse) {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"                // remove hidden instructors for students"},{"lineNumber":512,"author":{"gitId":"-"},"content":"                if (isStudentGiver \u0026\u0026 !instr.isDisplayedToStudents()) {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":515,"author":{"gitId":"-"},"content":"                // Ensure instructor does not evaluate himself"},{"lineNumber":516,"author":{"gitId":"-"},"content":"                if (!giverEmail.equals(instr.getEmail())) {"},{"lineNumber":517,"author":{"gitId":"-"},"content":"                    recipients.put(instr.getEmail(),"},{"lineNumber":518,"author":{"gitId":"-"},"content":"                            new FeedbackQuestionRecipient(instr.getName(), instr.getEmail()));"},{"lineNumber":519,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":520,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":521,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":525,"author":{"gitId":"-"},"content":"            Map\u003cString, List\u003cStudent\u003e\u003e teamToTeamMembersTable;"},{"lineNumber":526,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e teamStudents;"},{"lineNumber":527,"author":{"gitId":"-"},"content":"            if (courseRoster \u003d\u003d null) {"},{"lineNumber":528,"author":{"gitId":"-"},"content":"                if (generateOptionsFor \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION) {"},{"lineNumber":529,"author":{"gitId":"-"},"content":"                    teamStudents \u003d usersLogic.getStudentsForSection(giverSection, courseId);"},{"lineNumber":530,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":531,"author":{"gitId":"-"},"content":"                    teamStudents \u003d usersLogic.getStudentsForCourse(courseId);"},{"lineNumber":532,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":533,"author":{"gitId":"-"},"content":"                teamToTeamMembersTable \u003d SqlCourseRoster.buildTeamToMembersTable(teamStudents);"},{"lineNumber":534,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"                if (generateOptionsFor \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION) {"},{"lineNumber":536,"author":{"gitId":"-"},"content":"                    final String finalGiverSection \u003d giverSection;"},{"lineNumber":537,"author":{"gitId":"-"},"content":"                    teamStudents \u003d courseRoster.getStudents().stream()"},{"lineNumber":538,"author":{"gitId":"-"},"content":"                            .filter(student -\u003e student.getSectionName().equals(finalGiverSection))"},{"lineNumber":539,"author":{"gitId":"-"},"content":"                            .collect(Collectors.toList());"},{"lineNumber":540,"author":{"gitId":"-"},"content":"                    teamToTeamMembersTable \u003d SqlCourseRoster.buildTeamToMembersTable(teamStudents);"},{"lineNumber":541,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":542,"author":{"gitId":"-"},"content":"                    teamToTeamMembersTable \u003d courseRoster.getTeamToMembersTable();"},{"lineNumber":543,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":544,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":545,"author":{"gitId":"-"},"content":"            for (Map.Entry\u003cString, List\u003cStudent\u003e\u003e team : teamToTeamMembersTable.entrySet()) {"},{"lineNumber":546,"author":{"gitId":"-"},"content":"                if (isInstructorGiver \u0026\u0026 !instructorGiver.isAllowedForPrivilege("},{"lineNumber":547,"author":{"gitId":"-"},"content":"                        team.getValue().iterator().next().getSectionName(),"},{"lineNumber":548,"author":{"gitId":"-"},"content":"                        question.getFeedbackSession().getName(),"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                        Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS)) {"},{"lineNumber":550,"author":{"gitId":"-"},"content":"                    // instructor can only see teams in allowed sections for him/her"},{"lineNumber":551,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":552,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":553,"author":{"gitId":"-"},"content":"                // Ensure student(\u0027s team) does not evaluate own team if it\u0027s TEAMS_EXCLUDING_SELF or"},{"lineNumber":554,"author":{"gitId":"-"},"content":"                // TEAMS_IN_SAME_SECTION"},{"lineNumber":555,"author":{"gitId":"-"},"content":"                if (giverTeam.equals(team.getKey()) \u0026\u0026 generateOptionsFor !\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":556,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":557,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":558,"author":{"gitId":"-"},"content":"                // recipientEmail doubles as team name in this case."},{"lineNumber":559,"author":{"gitId":"-"},"content":"                recipients.put(team.getKey(), new FeedbackQuestionRecipient(team.getKey(), team.getKey()));"},{"lineNumber":560,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":561,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        case OWN_TEAM:"},{"lineNumber":563,"author":{"gitId":"-"},"content":"            recipients.put(giverTeam, new FeedbackQuestionRecipient(giverTeam, giverTeam));"},{"lineNumber":564,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":566,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e students;"},{"lineNumber":567,"author":{"gitId":"-"},"content":"            if (courseRoster \u003d\u003d null) {"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                students \u003d usersLogic.getStudentsForTeam(giverTeam, courseId);"},{"lineNumber":569,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":570,"author":{"gitId":"-"},"content":"                students \u003d courseRoster.getTeamToMembersTable().getOrDefault(giverTeam, Collections.emptyList());"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":572,"author":{"gitId":"-"},"content":"            for (Student student : students) {"},{"lineNumber":573,"author":{"gitId":"-"},"content":"                if (!student.getEmail().equals(giverEmail)) {"},{"lineNumber":574,"author":{"gitId":"-"},"content":"                    recipients.put(student.getEmail(), new FeedbackQuestionRecipient(student.getName(), student.getEmail(),"},{"lineNumber":575,"author":{"gitId":"-"},"content":"                            student.getSectionName(), student.getTeamName()));"},{"lineNumber":576,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":577,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":578,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":580,"author":{"gitId":"-"},"content":"            List\u003cStudent\u003e teamMembers;"},{"lineNumber":581,"author":{"gitId":"-"},"content":"            if (courseRoster \u003d\u003d null) {"},{"lineNumber":582,"author":{"gitId":"-"},"content":"                teamMembers \u003d usersLogic.getStudentsForTeam(giverTeam, courseId);"},{"lineNumber":583,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":584,"author":{"gitId":"-"},"content":"                teamMembers \u003d courseRoster.getTeamToMembersTable().getOrDefault(giverTeam, Collections.emptyList());"},{"lineNumber":585,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":586,"author":{"gitId":"-"},"content":"            for (Student student : teamMembers) {"},{"lineNumber":587,"author":{"gitId":"-"},"content":"                // accepts self feedback too"},{"lineNumber":588,"author":{"gitId":"-"},"content":"                recipients.put(student.getEmail(), new FeedbackQuestionRecipient(student.getName(), student.getEmail(),"},{"lineNumber":589,"author":{"gitId":"-"},"content":"                        student.getSectionName(), student.getTeamName()));"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":591,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":592,"author":{"gitId":"-"},"content":"        case NONE:"},{"lineNumber":593,"author":{"gitId":"-"},"content":"            recipients.put(Const.GENERAL_QUESTION,"},{"lineNumber":594,"author":{"gitId":"-"},"content":"                    new FeedbackQuestionRecipient(Const.GENERAL_QUESTION, Const.GENERAL_QUESTION));"},{"lineNumber":595,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":597,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":598,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        return recipients;"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":601,"author":{"gitId":"-"},"content":""},{"lineNumber":602,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":603,"author":{"gitId":"-"},"content":"     * Returns true if a session has question in a specific giverType."},{"lineNumber":604,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":605,"author":{"gitId":"-"},"content":"    public boolean sessionHasQuestionsForGiverType("},{"lineNumber":606,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, FeedbackParticipantType giverType) {"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        return fqDb.hasFeedbackQuestionsForGiverType(feedbackSessionName, courseId, giverType);"},{"lineNumber":608,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":609,"author":{"gitId":"-"},"content":""},{"lineNumber":610,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":611,"author":{"gitId":"-"},"content":"     * Returns true if a session has question in either STUDENTS type or TEAMS type."},{"lineNumber":612,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":613,"author":{"gitId":"-"},"content":"    public boolean sessionHasQuestionsForStudent(String feedbackSessionName, String courseId) {"},{"lineNumber":614,"author":{"gitId":"-"},"content":"        return fqDb.hasFeedbackQuestionsForGiverType(feedbackSessionName, courseId, FeedbackParticipantType.STUDENTS)"},{"lineNumber":615,"author":{"gitId":"-"},"content":"                || fqDb.hasFeedbackQuestionsForGiverType(feedbackSessionName, courseId, FeedbackParticipantType.TEAMS);"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":619,"author":{"gitId":"-"},"content":"     * Deletes a feedback question cascade its responses and comments."},{"lineNumber":620,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":621,"author":{"gitId":"-"},"content":"     * \u003cp\u003eSilently fail if question does not exist."},{"lineNumber":622,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":623,"author":{"gitId":"-"},"content":"    public void deleteFeedbackQuestionCascade(UUID feedbackQuestionId) {"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        fqDb.deleteFeedbackQuestion(feedbackQuestionId);"},{"lineNumber":625,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":628,"author":{"gitId":"-"},"content":"     * Filters the feedback questions in a course, with specified question type."},{"lineNumber":629,"author":{"gitId":"-"},"content":"     * @param courseId the course to search from"},{"lineNumber":630,"author":{"gitId":"-"},"content":"     * @param questionType the question type to search on"},{"lineNumber":631,"author":{"gitId":"-"},"content":"     * @return a list of filtered questions"},{"lineNumber":632,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":633,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionForCourseWithType("},{"lineNumber":634,"author":{"gitId":"-"},"content":"            String courseId, FeedbackQuestionType questionType) {"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e feedbackSessions \u003d feedbackSessionsLogic.getFeedbackSessionsForCourse(courseId);"},{"lineNumber":636,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e feedbackQuestions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":637,"author":{"gitId":"-"},"content":""},{"lineNumber":638,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : feedbackSessions) {"},{"lineNumber":639,"author":{"gitId":"-"},"content":"            feedbackQuestions.addAll(getFeedbackQuestionsForSession(session));"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":641,"author":{"gitId":"-"},"content":""},{"lineNumber":642,"author":{"gitId":"-"},"content":"        return feedbackQuestions"},{"lineNumber":643,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":644,"author":{"gitId":"-"},"content":"                .filter(q -\u003e q.getQuestionDetailsCopy().getQuestionType().equals(questionType))"},{"lineNumber":645,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":646,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":647,"author":{"gitId":"-"},"content":""},{"lineNumber":648,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":649,"author":{"gitId":"xenosf"},"content":"     * Builds a complete giver to recipient map for a {@code relatedQuestion}."},{"lineNumber":650,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":651,"author":{"gitId":"xenosf"},"content":"     * @param relatedQuestion The question to be considered"},{"lineNumber":652,"author":{"gitId":"xenosf"},"content":"     * @param courseRoster the roster in the course"},{"lineNumber":653,"author":{"gitId":"xenosf"},"content":"     * @return a map from giver to recipient for the question."},{"lineNumber":654,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":655,"author":{"gitId":"xenosf"},"content":"    public Map\u003cString, Set\u003cString\u003e\u003e buildCompleteGiverRecipientMap("},{"lineNumber":656,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion relatedQuestion, SqlCourseRoster courseRoster) {"},{"lineNumber":657,"author":{"gitId":"xenosf"},"content":"        Map\u003cString, Set\u003cString\u003e\u003e completeGiverRecipientMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":658,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":659,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e possibleGiverEmails \u003d getPossibleGivers(relatedQuestion, courseRoster);"},{"lineNumber":660,"author":{"gitId":"xenosf"},"content":"        for (String possibleGiverEmail : possibleGiverEmails) {"},{"lineNumber":661,"author":{"gitId":"xenosf"},"content":"            switch (relatedQuestion.getGiverType()) {"},{"lineNumber":662,"author":{"gitId":"xenosf"},"content":"            case STUDENTS:"},{"lineNumber":663,"author":{"gitId":"xenosf"},"content":"                Student studentGiver \u003d courseRoster.getStudentForEmail(possibleGiverEmail);"},{"lineNumber":664,"author":{"gitId":"xenosf"},"content":"                completeGiverRecipientMap"},{"lineNumber":665,"author":{"gitId":"xenosf"},"content":"                        .computeIfAbsent(possibleGiverEmail, key -\u003e new HashSet\u003c\u003e())"},{"lineNumber":666,"author":{"gitId":"xenosf"},"content":"                        .addAll(getRecipientsOfQuestion("},{"lineNumber":667,"author":{"gitId":"xenosf"},"content":"                                relatedQuestion, null, studentGiver, courseRoster).keySet());"},{"lineNumber":668,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":669,"author":{"gitId":"xenosf"},"content":"            case TEAMS:"},{"lineNumber":670,"author":{"gitId":"xenosf"},"content":"                Student oneTeamMember \u003d"},{"lineNumber":671,"author":{"gitId":"xenosf"},"content":"                        courseRoster.getTeamToMembersTable().get(possibleGiverEmail).iterator().next();"},{"lineNumber":672,"author":{"gitId":"xenosf"},"content":"                completeGiverRecipientMap"},{"lineNumber":673,"author":{"gitId":"xenosf"},"content":"                        .computeIfAbsent(possibleGiverEmail, key -\u003e new HashSet\u003c\u003e())"},{"lineNumber":674,"author":{"gitId":"xenosf"},"content":"                        .addAll(getRecipientsOfQuestion("},{"lineNumber":675,"author":{"gitId":"xenosf"},"content":"                                relatedQuestion, null, oneTeamMember, courseRoster).keySet());"},{"lineNumber":676,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":677,"author":{"gitId":"xenosf"},"content":"            case INSTRUCTORS:"},{"lineNumber":678,"author":{"gitId":"xenosf"},"content":"            case SELF:"},{"lineNumber":679,"author":{"gitId":"xenosf"},"content":"                Instructor instructorGiver \u003d courseRoster.getInstructorForEmail(possibleGiverEmail);"},{"lineNumber":680,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":681,"author":{"gitId":"xenosf"},"content":"                // only happens when a session creator quits their course"},{"lineNumber":682,"author":{"gitId":"xenosf"},"content":"                if (instructorGiver \u003d\u003d null) {"},{"lineNumber":683,"author":{"gitId":"xenosf"},"content":"                    instructorGiver \u003d new Instructor("},{"lineNumber":684,"author":{"gitId":"xenosf"},"content":"                            relatedQuestion.getCourse(),"},{"lineNumber":685,"author":{"gitId":"xenosf"},"content":"                            USER_NAME_FOR_SELF,"},{"lineNumber":686,"author":{"gitId":"xenosf"},"content":"                            possibleGiverEmail,"},{"lineNumber":687,"author":{"gitId":"xenosf"},"content":"                            false,"},{"lineNumber":688,"author":{"gitId":"xenosf"},"content":"                            USER_NAME_FOR_SELF,"},{"lineNumber":689,"author":{"gitId":"xenosf"},"content":"                            null,"},{"lineNumber":690,"author":{"gitId":"xenosf"},"content":"                            null"},{"lineNumber":691,"author":{"gitId":"xenosf"},"content":"                            );"},{"lineNumber":692,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":693,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":694,"author":{"gitId":"xenosf"},"content":"                completeGiverRecipientMap"},{"lineNumber":695,"author":{"gitId":"xenosf"},"content":"                        .computeIfAbsent(possibleGiverEmail, key -\u003e new HashSet\u003c\u003e())"},{"lineNumber":696,"author":{"gitId":"xenosf"},"content":"                        .addAll(getRecipientsOfQuestion("},{"lineNumber":697,"author":{"gitId":"xenosf"},"content":"                                relatedQuestion, instructorGiver, null, courseRoster).keySet());"},{"lineNumber":698,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":699,"author":{"gitId":"xenosf"},"content":"            default:"},{"lineNumber":700,"author":{"gitId":"xenosf"},"content":"                log.severe(\"Invalid giver type specified\");"},{"lineNumber":701,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":702,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":703,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":704,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":705,"author":{"gitId":"xenosf"},"content":"        return completeGiverRecipientMap;"},{"lineNumber":706,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":707,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":708,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":709,"author":{"gitId":"xenosf"},"content":"     * Gets possible giver identifiers for a feedback question."},{"lineNumber":710,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":711,"author":{"gitId":"xenosf"},"content":"     * @param fq the feedback question"},{"lineNumber":712,"author":{"gitId":"xenosf"},"content":"     * @param courseRoster roster of all students and instructors"},{"lineNumber":713,"author":{"gitId":"xenosf"},"content":"     * @return a list of giver identifier"},{"lineNumber":714,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":715,"author":{"gitId":"xenosf"},"content":"    private List\u003cString\u003e getPossibleGivers("},{"lineNumber":716,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion fq, SqlCourseRoster courseRoster) {"},{"lineNumber":717,"author":{"gitId":"xenosf"},"content":"        FeedbackParticipantType giverType \u003d fq.getGiverType();"},{"lineNumber":718,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e possibleGivers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":719,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":720,"author":{"gitId":"xenosf"},"content":"        switch (giverType) {"},{"lineNumber":721,"author":{"gitId":"xenosf"},"content":"        case STUDENTS:"},{"lineNumber":722,"author":{"gitId":"xenosf"},"content":"            possibleGivers \u003d courseRoster.getStudents()"},{"lineNumber":723,"author":{"gitId":"xenosf"},"content":"                    .stream()"},{"lineNumber":724,"author":{"gitId":"xenosf"},"content":"                    .map(Student::getEmail)"},{"lineNumber":725,"author":{"gitId":"xenosf"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":726,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":727,"author":{"gitId":"xenosf"},"content":"        case INSTRUCTORS:"},{"lineNumber":728,"author":{"gitId":"xenosf"},"content":"            possibleGivers \u003d courseRoster.getInstructors()"},{"lineNumber":729,"author":{"gitId":"xenosf"},"content":"                    .stream()"},{"lineNumber":730,"author":{"gitId":"xenosf"},"content":"                    .map(Instructor::getEmail)"},{"lineNumber":731,"author":{"gitId":"xenosf"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":732,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":733,"author":{"gitId":"xenosf"},"content":"        case TEAMS:"},{"lineNumber":734,"author":{"gitId":"xenosf"},"content":"            possibleGivers \u003d new ArrayList\u003c\u003e(courseRoster.getTeamToMembersTable().keySet());"},{"lineNumber":735,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":736,"author":{"gitId":"xenosf"},"content":"        case SELF:"},{"lineNumber":737,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession \u003d"},{"lineNumber":738,"author":{"gitId":"xenosf"},"content":"                    feedbackSessionsLogic.getFeedbackSession(fq.getFeedbackSessionName(), fq.getCourseId());"},{"lineNumber":739,"author":{"gitId":"xenosf"},"content":"            possibleGivers \u003d Collections.singletonList(feedbackSession.getCreatorEmail());"},{"lineNumber":740,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":741,"author":{"gitId":"xenosf"},"content":"        default:"},{"lineNumber":742,"author":{"gitId":"xenosf"},"content":"            log.severe(\"Invalid giver type specified\");"},{"lineNumber":743,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":744,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":745,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":746,"author":{"gitId":"xenosf"},"content":"        return possibleGivers;"},{"lineNumber":747,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":748,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":749,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":6,"xenosf":101,"dishenggg":2,"-":640}},{"path":"src/main/java/teammates/sqllogic/core/FeedbackResponseCommentsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import javax.annotation.Nullable;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlCourseRoster;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponseCommentsDb;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackResponseCommentUpdateRequest;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Handles operations related to feedback response comments."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see FeedbackResponseComment"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see FeedbackResponseCommentsDb"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public final class FeedbackResponseCommentsLogic {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final FeedbackResponseCommentsLogic instance \u003d new FeedbackResponseCommentsLogic();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsDb frcDb;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsLogic() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static FeedbackResponseCommentsLogic inst() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Initialize dependencies for {@code FeedbackResponseCommentsLogic}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void initLogicDependencies(FeedbackResponseCommentsDb frcDb) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.frcDb \u003d frcDb;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Gets an feedback response comment by feedback response comment id."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param id of feedback response comment."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @return the specified feedback response comment."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseComment(Long id) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return frcDb.getFeedbackResponseComment(id);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"domoberzin"},"content":"     * Gets all feedback response comments for a response."},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentForResponse(UUID feedbackResponseId) {"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"        return frcDb.getFeedbackResponseCommentsForResponse(feedbackResponseId);"},{"lineNumber":61,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":63,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"     * Gets all response comments for a response."},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForResponse(UUID feedbackResponseId) {"},{"lineNumber":67,"author":{"gitId":"domoberzin"},"content":"        assert feedbackResponseId !\u003d null;"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        return frcDb.getFeedbackResponseCommentsForResponse(feedbackResponseId);"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Gets the comment associated with the response."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseCommentForResponseFromParticipant("},{"lineNumber":76,"author":{"gitId":"-"},"content":"            UUID feedbackResponseId) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return frcDb.getFeedbackResponseCommentForResponseFromParticipant(feedbackResponseId);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Creates a feedback response comment."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the comment alreadty exists"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the comment is invalid"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment createFeedbackResponseComment(FeedbackResponseComment frc)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return frcDb.createFeedbackResponseComment(frc);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Deletes a feedbackResponseComment."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponseComment(Long frcId) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        frcDb.deleteFeedbackResponseComment(frcId);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Updates a feedback response comment by {@link FeedbackResponseComment}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return updated comment"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment cannot be found"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment updateFeedbackResponseComment(FeedbackResponseComment feedbackResponseComment)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return frcDb.updateFeedbackResponseComment(feedbackResponseComment);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Updates a feedback response comment."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment does not exist"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment updateFeedbackResponseComment(Long frcId,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentUpdateRequest updateRequest, String updaterEmail)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        FeedbackResponseComment comment \u003d frcDb.getFeedbackResponseComment(frcId);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (comment \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to update a feedback response comment that does not exist.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        comment.setCommentText(updateRequest.getCommentText());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        comment.setShowCommentTo(updateRequest.getShowCommentTo());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        comment.setShowGiverNameTo(updateRequest.getShowGiverNameTo());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        comment.setLastEditorEmail(updaterEmail);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return comment;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"     * Updates all feedback response comments with new emails."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void updateFeedbackResponseCommentsEmails(String courseId, String oldEmail, String updatedEmail) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        frcDb.updateGiverEmailOfFeedbackResponseComments(courseId, oldEmail, updatedEmail);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        frcDb.updateLastEditorEmailOfFeedbackResponseComments(courseId, oldEmail, updatedEmail);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":"     * Updates all feedback response comments with new sections."},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"    public void updateFeedbackResponseCommentsForResponse(FeedbackResponse response)"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponseComment\u003e comments \u003d getFeedbackResponseCommentForResponse(response.getId());"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponseComment comment : comments) {"},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"            comment.setGiverSection(response.getGiverSection());"},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"            comment.setRecipientSection(response.getRecipientSection());"},{"lineNumber":147,"author":{"gitId":"domoberzin"},"content":"            frcDb.updateFeedbackResponseComment(comment);"},{"lineNumber":148,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":"     * Gets all feedback response comments for session in a section."},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":"     * @param courseId the course ID of the feedback session"},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":"     * @param feedbackSessionName the feedback session name"},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if null, will retrieve all comments in the session"},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":"     * @return a list of feedback response comments"},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentForSessionInSection("},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, @Nullable String sectionName) {"},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"        if (sectionName \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"            return frcDb.getFeedbackResponseCommentsForSession(courseId, feedbackSessionName);"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":"        return frcDb.getFeedbackResponseCommentsForSessionInSection(courseId, feedbackSessionName, sectionName);"},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":"     * Gets all feedback response comments for a question in a section."},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"     * @param questionId the ID of the question"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if null, will retrieve all comments for the question"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"     * @return a list of feedback response comments"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentForQuestionInSection("},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"            UUID questionId, @Nullable String sectionName) {"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"        if (sectionName \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":"            return frcDb.getFeedbackResponseCommentsForQuestion(questionId);"},{"lineNumber":178,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"xenosf"},"content":"        return frcDb.getFeedbackResponseCommentsForQuestionInSection(questionId, sectionName);"},{"lineNumber":180,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":"     * Verifies whether the comment is visible to certain user."},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":"     * @return true/false"},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":"    public boolean checkIsResponseCommentVisibleForUser(String userEmail, boolean isInstructor,"},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":"            Student student, Set\u003cString\u003e studentsEmailInTeam, FeedbackResponse response,"},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion relatedQuestion, FeedbackResponseComment relatedComment) {"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"        if (response \u003d\u003d null || relatedQuestion \u003d\u003d null) {"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"            return false;"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"        boolean isVisibilityFollowingFeedbackQuestion \u003d relatedComment.getIsVisibilityFollowingFeedbackQuestion();"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"        boolean isVisibleToGiver \u003d isVisibilityFollowingFeedbackQuestion"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":"                                 || relatedComment.checkIsVisibleTo(FeedbackParticipantType.GIVER);"},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"        boolean isVisibleToUser \u003d checkIsVisibleToUser(userEmail, response, relatedQuestion, relatedComment,"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"                isVisibleToGiver, isInstructor, !isInstructor);"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":"        boolean isVisibleToUserTeam \u003d checkIsVisibleToUserTeam(student, studentsEmailInTeam, response,"},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":"                relatedQuestion, relatedComment, !isInstructor);"},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"        return isVisibleToUser || isVisibleToUserTeam;"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"    private boolean checkIsVisibleToUserTeam(Student student, Set\u003cString\u003e studentsEmailInTeam,"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"            FeedbackResponse response, FeedbackQuestion relatedQuestion,"},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":"            FeedbackResponseComment relatedComment, boolean isUserStudent) {"},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"        boolean isUserInResponseRecipientTeamAndRelatedResponseCommentVisibleToRecipients \u003d"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"                isUserStudent"},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 checkIsResponseCommentVisibleTo(relatedQuestion, relatedComment,"},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"                                              FeedbackParticipantType.RECEIVER)"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 response.getRecipient().equals(student.getTeamName());"},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"        boolean isUserInResponseGiverTeamAndRelatedResponseCommentVisibleToGiversTeamMembers \u003d"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"                (relatedQuestion.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":"                || checkIsResponseCommentVisibleTo(relatedQuestion, relatedComment,"},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":"                                              FeedbackParticipantType.OWN_TEAM_MEMBERS))"},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 (studentsEmailInTeam.contains(response.getGiver())"},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":"                        || isUserStudent \u0026\u0026 student.getTeamName().equals(response.getGiver()));"},{"lineNumber":224,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":225,"author":{"gitId":"xenosf"},"content":"        boolean isUserInResponseRecipientTeamAndRelatedResponseCommentVisibleToRecipientsTeamMembers \u003d"},{"lineNumber":226,"author":{"gitId":"xenosf"},"content":"                checkIsResponseCommentVisibleTo(relatedQuestion, relatedComment,"},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"                                           FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)"},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 studentsEmailInTeam.contains(response.getRecipient());"},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":"        return isUserInResponseRecipientTeamAndRelatedResponseCommentVisibleToRecipients"},{"lineNumber":231,"author":{"gitId":"xenosf"},"content":"                || isUserInResponseGiverTeamAndRelatedResponseCommentVisibleToGiversTeamMembers"},{"lineNumber":232,"author":{"gitId":"xenosf"},"content":"                || isUserInResponseRecipientTeamAndRelatedResponseCommentVisibleToRecipientsTeamMembers;"},{"lineNumber":233,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":235,"author":{"gitId":"xenosf"},"content":"    private boolean checkIsVisibleToUser(String userEmail, FeedbackResponse response,"},{"lineNumber":236,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion relatedQuestion, FeedbackResponseComment relatedComment,"},{"lineNumber":237,"author":{"gitId":"xenosf"},"content":"            boolean isVisibleToGiver, boolean isUserInstructor, boolean isUserStudent) {"},{"lineNumber":238,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":239,"author":{"gitId":"xenosf"},"content":"        boolean isUserInstructorAndRelatedResponseCommentVisibleToInstructors \u003d"},{"lineNumber":240,"author":{"gitId":"xenosf"},"content":"                isUserInstructor \u0026\u0026 checkIsResponseCommentVisibleTo(relatedQuestion, relatedComment,"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":"                                                               FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"        boolean isUserResponseRecipientAndRelatedResponseCommentVisibleToRecipients \u003d"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"                response.getRecipient().equals(userEmail) \u0026\u0026 checkIsResponseCommentVisibleTo(relatedQuestion,"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"                        relatedComment, FeedbackParticipantType.RECEIVER);"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":"        boolean isUserResponseGiverAndRelatedResponseCommentVisibleToGivers \u003d"},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":"                response.getGiver().equals(userEmail) \u0026\u0026 isVisibleToGiver;"},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":"        boolean isUserRelatedResponseCommentGiver \u003d relatedComment.getGiver().equals(userEmail);"},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"        boolean isUserStudentAndRelatedResponseCommentVisibleToStudents \u003d"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":"                isUserStudent \u0026\u0026 checkIsResponseCommentVisibleTo(relatedQuestion,"},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":"                        relatedComment, FeedbackParticipantType.STUDENTS);"},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"        return isUserInstructorAndRelatedResponseCommentVisibleToInstructors"},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"                || isUserResponseRecipientAndRelatedResponseCommentVisibleToRecipients"},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"                || isUserResponseGiverAndRelatedResponseCommentVisibleToGivers"},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":"                || isUserRelatedResponseCommentGiver"},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"                || isUserStudentAndRelatedResponseCommentVisibleToStudents;"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":"    private boolean checkIsResponseCommentVisibleTo(FeedbackQuestion relatedQuestion,"},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":"                                               FeedbackResponseComment relatedComment,"},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"                                               FeedbackParticipantType viewerType) {"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":"        boolean isVisibilityFollowingFeedbackQuestion \u003d relatedComment.getIsVisibilityFollowingFeedbackQuestion();"},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":"        return isVisibilityFollowingFeedbackQuestion"},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"                ? relatedQuestion.isResponseVisibleTo(viewerType)"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"                : relatedComment.checkIsVisibleTo(viewerType);"},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"     * Returns true if the comment\u0027s giver name is visible to certain user."},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":"    public boolean checkIsNameVisibleToUser(FeedbackResponseComment comment, FeedbackResponse response,"},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":"                                   String userEmail, SqlCourseRoster roster) {"},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackParticipantType\u003e showNameTo \u003d comment.getShowGiverNameTo();"},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":"        //in the old ver, name is always visible"},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"        if (showNameTo \u003d\u003d null || comment.getIsVisibilityFollowingFeedbackQuestion()) {"},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":"            return true;"},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":"        //comment giver can always see"},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        if (userEmail.equals(comment.getGiver())) {"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"            return true;"},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":"        return checkIsFeedbackParticipantNameVisibleToUser(response, userEmail, roster, showNameTo);"},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"    private boolean checkIsFeedbackParticipantNameVisibleToUser(FeedbackResponse response,"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":"            String userEmail, SqlCourseRoster roster, List\u003cFeedbackParticipantType\u003e showNameTo) {"},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"        String responseGiverTeam \u003d \"giverTeam\";"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"        if (roster.getStudentForEmail(response.getGiver()) !\u003d null) {"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"            responseGiverTeam \u003d roster.getStudentForEmail(response.getGiver()).getTeamName();"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"        String responseRecipientTeam \u003d \"recipientTeam\";"},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"        if (roster.getStudentForEmail(response.getRecipient()) !\u003d null) {"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"            responseRecipientTeam \u003d roster.getStudentForEmail(response.getRecipient()).getTeamName();"},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"        String currentUserTeam \u003d \"currentUserTeam\";"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"        if (roster.getStudentForEmail(userEmail) !\u003d null) {"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":"            currentUserTeam \u003d roster.getStudentForEmail(userEmail).getTeamName();"},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"        for (FeedbackParticipantType type : showNameTo) {"},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":"            switch (type) {"},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"            case INSTRUCTORS:"},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":"                if (roster.getInstructorForEmail(userEmail) !\u003d null) {"},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"            case OWN_TEAM_MEMBERS:"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"                if (responseGiverTeam.equals(currentUserTeam)) {"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":316,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":317,"author":{"gitId":"xenosf"},"content":"            case RECEIVER:"},{"lineNumber":318,"author":{"gitId":"xenosf"},"content":"                if (userEmail.equals(response.getRecipient())) {"},{"lineNumber":319,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":320,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":321,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":322,"author":{"gitId":"xenosf"},"content":"            case RECEIVER_TEAM_MEMBERS:"},{"lineNumber":323,"author":{"gitId":"xenosf"},"content":"                if (responseRecipientTeam.equals(currentUserTeam)) {"},{"lineNumber":324,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":325,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":326,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":327,"author":{"gitId":"xenosf"},"content":"            case STUDENTS:"},{"lineNumber":328,"author":{"gitId":"xenosf"},"content":"                if (roster.getStudentForEmail(userEmail) !\u003d null) {"},{"lineNumber":329,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":330,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":331,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":332,"author":{"gitId":"xenosf"},"content":"            case GIVER:"},{"lineNumber":333,"author":{"gitId":"xenosf"},"content":"                if (userEmail.equals(response.getGiver())) {"},{"lineNumber":334,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":"            default:"},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":339,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":340,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":341,"author":{"gitId":"xenosf"},"content":"        return false;"},{"lineNumber":342,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":32,"xenosf":199,"-":112}},{"path":"src/main/java/teammates/sqllogic/core/FeedbackResponsesLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlCourseRoster;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlSessionResultsBundle;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.RequestTracer;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponsesDb;"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.responses.FeedbackMissingResponse;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackRankRecipientsResponse;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":" * Handles operations related to feedback responses."},{"lineNumber":40,"author":{"gitId":"-"},"content":" *"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * @see FeedbackResponse"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * @see FeedbackResponsesDb"},{"lineNumber":43,"author":{"gitId":"-"},"content":" */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"public final class FeedbackResponsesLogic {"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final FeedbackResponsesLogic instance \u003d new FeedbackResponsesLogic();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FeedbackResponsesDb frDb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic;"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"    private FeedbackResponseCommentsLogic frcLogic;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static FeedbackResponsesLogic inst() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Initialize dependencies for {@code FeedbackResponsesLogic}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"domoberzin"},"content":"    void initLogicDependencies(FeedbackResponsesDb frDb,"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"            UsersLogic usersLogic, FeedbackQuestionsLogic fqLogic, FeedbackResponseCommentsLogic frcLogic) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.frDb \u003d frDb;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.fqLogic \u003d fqLogic;"},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        this.frcLogic \u003d frcLogic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Gets a feedbackResponse or null if it does not exist."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public FeedbackResponse getFeedbackResponse(UUID frId) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponse(frId);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if the responses of the question are visible to students."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean isResponseOfFeedbackQuestionVisibleToStudent(FeedbackQuestion question) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        boolean isStudentRecipientType \u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                   question.getRecipientType().equals(FeedbackParticipantType.STUDENTS)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.STUDENTS_IN_SAME_SECTION)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.OWN_TEAM_MEMBERS)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.OWN_TEAM_MEMBERS_INCLUDING_SELF)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.GIVER)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                   \u0026\u0026 question.getGiverType().equals(FeedbackParticipantType.STUDENTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if ((isStudentRecipientType || question.getRecipientType().isTeam())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Returns true if the responses of the question are visible to instructors."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean isResponseOfFeedbackQuestionVisibleToInstructor(FeedbackQuestion question) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Checks whether a giver has responded a session."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean hasGiverRespondedForSession(String giverIdentifier, List\u003cFeedbackQuestion\u003e questions) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assert questions !\u003d null;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : questions) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            boolean hasResponse \u003d question"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                    .getFeedbackResponses()"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                    .stream()"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    .anyMatch(response -\u003e response.getGiver().equals(giverIdentifier));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            if (hasResponse) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Checks whether a giver has responded a session."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public boolean hasGiverRespondedForSession(String giver, String feedbackSessionName, String courseId) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return frDb.hasResponsesFromGiverInSession(giver, feedbackSessionName, courseId);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Creates a feedback response."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @return the created response"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the response is not valid"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the response already exist"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public FeedbackResponse createFeedbackResponse(FeedbackResponse feedbackResponse)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return frDb.createFeedbackResponse(feedbackResponse);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Get existing feedback responses from instructor for the given question."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromInstructorForQuestion("},{"lineNumber":155,"author":{"gitId":"-"},"content":"            FeedbackQuestion question, Instructor instructor) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":157,"author":{"gitId":"-"},"content":"                question.getId(), instructor.getEmail());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Get existing feedback responses from student or his team for the given"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * question."},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromStudentOrTeamForQuestion("},{"lineNumber":165,"author":{"gitId":"-"},"content":"            FeedbackQuestion question, Student student) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":168,"author":{"gitId":"-"},"content":"                    question.getId(), question.getCourseId(), student.getTeamName(), null);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForQuestion(question.getId(), student.getEmail());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponse\u003e getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":174,"author":{"gitId":"-"},"content":"            UUID feedbackQuestionId, String courseId, String teamName, @Nullable SqlCourseRoster courseRoster) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponse\u003e responses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentsInTeam \u003d courseRoster \u003d\u003d null"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                ? usersLogic.getStudentsForTeam(teamName, courseId) : courseRoster.getTeamToMembersTable().get(teamName);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        for (Student student : studentsInTeam) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            responses.addAll(frDb.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":182,"author":{"gitId":"-"},"content":"                    feedbackQuestionId, student.getEmail()));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        responses.addAll(frDb.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":186,"author":{"gitId":"-"},"content":"                feedbackQuestionId, teamName));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return responses;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Updates a non-null feedback response by {@link FeedbackResponse}."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade updates its associated feedback response comment"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * (e.g. associated response ID, giverSection and recipientSection)."},{"lineNumber":195,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf the giver/recipient field is changed, the response is updated by recreating the response"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * as question-giver-recipient is the primary key."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * @return updated feedback response"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment cannot be found"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public FeedbackResponse updateFeedbackResponseCascade(FeedbackResponse feedbackResponse)"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        FeedbackResponse oldResponse \u003d frDb.getFeedbackResponse(feedbackResponse.getId());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        FeedbackResponse newResponse \u003d frDb.updateFeedbackResponse(feedbackResponse);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        boolean isGiverSectionChanged \u003d !oldResponse.getGiverSection().equals(newResponse.getGiverSection());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        boolean isRecipientSectionChanged \u003d !oldResponse.getRecipientSection().equals(newResponse.getRecipientSection());"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        if (isGiverSectionChanged || isRecipientSectionChanged) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseComment\u003e oldResponseComments \u003d"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    frcLogic.getFeedbackResponseCommentForResponse(oldResponse.getId());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            for (FeedbackResponseComment oldResponseComment : oldResponseComments) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                if (isGiverSectionChanged) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                    oldResponseComment.setGiverSection(newResponse.getGiverSection());"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"                if (isRecipientSectionChanged) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    oldResponseComment.setRecipientSection(newResponse.getRecipientSection());"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"                frcLogic.updateFeedbackResponseComment(oldResponseComment);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return newResponse;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * Deletes a feedback response cascade its associated feedback response comments."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Implicitly makes use of CascadeType.REMOVE."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesAndCommentsCascade(FeedbackResponse feedbackResponse) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponse(feedbackResponse);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     * Deletes all feedback responses of a question cascade its associated comments."},{"lineNumber":242,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesForQuestionCascade(UUID feedbackQuestionId) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        // delete all responses, comments of the question"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponsesForQuestionCascade(feedbackQuestionId);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a question."},{"lineNumber":250,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public boolean areThereResponsesForQuestion(UUID questionId) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        return frDb.areThereResponsesForQuestion(questionId);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a course."},{"lineNumber":257,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    public boolean hasResponsesForCourse(String courseId) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return frDb.hasResponsesForCourse(courseId);"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * Deletes all feedback responses involved an entity, cascade its associated comments."},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * Deletion will automatically be cascaded to each feedback response\u0027s comments,"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * handled by Hibernate using the OnDelete annotation."},{"lineNumber":267,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesForCourseCascade(String courseId, String entityEmail) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        // delete responses from the entity"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponse\u003e responsesFromStudent \u003d"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, entityEmail);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        for (FeedbackResponse response : responsesFromStudent) {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            frDb.deleteFeedbackResponse(response);"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        // delete responses to the entity"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponse\u003e responsesToStudent \u003d"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                getFeedbackResponsesForRecipientForCourse(courseId, entityEmail);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        for (FeedbackResponse response : responsesToStudent) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            frDb.deleteFeedbackResponse(response);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * Gets all responses given by a user for a course."},{"lineNumber":286,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromGiverForCourse("},{"lineNumber":288,"author":{"gitId":"-"},"content":"            String courseId, String giver) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        assert giver !\u003d null;"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForCourse(courseId, giver);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":296,"author":{"gitId":"-"},"content":"     * Gets all responses received by a user for a course."},{"lineNumber":297,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForRecipientForCourse("},{"lineNumber":299,"author":{"gitId":"-"},"content":"            String courseId, String recipient) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        assert recipient !\u003d null;"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForRecipientForCourse(courseId, recipient);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitId":"-"},"content":"     * Gets all responses given by a user for a question."},{"lineNumber":308,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":310,"author":{"gitId":"-"},"content":"            UUID feedbackQuestionId, String giver) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForQuestion(feedbackQuestionId, giver);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":"     * Gets all responses for a question."},{"lineNumber":316,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":317,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForQuestion(UUID feedbackQuestionId) {"},{"lineNumber":318,"author":{"gitId":"domoberzin"},"content":"        return frDb.getResponsesForQuestion(feedbackQuestionId);"},{"lineNumber":319,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":322,"author":{"gitId":"-"},"content":"     * Updates the relevant responses before the deletion of a student."},{"lineNumber":323,"author":{"gitId":"-"},"content":"     * This method takes care of the following:"},{"lineNumber":324,"author":{"gitId":"-"},"content":"     * Making existing responses of \u0027rank recipient question\u0027 consistent."},{"lineNumber":325,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    public void updateRankRecipientQuestionResponsesAfterDeletingStudent(String courseId) {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e filteredQuestions \u003d"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                fqLogic.getFeedbackQuestionForCourseWithType(courseId, FeedbackQuestionType.RANK_RECIPIENTS);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        SqlCourseRoster roster \u003d new SqlCourseRoster("},{"lineNumber":330,"author":{"gitId":"-"},"content":"                usersLogic.getStudentsForCourse(courseId),"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                usersLogic.getInstructorsForCourse(courseId));"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : filteredQuestions) {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            makeRankRecipientQuestionResponsesConsistent(question, roster);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * Makes the rankings by one giver in the response to a \u0027rank recipient question\u0027 consistent, after deleting a"},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * student."},{"lineNumber":341,"author":{"gitId":"-"},"content":"     * \u003cp\u003e"},{"lineNumber":342,"author":{"gitId":"-"},"content":"     *     Fails silently if the question type is not \u0027rank recipient question\u0027."},{"lineNumber":343,"author":{"gitId":"-"},"content":"     * \u003c/p\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    private void makeRankRecipientQuestionResponsesConsistent("},{"lineNumber":346,"author":{"gitId":"-"},"content":"            FeedbackQuestion question, SqlCourseRoster roster) {"},{"lineNumber":347,"author":{"gitId":"mingyuanc"},"content":"        assert question.getQuestionDetailsCopy().getQuestionType()"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                .equals(FeedbackQuestionType.RANK_RECIPIENTS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        FeedbackParticipantType giverType \u003d question.getGiverType();"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponse\u003e responses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        int numberOfRecipients \u003d 0;"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"        switch (giverType) {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            for (Instructor instructor : roster.getInstructors()) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, instructor, null, roster).size();"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                responses \u003d getFeedbackResponsesFromGiverForQuestion(question.getId(), instructor.getEmail());"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":365,"author":{"gitId":"-"},"content":"            Student firstMemberOfTeam;"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            String team;"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            Map\u003cString, List\u003cStudent\u003e\u003e teams \u003d roster.getTeamToMembersTable();"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            for (Map.Entry\u003cString, List\u003cStudent\u003e\u003e entry : teams.entrySet()) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                team \u003d entry.getKey();"},{"lineNumber":370,"author":{"gitId":"-"},"content":"                firstMemberOfTeam \u003d entry.getValue().get(0);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, null, firstMemberOfTeam, roster).size();"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                responses \u003d"},{"lineNumber":374,"author":{"gitId":"-"},"content":"                        getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":375,"author":{"gitId":"-"},"content":"                                question.getId(), question.getCourseId(), team, roster);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":377,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            for (Student student : roster.getStudents()) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, null, student, roster).size();"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                responses \u003d getFeedbackResponsesFromGiverForQuestion(question.getId(), student.getEmail());"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"        updateFeedbackResponsesForRankRecipientQuestions(responses, numberOfRecipients);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":391,"author":{"gitId":"-"},"content":"     * Updates responses for \u0027rank recipient question\u0027, such that the ranks in the responses are consistent."},{"lineNumber":392,"author":{"gitId":"-"},"content":"     * @param responses responses to one feedback question, from one giver"},{"lineNumber":393,"author":{"gitId":"-"},"content":"     * @param maxRank the maximum rank in each response"},{"lineNumber":394,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    private void updateFeedbackResponsesForRankRecipientQuestions("},{"lineNumber":396,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponse\u003e responses, int maxRank) {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        if (maxRank \u003c\u003d 0) {"},{"lineNumber":398,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"        FeedbackRankRecipientsResponseDetails responseDetails;"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        boolean[] isRankUsed;"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        boolean isUpdateNeeded \u003d false;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        int answer;"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        int maxUnusedRank \u003d 0;"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"        // Checks whether update is needed."},{"lineNumber":408,"author":{"gitId":"-"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            if (!(response instanceof FeedbackRankRecipientsResponse)) {"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            responseDetails \u003d ((FeedbackRankRecipientsResponse) response).getAnswer();"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            answer \u003d responseDetails.getAnswer();"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            if (answer \u003e maxRank) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"                isUpdateNeeded \u003d true;"},{"lineNumber":416,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":417,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"        // Updates repeatedly, until all responses are consistent."},{"lineNumber":421,"author":{"gitId":"-"},"content":"        while (isUpdateNeeded) {"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            isUpdateNeeded \u003d false; // will be set to true again once invalid rank appears after update"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            isRankUsed \u003d new boolean[maxRank];"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"            // Obtains the largest unused rank."},{"lineNumber":426,"author":{"gitId":"-"},"content":"            for (FeedbackResponse response : responses) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                if (!(response instanceof FeedbackRankRecipientsResponse)) {"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":429,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":430,"author":{"gitId":"-"},"content":"                responseDetails \u003d ((FeedbackRankRecipientsResponse) response).getAnswer();"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                answer \u003d responseDetails.getAnswer();"},{"lineNumber":432,"author":{"gitId":"-"},"content":"                if (answer \u003c\u003d maxRank) {"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                    isRankUsed[answer - 1] \u003d true;"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":436,"author":{"gitId":"-"},"content":"            for (int i \u003d maxRank - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"                if (!isRankUsed[i]) {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                    maxUnusedRank \u003d i + 1;"},{"lineNumber":439,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":440,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":441,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":442,"author":{"gitId":"-"},"content":"            assert maxUnusedRank \u003e 0; // if update is needed, there must be at least one unused rank"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"            for (FeedbackResponse response : responses) {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"                if (response instanceof FeedbackRankRecipientsResponse) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"                    responseDetails \u003d ((FeedbackRankRecipientsResponse) response).getAnswer();"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                    answer \u003d responseDetails.getAnswer();"},{"lineNumber":448,"author":{"gitId":"-"},"content":"                    if (answer \u003e maxUnusedRank) {"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                        answer--;"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                        responseDetails.setAnswer(answer);"},{"lineNumber":451,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":452,"author":{"gitId":"-"},"content":"                    if (answer \u003e maxRank) {"},{"lineNumber":453,"author":{"gitId":"-"},"content":"                        isUpdateNeeded \u003d true; // sets the flag to true if the updated rank is still invalid"},{"lineNumber":454,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":455,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":456,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":458,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":461,"author":{"gitId":"domoberzin"},"content":"     * Updates responses for a student when his team changes."},{"lineNumber":462,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003e"},{"lineNumber":463,"author":{"gitId":"domoberzin"},"content":"     *     This is done by deleting responses that are no longer relevant to him in his new team."},{"lineNumber":464,"author":{"gitId":"domoberzin"},"content":"     * \u003c/p\u003e"},{"lineNumber":465,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":466,"author":{"gitId":"domoberzin"},"content":"    public void updateFeedbackResponsesForChangingTeam(Course course, String newEmail, Team newTeam, Team oldTeam)"},{"lineNumber":467,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":468,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":469,"author":{"gitId":"domoberzin"},"content":"        FeedbackQuestion qn;"},{"lineNumber":470,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":471,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesFromUser \u003d"},{"lineNumber":472,"author":{"gitId":"domoberzin"},"content":"                getFeedbackResponsesFromGiverForCourse(course.getId(), newEmail);"},{"lineNumber":473,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":474,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesFromUser) {"},{"lineNumber":475,"author":{"gitId":"domoberzin"},"content":"            qn \u003d fqLogic.getFeedbackQuestion(response.getId());"},{"lineNumber":476,"author":{"gitId":"domoberzin"},"content":"            if (qn !\u003d null \u0026\u0026 qn.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":477,"author":{"gitId":"domoberzin"},"content":"                deleteFeedbackResponsesForQuestionCascade(qn.getId());"},{"lineNumber":478,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":479,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":480,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":481,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesToUser \u003d"},{"lineNumber":482,"author":{"gitId":"domoberzin"},"content":"                getFeedbackResponsesForRecipientForCourse(course.getId(), newEmail);"},{"lineNumber":483,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":484,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesToUser) {"},{"lineNumber":485,"author":{"gitId":"domoberzin"},"content":"            qn \u003d fqLogic.getFeedbackQuestion(response.getId());"},{"lineNumber":486,"author":{"gitId":"domoberzin"},"content":"            if (qn !\u003d null \u0026\u0026 qn.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":487,"author":{"gitId":"domoberzin"},"content":"                deleteFeedbackResponsesForQuestionCascade(qn.getId());"},{"lineNumber":488,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":489,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":490,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":491,"author":{"gitId":"domoberzin"},"content":"        boolean isOldTeamEmpty \u003d usersLogic.getStudentsForTeam(oldTeam.getName(), course.getId()).isEmpty();"},{"lineNumber":492,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":493,"author":{"gitId":"domoberzin"},"content":"        if (isOldTeamEmpty) {"},{"lineNumber":494,"author":{"gitId":"domoberzin"},"content":"            deleteFeedbackResponsesForCourseCascade(course.getId(), oldTeam.getName());"},{"lineNumber":495,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":496,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":497,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":498,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":499,"author":{"gitId":"domoberzin"},"content":"     * Updates responses for a student when his section changes."},{"lineNumber":500,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":501,"author":{"gitId":"domoberzin"},"content":"    public void updateFeedbackResponsesForChangingSection(Course course, String newEmail, Section newSection)"},{"lineNumber":502,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":503,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":504,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesFromUser \u003d"},{"lineNumber":505,"author":{"gitId":"domoberzin"},"content":"                getFeedbackResponsesFromGiverForCourse(course.getId(), newEmail);"},{"lineNumber":506,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":507,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesFromUser) {"},{"lineNumber":508,"author":{"gitId":"domoberzin"},"content":"            response.setGiverSection(newSection);"},{"lineNumber":509,"author":{"gitId":"domoberzin"},"content":"            frDb.updateFeedbackResponse(response);"},{"lineNumber":510,"author":{"gitId":"domoberzin"},"content":"            frcLogic.updateFeedbackResponseCommentsForResponse(response);"},{"lineNumber":511,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":512,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":513,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackResponse\u003e responsesToUser \u003d"},{"lineNumber":514,"author":{"gitId":"domoberzin"},"content":"                getFeedbackResponsesForRecipientForCourse(course.getId(), newEmail);"},{"lineNumber":515,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":516,"author":{"gitId":"domoberzin"},"content":"        for (FeedbackResponse response : responsesToUser) {"},{"lineNumber":517,"author":{"gitId":"domoberzin"},"content":"            response.setRecipientSection(newSection);"},{"lineNumber":518,"author":{"gitId":"domoberzin"},"content":"            frDb.updateFeedbackResponse(response);"},{"lineNumber":519,"author":{"gitId":"domoberzin"},"content":"            frcLogic.updateFeedbackResponseCommentsForResponse(response);"},{"lineNumber":520,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":521,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":522,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":523,"author":{"gitId":"marquestye"},"content":"    /**"},{"lineNumber":524,"author":{"gitId":"marquestye"},"content":"     * Updates a student\u0027s email in their given/received responses."},{"lineNumber":525,"author":{"gitId":"marquestye"},"content":"     */"},{"lineNumber":526,"author":{"gitId":"marquestye"},"content":"    public void updateFeedbackResponsesForChangingEmail(String courseId, String oldEmail, String newEmail)"},{"lineNumber":527,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":528,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":529,"author":{"gitId":"marquestye"},"content":"        List\u003cFeedbackResponse\u003e responsesFromUser \u003d"},{"lineNumber":530,"author":{"gitId":"marquestye"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, oldEmail);"},{"lineNumber":531,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":532,"author":{"gitId":"marquestye"},"content":"        for (FeedbackResponse response : responsesFromUser) {"},{"lineNumber":533,"author":{"gitId":"marquestye"},"content":"            response.setGiver(newEmail);"},{"lineNumber":534,"author":{"gitId":"marquestye"},"content":"            frDb.updateFeedbackResponse(response);"},{"lineNumber":535,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":536,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":537,"author":{"gitId":"marquestye"},"content":"        List\u003cFeedbackResponse\u003e responsesToUser \u003d"},{"lineNumber":538,"author":{"gitId":"marquestye"},"content":"                getFeedbackResponsesForRecipientForCourse(courseId, oldEmail);"},{"lineNumber":539,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":540,"author":{"gitId":"marquestye"},"content":"        for (FeedbackResponse response : responsesToUser) {"},{"lineNumber":541,"author":{"gitId":"marquestye"},"content":"            response.setRecipient(newEmail);"},{"lineNumber":542,"author":{"gitId":"marquestye"},"content":"            frDb.updateFeedbackResponse(response);"},{"lineNumber":543,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":544,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":546,"author":{"gitId":"xenosf"},"content":"    private List\u003cFeedbackQuestion\u003e getQuestionsForSession("},{"lineNumber":547,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, @Nullable UUID questionId) {"},{"lineNumber":548,"author":{"gitId":"xenosf"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":549,"author":{"gitId":"xenosf"},"content":"            return fqLogic.getFeedbackQuestionsForSession(feedbackSession);"},{"lineNumber":550,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":551,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d fqLogic.getFeedbackQuestion(questionId);"},{"lineNumber":552,"author":{"gitId":"xenosf"},"content":"        return fq \u003d\u003d null ? Collections.emptyList() : Collections.singletonList(fq);"},{"lineNumber":553,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":554,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":555,"author":{"gitId":"xenosf"},"content":"    private SqlSessionResultsBundle buildResultsBundle("},{"lineNumber":556,"author":{"gitId":"xenosf"},"content":"            boolean isCourseWide, FeedbackSession feedbackSession, String courseId, String sectionName, UUID questionId,"},{"lineNumber":557,"author":{"gitId":"xenosf"},"content":"            boolean isInstructor, String userEmail, Instructor instructor, Student student,"},{"lineNumber":558,"author":{"gitId":"xenosf"},"content":"            SqlCourseRoster roster, List\u003cFeedbackQuestion\u003e allQuestions,"},{"lineNumber":559,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e allResponses, boolean isPreviewResults) {"},{"lineNumber":560,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":561,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackQuestion\u003e questionsNotVisibleToInstructors \u003d new HashSet\u003c\u003e();"},{"lineNumber":562,"author":{"gitId":"xenosf"},"content":"        for (FeedbackQuestion qn : allQuestions) {"},{"lineNumber":563,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":564,"author":{"gitId":"xenosf"},"content":"            // set questions that should not be visible to instructors if results are being previewed"},{"lineNumber":565,"author":{"gitId":"xenosf"},"content":"            if (isPreviewResults \u0026\u0026 !checkCanInstructorsSeeQuestion(qn)) {"},{"lineNumber":566,"author":{"gitId":"xenosf"},"content":"                questionsNotVisibleToInstructors.add(qn);"},{"lineNumber":567,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":568,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":569,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":570,"author":{"gitId":"xenosf"},"content":"        // load comment(s)"},{"lineNumber":571,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e allComments;"},{"lineNumber":572,"author":{"gitId":"xenosf"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":573,"author":{"gitId":"xenosf"},"content":"            allComments \u003d frcLogic.getFeedbackResponseCommentForSessionInSection("},{"lineNumber":574,"author":{"gitId":"xenosf"},"content":"                    courseId, feedbackSession.getName(), sectionName);"},{"lineNumber":575,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":576,"author":{"gitId":"xenosf"},"content":"            allComments \u003d frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, sectionName);"},{"lineNumber":577,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":578,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":579,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":580,"author":{"gitId":"xenosf"},"content":"        // related questions, responses, and comment"},{"lineNumber":581,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackQuestion\u003e relatedQuestions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":582,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e relatedResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":583,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackResponse, List\u003cFeedbackResponseComment\u003e\u003e relatedCommentsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":584,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackQuestion\u003e relatedQuestionsNotVisibleForPreviewSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":585,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackQuestion\u003e relatedQuestionsWithCommentNotVisibleForPreview \u003d new HashSet\u003c\u003e();"},{"lineNumber":586,"author":{"gitId":"xenosf"},"content":"        if (isCourseWide) {"},{"lineNumber":587,"author":{"gitId":"xenosf"},"content":"            // all questions are related questions when viewing course-wide result"},{"lineNumber":588,"author":{"gitId":"xenosf"},"content":"            for (FeedbackQuestion qn : allQuestions) {"},{"lineNumber":589,"author":{"gitId":"xenosf"},"content":"                relatedQuestions.add(qn);"},{"lineNumber":590,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":591,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":592,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":593,"author":{"gitId":"xenosf"},"content":"        Set\u003cString\u003e studentsEmailInTeam \u003d new HashSet\u003c\u003e();"},{"lineNumber":594,"author":{"gitId":"xenosf"},"content":"        if (student !\u003d null) {"},{"lineNumber":595,"author":{"gitId":"xenosf"},"content":"            for (Student studentInTeam"},{"lineNumber":596,"author":{"gitId":"mingyuanc"},"content":"                    : roster.getTeamToMembersTable().getOrDefault(student.getTeam().getName(), Collections.emptyList())) {"},{"lineNumber":597,"author":{"gitId":"xenosf"},"content":"                studentsEmailInTeam.add(studentInTeam.getEmail());"},{"lineNumber":598,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":599,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":600,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":601,"author":{"gitId":"xenosf"},"content":"        // visibility table for each response and comment"},{"lineNumber":602,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackResponse, Boolean\u003e responseGiverVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":603,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackResponse, Boolean\u003e responseRecipientVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":604,"author":{"gitId":"xenosf"},"content":"        Map\u003cLong, Boolean\u003e commentVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":605,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":606,"author":{"gitId":"xenosf"},"content":"        // build response"},{"lineNumber":607,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponse response : allResponses) {"},{"lineNumber":608,"author":{"gitId":"xenosf"},"content":"            if (isPreviewResults"},{"lineNumber":609,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 relatedQuestionsNotVisibleForPreviewSet.contains(response.getFeedbackQuestion())) {"},{"lineNumber":610,"author":{"gitId":"xenosf"},"content":"                // corresponding question\u0027s responses will not be shown to previewer, ignore the response"},{"lineNumber":611,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":612,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":613,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion correspondingQuestion \u003d response.getFeedbackQuestion();"},{"lineNumber":614,"author":{"gitId":"xenosf"},"content":"            if (correspondingQuestion \u003d\u003d null) {"},{"lineNumber":615,"author":{"gitId":"xenosf"},"content":"                // orphan response without corresponding question, ignore it"},{"lineNumber":616,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":617,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":618,"author":{"gitId":"xenosf"},"content":"            // check visibility of response"},{"lineNumber":619,"author":{"gitId":"xenosf"},"content":"            boolean isVisibleResponse \u003d isResponseVisibleForUser("},{"lineNumber":620,"author":{"gitId":"xenosf"},"content":"                    userEmail, isInstructor, student, studentsEmailInTeam, response, correspondingQuestion, instructor);"},{"lineNumber":621,"author":{"gitId":"xenosf"},"content":"            if (!isVisibleResponse) {"},{"lineNumber":622,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":623,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":624,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":625,"author":{"gitId":"xenosf"},"content":"            // if previewing results and corresponding question should not be visible to instructors,"},{"lineNumber":626,"author":{"gitId":"xenosf"},"content":"            // note down the question and do not add the response"},{"lineNumber":627,"author":{"gitId":"xenosf"},"content":"            if (isPreviewResults \u0026\u0026 questionsNotVisibleToInstructors.contains(response.getFeedbackQuestion())) {"},{"lineNumber":628,"author":{"gitId":"xenosf"},"content":"                relatedQuestionsNotVisibleForPreviewSet.add(response.getFeedbackQuestion());"},{"lineNumber":629,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":630,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":631,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":632,"author":{"gitId":"xenosf"},"content":"            // if there are viewable responses, the corresponding question becomes related"},{"lineNumber":633,"author":{"gitId":"xenosf"},"content":"            relatedQuestions.add(response.getFeedbackQuestion());"},{"lineNumber":634,"author":{"gitId":"xenosf"},"content":"            relatedResponses.add(response);"},{"lineNumber":635,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":636,"author":{"gitId":"xenosf"},"content":"            // generate giver/recipient name visibility table"},{"lineNumber":637,"author":{"gitId":"xenosf"},"content":"            responseGiverVisibilityTable.put(response,"},{"lineNumber":638,"author":{"gitId":"xenosf"},"content":"                    isNameVisibleToUser(correspondingQuestion, response, userEmail, isInstructor, true, roster));"},{"lineNumber":639,"author":{"gitId":"xenosf"},"content":"            responseRecipientVisibilityTable.put(response,"},{"lineNumber":640,"author":{"gitId":"xenosf"},"content":"                    isNameVisibleToUser(correspondingQuestion, response, userEmail, isInstructor, false, roster));"},{"lineNumber":641,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":642,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":643,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":644,"author":{"gitId":"xenosf"},"content":"        // build comment"},{"lineNumber":645,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponseComment frc : allComments) {"},{"lineNumber":646,"author":{"gitId":"xenosf"},"content":"            FeedbackResponse relatedResponse \u003d frc.getFeedbackResponse();"},{"lineNumber":647,"author":{"gitId":"xenosf"},"content":"            // the comment needs to be relevant to the question and response"},{"lineNumber":648,"author":{"gitId":"xenosf"},"content":"            if (relatedResponse \u003d\u003d null) {"},{"lineNumber":649,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":650,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":651,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion relatedQuestion \u003d relatedResponse.getFeedbackQuestion();"},{"lineNumber":652,"author":{"gitId":"xenosf"},"content":"            if (relatedQuestion \u003d\u003d null) {"},{"lineNumber":653,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":654,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":655,"author":{"gitId":"xenosf"},"content":"            // check visibility of comment"},{"lineNumber":656,"author":{"gitId":"xenosf"},"content":"            boolean isVisibleResponseComment \u003d frcLogic.checkIsResponseCommentVisibleForUser("},{"lineNumber":657,"author":{"gitId":"xenosf"},"content":"                    userEmail, isInstructor, student, studentsEmailInTeam, relatedResponse, relatedQuestion, frc);"},{"lineNumber":658,"author":{"gitId":"xenosf"},"content":"            if (!isVisibleResponseComment) {"},{"lineNumber":659,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":660,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":661,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":662,"author":{"gitId":"xenosf"},"content":"            // if previewing results and the comment should not be visible to instructors,"},{"lineNumber":663,"author":{"gitId":"xenosf"},"content":"            // note down the corresponding question and do not add the comment"},{"lineNumber":664,"author":{"gitId":"xenosf"},"content":"            if (isPreviewResults \u0026\u0026 !checkCanInstructorsSeeComment(frc)) {"},{"lineNumber":665,"author":{"gitId":"xenosf"},"content":"                relatedQuestionsWithCommentNotVisibleForPreview.add(frc.getFeedbackResponse().getFeedbackQuestion());"},{"lineNumber":666,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":667,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":668,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":669,"author":{"gitId":"xenosf"},"content":"            relatedCommentsMap.computeIfAbsent(relatedResponse, key -\u003e new ArrayList\u003c\u003e()).add(frc);"},{"lineNumber":670,"author":{"gitId":"xenosf"},"content":"            // generate comment giver name visibility table"},{"lineNumber":671,"author":{"gitId":"xenosf"},"content":"            commentVisibilityTable.put(frc.getId(),"},{"lineNumber":672,"author":{"gitId":"xenosf"},"content":"                    frcLogic.checkIsNameVisibleToUser(frc, relatedResponse, userEmail, roster));"},{"lineNumber":673,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":674,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":675,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":676,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e existingResponses \u003d new ArrayList\u003c\u003e(relatedResponses);"},{"lineNumber":677,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e missingResponses \u003d Collections.emptyList();"},{"lineNumber":678,"author":{"gitId":"xenosf"},"content":"        if (isCourseWide) {"},{"lineNumber":679,"author":{"gitId":"xenosf"},"content":"            missingResponses \u003d buildMissingResponses("},{"lineNumber":680,"author":{"gitId":"xenosf"},"content":"                    instructor, responseGiverVisibilityTable, responseRecipientVisibilityTable, relatedQuestions,"},{"lineNumber":681,"author":{"gitId":"xenosf"},"content":"                    existingResponses, roster, sectionName);"},{"lineNumber":682,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":683,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":684,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":685,"author":{"gitId":"xenosf"},"content":"        return new SqlSessionResultsBundle(relatedQuestions, relatedQuestionsNotVisibleForPreviewSet,"},{"lineNumber":686,"author":{"gitId":"xenosf"},"content":"                relatedQuestionsWithCommentNotVisibleForPreview, existingResponses, missingResponses,"},{"lineNumber":687,"author":{"gitId":"xenosf"},"content":"                responseGiverVisibilityTable, responseRecipientVisibilityTable, relatedCommentsMap,"},{"lineNumber":688,"author":{"gitId":"xenosf"},"content":"                commentVisibilityTable, roster);"},{"lineNumber":689,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":690,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":691,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":692,"author":{"gitId":"xenosf"},"content":"     * Gets the session result for a feedback session."},{"lineNumber":693,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":694,"author":{"gitId":"xenosf"},"content":"     * @param feedbackSession the feedback session"},{"lineNumber":695,"author":{"gitId":"xenosf"},"content":"     * @param courseId the ID of the course"},{"lineNumber":696,"author":{"gitId":"xenosf"},"content":"     * @param instructorEmail the instructor viewing the feedback session"},{"lineNumber":697,"author":{"gitId":"xenosf"},"content":"     * @param questionId if not null, will only return partial bundle for the question"},{"lineNumber":698,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if not null, will only return partial bundle for the section"},{"lineNumber":699,"author":{"gitId":"xenosf"},"content":"     * @param fetchType if not null, will fetch responses by giver, receiver sections, or both"},{"lineNumber":700,"author":{"gitId":"xenosf"},"content":"     * @return the session result bundle"},{"lineNumber":701,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":702,"author":{"gitId":"xenosf"},"content":"    public SqlSessionResultsBundle getSessionResultsForCourse("},{"lineNumber":703,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, String instructorEmail,"},{"lineNumber":704,"author":{"gitId":"xenosf"},"content":"            @Nullable UUID questionId, @Nullable String sectionName, @Nullable FeedbackResultFetchType fetchType) {"},{"lineNumber":705,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":706,"author":{"gitId":"xenosf"},"content":"        SqlCourseRoster roster \u003d new SqlCourseRoster("},{"lineNumber":707,"author":{"gitId":"xenosf"},"content":"                usersLogic.getStudentsForCourse(courseId),"},{"lineNumber":708,"author":{"gitId":"xenosf"},"content":"                usersLogic.getInstructorsForCourse(courseId));"},{"lineNumber":709,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":710,"author":{"gitId":"xenosf"},"content":"        // load question(s)"},{"lineNumber":711,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackQuestion\u003e allQuestions \u003d getQuestionsForSession(feedbackSession, questionId);"},{"lineNumber":712,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":713,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":714,"author":{"gitId":"xenosf"},"content":"        // load response(s)"},{"lineNumber":715,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e allResponses;"},{"lineNumber":716,"author":{"gitId":"xenosf"},"content":"        // load all response for instructors and passively filter them later"},{"lineNumber":717,"author":{"gitId":"xenosf"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":718,"author":{"gitId":"xenosf"},"content":"            allResponses \u003d getFeedbackResponsesForSessionInSection(feedbackSession, courseId, sectionName, fetchType);"},{"lineNumber":719,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":720,"author":{"gitId":"xenosf"},"content":"            allResponses \u003d getFeedbackResponsesForQuestionInSection(questionId, sectionName, fetchType);"},{"lineNumber":721,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":722,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":723,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":724,"author":{"gitId":"xenosf"},"content":"        // consider the current viewing user"},{"lineNumber":725,"author":{"gitId":"xenosf"},"content":"        Instructor instructor \u003d usersLogic.getInstructorForEmail(courseId, instructorEmail);"},{"lineNumber":726,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":727,"author":{"gitId":"xenosf"},"content":"        return buildResultsBundle(true, feedbackSession, courseId, sectionName, questionId, true, instructorEmail,"},{"lineNumber":728,"author":{"gitId":"xenosf"},"content":"                instructor, null, roster, allQuestions, allResponses, false);"},{"lineNumber":729,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":730,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":731,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":732,"author":{"gitId":"xenosf"},"content":"     * Gets the session result for a feedback session for the given user."},{"lineNumber":733,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":734,"author":{"gitId":"xenosf"},"content":"     * @param feedbackSession the feedback session"},{"lineNumber":735,"author":{"gitId":"xenosf"},"content":"     * @param courseId the ID of the course"},{"lineNumber":736,"author":{"gitId":"xenosf"},"content":"     * @param userEmail the user viewing the feedback session"},{"lineNumber":737,"author":{"gitId":"xenosf"},"content":"     * @param isInstructor true if the user is an instructor"},{"lineNumber":738,"author":{"gitId":"xenosf"},"content":"     * @param questionId if not null, will only return partial bundle for the question"},{"lineNumber":739,"author":{"gitId":"xenosf"},"content":"     * @param isPreviewResults true if getting session results for preview purpose"},{"lineNumber":740,"author":{"gitId":"xenosf"},"content":"     * @return the session result bundle"},{"lineNumber":741,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":742,"author":{"gitId":"xenosf"},"content":"    public SqlSessionResultsBundle getSessionResultsForUser("},{"lineNumber":743,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, String userEmail, boolean isInstructor,"},{"lineNumber":744,"author":{"gitId":"xenosf"},"content":"            @Nullable UUID questionId, boolean isPreviewResults) {"},{"lineNumber":745,"author":{"gitId":"xenosf"},"content":"        SqlCourseRoster roster \u003d new SqlCourseRoster("},{"lineNumber":746,"author":{"gitId":"xenosf"},"content":"                usersLogic.getStudentsForCourse(courseId),"},{"lineNumber":747,"author":{"gitId":"xenosf"},"content":"                usersLogic.getInstructorsForCourse(courseId));"},{"lineNumber":748,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":749,"author":{"gitId":"xenosf"},"content":"        // load question(s)"},{"lineNumber":750,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackQuestion\u003e allQuestions \u003d getQuestionsForSession(feedbackSession, questionId);"},{"lineNumber":751,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":752,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":753,"author":{"gitId":"xenosf"},"content":"        // load response(s)"},{"lineNumber":754,"author":{"gitId":"xenosf"},"content":"        Student student \u003d isInstructor ? null : usersLogic.getStudentForEmail(courseId, userEmail);"},{"lineNumber":755,"author":{"gitId":"xenosf"},"content":"        Instructor instructor \u003d isInstructor ? usersLogic.getInstructorForEmail(courseId, userEmail) : null;"},{"lineNumber":756,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e allResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":757,"author":{"gitId":"xenosf"},"content":"        for (FeedbackQuestion question : allQuestions) {"},{"lineNumber":758,"author":{"gitId":"xenosf"},"content":"            // load viewable responses for students/instructors proactively"},{"lineNumber":759,"author":{"gitId":"xenosf"},"content":"            // this is cost-effective as in most of time responses for the whole session will not be viewable to individuals"},{"lineNumber":760,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e viewableResponses \u003d isInstructor"},{"lineNumber":761,"author":{"gitId":"xenosf"},"content":"                    ? getFeedbackResponsesToOrFromInstructorForQuestion(question, instructor)"},{"lineNumber":762,"author":{"gitId":"xenosf"},"content":"                    : getViewableFeedbackResponsesForStudentForQuestion(question, student, roster);"},{"lineNumber":763,"author":{"gitId":"xenosf"},"content":"            allResponses.addAll(viewableResponses);"},{"lineNumber":764,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":765,"author":{"gitId":"xenosf"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":766,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":767,"author":{"gitId":"xenosf"},"content":"        return buildResultsBundle(false, feedbackSession, courseId, null, questionId, isInstructor, userEmail,"},{"lineNumber":768,"author":{"gitId":"xenosf"},"content":"                instructor, student, roster, allQuestions, allResponses, isPreviewResults);"},{"lineNumber":769,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":770,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":771,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":772,"author":{"gitId":"xenosf"},"content":"     * Builds viewable missing responses for the session for instructor."},{"lineNumber":773,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":774,"author":{"gitId":"xenosf"},"content":"     * @param instructor the instructor"},{"lineNumber":775,"author":{"gitId":"xenosf"},"content":"     * @param responseGiverVisibilityTable"},{"lineNumber":776,"author":{"gitId":"xenosf"},"content":"     *         the giver visibility table which will be updated with the visibility of missing responses"},{"lineNumber":777,"author":{"gitId":"xenosf"},"content":"     * @param responseRecipientVisibilityTable"},{"lineNumber":778,"author":{"gitId":"xenosf"},"content":"     *         the recipient visibility table which will be updated with the visibility of missing responses"},{"lineNumber":779,"author":{"gitId":"xenosf"},"content":"     * @param relatedQuestions the relevant questions"},{"lineNumber":780,"author":{"gitId":"xenosf"},"content":"     * @param existingResponses existing responses"},{"lineNumber":781,"author":{"gitId":"xenosf"},"content":"     * @param courseRoster the course roster"},{"lineNumber":782,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if not null, will only build missing responses for the section"},{"lineNumber":783,"author":{"gitId":"xenosf"},"content":"     * @return a list of missing responses for the session."},{"lineNumber":784,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":785,"author":{"gitId":"xenosf"},"content":"    private List\u003cFeedbackResponse\u003e buildMissingResponses("},{"lineNumber":786,"author":{"gitId":"xenosf"},"content":"            Instructor instructor, Map\u003cFeedbackResponse, Boolean\u003e responseGiverVisibilityTable,"},{"lineNumber":787,"author":{"gitId":"xenosf"},"content":"            Map\u003cFeedbackResponse, Boolean\u003e responseRecipientVisibilityTable, List\u003cFeedbackQuestion\u003e relatedQuestions,"},{"lineNumber":788,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e existingResponses, SqlCourseRoster courseRoster, @Nullable String sectionName) {"},{"lineNumber":789,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":790,"author":{"gitId":"xenosf"},"content":"        // first get all possible giver recipient pairs"},{"lineNumber":791,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackQuestion, Map\u003cString, Set\u003cString\u003e\u003e\u003e questionCompleteGiverRecipientMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":792,"author":{"gitId":"xenosf"},"content":"        for (FeedbackQuestion feedbackQuestion : relatedQuestions) {"},{"lineNumber":793,"author":{"gitId":"xenosf"},"content":"            if (feedbackQuestion.getQuestionDetailsCopy().shouldGenerateMissingResponses(feedbackQuestion)) {"},{"lineNumber":794,"author":{"gitId":"xenosf"},"content":"                questionCompleteGiverRecipientMap.put(feedbackQuestion,"},{"lineNumber":795,"author":{"gitId":"xenosf"},"content":"                        fqLogic.buildCompleteGiverRecipientMap(feedbackQuestion, courseRoster));"},{"lineNumber":796,"author":{"gitId":"xenosf"},"content":"            } else {"},{"lineNumber":797,"author":{"gitId":"xenosf"},"content":"                questionCompleteGiverRecipientMap.put(feedbackQuestion, new HashMap\u003c\u003e());"},{"lineNumber":798,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":799,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":800,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":801,"author":{"gitId":"xenosf"},"content":"        // remove the existing responses in those pairs"},{"lineNumber":802,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponse existingResponse : existingResponses) {"},{"lineNumber":803,"author":{"gitId":"xenosf"},"content":"            Map\u003cString, Set\u003cString\u003e\u003e currGiverRecipientMap \u003d"},{"lineNumber":804,"author":{"gitId":"xenosf"},"content":"                    questionCompleteGiverRecipientMap.get(existingResponse.getFeedbackQuestion());"},{"lineNumber":805,"author":{"gitId":"xenosf"},"content":"            if (!currGiverRecipientMap.containsKey(existingResponse.getGiver())) {"},{"lineNumber":806,"author":{"gitId":"xenosf"},"content":"                continue;"},{"lineNumber":807,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":808,"author":{"gitId":"xenosf"},"content":"            currGiverRecipientMap.get(existingResponse.getGiver()).remove(existingResponse.getRecipient());"},{"lineNumber":809,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":810,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":811,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e missingResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":812,"author":{"gitId":"xenosf"},"content":"        // build dummy responses"},{"lineNumber":813,"author":{"gitId":"xenosf"},"content":"        for (Map.Entry\u003cFeedbackQuestion, Map\u003cString, Set\u003cString\u003e\u003e\u003e currGiverRecipientMapEntry"},{"lineNumber":814,"author":{"gitId":"xenosf"},"content":"                : questionCompleteGiverRecipientMap.entrySet()) {"},{"lineNumber":815,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion correspondingQuestion \u003d currGiverRecipientMapEntry.getKey();"},{"lineNumber":816,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":817,"author":{"gitId":"xenosf"},"content":"            for (Map.Entry\u003cString, Set\u003cString\u003e\u003e giverRecipientEntry"},{"lineNumber":818,"author":{"gitId":"xenosf"},"content":"                    : currGiverRecipientMapEntry.getValue().entrySet()) {"},{"lineNumber":819,"author":{"gitId":"xenosf"},"content":"                // giver"},{"lineNumber":820,"author":{"gitId":"xenosf"},"content":"                String giverIdentifier \u003d giverRecipientEntry.getKey();"},{"lineNumber":821,"author":{"gitId":"xenosf"},"content":"                SqlCourseRoster.ParticipantInfo giverInfo \u003d courseRoster.getInfoForIdentifier(giverIdentifier);"},{"lineNumber":822,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":823,"author":{"gitId":"xenosf"},"content":"                for (String recipientIdentifier : giverRecipientEntry.getValue()) {"},{"lineNumber":824,"author":{"gitId":"xenosf"},"content":"                    // recipient"},{"lineNumber":825,"author":{"gitId":"xenosf"},"content":"                    SqlCourseRoster.ParticipantInfo recipientInfo \u003d courseRoster.getInfoForIdentifier(recipientIdentifier);"},{"lineNumber":826,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":827,"author":{"gitId":"xenosf"},"content":"                    // skip responses not in current section"},{"lineNumber":828,"author":{"gitId":"xenosf"},"content":"                    if (sectionName !\u003d null"},{"lineNumber":829,"author":{"gitId":"xenosf"},"content":"                            \u0026\u0026 !giverInfo.getSectionName().equals(sectionName)"},{"lineNumber":830,"author":{"gitId":"xenosf"},"content":"                            \u0026\u0026 !recipientInfo.getSectionName().equals(sectionName)) {"},{"lineNumber":831,"author":{"gitId":"xenosf"},"content":"                        continue;"},{"lineNumber":832,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":833,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":834,"author":{"gitId":"xenosf"},"content":"                    FeedbackResponse missingResponse \u003d new FeedbackMissingResponse("},{"lineNumber":835,"author":{"gitId":"xenosf"},"content":"                            correspondingQuestion,"},{"lineNumber":836,"author":{"gitId":"xenosf"},"content":"                            giverIdentifier, giverInfo.getSectionName(),"},{"lineNumber":837,"author":{"gitId":"xenosf"},"content":"                            recipientIdentifier, recipientInfo.getSectionName());"},{"lineNumber":838,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":839,"author":{"gitId":"xenosf"},"content":"                    // check visibility of the missing response"},{"lineNumber":840,"author":{"gitId":"xenosf"},"content":"                    boolean isVisibleResponse \u003d isResponseVisibleForUser("},{"lineNumber":841,"author":{"gitId":"xenosf"},"content":"                            instructor.getEmail(), true, null, Collections.emptySet(),"},{"lineNumber":842,"author":{"gitId":"xenosf"},"content":"                            missingResponse, correspondingQuestion, instructor);"},{"lineNumber":843,"author":{"gitId":"xenosf"},"content":"                    if (!isVisibleResponse) {"},{"lineNumber":844,"author":{"gitId":"xenosf"},"content":"                        continue;"},{"lineNumber":845,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":846,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":847,"author":{"gitId":"xenosf"},"content":"                    // generate giver/recipient name visibility table"},{"lineNumber":848,"author":{"gitId":"xenosf"},"content":"                    responseGiverVisibilityTable.put(missingResponse,"},{"lineNumber":849,"author":{"gitId":"xenosf"},"content":"                            isNameVisibleToUser(correspondingQuestion, missingResponse,"},{"lineNumber":850,"author":{"gitId":"xenosf"},"content":"                                    instructor.getEmail(), true, true, courseRoster));"},{"lineNumber":851,"author":{"gitId":"xenosf"},"content":"                    responseRecipientVisibilityTable.put(missingResponse,"},{"lineNumber":852,"author":{"gitId":"xenosf"},"content":"                            isNameVisibleToUser(correspondingQuestion, missingResponse,"},{"lineNumber":853,"author":{"gitId":"xenosf"},"content":"                                    instructor.getEmail(), true, false, courseRoster));"},{"lineNumber":854,"author":{"gitId":"xenosf"},"content":"                    missingResponses.add(missingResponse);"},{"lineNumber":855,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":856,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":857,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":858,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":859,"author":{"gitId":"xenosf"},"content":"        return missingResponses;"},{"lineNumber":860,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":861,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":862,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":863,"author":{"gitId":"xenosf"},"content":"     * Checks whether the giver name of a response is visible to an user."},{"lineNumber":864,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":865,"author":{"gitId":"xenosf"},"content":"    public boolean isNameVisibleToUser("},{"lineNumber":866,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question,"},{"lineNumber":867,"author":{"gitId":"xenosf"},"content":"            FeedbackResponse response,"},{"lineNumber":868,"author":{"gitId":"xenosf"},"content":"            String userEmail,"},{"lineNumber":869,"author":{"gitId":"xenosf"},"content":"            boolean isInstructor, boolean isGiverName, SqlCourseRoster roster) {"},{"lineNumber":870,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":871,"author":{"gitId":"xenosf"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":872,"author":{"gitId":"xenosf"},"content":"            return false;"},{"lineNumber":873,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":874,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":875,"author":{"gitId":"xenosf"},"content":"        // Early return if user is giver"},{"lineNumber":876,"author":{"gitId":"xenosf"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":877,"author":{"gitId":"xenosf"},"content":"            // if response is given by team, then anyone in the team can see the response"},{"lineNumber":878,"author":{"gitId":"xenosf"},"content":"            if (roster.isStudentInTeam(userEmail, response.getGiver())) {"},{"lineNumber":879,"author":{"gitId":"xenosf"},"content":"                return true;"},{"lineNumber":880,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":881,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":882,"author":{"gitId":"xenosf"},"content":"            if (response.getGiver().equals(userEmail)) {"},{"lineNumber":883,"author":{"gitId":"xenosf"},"content":"                return true;"},{"lineNumber":884,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":885,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":886,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":887,"author":{"gitId":"xenosf"},"content":"        return isFeedbackParticipantNameVisibleToUser(question, response,"},{"lineNumber":888,"author":{"gitId":"xenosf"},"content":"                userEmail, isInstructor, isGiverName, roster);"},{"lineNumber":889,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":890,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":891,"author":{"gitId":"xenosf"},"content":"    private boolean isFeedbackParticipantNameVisibleToUser("},{"lineNumber":892,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question, FeedbackResponse response,"},{"lineNumber":893,"author":{"gitId":"xenosf"},"content":"            String userEmail, boolean isInstructor, boolean isGiverName, SqlCourseRoster roster) {"},{"lineNumber":894,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackParticipantType\u003e showNameTo \u003d isGiverName"},{"lineNumber":895,"author":{"gitId":"xenosf"},"content":"                                                 ? question.getShowGiverNameTo()"},{"lineNumber":896,"author":{"gitId":"xenosf"},"content":"                                                 : question.getShowRecipientNameTo();"},{"lineNumber":897,"author":{"gitId":"xenosf"},"content":"        for (FeedbackParticipantType type : showNameTo) {"},{"lineNumber":898,"author":{"gitId":"xenosf"},"content":"            switch (type) {"},{"lineNumber":899,"author":{"gitId":"xenosf"},"content":"            case INSTRUCTORS:"},{"lineNumber":900,"author":{"gitId":"xenosf"},"content":"                if (roster.getInstructorForEmail(userEmail) !\u003d null \u0026\u0026 isInstructor) {"},{"lineNumber":901,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":902,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":903,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":904,"author":{"gitId":"xenosf"},"content":"            case OWN_TEAM_MEMBERS:"},{"lineNumber":905,"author":{"gitId":"xenosf"},"content":"            case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":906,"author":{"gitId":"xenosf"},"content":"                // Refers to Giver\u0027s Team Members"},{"lineNumber":907,"author":{"gitId":"xenosf"},"content":"                if (roster.isStudentsInSameTeam(response.getGiver(), userEmail)) {"},{"lineNumber":908,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":909,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":910,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":911,"author":{"gitId":"xenosf"},"content":"            case RECEIVER:"},{"lineNumber":912,"author":{"gitId":"xenosf"},"content":"                // Response to team"},{"lineNumber":913,"author":{"gitId":"xenosf"},"content":"                if (question.getRecipientType().isTeam()) {"},{"lineNumber":914,"author":{"gitId":"xenosf"},"content":"                    if (roster.isStudentInTeam(userEmail, response.getRecipient())) {"},{"lineNumber":915,"author":{"gitId":"xenosf"},"content":"                        // this is a team name"},{"lineNumber":916,"author":{"gitId":"xenosf"},"content":"                        return true;"},{"lineNumber":917,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":918,"author":{"gitId":"xenosf"},"content":"                    break;"},{"lineNumber":919,"author":{"gitId":"xenosf"},"content":"                    // Response to individual"},{"lineNumber":920,"author":{"gitId":"xenosf"},"content":"                } else if (response.getRecipient().equals(userEmail)) {"},{"lineNumber":921,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":922,"author":{"gitId":"xenosf"},"content":"                } else {"},{"lineNumber":923,"author":{"gitId":"xenosf"},"content":"                    break;"},{"lineNumber":924,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":925,"author":{"gitId":"xenosf"},"content":"            case RECEIVER_TEAM_MEMBERS:"},{"lineNumber":926,"author":{"gitId":"xenosf"},"content":"                // Response to team; recipient \u003d teamName"},{"lineNumber":927,"author":{"gitId":"xenosf"},"content":"                if (question.getRecipientType().isTeam()) {"},{"lineNumber":928,"author":{"gitId":"xenosf"},"content":"                    if (roster.isStudentInTeam(userEmail, response.getRecipient())) {"},{"lineNumber":929,"author":{"gitId":"xenosf"},"content":"                        // this is a team name"},{"lineNumber":930,"author":{"gitId":"xenosf"},"content":"                        return true;"},{"lineNumber":931,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":932,"author":{"gitId":"xenosf"},"content":"                    break;"},{"lineNumber":933,"author":{"gitId":"xenosf"},"content":"                } else if (roster.isStudentsInSameTeam(response.getRecipient(), userEmail)) {"},{"lineNumber":934,"author":{"gitId":"xenosf"},"content":"                    // Response to individual"},{"lineNumber":935,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":936,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":937,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":938,"author":{"gitId":"xenosf"},"content":"            case STUDENTS:"},{"lineNumber":939,"author":{"gitId":"xenosf"},"content":"                if (roster.isStudentInCourse(userEmail)) {"},{"lineNumber":940,"author":{"gitId":"xenosf"},"content":"                    return true;"},{"lineNumber":941,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":942,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":943,"author":{"gitId":"xenosf"},"content":"            default:"},{"lineNumber":944,"author":{"gitId":"xenosf"},"content":"                assert false : \"Invalid FeedbackParticipantType for showNameTo in \""},{"lineNumber":945,"author":{"gitId":"xenosf"},"content":"                        + \"FeedbackResponseLogic.isFeedbackParticipantNameVisibleToUser()\";"},{"lineNumber":946,"author":{"gitId":"xenosf"},"content":"                break;"},{"lineNumber":947,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":948,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":949,"author":{"gitId":"xenosf"},"content":"        return false;"},{"lineNumber":950,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":951,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":952,"author":{"gitId":"xenosf"},"content":"    private boolean isResponseVisibleForUser("},{"lineNumber":953,"author":{"gitId":"xenosf"},"content":"            String userEmail, boolean isInstructor, Student student,"},{"lineNumber":954,"author":{"gitId":"xenosf"},"content":"            Set\u003cString\u003e studentsEmailInTeam, FeedbackResponse response,"},{"lineNumber":955,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion relatedQuestion, Instructor instructor) {"},{"lineNumber":956,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":957,"author":{"gitId":"xenosf"},"content":"        boolean isVisibleResponse \u003d false;"},{"lineNumber":958,"author":{"gitId":"xenosf"},"content":"        if (isInstructor \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":959,"author":{"gitId":"xenosf"},"content":"                || response.getRecipient().equals(userEmail)"},{"lineNumber":960,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":961,"author":{"gitId":"xenosf"},"content":"                || response.getGiver().equals(userEmail)"},{"lineNumber":962,"author":{"gitId":"xenosf"},"content":"                || !isInstructor \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":963,"author":{"gitId":"xenosf"},"content":"            isVisibleResponse \u003d true;"},{"lineNumber":964,"author":{"gitId":"xenosf"},"content":"        } else if (studentsEmailInTeam !\u003d null \u0026\u0026 !isInstructor) {"},{"lineNumber":965,"author":{"gitId":"xenosf"},"content":"            if ((relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":966,"author":{"gitId":"xenosf"},"content":"                    || relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION"},{"lineNumber":967,"author":{"gitId":"xenosf"},"content":"                    || relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF)"},{"lineNumber":968,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":969,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 response.getRecipient().equals(student.getTeamName())) {"},{"lineNumber":970,"author":{"gitId":"xenosf"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":971,"author":{"gitId":"xenosf"},"content":"            } else if (relatedQuestion.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":972,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 response.getGiver().equals(student.getTeamName())) {"},{"lineNumber":973,"author":{"gitId":"xenosf"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":974,"author":{"gitId":"xenosf"},"content":"            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)"},{"lineNumber":975,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 studentsEmailInTeam.contains(response.getGiver())) {"},{"lineNumber":976,"author":{"gitId":"xenosf"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":977,"author":{"gitId":"xenosf"},"content":"            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)"},{"lineNumber":978,"author":{"gitId":"xenosf"},"content":"                    \u0026\u0026 studentsEmailInTeam.contains(response.getRecipient())) {"},{"lineNumber":979,"author":{"gitId":"xenosf"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":980,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":981,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":982,"author":{"gitId":"xenosf"},"content":"        if (isVisibleResponse \u0026\u0026 instructor !\u003d null) {"},{"lineNumber":983,"author":{"gitId":"xenosf"},"content":"            boolean isGiverSectionRestricted \u003d"},{"lineNumber":984,"author":{"gitId":"xenosf"},"content":"                    !instructor.isAllowedForPrivilege(response.getGiverSectionName(),"},{"lineNumber":985,"author":{"gitId":"xenosf"},"content":"                            response.getFeedbackQuestion().getFeedbackSession().getName(),"},{"lineNumber":986,"author":{"gitId":"xenosf"},"content":"                            Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":987,"author":{"gitId":"xenosf"},"content":"            // If instructors are not restricted to view the giver\u0027s section,"},{"lineNumber":988,"author":{"gitId":"xenosf"},"content":"            // they are allowed to view responses to GENERAL, subject to visibility options"},{"lineNumber":989,"author":{"gitId":"xenosf"},"content":"            boolean isRecipientSectionRestricted \u003d"},{"lineNumber":990,"author":{"gitId":"xenosf"},"content":"                    relatedQuestion.getRecipientType() !\u003d FeedbackParticipantType.NONE"},{"lineNumber":991,"author":{"gitId":"xenosf"},"content":"                            \u0026\u0026 !instructor.isAllowedForPrivilege(response.getRecipientSectionName(),"},{"lineNumber":992,"author":{"gitId":"xenosf"},"content":"                            response.getFeedbackQuestion().getFeedbackSession().getName(),"},{"lineNumber":993,"author":{"gitId":"xenosf"},"content":"                            Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":994,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":995,"author":{"gitId":"xenosf"},"content":"            boolean isNotAllowedForInstructor \u003d isGiverSectionRestricted || isRecipientSectionRestricted;"},{"lineNumber":996,"author":{"gitId":"xenosf"},"content":"            if (isNotAllowedForInstructor) {"},{"lineNumber":997,"author":{"gitId":"xenosf"},"content":"                isVisibleResponse \u003d false;"},{"lineNumber":998,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":999,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1000,"author":{"gitId":"xenosf"},"content":"        return isVisibleResponse;"},{"lineNumber":1001,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1002,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1003,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1004,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1005,"author":{"gitId":"xenosf"},"content":"     * Gets all responses for a session."},{"lineNumber":1006,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1007,"author":{"gitId":"xenosf"},"content":"    List\u003cFeedbackResponse\u003e getFeedbackResponsesForSession("},{"lineNumber":1008,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId) {"},{"lineNumber":1009,"author":{"gitId":"xenosf"},"content":"        return frDb.getFeedbackResponsesForSession(feedbackSession, courseId);"},{"lineNumber":1010,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1011,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1012,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1013,"author":{"gitId":"xenosf"},"content":"     * Gets all responses given to/from a section in a feedback session in a course."},{"lineNumber":1014,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":1015,"author":{"gitId":"xenosf"},"content":"     * @param feedbackSession the session"},{"lineNumber":1016,"author":{"gitId":"xenosf"},"content":"     * @param courseId the course ID of the session"},{"lineNumber":1017,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if null, will retrieve all responses in the session"},{"lineNumber":1018,"author":{"gitId":"xenosf"},"content":"     * @param fetchType if not null, will retrieve responses by giver, receiver sections, or both"},{"lineNumber":1019,"author":{"gitId":"xenosf"},"content":"     * @return a list of responses"},{"lineNumber":1020,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1021,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForSessionInSection("},{"lineNumber":1022,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, @Nullable String sectionName,"},{"lineNumber":1023,"author":{"gitId":"xenosf"},"content":"            @Nullable FeedbackResultFetchType fetchType) {"},{"lineNumber":1024,"author":{"gitId":"xenosf"},"content":"        if (sectionName \u003d\u003d null) {"},{"lineNumber":1025,"author":{"gitId":"xenosf"},"content":"            return getFeedbackResponsesForSession(feedbackSession, courseId);"},{"lineNumber":1026,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1027,"author":{"gitId":"xenosf"},"content":"        return frDb.getFeedbackResponsesForSessionInSection(feedbackSession, courseId, sectionName, fetchType);"},{"lineNumber":1028,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1029,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1030,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1031,"author":{"gitId":"xenosf"},"content":"     * Gets all responses given to/from a section for a question."},{"lineNumber":1032,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":1033,"author":{"gitId":"xenosf"},"content":"     * @param feedbackQuestionId the question UUID"},{"lineNumber":1034,"author":{"gitId":"xenosf"},"content":"     * @param sectionName if null, will retrieve all responses for the question"},{"lineNumber":1035,"author":{"gitId":"xenosf"},"content":"     * @return a list of responses"},{"lineNumber":1036,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1037,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForQuestionInSection("},{"lineNumber":1038,"author":{"gitId":"xenosf"},"content":"            UUID feedbackQuestionId, @Nullable String sectionName, FeedbackResultFetchType fetchType) {"},{"lineNumber":1039,"author":{"gitId":"xenosf"},"content":"        if (sectionName \u003d\u003d null) {"},{"lineNumber":1040,"author":{"gitId":"xenosf"},"content":"            return getFeedbackResponsesForQuestion(feedbackQuestionId);"},{"lineNumber":1041,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1042,"author":{"gitId":"xenosf"},"content":"        return frDb.getFeedbackResponsesForQuestionInSection(feedbackQuestionId, sectionName, fetchType);"},{"lineNumber":1043,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1044,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1045,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1046,"author":{"gitId":"xenosf"},"content":"     * Returns feedback responses given/received by an instructor."},{"lineNumber":1047,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1048,"author":{"gitId":"xenosf"},"content":"    private List\u003cFeedbackResponse\u003e getFeedbackResponsesToOrFromInstructorForQuestion("},{"lineNumber":1049,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question, Instructor instructor) {"},{"lineNumber":1050,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackResponse\u003e viewableResponses \u003d new HashSet\u003c\u003e();"},{"lineNumber":1051,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1052,"author":{"gitId":"xenosf"},"content":"        // Add responses that the instructor submitted him/herself"},{"lineNumber":1053,"author":{"gitId":"xenosf"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":1054,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1055,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesFromGiverForQuestion(question.getId(), instructor.getEmail())"},{"lineNumber":1056,"author":{"gitId":"xenosf"},"content":"            );"},{"lineNumber":1057,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1058,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1059,"author":{"gitId":"xenosf"},"content":"        // Add responses that user is a receiver of when response is visible to receiver or instructors"},{"lineNumber":1060,"author":{"gitId":"xenosf"},"content":"        if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":1061,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 (question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":1062,"author":{"gitId":"xenosf"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS))) {"},{"lineNumber":1063,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1064,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesForRecipientForQuestion(question.getId(), instructor.getEmail())"},{"lineNumber":1065,"author":{"gitId":"xenosf"},"content":"            );"},{"lineNumber":1066,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1067,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1068,"author":{"gitId":"xenosf"},"content":"        return new ArrayList\u003c\u003e(viewableResponses);"},{"lineNumber":1069,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1070,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1071,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1072,"author":{"gitId":"xenosf"},"content":"     * Returns viewable feedback responses for a student."},{"lineNumber":1073,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1074,"author":{"gitId":"xenosf"},"content":"    private List\u003cFeedbackResponse\u003e getViewableFeedbackResponsesForStudentForQuestion("},{"lineNumber":1075,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion question, Student student, SqlCourseRoster courseRoster) {"},{"lineNumber":1076,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackResponse\u003e viewableResponses \u003d new HashSet\u003c\u003e();"},{"lineNumber":1077,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1078,"author":{"gitId":"xenosf"},"content":"        // Add responses that the student submitted him/herself"},{"lineNumber":1079,"author":{"gitId":"xenosf"},"content":"        if (question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":1080,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1081,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesFromGiverForQuestion(question.getId(), student.getEmail())"},{"lineNumber":1082,"author":{"gitId":"xenosf"},"content":"            );"},{"lineNumber":1083,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1084,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1085,"author":{"gitId":"xenosf"},"content":"        // Add responses that user is a receiver of when response is visible to receiver"},{"lineNumber":1086,"author":{"gitId":"xenosf"},"content":"        if (question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":1087,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":1088,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1089,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesForRecipientForQuestion(question.getId(), student.getEmail())"},{"lineNumber":1090,"author":{"gitId":"xenosf"},"content":"            );"},{"lineNumber":1091,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1092,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1093,"author":{"gitId":"xenosf"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":1094,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll(getFeedbackResponsesForQuestion(question.getId()));"},{"lineNumber":1095,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1096,"author":{"gitId":"xenosf"},"content":"            // Early return as STUDENTS covers all cases below."},{"lineNumber":1097,"author":{"gitId":"xenosf"},"content":"            return new ArrayList\u003c\u003e(viewableResponses);"},{"lineNumber":1098,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1099,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1100,"author":{"gitId":"xenosf"},"content":"        if (question.getRecipientType().isTeam()"},{"lineNumber":1101,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":1102,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1103,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesForRecipientForQuestion(question.getId(), student.getTeamName())"},{"lineNumber":1104,"author":{"gitId":"xenosf"},"content":"            );"},{"lineNumber":1105,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1106,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1107,"author":{"gitId":"xenosf"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":1108,"author":{"gitId":"xenosf"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {"},{"lineNumber":1109,"author":{"gitId":"xenosf"},"content":"            viewableResponses.addAll("},{"lineNumber":1110,"author":{"gitId":"xenosf"},"content":"                    getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":1111,"author":{"gitId":"xenosf"},"content":"                            question.getId(), question.getCourseId(), student.getTeamName(), courseRoster));"},{"lineNumber":1112,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1113,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1114,"author":{"gitId":"xenosf"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)) {"},{"lineNumber":1115,"author":{"gitId":"xenosf"},"content":"            for (Student studentInTeam : courseRoster.getTeamToMembersTable().get(student.getTeamName())) {"},{"lineNumber":1116,"author":{"gitId":"xenosf"},"content":"                if (studentInTeam.getEmail().equals(student.getEmail())) {"},{"lineNumber":1117,"author":{"gitId":"xenosf"},"content":"                    continue;"},{"lineNumber":1118,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":1119,"author":{"gitId":"xenosf"},"content":"                List\u003cFeedbackResponse\u003e responses \u003d"},{"lineNumber":1120,"author":{"gitId":"xenosf"},"content":"                        getFeedbackResponsesForRecipientForQuestion(question.getId(), studentInTeam.getEmail());"},{"lineNumber":1121,"author":{"gitId":"xenosf"},"content":"                viewableResponses.addAll(responses);"},{"lineNumber":1122,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":1123,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1124,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1125,"author":{"gitId":"xenosf"},"content":"        return new ArrayList\u003c\u003e(viewableResponses);"},{"lineNumber":1126,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1127,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1128,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1129,"author":{"gitId":"xenosf"},"content":"     * Gets all responses received by a user for a question."},{"lineNumber":1130,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1131,"author":{"gitId":"xenosf"},"content":"    private List\u003cFeedbackResponse\u003e getFeedbackResponsesForRecipientForQuestion("},{"lineNumber":1132,"author":{"gitId":"xenosf"},"content":"            UUID feedbackQuestionId, String userEmail) {"},{"lineNumber":1133,"author":{"gitId":"xenosf"},"content":"        return frDb.getFeedbackResponsesForRecipientForQuestion(feedbackQuestionId, userEmail);"},{"lineNumber":1134,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1135,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1136,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1137,"author":{"gitId":"xenosf"},"content":"     * Checks whether instructors can see the question."},{"lineNumber":1138,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1139,"author":{"gitId":"xenosf"},"content":"    boolean checkCanInstructorsSeeQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":1140,"author":{"gitId":"xenosf"},"content":"        boolean isResponseVisibleToInstructor \u003d"},{"lineNumber":1141,"author":{"gitId":"xenosf"},"content":"                feedbackQuestion.getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":1142,"author":{"gitId":"xenosf"},"content":"        boolean isGiverVisibleToInstructor \u003d"},{"lineNumber":1143,"author":{"gitId":"xenosf"},"content":"                feedbackQuestion.getShowGiverNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":1144,"author":{"gitId":"xenosf"},"content":"        boolean isRecipientVisibleToInstructor \u003d"},{"lineNumber":1145,"author":{"gitId":"xenosf"},"content":"                feedbackQuestion.getShowRecipientNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":1146,"author":{"gitId":"xenosf"},"content":"        return isResponseVisibleToInstructor \u0026\u0026 isGiverVisibleToInstructor \u0026\u0026 isRecipientVisibleToInstructor;"},{"lineNumber":1147,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1148,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1149,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":1150,"author":{"gitId":"xenosf"},"content":"     * Checks whether instructors can see the comment."},{"lineNumber":1151,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":1152,"author":{"gitId":"xenosf"},"content":"    boolean checkCanInstructorsSeeComment(FeedbackResponseComment feedbackResponseComment) {"},{"lineNumber":1153,"author":{"gitId":"xenosf"},"content":"        boolean isCommentVisibleToInstructor \u003d"},{"lineNumber":1154,"author":{"gitId":"xenosf"},"content":"                feedbackResponseComment.getShowCommentTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":1155,"author":{"gitId":"xenosf"},"content":"        boolean isGiverVisibleToInstructor \u003d"},{"lineNumber":1156,"author":{"gitId":"xenosf"},"content":"                feedbackResponseComment.getShowGiverNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":1157,"author":{"gitId":"xenosf"},"content":"        return isCommentVisibleToInstructor \u0026\u0026 isGiverVisibleToInstructor;"},{"lineNumber":1158,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":1159,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":77,"marquestye":23,"xenosf":625,"mingyuanc":2,"-":433}},{"path":"src/main/java/teammates/sqllogic/core/FeedbackSessionsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackSessionsDb;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Handles operations related to feedback sessions."},{"lineNumber":25,"author":{"gitId":"-"},"content":" *"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * @see FeedbackSession"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * @see FeedbackSessionsDb"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public final class FeedbackSessionsLogic {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String ERROR_NON_EXISTENT_FS_STRING_FORMAT \u003d \"Trying to %s a non-existent feedback session: \";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String ERROR_NON_EXISTENT_FS_UPDATE \u003d String.format(ERROR_NON_EXISTENT_FS_STRING_FORMAT, \"update\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String ERROR_FS_ALREADY_PUBLISH \u003d \"Error publishing feedback session: \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Session has already been published.\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String ERROR_FS_ALREADY_UNPUBLISH \u003d \"Error unpublishing feedback session: \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Session has already been unpublished.\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final int NUMBER_OF_HOURS_BEFORE_CLOSING_ALERT \u003d 24;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final int NUMBER_OF_HOURS_BEFORE_OPENING_SOON_ALERT \u003d 24;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final FeedbackSessionsLogic instance \u003d new FeedbackSessionsLogic();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FeedbackSessionsDb fsDb;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic frLogic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private CoursesLogic coursesLogic;"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private FeedbackSessionsLogic() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static FeedbackSessionsLogic inst() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void initLogicDependencies(FeedbackSessionsDb fsDb, CoursesLogic coursesLogic,"},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"            FeedbackResponsesLogic frLogic, FeedbackQuestionsLogic fqLogic, UsersLogic usersLogic) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.fsDb \u003d fsDb;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.frLogic \u003d frLogic;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.fqLogic \u003d fqLogic;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.coursesLogic \u003d coursesLogic;"},{"lineNumber":65,"author":{"gitId":"domoberzin"},"content":"        this.usersLogic \u003d usersLogic;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Gets a feedback session."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(UUID id) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return fsDb.getFeedbackSession(id);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Gets a feedback session for {@code feedbackSessionName} and {@code courseId}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return fsDb.getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Gets all feedback sessions of a course, except those that are soft-deleted."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsForCourse(String courseId) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return fsDb.getFeedbackSessionEntitiesForCourse(courseId).stream()"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .filter(fs -\u003e fs.getDeletedAt() \u003d\u003d null)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Gets all feedback sessions of a course started after time, except those that are soft-deleted."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsForCourseStartingAfter(String courseId, Instant after) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return fsDb.getFeedbackSessionEntitiesForCourseStartingAfter(courseId, after).stream()"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .filter(session -\u003e session.getDeletedAt() \u003d\u003d null)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Gets a feedback session from the recycle bin."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return fsDb.getSoftDeletedFeedbackSession(courseId, feedbackSessionName);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Gets a list of feedback sessions for instructors."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsForInstructors("},{"lineNumber":121,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorList) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e courseNotDeletedInstructorList \u003d instructorList.stream()"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .filter(instructor -\u003e coursesLogic.getCourse(instructor.getCourseId()).getDeletedAt() \u003d\u003d null)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e fsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (Instructor instructor : courseNotDeletedInstructorList) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            fsList.addAll(getFeedbackSessionsForCourse(instructor.getCourseId()));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return fsList;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code List} of feedback sessions in the Recycle Bin for the instructors."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Omits sessions if the corresponding courses are archived or in Recycle Bin"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getSoftDeletedFeedbackSessionsForInstructors("},{"lineNumber":142,"author":{"gitId":"-"},"content":"            List\u003cInstructor\u003e instructorList) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e courseNotDeletedInstructorList \u003d instructorList.stream()"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .filter(instructor -\u003e coursesLogic.getCourse(instructor.getCourseId()).getDeletedAt() \u003d\u003d null)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e fsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        for (Instructor instructor : courseNotDeletedInstructorList) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            fsList.addAll(fsDb.getSoftDeletedFeedbackSessionsForCourse(instructor.getCourseId()));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return fsList;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Gets all and only the feedback sessions ongoing within a range of time."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getOngoingSessions(Instant rangeStart, Instant rangeEnd) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return fsDb.getOngoingSessions(rangeStart, rangeEnd);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Gets a set of giver identifiers that has at least one response under a feedback session."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public Set\u003cString\u003e getGiverSetThatAnsweredFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        FeedbackSession feedbackSession \u003d fsDb.getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e giverSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":174,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":175,"author":{"gitId":"domoberzin"},"content":"        fqLogic.getFeedbackQuestionsForSession(feedbackSession).forEach(question -\u003e {"},{"lineNumber":176,"author":{"gitId":"domoberzin"},"content":"            frLogic.getFeedbackResponsesForQuestion(question.getId()).forEach(response -\u003e {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                giverSet.add(response.getGiver());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return giverSet;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"domoberzin"},"content":"     * Gets a set of giver identifiers that has at least one response under a feedback session."},{"lineNumber":186,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"domoberzin"},"content":"    public Set\u003cString\u003e getGiverSetThatAnsweredFeedbackSession(FeedbackSession fs) {"},{"lineNumber":188,"author":{"gitId":"domoberzin"},"content":"        assert fs !\u003d null;"},{"lineNumber":189,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":190,"author":{"gitId":"domoberzin"},"content":"        Set\u003cString\u003e giverSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":192,"author":{"gitId":"domoberzin"},"content":"        fqLogic.getFeedbackQuestionsForSession(fs).forEach(question -\u003e {"},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"            frLogic.getFeedbackResponsesForQuestion(question.getId()).forEach(response -\u003e {"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"                giverSet.add(response.getGiver());"},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"            });"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":"        });"},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"        return giverSet;"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Creates a feedback session."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @return created feedback session"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the session is not valid"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the session already exist"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public FeedbackSession createFeedbackSession(FeedbackSession session)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        return fsDb.createFeedbackSession(session);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Updates a feedback session."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * @return updated feedback session"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session does not exist"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the new fields for feedback session are invalid"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public FeedbackSession updateFeedbackSession(FeedbackSession session)"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return fsDb.updateFeedbackSession(session);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * Unpublishes a feedback session."},{"lineNumber":228,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * @return the unpublished feedback session"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if session is already unpublished"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public FeedbackSession unpublishFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        FeedbackSession sessionToUnpublish \u003d getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        if (sessionToUnpublish \u003d\u003d null) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_UPDATE + courseId + \"/\" + feedbackSessionName);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        if (!sessionToUnpublish.isPublished()) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(ERROR_FS_ALREADY_UNPUBLISH);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        sessionToUnpublish.setResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER);"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        return sessionToUnpublish;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * Publishes a feedback session."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * @return the published feedback session"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if session is already published"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public FeedbackSession publishFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"        FeedbackSession sessionToPublish \u003d getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        if (sessionToPublish \u003d\u003d null) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_NON_EXISTENT_FS_UPDATE + courseId + \"/\" + feedbackSessionName);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        if (sessionToPublish.isPublished()) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(ERROR_FS_ALREADY_PUBLISH);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        sessionToPublish.setResultsVisibleFromTime(Instant.now());"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"        return sessionToPublish;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Deletes a feedback session cascade to its associated questions, responses, deadline extensions and comments."},{"lineNumber":276,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public void deleteFeedbackSessionCascade(String feedbackSessionName, String courseId) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        FeedbackSession feedbackSession \u003d fsDb.getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        fsDb.deleteFeedbackSession(feedbackSession);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * Soft-deletes a specific feedback session to Recycle Bin."},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * @return the time when the feedback session is moved to the recycle bin"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    public Instant moveFeedbackSessionToRecycleBin(String feedbackSessionName, String courseId)"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"        return fsDb.softDeleteFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Restores a specific feedback session from Recycle Bin."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public void restoreFeedbackSessionFromRecycleBin(String feedbackSessionName, String courseId)"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        fsDb.restoreDeletedFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"-"},"content":"     * Returns true if there are any questions for the specified user type (students/instructors) to answer."},{"lineNumber":302,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionForUserTypeToAnswer(FeedbackSession session, boolean isInstructor) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        if (!session.isVisible()) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        return isInstructor"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                ? fqLogic.hasFeedbackQuestionsForInstructors(session.getFeedbackQuestions(), false)"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                : fqLogic.hasFeedbackQuestionsForStudents(session.getFeedbackQuestions());"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Returns true if the feedback session is viewable by the given user type (students/instructors)."},{"lineNumber":315,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionViewableToUserType(FeedbackSession session, boolean isInstructor) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        // Allow user to view the feedback session if there are questions for them"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        if (isFeedbackSessionForUserTypeToAnswer(session, isInstructor)) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"        // Allow user to view the feedback session if there are any question whose responses are visible to the user"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsWithVisibleResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsForUser \u003d session.getFeedbackQuestions();"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        for (FeedbackQuestion question : questionsForUser) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            if (!isInstructor \u0026\u0026 frLogic.isResponseOfFeedbackQuestionVisibleToStudent(question)"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                    || isInstructor \u0026\u0026 frLogic.isResponseOfFeedbackQuestionVisibleToInstructor(question)) {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                // We only need one question with visible responses for the entire session to be visible"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                questionsWithVisibleResponses.add(question);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"        return session.isVisible() \u0026\u0026 !questionsWithVisibleResponses.isEmpty();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitId":"-"},"content":"     * Checks whether a student has attempted a feedback session."},{"lineNumber":339,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":340,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf feedback session consists of all team questions, session is attempted by student only"},{"lineNumber":341,"author":{"gitId":"-"},"content":"     * if someone from the team has responded. If feedback session has some individual questions,"},{"lineNumber":342,"author":{"gitId":"-"},"content":"     * session is attempted only if the student has responded to any of the individual questions"},{"lineNumber":343,"author":{"gitId":"-"},"content":"     * (regardless of the completion status of the team questions).\u003c/p\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionAttemptedByStudent(FeedbackSession session, String userEmail, String userTeam) {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        assert userTeam !\u003d null;"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        if (!fqLogic.hasFeedbackQuestionsForStudents(session.getFeedbackQuestions())) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            // if there are no questions for student, session is attempted"},{"lineNumber":352,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        } else if (fqLogic.hasFeedbackQuestionsForGiverType("},{"lineNumber":354,"author":{"gitId":"-"},"content":"                session.getFeedbackQuestions(), FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"            // case where there are some individual questions"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            return frLogic.hasGiverRespondedForSession(userEmail, session.getFeedbackQuestions());"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            // case where all are team questions"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            return frLogic.hasGiverRespondedForSession(userTeam, session.getFeedbackQuestions());"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":364,"author":{"gitId":"-"},"content":"     * Checks whether an instructor has attempted a feedback session."},{"lineNumber":365,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":366,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf there is no question for instructors, the feedback session is considered as attempted.\u003c/p\u003e"},{"lineNumber":367,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    public boolean isFeedbackSessionAttemptedByInstructor(FeedbackSession session, String userEmail) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"        if (frLogic.hasGiverRespondedForSession(userEmail, session.getFeedbackQuestions())) {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"        // if there is no question for instructor, session is attempted"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        return !fqLogic.hasFeedbackQuestionsForInstructors(session.getFeedbackQuestions(), session.isCreator(userEmail));"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":381,"author":{"gitId":"-"},"content":"     * After an update to feedback session\u0027s fields, may need to adjust the email status of the session."},{"lineNumber":382,"author":{"gitId":"-"},"content":"     * @param session recently updated session."},{"lineNumber":383,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    public void adjustFeedbackSessionEmailStatusAfterUpdate(FeedbackSession session) {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        // reset isOpenEmailSent if the session has opened but is being un-opened"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        // now, or else leave it as sent if so."},{"lineNumber":387,"author":{"gitId":"-"},"content":"        if (session.isOpenEmailSent()) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"            session.setOpenEmailSent(session.isOpened());"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"            // also reset isOpeningSoonEmailSent"},{"lineNumber":391,"author":{"gitId":"-"},"content":"            session.setOpeningSoonEmailSent("},{"lineNumber":392,"author":{"gitId":"domoberzin"},"content":"                    session.isOpened() || session.isOpeningInHours(NUMBER_OF_HOURS_BEFORE_OPENING_SOON_ALERT));"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"        // reset isClosedEmailSent if the session has closed but is being un-closed"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        // now, or else leave it as sent if so."},{"lineNumber":397,"author":{"gitId":"-"},"content":"        if (session.isClosedEmailSent()) {"},{"lineNumber":398,"author":{"gitId":"-"},"content":"            session.setClosedEmailSent(session.isClosed());"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"            // also reset isClosingSoonEmailSent"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            session.setClosingSoonEmailSent("},{"lineNumber":402,"author":{"gitId":"domoberzin"},"content":"                    session.isClosed() || session.isClosedAfter(NUMBER_OF_HOURS_BEFORE_CLOSING_ALERT));"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        // reset isPublishedEmailSent if the session has been published but is"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        // going to be unpublished now, or else leave it as sent if so."},{"lineNumber":407,"author":{"gitId":"-"},"content":"        if (session.isPublishedEmailSent()) {"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            session.setPublishedEmailSent(session.isPublished());"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":413,"author":{"gitId":"-"},"content":"     * Criteria: must be published, publishEmail must be enabled and"},{"lineNumber":414,"author":{"gitId":"-"},"content":"     * resultsVisibleTime must be custom."},{"lineNumber":415,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * @return returns a list of sessions that require automated emails to be"},{"lineNumber":417,"author":{"gitId":"-"},"content":"     *         sent as they are published"},{"lineNumber":418,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsWhichNeedAutomatedPublishedEmailsToBeSent() {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessionsToSendEmailsFor \u003d new ArrayList\u003c\u003e();"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingPublishedEmail();"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration: %d\", sessions.size()));"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"            // automated emails are required only for custom publish times"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            if (session.isPublished()"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !TimeHelper.isSpecialTime(session.getResultsVisibleFromTime())"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                    \u0026\u0026 session.getCourse().getDeletedAt() \u003d\u003d null) {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"                sessionsToSendEmailsFor.add(session);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration after filtering: %d\","},{"lineNumber":433,"author":{"gitId":"-"},"content":"                sessionsToSendEmailsFor.size()));"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        return sessionsToSendEmailsFor;"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":438,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that are going to close within the next 24 hours."},{"lineNumber":439,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsClosingWithinTimeLimit() {"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e requiredSessions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingClosingSoonEmail();"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration: %d\", sessions.size()));"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"            if (session.isClosingWithinTimeLimit(NUMBER_OF_HOURS_BEFORE_CLOSING_ALERT)"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                    \u0026\u0026 session.getCourse().getDeletedAt() \u003d\u003d null) {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"                requiredSessions.add(session);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":450,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration after filtering: %d\","},{"lineNumber":453,"author":{"gitId":"-"},"content":"                requiredSessions.size()));"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        return requiredSessions;"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":458,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that are going to open in 24 hours."},{"lineNumber":459,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsOpeningWithinTimeLimit() {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e requiredSessions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingOpeningSoonEmail();"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration: %d\", sessions.size()));"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":466,"author":{"gitId":"-"},"content":"            if (session.isOpeningWithinTimeLimit(NUMBER_OF_HOURS_BEFORE_OPENING_SOON_ALERT)"},{"lineNumber":467,"author":{"gitId":"-"},"content":"                    \u0026\u0026 session.getCourse().getDeletedAt() \u003d\u003d null) {"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                requiredSessions.add(session);"},{"lineNumber":469,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration after filtering: %d\","},{"lineNumber":473,"author":{"gitId":"-"},"content":"                requiredSessions.size()));"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        return requiredSessions;"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":478,"author":{"gitId":"-"},"content":"     * Returns a list of sessions that were closed within past hour."},{"lineNumber":479,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsClosedWithinThePastHour() {"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e requiredSessions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingClosedEmail();"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration: %d\", sessions.size()));"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"            // is session closed in the past 1 hour"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            if (session.isClosedWithinPastHour()"},{"lineNumber":488,"author":{"gitId":"-"},"content":"                    \u0026\u0026 session.getCourse().getDeletedAt() \u003d\u003d null) {"},{"lineNumber":489,"author":{"gitId":"-"},"content":"                requiredSessions.add(session);"},{"lineNumber":490,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration after filtering: %d\","},{"lineNumber":493,"author":{"gitId":"-"},"content":"                requiredSessions.size()));"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        return requiredSessions;"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":498,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted feedback sessions which start within the last 2 hours"},{"lineNumber":499,"author":{"gitId":"-"},"content":"     * and need an open email to be sent."},{"lineNumber":500,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsWhichNeedOpenEmailsToBeSent() {"},{"lineNumber":502,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessionsToSendEmailsFor \u003d new ArrayList\u003c\u003e();"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        List\u003cFeedbackSession\u003e sessions \u003d fsDb.getFeedbackSessionsPossiblyNeedingOpenEmail();"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration: %d\", sessions.size()));"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"        for (FeedbackSession session : sessions) {"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            if (session.isOpened() \u0026\u0026 session.getCourse().getDeletedAt() \u003d\u003d null) {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"                sessionsToSendEmailsFor.add(session);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":510,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"        log.info(String.format(\"Number of sessions under consideration after filtering: %d\","},{"lineNumber":513,"author":{"gitId":"-"},"content":"                sessionsToSendEmailsFor.size()));"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        return sessionsToSendEmailsFor;"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":516,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":517,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":518,"author":{"gitId":"domoberzin"},"content":"     * Gets the expected number of submissions for a feedback session."},{"lineNumber":519,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":520,"author":{"gitId":"domoberzin"},"content":"    public int getExpectedTotalSubmission(FeedbackSession fs) {"},{"lineNumber":521,"author":{"gitId":"domoberzin"},"content":"        int expectedTotal \u003d 0;"},{"lineNumber":522,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackQuestion\u003e questions \u003d fqLogic.getFeedbackQuestionsForSession(fs);"},{"lineNumber":523,"author":{"gitId":"domoberzin"},"content":"        if (fqLogic.hasFeedbackQuestionsForStudents(questions)) {"},{"lineNumber":524,"author":{"gitId":"domoberzin"},"content":"            expectedTotal +\u003d usersLogic.getStudentsForCourse(fs.getCourse().getId()).size();"},{"lineNumber":525,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":526,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":527,"author":{"gitId":"domoberzin"},"content":"        // Pre-flight check to ensure there are questions for instructors."},{"lineNumber":528,"author":{"gitId":"domoberzin"},"content":"        if (!fqLogic.hasFeedbackQuestionsForInstructors(questions, true)) {"},{"lineNumber":529,"author":{"gitId":"domoberzin"},"content":"            return expectedTotal;"},{"lineNumber":530,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":531,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":532,"author":{"gitId":"domoberzin"},"content":"        List\u003cInstructor\u003e instructors \u003d usersLogic.getInstructorsForCourse(fs.getCourse().getId());"},{"lineNumber":533,"author":{"gitId":"domoberzin"},"content":"        if (instructors.isEmpty()) {"},{"lineNumber":534,"author":{"gitId":"domoberzin"},"content":"            return expectedTotal;"},{"lineNumber":535,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":536,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":537,"author":{"gitId":"domoberzin"},"content":"        // Check presence of questions for instructors."},{"lineNumber":538,"author":{"gitId":"domoberzin"},"content":"        if (fqLogic.hasFeedbackQuestionsForInstructors(fqLogic.getFeedbackQuestionsForSession(fs), false)) {"},{"lineNumber":539,"author":{"gitId":"domoberzin"},"content":"            expectedTotal +\u003d instructors.size();"},{"lineNumber":540,"author":{"gitId":"domoberzin"},"content":"        } else {"},{"lineNumber":541,"author":{"gitId":"domoberzin"},"content":"            // No questions for instructors. There must be questions for creator."},{"lineNumber":542,"author":{"gitId":"domoberzin"},"content":"            List\u003cInstructor\u003e creators \u003d instructors.stream()"},{"lineNumber":543,"author":{"gitId":"domoberzin"},"content":"                    .filter(instructor -\u003e fs.getCreatorEmail().equals(instructor.getEmail()))"},{"lineNumber":544,"author":{"gitId":"domoberzin"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":545,"author":{"gitId":"domoberzin"},"content":"            expectedTotal +\u003d creators.size();"},{"lineNumber":546,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":547,"author":{"gitId":"domoberzin"},"content":"        return expectedTotal;"},{"lineNumber":548,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":549,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":550,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":551,"author":{"gitId":"domoberzin"},"content":"     * Gets the actual number of submissions for a feedback session."},{"lineNumber":552,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":553,"author":{"gitId":"domoberzin"},"content":"    public int getActualTotalSubmission(FeedbackSession fs) {"},{"lineNumber":554,"author":{"gitId":"domoberzin"},"content":"        return getGiverSetThatAnsweredFeedbackSession(fs).size();"},{"lineNumber":555,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":556,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":65,"-":491}},{"path":"src/main/java/teammates/sqllogic/core/LogicStarter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javax.servlet.ServletContextEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javax.servlet.ServletContextListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.DeadlineExtensionsDb;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackQuestionsDb;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponseCommentsDb;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackResponsesDb;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackSessionsDb;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.NotificationsDb;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsageStatisticsDb;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Setup in web.xml to register logic classes at application startup."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class LogicStarter implements ServletContextListener {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Registers dependencies between different logic classes."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void initializeDependencies() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        AccountRequestsLogic accountRequestsLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DataBundleLogic dataBundleLogic \u003d DataBundleLogic.inst();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        DeadlineExtensionsLogic deadlineExtensionsLogic \u003d DeadlineExtensionsLogic.inst();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        FeedbackResponsesLogic frLogic \u003d FeedbackResponsesLogic.inst();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FeedbackResponseCommentsLogic frcLogic \u003d FeedbackResponseCommentsLogic.inst();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UsageStatisticsLogic usageStatisticsLogic \u003d UsageStatisticsLogic.inst();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        accountRequestsLogic.initLogicDependencies(AccountRequestsDb.inst());"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.initLogicDependencies(AccountsDb.inst(), notificationsLogic, usersLogic, coursesLogic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        coursesLogic.initLogicDependencies(CoursesDb.inst(), fsLogic, usersLogic);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        dataBundleLogic.initLogicDependencies(accountsLogic, accountRequestsLogic, coursesLogic,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                deadlineExtensionsLogic, fsLogic, fqLogic, frLogic, frcLogic,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                notificationsLogic, usersLogic);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        deadlineExtensionsLogic.initLogicDependencies(DeadlineExtensionsDb.inst(), fsLogic);"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        fsLogic.initLogicDependencies(FeedbackSessionsDb.inst(), coursesLogic, frLogic, fqLogic, usersLogic);"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"        frLogic.initLogicDependencies(FeedbackResponsesDb.inst(), usersLogic, fqLogic, frcLogic);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        frcLogic.initLogicDependencies(FeedbackResponseCommentsDb.inst());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        fqLogic.initLogicDependencies(FeedbackQuestionsDb.inst(), coursesLogic, frLogic, usersLogic, fsLogic);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        notificationsLogic.initLogicDependencies(NotificationsDb.inst());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        usageStatisticsLogic.initLogicDependencies(UsageStatisticsDb.inst());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        usersLogic.initLogicDependencies(UsersDb.inst(), accountsLogic, frLogic, frcLogic, deadlineExtensionsLogic);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        log.info(\"Initialized dependencies between logic classes\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void contextInitialized(ServletContextEvent event) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Invoked by Jetty at application startup."},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initializeDependencies();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void contextDestroyed(ServletContextEvent event) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Nothing to do"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":2,"yuanxi1":1,"-":68}},{"path":"src/main/java/teammates/sqllogic/core/UsersLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"marquestye"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import java.util.StringJoiner;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EnrollException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.exception.InstructorUpdateException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.exception.StudentUpdateException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.util.RequestTracer;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.InstructorSearchManager;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.StudentSearchManager;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.ui.request.InstructorCreateRequest;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Handles operations related to user (instructor \u0026 student)."},{"lineNumber":42,"author":{"gitId":"-"},"content":" *"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * @see User"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * @see UsersDb"},{"lineNumber":45,"author":{"gitId":"-"},"content":" */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public final class UsersLogic {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"    static final String ERROR_INVALID_TEAM_NAME \u003d"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"            \"Team \\\"%s\\\" is detected in both Section \\\"%s\\\" and Section \\\"%s\\\".\";"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"    static final String ERROR_INVALID_TEAM_NAME_INSTRUCTION \u003d"},{"lineNumber":51,"author":{"gitId":"domoberzin"},"content":"            \"Please use different team names in different sections.\";"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":"    static final String ERROR_ENROLL_EXCEED_SECTION_LIMIT \u003d"},{"lineNumber":53,"author":{"gitId":"domoberzin"},"content":"            \"You are trying enroll more than %s students in section \\\"%s\\\".\";"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":"    static final String ERROR_ENROLL_EXCEED_SECTION_LIMIT_INSTRUCTION \u003d"},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"            \"To avoid performance problems, please do not enroll more than %s students in a single section.\";"},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final UsersLogic instance \u003d new UsersLogic();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final int MAX_KEY_REGENERATION_TRIES \u003d 10;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private UsersDb usersDb;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private AccountsLogic accountsLogic;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic feedbackResponsesLogic;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsLogic feedbackResponseCommentsLogic;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private DeadlineExtensionsLogic deadlineExtensionsLogic;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private UsersLogic() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static UsersLogic inst() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void initLogicDependencies(UsersDb usersDb, AccountsLogic accountsLogic, FeedbackResponsesLogic feedbackResponsesLogic,"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"                               FeedbackResponseCommentsLogic feedbackResponseCommentsLogic,"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":"                               DeadlineExtensionsLogic deadlineExtensionsLogic) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.usersDb \u003d usersDb;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.accountsLogic \u003d accountsLogic;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.feedbackResponsesLogic \u003d feedbackResponsesLogic;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.feedbackResponseCommentsLogic \u003d feedbackResponseCommentsLogic;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.deadlineExtensionsLogic \u003d deadlineExtensionsLogic;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private InstructorSearchManager getInstructorSearchManager() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorSearchManager();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private StudentSearchManager getStudentSearchManager() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return usersDb.getStudentSearchManager();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Creates or updates search document for the given instructor."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void putInstructorDocument(Instructor instructor) throws SearchServiceException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getInstructorSearchManager().putDocument(instructor);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Creates or updates search document for the given student."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void putStudentDocument(Student student) throws SearchServiceException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        getStudentSearchManager().putDocument(student);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Create an instructor."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @return the created instructor"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException   if the instructor is not valid"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the instructor already exists in the"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *                                      database."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Instructor createInstructor(Instructor instructor)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":121,"author":{"gitId":"mingyuanc"},"content":"        if (getInstructorForEmail(instructor.getCourseId(), instructor.getEmail()) !\u003d null) {"},{"lineNumber":122,"author":{"gitId":"mingyuanc"},"content":"            throw new EntityAlreadyExistsException(\"Instructor already exists.\");"},{"lineNumber":123,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return usersDb.createInstructor(instructor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Updates an instructor and cascades to responses and comments if needed."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @return updated instructor"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the instructor update request is invalid"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws InstructorUpdateException if the update violates instructor validity"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the instructor does not exist in the database"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public Instructor updateInstructorCascade(String courseId, InstructorCreateRequest instructorRequest) throws"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            InvalidParametersException, InstructorUpdateException, EntityDoesNotExistException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Instructor instructor;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String instructorId \u003d instructorRequest.getId();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (instructorId \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            instructor \u003d getInstructorForEmail(courseId, instructorRequest.getEmail());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            instructor \u003d getInstructorByGoogleId(courseId, instructorId);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(\"Trying to update an instructor that does not exist.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        verifyAtLeastOneInstructorIsDisplayed("},{"lineNumber":150,"author":{"gitId":"-"},"content":"                courseId, instructor.isDisplayedToStudents(), instructorRequest.getIsDisplayedToStudent());"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String originalEmail \u003d instructor.getEmail();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        boolean needsCascade \u003d false;"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String newDisplayName \u003d instructorRequest.getDisplayName();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (newDisplayName \u003d\u003d null || newDisplayName.isEmpty()) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            newDisplayName \u003d Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        instructor.setName(SanitizationHelper.sanitizeName(instructorRequest.getName()));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        instructor.setEmail(SanitizationHelper.sanitizeEmail(instructorRequest.getEmail()));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        instructor.setRole(InstructorPermissionRole.getEnum(instructorRequest.getRoleName()));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        instructor.setPrivileges(new InstructorPrivileges(instructorRequest.getRoleName()));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        instructor.setDisplayName(SanitizationHelper.sanitizeName(newDisplayName));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        instructor.setDisplayedToStudents(instructorRequest.getIsDisplayedToStudent());"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String newEmail \u003d instructor.getEmail();"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!originalEmail.equals(newEmail)) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            needsCascade \u003d true;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (!instructor.isValid()) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(instructor.getInvalidityInfo());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        if (needsCascade) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            // cascade responses"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponse\u003e responsesFromUser \u003d"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                    feedbackResponsesLogic.getFeedbackResponsesFromGiverForCourse(courseId, originalEmail);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            for (FeedbackResponse responseFromUser : responsesFromUser) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                FeedbackQuestion question \u003d responseFromUser.getFeedbackQuestion();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                if (question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                        || question.getGiverType() \u003d\u003d FeedbackParticipantType.SELF) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    responseFromUser.setGiver(newEmail);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponse\u003e responsesToUser \u003d"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                    feedbackResponsesLogic.getFeedbackResponsesForRecipientForCourse(courseId, originalEmail);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            for (FeedbackResponse responseToUser : responsesToUser) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                FeedbackQuestion question \u003d responseToUser.getFeedbackQuestion();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                        || question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                        \u0026\u0026 question.getRecipientType() \u003d\u003d FeedbackParticipantType.SELF) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                    responseToUser.setRecipient(newEmail);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            // cascade comments"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            feedbackResponseCommentsLogic.updateFeedbackResponseCommentsEmails(courseId, originalEmail, newEmail);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return instructor;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Verifies that at least one instructor is displayed to studens."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * @throws InstructorUpdateException if there is no instructor displayed to students."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    void verifyAtLeastOneInstructorIsDisplayed(String courseId, boolean isOriginalInstructorDisplayed,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                                               boolean isEditedInstructorDisplayed)"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            throws InstructorUpdateException {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorsDisplayed \u003d usersDb.getInstructorsDisplayedToStudents(courseId);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        boolean isEditedInstructorChangedToNonVisible \u003d isOriginalInstructorDisplayed \u0026\u0026 !isEditedInstructorDisplayed;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        boolean isNoInstructorMadeVisible \u003d instructorsDisplayed.isEmpty() \u0026\u0026 !isEditedInstructorDisplayed;"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        if (isNoInstructorMadeVisible || instructorsDisplayed.size() \u003d\u003d 1 \u0026\u0026 isEditedInstructorChangedToNonVisible) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            throw new InstructorUpdateException(\"At least one instructor must be displayed to students\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Creates a student."},{"lineNumber":224,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * @return the created student"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException   if the student is not valid"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the student already exists in the"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     *                                      database."},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public Student createStudent(Student student) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        return usersDb.createStudent(student);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code id}."},{"lineNumber":236,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * @param id Id of Instructor."},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * @return Returns Instructor if found else null."},{"lineNumber":239,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return usersDb.getInstructor(id);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * Gets the instructor with the specified email."},{"lineNumber":248,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public Instructor getInstructorForEmail(String courseId, String userEmail) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorForEmail(courseId, userEmail);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Gets instructors matching any of the specified emails."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForEmails(String courseId, List\u003cString\u003e userEmails) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorsForEmails(courseId, userEmails);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code regkey}."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegistrationKey(String regKey) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        assert regKey !\u003d null;"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorByRegKey(regKey);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code googleId}."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorByGoogleId(courseId, googleId);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitId":"-"},"content":"     * Searches instructors in the whole system. Used by admin only."},{"lineNumber":281,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * @return List of found instructors in the whole system. Null if no result found."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e searchInstructorsInWholeSystem(String queryString)"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            throws SearchServiceException {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        return usersDb.searchInstructorsInWholeSystem(queryString);"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":290,"author":{"gitId":"-"},"content":"     * Deletes an instructor or student."},{"lineNumber":291,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    public \u003cT extends User\u003e void deleteUser(T user) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        usersDb.deleteUser(user);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitId":"-"},"content":"     * Deletes an instructor and cascades deletion to"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     * associated feedback responses, deadline extensions and comments."},{"lineNumber":299,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":300,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the instructor does not exist."},{"lineNumber":301,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    public void deleteInstructorCascade(String courseId, String email) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d getInstructorForEmail(courseId, email);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        feedbackResponsesLogic.deleteFeedbackResponsesForCourseCascade(courseId, email);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        deadlineExtensionsLogic.deleteDeadlineExtensionsForUser(instructor);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        deleteUser(instructor);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Gets the list of instructors with co-owner privileges in a course."},{"lineNumber":315,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getCoOwnersForCourse(String courseId) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d getInstructorsForCourse(courseId);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorsWithCoOwnerPrivileges \u003d new ArrayList\u003c\u003e();"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            if (!instructor.hasCoownerPrivileges()) {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":323,"author":{"gitId":"-"},"content":"            instructorsWithCoOwnerPrivileges.add(instructor);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        return instructorsWithCoOwnerPrivileges;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":329,"author":{"gitId":"-"},"content":"     * Gets a list of instructors for the specified course."},{"lineNumber":330,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForCourse(String courseId) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructorReturnList \u003d usersDb.getInstructorsForCourse(courseId);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        sortByName(instructorReturnList);"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"        return instructorReturnList;"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * Check if the instructors with the provided emails exist in the course."},{"lineNumber":340,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    public boolean verifyInstructorsExistInCourse(String courseId, List\u003cString\u003e emails) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d usersDb.getInstructorsForEmails(courseId, emails);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Map\u003cString, User\u003e emailInstructorMap \u003d convertUserListToEmailUserMap(instructors);"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        for (String email : emails) {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            if (!emailInstructorMap.containsKey(email)) {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Gets all instructors associated with a googleId."},{"lineNumber":355,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForGoogleId(String googleId) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorsForGoogleId(googleId);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     * Make the instructor join the course, i.e. associate an account to the instructor with the given googleId."},{"lineNumber":363,"author":{"gitId":"-"},"content":"     * Creates an account for the instructor if no existing account is found."},{"lineNumber":364,"author":{"gitId":"-"},"content":"     * Preconditions:"},{"lineNumber":365,"author":{"gitId":"-"},"content":"     * Parameters regkey and googleId are non-null."},{"lineNumber":366,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the instructor already exists in the database."},{"lineNumber":367,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the instructor parameters are not valid"},{"lineNumber":368,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    public Instructor joinCourseForInstructor(String googleId, Instructor instructor)"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        if (googleId \u003d\u003d null) {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Instructor\u0027s googleId cannot be null\");"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(\"Instructor cannot be null\");"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"        // setting account for instructor sets it as registered"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        if (instructor.getAccount() \u003d\u003d null) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"            Account dbAccount \u003d accountsLogic.getAccountForGoogleId(googleId);"},{"lineNumber":381,"author":{"gitId":"-"},"content":"            if (dbAccount !\u003d null) {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                instructor.setAccount(dbAccount);"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                Account account \u003d new Account(googleId, instructor.getName(), instructor.getEmail());"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                instructor.setAccount(account);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"                accountsLogic.createAccount(account);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            instructor.setGoogleId(googleId);"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        usersDb.updateUser(instructor);"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"        // Update the googleId of the student entity for the instructor which was created from sample data."},{"lineNumber":394,"author":{"gitId":"-"},"content":"        Student student \u003d getStudentForEmail(instructor.getCourseId(), instructor.getEmail());"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        if (student !\u003d null) {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            if (student.getAccount() \u003d\u003d null) {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                Account account \u003d new Account(googleId, student.getName(), student.getEmail());"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                student.setAccount(account);"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"                student.getAccount().setGoogleId(googleId);"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            usersDb.updateUser(student);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        return instructor;"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":409,"author":{"gitId":"-"},"content":"     * Regenerates the registration key for the instructor with email address {@code email} in course {@code courseId}."},{"lineNumber":410,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":411,"author":{"gitId":"-"},"content":"     * @return the instructor with the new registration key."},{"lineNumber":412,"author":{"gitId":"-"},"content":"     * @throws InstructorUpdateException if system was unable to generate a new registration key."},{"lineNumber":413,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the instructor does not exist."},{"lineNumber":414,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    public Instructor regenerateInstructorRegistrationKey(String courseId, String email)"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InstructorUpdateException {"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d getInstructorForEmail(courseId, email);"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            String errorMessage \u003d String.format("},{"lineNumber":420,"author":{"gitId":"-"},"content":"                    \"The instructor with the email %s could not be found for the course with ID [%s].\", email, courseId);"},{"lineNumber":421,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(errorMessage);"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"        String oldKey \u003d instructor.getRegKey();"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        int numTries \u003d 0;"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        while (numTries \u003c MAX_KEY_REGENERATION_TRIES) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            instructor.generateNewRegistrationKey();"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            if (!instructor.getRegKey().equals(oldKey)) {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"                return instructor;"},{"lineNumber":430,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            numTries++;"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"        throw new InstructorUpdateException(\"Could not regenerate a new course registration key for the instructor.\");"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":438,"author":{"gitId":"-"},"content":"     * Regenerates the registration key for the student with email address {@code email} in course {@code courseId}."},{"lineNumber":439,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":440,"author":{"gitId":"-"},"content":"     * @return the student with the new registration key."},{"lineNumber":441,"author":{"gitId":"-"},"content":"     * @throws StudentUpdateException if system was unable to generate a new registration key."},{"lineNumber":442,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the student does not exist."},{"lineNumber":443,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    public Student regenerateStudentRegistrationKey(String courseId, String email)"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, StudentUpdateException {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        Student student \u003d getStudentForEmail(courseId, email);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"            String errorMessage \u003d String.format("},{"lineNumber":449,"author":{"gitId":"-"},"content":"                    \"The student with the email %s could not be found for the course with ID [%s].\", email, courseId);"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(errorMessage);"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"        String oldKey \u003d student.getRegKey();"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        int numTries \u003d 0;"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        while (numTries \u003c MAX_KEY_REGENERATION_TRIES) {"},{"lineNumber":456,"author":{"gitId":"-"},"content":"            student.generateNewRegistrationKey();"},{"lineNumber":457,"author":{"gitId":"-"},"content":"            if (!student.getRegKey().equals(oldKey)) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"                return student;"},{"lineNumber":459,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":460,"author":{"gitId":"-"},"content":"            numTries++;"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"        throw new StudentUpdateException(\"Could not regenerate a new course registration key for the student.\");"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":467,"author":{"gitId":"-"},"content":"     * Returns true if the user associated with the googleId is an instructor in any course in the system."},{"lineNumber":468,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":469,"author":{"gitId":"-"},"content":"    public boolean isInstructorInAnyCourse(String googleId) {"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        return !usersDb.getAllInstructorsByGoogleId(googleId).isEmpty();"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":474,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code id}."},{"lineNumber":475,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":476,"author":{"gitId":"-"},"content":"     * @param id Id of Student."},{"lineNumber":477,"author":{"gitId":"-"},"content":"     * @return Returns Student if found else null."},{"lineNumber":478,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":479,"author":{"gitId":"-"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"        return usersDb.getStudent(id);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":486,"author":{"gitId":"-"},"content":"     * Gets the student with the specified email."},{"lineNumber":487,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    public Student getStudentForEmail(String courseId, String userEmail) {"},{"lineNumber":489,"author":{"gitId":"-"},"content":"        return usersDb.getStudentForEmail(courseId, userEmail);"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":493,"author":{"gitId":"-"},"content":"     * Check if the students with the provided emails exist in the course."},{"lineNumber":494,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    public boolean verifyStudentsExistInCourse(String courseId, List\u003cString\u003e emails) {"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d usersDb.getStudentsForEmails(courseId, emails);"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        Map\u003cString, User\u003e emailStudentMap \u003d convertUserListToEmailUserMap(students);"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"        for (String email : emails) {"},{"lineNumber":500,"author":{"gitId":"-"},"content":"            if (!emailStudentMap.containsKey(email)) {"},{"lineNumber":501,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":502,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":505,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":508,"author":{"gitId":"-"},"content":"     * Gets a list of students with the specified email."},{"lineNumber":509,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getAllStudentsForEmail(String email) {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"        return usersDb.getAllStudentsForEmail(email);"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":513,"author":{"gitId":"-"},"content":""},{"lineNumber":514,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":515,"author":{"gitId":"-"},"content":"     * Gets all students associated with a googleId."},{"lineNumber":516,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getAllStudentsByGoogleId(String googleId) {"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        return usersDb.getAllStudentsByGoogleId(googleId);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":522,"author":{"gitId":"-"},"content":"     * Gets a list of students for the specified course."},{"lineNumber":523,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":524,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForCourse(String courseId) {"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentReturnList \u003d usersDb.getStudentsForCourse(courseId);"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        sortByName(studentReturnList);"},{"lineNumber":527,"author":{"gitId":"-"},"content":""},{"lineNumber":528,"author":{"gitId":"-"},"content":"        return studentReturnList;"},{"lineNumber":529,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":530,"author":{"gitId":"-"},"content":""},{"lineNumber":531,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":532,"author":{"gitId":"-"},"content":"     * Gets a list of unregistered students for the specified course."},{"lineNumber":533,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":534,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getUnregisteredStudentsForCourse(String courseId) {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e students \u003d getStudentsForCourse(courseId);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e unregisteredStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"        for (Student s : students) {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"            if (s.getAccount() \u003d\u003d null) {"},{"lineNumber":540,"author":{"gitId":"-"},"content":"                unregisteredStudents.add(s);"},{"lineNumber":541,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":543,"author":{"gitId":"-"},"content":""},{"lineNumber":544,"author":{"gitId":"-"},"content":"        return unregisteredStudents;"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":546,"author":{"gitId":"-"},"content":""},{"lineNumber":547,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":548,"author":{"gitId":"yuanxi1"},"content":"     * Searches for students."},{"lineNumber":549,"author":{"gitId":"yuanxi1"},"content":"     *"},{"lineNumber":550,"author":{"gitId":"yuanxi1"},"content":"     * @param instructors the constraint that restricts the search result"},{"lineNumber":551,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":552,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudents(String queryString, List\u003cInstructor\u003e instructors)"},{"lineNumber":553,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":554,"author":{"gitId":"yuanxi1"},"content":"        return usersDb.searchStudents(queryString, instructors);"},{"lineNumber":555,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":556,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":557,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":558,"author":{"gitId":"yuanxi1"},"content":"     * This method should be used by admin only since the searching does not restrict the"},{"lineNumber":559,"author":{"gitId":"yuanxi1"},"content":"     * visibility according to the logged-in user\u0027s google ID. This is used by admin to"},{"lineNumber":560,"author":{"gitId":"yuanxi1"},"content":"     * search students in the whole system."},{"lineNumber":561,"author":{"gitId":"yuanxi1"},"content":"     * @return null if no result found"},{"lineNumber":562,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":563,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudentsInWholeSystem(String queryString)"},{"lineNumber":564,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":565,"author":{"gitId":"yuanxi1"},"content":"        return usersDb.searchStudentsInWholeSystem(queryString);"},{"lineNumber":566,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":567,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":569,"author":{"gitId":"-"},"content":"     * Gets all students of a section."},{"lineNumber":570,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":571,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForSection(String sectionName, String courseId) {"},{"lineNumber":572,"author":{"gitId":"-"},"content":"        return usersDb.getStudentsForSection(sectionName, courseId);"},{"lineNumber":573,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":576,"author":{"gitId":"-"},"content":"     * Gets all students of a team."},{"lineNumber":577,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":578,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForTeam(String teamName, String courseId) {"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        return usersDb.getStudentsForTeam(teamName, courseId);"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":581,"author":{"gitId":"-"},"content":""},{"lineNumber":582,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":583,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code regkey}."},{"lineNumber":584,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":585,"author":{"gitId":"-"},"content":"    public Student getStudentByRegistrationKey(String regKey) {"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        assert regKey !\u003d null;"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":"        return usersDb.getStudentByRegKey(regKey);"},{"lineNumber":589,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":592,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code googleId}."},{"lineNumber":593,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":594,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"        return usersDb.getStudentByGoogleId(courseId, googleId);"},{"lineNumber":599,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":600,"author":{"gitId":"-"},"content":""},{"lineNumber":601,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":602,"author":{"gitId":"-"},"content":"     * Gets all students associated with a googleId."},{"lineNumber":603,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":604,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsByGoogleId(String googleId) {"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"        return usersDb.getStudentsByGoogleId(googleId);"},{"lineNumber":608,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":609,"author":{"gitId":"-"},"content":""},{"lineNumber":610,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":611,"author":{"gitId":"-"},"content":"     * Returns true if the user associated with the googleId is a student in any"},{"lineNumber":612,"author":{"gitId":"-"},"content":"     * course in the system."},{"lineNumber":613,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":614,"author":{"gitId":"-"},"content":"    public boolean isStudentInAnyCourse(String googleId) {"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        return !usersDb.getAllStudentsByGoogleId(googleId).isEmpty();"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":619,"author":{"gitId":"-"},"content":"     * Gets all instructors and students by {@code googleId}."},{"lineNumber":620,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    public List\u003cUser\u003e getAllUsersByGoogleId(String googleId) {"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"        return usersDb.getAllUsersByGoogleId(googleId);"},{"lineNumber":625,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":628,"author":{"gitId":"domoberzin"},"content":"     * Gets the section with the name in a particular course."},{"lineNumber":629,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":630,"author":{"gitId":"domoberzin"},"content":"    public Section getSection(String courseId, String sectionName) {"},{"lineNumber":631,"author":{"gitId":"domoberzin"},"content":"        return usersDb.getSection(courseId, sectionName);"},{"lineNumber":632,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":633,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":634,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":635,"author":{"gitId":"domoberzin"},"content":"     * Gets the section with the name in a particular course, otherwise creates a new section."},{"lineNumber":636,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":637,"author":{"gitId":"domoberzin"},"content":"    public Section getSectionOrCreate(String courseId, String sectionName) {"},{"lineNumber":638,"author":{"gitId":"domoberzin"},"content":"        return usersDb.getSectionOrCreate(courseId, sectionName);"},{"lineNumber":639,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":640,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":641,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":642,"author":{"gitId":"domoberzin"},"content":"     * Gets the team with the name in a particular session, otherwise creates a new team."},{"lineNumber":643,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":644,"author":{"gitId":"domoberzin"},"content":"    public Team getTeamOrCreate(Section section, String teamName) {"},{"lineNumber":645,"author":{"gitId":"domoberzin"},"content":"        return usersDb.getTeamOrCreate(section, teamName);"},{"lineNumber":646,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":647,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":648,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":649,"author":{"gitId":"-"},"content":"     * Checks if there are any other registered instructors that can modify instructors."},{"lineNumber":650,"author":{"gitId":"-"},"content":"     * If there are none, the instructor currently being edited will be granted the privilege"},{"lineNumber":651,"author":{"gitId":"-"},"content":"     * of modifying instructors automatically."},{"lineNumber":652,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":653,"author":{"gitId":"-"},"content":"     * @param courseId         Id of the course."},{"lineNumber":654,"author":{"gitId":"-"},"content":"     * @param instructorToEdit Instructor that will be edited."},{"lineNumber":655,"author":{"gitId":"-"},"content":"     *                         This may be modified within the method."},{"lineNumber":656,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":657,"author":{"gitId":"-"},"content":"    public void updateToEnsureValidityOfInstructorsForTheCourse(String courseId, Instructor instructorToEdit) {"},{"lineNumber":658,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors \u003d getInstructorsForCourse(courseId);"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        int numOfInstrCanModifyInstructor \u003d 0;"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        Instructor instrWithModifyInstructorPrivilege \u003d null;"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":662,"author":{"gitId":"-"},"content":"            if (instructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR)) {"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                numOfInstrCanModifyInstructor++;"},{"lineNumber":664,"author":{"gitId":"-"},"content":"                instrWithModifyInstructorPrivilege \u003d instructor;"},{"lineNumber":665,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":667,"author":{"gitId":"-"},"content":"        boolean isLastRegInstructorWithPrivilege \u003d numOfInstrCanModifyInstructor \u003c\u003d 1"},{"lineNumber":668,"author":{"gitId":"-"},"content":"                \u0026\u0026 instrWithModifyInstructorPrivilege !\u003d null"},{"lineNumber":669,"author":{"gitId":"-"},"content":"                \u0026\u0026 (!instrWithModifyInstructorPrivilege.isRegistered()"},{"lineNumber":670,"author":{"gitId":"-"},"content":"                || instrWithModifyInstructorPrivilege.getGoogleId()"},{"lineNumber":671,"author":{"gitId":"-"},"content":"                .equals(instructorToEdit.getGoogleId()));"},{"lineNumber":672,"author":{"gitId":"-"},"content":"        if (isLastRegInstructorWithPrivilege) {"},{"lineNumber":673,"author":{"gitId":"-"},"content":"            instructorToEdit.getPrivileges().updatePrivilege(Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR, true);"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":675,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":678,"author":{"gitId":"-"},"content":"     * Deletes a student along with its associated feedback responses, deadline extensions and comments."},{"lineNumber":679,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":680,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if the student does not exist."},{"lineNumber":681,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":682,"author":{"gitId":"-"},"content":"    public void deleteStudentCascade(String courseId, String studentEmail) {"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        Student student \u003d getStudentForEmail(courseId, studentEmail);"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":686,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"        feedbackResponsesLogic"},{"lineNumber":690,"author":{"gitId":"-"},"content":"                .deleteFeedbackResponsesForCourseCascade(courseId, studentEmail);"},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":"        if (usersDb.getStudentCountForTeam(student.getTeamName(), student.getCourseId()) \u003d\u003d 1) {"},{"lineNumber":693,"author":{"gitId":"-"},"content":"            // the student is the only student in the team, delete responses related to the team"},{"lineNumber":694,"author":{"gitId":"-"},"content":"            feedbackResponsesLogic"},{"lineNumber":695,"author":{"gitId":"-"},"content":"                    .deleteFeedbackResponsesForCourseCascade("},{"lineNumber":696,"author":{"gitId":"-"},"content":"                            student.getCourse().getId(), student.getTeamName());"},{"lineNumber":697,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"        deadlineExtensionsLogic.deleteDeadlineExtensionsForUser(student);"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        deleteUser(student);"},{"lineNumber":701,"author":{"gitId":"-"},"content":"        feedbackResponsesLogic.updateRankRecipientQuestionResponsesAfterDeletingStudent(courseId);"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":705,"author":{"gitId":"-"},"content":"     * Deletes students in the course cascade their associated responses, deadline extensions, and comments."},{"lineNumber":706,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":707,"author":{"gitId":"-"},"content":"    public void deleteStudentsInCourseCascade(String courseId) {"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentsInCourse \u003d getStudentsForCourse(courseId);"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"        for (Student student : studentsInCourse) {"},{"lineNumber":711,"author":{"gitId":"-"},"content":"            RequestTracer.checkRemainingTime();"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            deleteStudentCascade(courseId, student.getEmail());"},{"lineNumber":713,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":714,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":715,"author":{"gitId":"-"},"content":""},{"lineNumber":716,"author":{"gitId":"marquestye"},"content":"    private boolean isEmailChanged(String originalEmail, String newEmail) {"},{"lineNumber":717,"author":{"gitId":"marquestye"},"content":"        return newEmail !\u003d null \u0026\u0026 !originalEmail.equals(newEmail);"},{"lineNumber":718,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":719,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":720,"author":{"gitId":"domoberzin"},"content":"    private boolean isTeamChanged(Team originalTeam, Team newTeam) {"},{"lineNumber":721,"author":{"gitId":"domoberzin"},"content":"        return newTeam !\u003d null \u0026\u0026 originalTeam !\u003d null"},{"lineNumber":722,"author":{"gitId":"domoberzin"},"content":"                \u0026\u0026 !originalTeam.equals(newTeam);"},{"lineNumber":723,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":724,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":725,"author":{"gitId":"domoberzin"},"content":"    private boolean isSectionChanged(Section originalSection, Section newSection) {"},{"lineNumber":726,"author":{"gitId":"domoberzin"},"content":"        return newSection !\u003d null \u0026\u0026 originalSection !\u003d null"},{"lineNumber":727,"author":{"gitId":"domoberzin"},"content":"                \u0026\u0026 !originalSection.equals(newSection);"},{"lineNumber":728,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":729,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":730,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":731,"author":{"gitId":"domoberzin"},"content":"     * Updates a student by {@link Student}."},{"lineNumber":732,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":733,"author":{"gitId":"marquestye"},"content":"     * \u003cp\u003eIf email changed, update by recreating the student and cascade update all responses"},{"lineNumber":734,"author":{"gitId":"marquestye"},"content":"     * and comments the student gives/receives."},{"lineNumber":735,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":736,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eIf team changed, cascade delete all responses the student gives/receives within that team."},{"lineNumber":737,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":738,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eIf section changed, cascade update all responses the student gives/receives."},{"lineNumber":739,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":740,"author":{"gitId":"domoberzin"},"content":"     * @return updated student"},{"lineNumber":741,"author":{"gitId":"domoberzin"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":742,"author":{"gitId":"domoberzin"},"content":"     * @throws EntityDoesNotExistException if the student cannot be found"},{"lineNumber":743,"author":{"gitId":"domoberzin"},"content":"     * @throws EntityAlreadyExistsException if the student cannot be updated"},{"lineNumber":744,"author":{"gitId":"domoberzin"},"content":"     *         by recreation because of an existent student"},{"lineNumber":745,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":746,"author":{"gitId":"domoberzin"},"content":"    public Student updateStudentCascade(Student student)"},{"lineNumber":747,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":748,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":749,"author":{"gitId":"marquestye"},"content":"        String courseId \u003d student.getCourseId();"},{"lineNumber":750,"author":{"gitId":"marquestye"},"content":"        Student originalStudent \u003d getStudent(student.getId());"},{"lineNumber":751,"author":{"gitId":"marquestye"},"content":"        String originalEmail \u003d originalStudent.getEmail();"},{"lineNumber":752,"author":{"gitId":"marquestye"},"content":"        boolean changedEmail \u003d isEmailChanged(originalEmail, student.getEmail());"},{"lineNumber":753,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":754,"author":{"gitId":"marquestye"},"content":"        // check for email conflict"},{"lineNumber":755,"author":{"gitId":"marquestye"},"content":"        Student s \u003d usersDb.getStudentForEmail(courseId, student.getEmail());"},{"lineNumber":756,"author":{"gitId":"marquestye"},"content":"        if (changedEmail \u0026\u0026 s !\u003d null) {"},{"lineNumber":757,"author":{"gitId":"marquestye"},"content":"            String errorMessage \u003d String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, s.toString());"},{"lineNumber":758,"author":{"gitId":"marquestye"},"content":"            throw new EntityAlreadyExistsException(errorMessage);"},{"lineNumber":759,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":760,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":761,"author":{"gitId":"domoberzin"},"content":"        Team originalTeam \u003d originalStudent.getTeam();"},{"lineNumber":762,"author":{"gitId":"domoberzin"},"content":"        Section originalSection \u003d originalStudent.getSection();"},{"lineNumber":763,"author":{"gitId":"domoberzin"},"content":"        boolean changedTeam \u003d isTeamChanged(originalTeam, student.getTeam());"},{"lineNumber":764,"author":{"gitId":"domoberzin"},"content":"        boolean changedSection \u003d isSectionChanged(originalSection, student.getSection());"},{"lineNumber":765,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":766,"author":{"gitId":"marquestye"},"content":"        // update student"},{"lineNumber":767,"author":{"gitId":"marquestye"},"content":"        usersDb.checkBeforeUpdateStudent(student);"},{"lineNumber":768,"author":{"gitId":"domoberzin"},"content":"        originalStudent.setName(student.getName());"},{"lineNumber":769,"author":{"gitId":"domoberzin"},"content":"        originalStudent.setTeam(student.getTeam());"},{"lineNumber":770,"author":{"gitId":"domoberzin"},"content":"        originalStudent.setEmail(student.getEmail());"},{"lineNumber":771,"author":{"gitId":"domoberzin"},"content":"        originalStudent.setComments(student.getComments());"},{"lineNumber":772,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":773,"author":{"gitId":"marquestye"},"content":"        // cascade email changes to responses and comments"},{"lineNumber":774,"author":{"gitId":"marquestye"},"content":"        if (changedEmail) {"},{"lineNumber":775,"author":{"gitId":"marquestye"},"content":"            feedbackResponsesLogic.updateFeedbackResponsesForChangingEmail(courseId, originalEmail, student.getEmail());"},{"lineNumber":776,"author":{"gitId":"marquestye"},"content":"            feedbackResponseCommentsLogic.updateFeedbackResponseCommentsEmails(courseId, originalEmail, student.getEmail());"},{"lineNumber":777,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":778,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":779,"author":{"gitId":"domoberzin"},"content":"        // adjust submissions if moving to a different team"},{"lineNumber":780,"author":{"gitId":"domoberzin"},"content":"        if (changedTeam) {"},{"lineNumber":781,"author":{"gitId":"marquestye"},"content":"            feedbackResponsesLogic.updateFeedbackResponsesForChangingTeam(student.getCourse(), student.getEmail(),"},{"lineNumber":782,"author":{"gitId":"marquestye"},"content":"                    student.getTeam(), originalTeam);"},{"lineNumber":783,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":784,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":785,"author":{"gitId":"domoberzin"},"content":"        // update the new section name in responses"},{"lineNumber":786,"author":{"gitId":"domoberzin"},"content":"        if (changedSection) {"},{"lineNumber":787,"author":{"gitId":"domoberzin"},"content":"            feedbackResponsesLogic.updateFeedbackResponsesForChangingSection("},{"lineNumber":788,"author":{"gitId":"marquestye"},"content":"                    student.getCourse(), student.getEmail(), student.getSection());"},{"lineNumber":789,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":790,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":791,"author":{"gitId":"marquestye"},"content":"        return originalStudent;"},{"lineNumber":792,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":793,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":794,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":795,"author":{"gitId":"-"},"content":"     * Resets the googleId associated with the instructor."},{"lineNumber":796,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":797,"author":{"gitId":"-"},"content":"    public void resetInstructorGoogleId(String email, String courseId, String googleId)"},{"lineNumber":798,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":800,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":801,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":802,"author":{"gitId":"-"},"content":""},{"lineNumber":803,"author":{"gitId":"-"},"content":"        Instructor instructor \u003d getInstructorForEmail(courseId, email);"},{"lineNumber":804,"author":{"gitId":"-"},"content":""},{"lineNumber":805,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":806,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT"},{"lineNumber":807,"author":{"gitId":"-"},"content":"                    + \"Instructor [courseId\u003d\" + courseId + \", email\u003d\" + email + \"]\");"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":809,"author":{"gitId":"-"},"content":""},{"lineNumber":810,"author":{"gitId":"-"},"content":"        instructor.setAccount(null);"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"        if (usersDb.getAllUsersByGoogleId(googleId).isEmpty()) {"},{"lineNumber":813,"author":{"gitId":"-"},"content":"            accountsLogic.deleteAccountCascade(googleId);"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":815,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":816,"author":{"gitId":"-"},"content":""},{"lineNumber":817,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":818,"author":{"gitId":"domoberzin"},"content":"     * Validates sections for any limit violations and teams for any team name violations."},{"lineNumber":819,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":820,"author":{"gitId":"domoberzin"},"content":"    public void validateSectionsAndTeams("},{"lineNumber":821,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudent\u003e studentList, String courseId) throws EnrollException {"},{"lineNumber":822,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":823,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudent\u003e mergedList \u003d getMergedList(studentList, courseId);"},{"lineNumber":824,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":825,"author":{"gitId":"domoberzin"},"content":"        if (mergedList.size() \u003c 2) { // no conflicts"},{"lineNumber":826,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":827,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":828,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":829,"author":{"gitId":"domoberzin"},"content":"        String errorMessage \u003d getSectionInvalidityInfo(mergedList) + getTeamInvalidityInfo(mergedList);"},{"lineNumber":830,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":831,"author":{"gitId":"domoberzin"},"content":"        if (!errorMessage.isEmpty()) {"},{"lineNumber":832,"author":{"gitId":"domoberzin"},"content":"            throw new EnrollException(errorMessage);"},{"lineNumber":833,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":834,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":835,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":836,"author":{"gitId":"domoberzin"},"content":"    private List\u003cStudent\u003e getMergedList(List\u003cStudent\u003e studentList, String courseId) {"},{"lineNumber":837,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":838,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudent\u003e mergedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":839,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudent\u003e studentsInCourse \u003d getStudentsForCourse(courseId);"},{"lineNumber":840,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":841,"author":{"gitId":"domoberzin"},"content":"        for (Student student : studentList) {"},{"lineNumber":842,"author":{"gitId":"domoberzin"},"content":"            mergedList.add(student);"},{"lineNumber":843,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":844,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":845,"author":{"gitId":"domoberzin"},"content":"        for (Student student : studentsInCourse) {"},{"lineNumber":846,"author":{"gitId":"domoberzin"},"content":"            if (!isInEnrollList(student, mergedList)) {"},{"lineNumber":847,"author":{"gitId":"domoberzin"},"content":"                mergedList.add(student);"},{"lineNumber":848,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":849,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":850,"author":{"gitId":"domoberzin"},"content":"        return mergedList;"},{"lineNumber":851,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":852,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":853,"author":{"gitId":"domoberzin"},"content":"    private String getSectionInvalidityInfo(List\u003cStudent\u003e mergedList) {"},{"lineNumber":854,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":855,"author":{"gitId":"domoberzin"},"content":"        mergedList.sort(Comparator.comparing((Student student) -\u003e student.getSectionName())"},{"lineNumber":856,"author":{"gitId":"domoberzin"},"content":"                .thenComparing(student -\u003e student.getTeamName())"},{"lineNumber":857,"author":{"gitId":"domoberzin"},"content":"                .thenComparing(student -\u003e student.getName()));"},{"lineNumber":858,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":859,"author":{"gitId":"domoberzin"},"content":"        List\u003cString\u003e invalidSectionList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":860,"author":{"gitId":"domoberzin"},"content":"        int studentsCount \u003d 1;"},{"lineNumber":861,"author":{"gitId":"domoberzin"},"content":"        for (int i \u003d 1; i \u003c mergedList.size(); i++) {"},{"lineNumber":862,"author":{"gitId":"domoberzin"},"content":"            Student currentStudent \u003d mergedList.get(i);"},{"lineNumber":863,"author":{"gitId":"domoberzin"},"content":"            Student previousStudent \u003d mergedList.get(i - 1);"},{"lineNumber":864,"author":{"gitId":"domoberzin"},"content":"            if (currentStudent.getSectionName().equals(previousStudent.getSectionName())) {"},{"lineNumber":865,"author":{"gitId":"domoberzin"},"content":"                studentsCount++;"},{"lineNumber":866,"author":{"gitId":"domoberzin"},"content":"            } else {"},{"lineNumber":867,"author":{"gitId":"domoberzin"},"content":"                if (studentsCount \u003e Const.SECTION_SIZE_LIMIT) {"},{"lineNumber":868,"author":{"gitId":"domoberzin"},"content":"                    invalidSectionList.add(previousStudent.getSectionName());"},{"lineNumber":869,"author":{"gitId":"domoberzin"},"content":"                }"},{"lineNumber":870,"author":{"gitId":"domoberzin"},"content":"                studentsCount \u003d 1;"},{"lineNumber":871,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":872,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":873,"author":{"gitId":"domoberzin"},"content":"            if (i \u003d\u003d mergedList.size() - 1 \u0026\u0026 studentsCount \u003e Const.SECTION_SIZE_LIMIT) {"},{"lineNumber":874,"author":{"gitId":"domoberzin"},"content":"                invalidSectionList.add(currentStudent.getSectionName());"},{"lineNumber":875,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":876,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":877,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":878,"author":{"gitId":"domoberzin"},"content":"        StringJoiner errorMessage \u003d new StringJoiner(\" \");"},{"lineNumber":879,"author":{"gitId":"domoberzin"},"content":"        for (String section : invalidSectionList) {"},{"lineNumber":880,"author":{"gitId":"domoberzin"},"content":"            errorMessage.add(String.format("},{"lineNumber":881,"author":{"gitId":"domoberzin"},"content":"                    ERROR_ENROLL_EXCEED_SECTION_LIMIT,"},{"lineNumber":882,"author":{"gitId":"domoberzin"},"content":"                    Const.SECTION_SIZE_LIMIT, section));"},{"lineNumber":883,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":884,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":885,"author":{"gitId":"domoberzin"},"content":"        if (!invalidSectionList.isEmpty()) {"},{"lineNumber":886,"author":{"gitId":"domoberzin"},"content":"            errorMessage.add(String.format("},{"lineNumber":887,"author":{"gitId":"domoberzin"},"content":"                    ERROR_ENROLL_EXCEED_SECTION_LIMIT_INSTRUCTION,"},{"lineNumber":888,"author":{"gitId":"domoberzin"},"content":"                    Const.SECTION_SIZE_LIMIT));"},{"lineNumber":889,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":890,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":891,"author":{"gitId":"domoberzin"},"content":"        return errorMessage.toString();"},{"lineNumber":892,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":893,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":894,"author":{"gitId":"domoberzin"},"content":"    private String getTeamInvalidityInfo(List\u003cStudent\u003e mergedList) {"},{"lineNumber":895,"author":{"gitId":"domoberzin"},"content":"        StringJoiner errorMessage \u003d new StringJoiner(\" \");"},{"lineNumber":896,"author":{"gitId":"domoberzin"},"content":"        mergedList.sort(Comparator.comparing((Student student) -\u003e student.getTeamName())"},{"lineNumber":897,"author":{"gitId":"domoberzin"},"content":"                .thenComparing(student -\u003e student.getName()));"},{"lineNumber":898,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":899,"author":{"gitId":"domoberzin"},"content":"        List\u003cString\u003e invalidTeamList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":900,"author":{"gitId":"domoberzin"},"content":"        for (int i \u003d 1; i \u003c mergedList.size(); i++) {"},{"lineNumber":901,"author":{"gitId":"domoberzin"},"content":"            Student currentStudent \u003d mergedList.get(i);"},{"lineNumber":902,"author":{"gitId":"domoberzin"},"content":"            Student previousStudent \u003d mergedList.get(i - 1);"},{"lineNumber":903,"author":{"gitId":"domoberzin"},"content":"            if (currentStudent.getTeamName().equals(previousStudent.getTeamName())"},{"lineNumber":904,"author":{"gitId":"domoberzin"},"content":"                    \u0026\u0026 !currentStudent.getSectionName().equals(previousStudent.getSectionName())"},{"lineNumber":905,"author":{"gitId":"domoberzin"},"content":"                    \u0026\u0026 !invalidTeamList.contains(currentStudent.getTeamName())) {"},{"lineNumber":906,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":907,"author":{"gitId":"domoberzin"},"content":"                errorMessage.add(String.format(ERROR_INVALID_TEAM_NAME,"},{"lineNumber":908,"author":{"gitId":"domoberzin"},"content":"                        currentStudent.getTeamName(),"},{"lineNumber":909,"author":{"gitId":"domoberzin"},"content":"                        previousStudent.getSectionName(),"},{"lineNumber":910,"author":{"gitId":"domoberzin"},"content":"                        currentStudent.getSectionName()));"},{"lineNumber":911,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":912,"author":{"gitId":"domoberzin"},"content":"                invalidTeamList.add(currentStudent.getTeamName());"},{"lineNumber":913,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":914,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":915,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":916,"author":{"gitId":"domoberzin"},"content":"        if (!invalidTeamList.isEmpty()) {"},{"lineNumber":917,"author":{"gitId":"domoberzin"},"content":"            errorMessage.add(ERROR_INVALID_TEAM_NAME_INSTRUCTION);"},{"lineNumber":918,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":919,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":920,"author":{"gitId":"domoberzin"},"content":"        return errorMessage.toString();"},{"lineNumber":921,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":922,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":923,"author":{"gitId":"domoberzin"},"content":"    private boolean isInEnrollList(Student student,"},{"lineNumber":924,"author":{"gitId":"domoberzin"},"content":"                                   List\u003cStudent\u003e studentInfoList) {"},{"lineNumber":925,"author":{"gitId":"domoberzin"},"content":"        for (Student studentInfo : studentInfoList) {"},{"lineNumber":926,"author":{"gitId":"domoberzin"},"content":"            if (studentInfo.getEmail().equalsIgnoreCase(student.getEmail())) {"},{"lineNumber":927,"author":{"gitId":"domoberzin"},"content":"                return true;"},{"lineNumber":928,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":929,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":930,"author":{"gitId":"domoberzin"},"content":"        return false;"},{"lineNumber":931,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":932,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":933,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":934,"author":{"gitId":"-"},"content":"     * Resets the googleId associated with the student."},{"lineNumber":935,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":936,"author":{"gitId":"-"},"content":"    public void resetStudentGoogleId(String email, String courseId, String googleId)"},{"lineNumber":937,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":939,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":940,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":941,"author":{"gitId":"-"},"content":""},{"lineNumber":942,"author":{"gitId":"-"},"content":"        Student student \u003d getStudentForEmail(courseId, email);"},{"lineNumber":943,"author":{"gitId":"-"},"content":""},{"lineNumber":944,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":945,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT"},{"lineNumber":946,"author":{"gitId":"-"},"content":"                    + \"Student [courseId\u003d\" + courseId + \", email\u003d\" + email + \"]\");"},{"lineNumber":947,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":948,"author":{"gitId":"-"},"content":""},{"lineNumber":949,"author":{"gitId":"-"},"content":"        student.setAccount(null);"},{"lineNumber":950,"author":{"gitId":"-"},"content":""},{"lineNumber":951,"author":{"gitId":"-"},"content":"        if (usersDb.getAllUsersByGoogleId(googleId).isEmpty()) {"},{"lineNumber":952,"author":{"gitId":"-"},"content":"            accountsLogic.deleteAccountCascade(googleId);"},{"lineNumber":953,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":954,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":955,"author":{"gitId":"-"},"content":""},{"lineNumber":956,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":957,"author":{"gitId":"-"},"content":"     * Sorts the instructors list alphabetically by name."},{"lineNumber":958,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":959,"author":{"gitId":"-"},"content":"    public static \u003cT extends User\u003e void sortByName(List\u003cT\u003e users) {"},{"lineNumber":960,"author":{"gitId":"-"},"content":"        users.sort(Comparator.comparing(user -\u003e user.getName().toLowerCase()));"},{"lineNumber":961,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":962,"author":{"gitId":"-"},"content":""},{"lineNumber":963,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":964,"author":{"gitId":"-"},"content":"     * Checks if an instructor with {@code googleId} can create a course with"},{"lineNumber":965,"author":{"gitId":"-"},"content":"     * {@code institute}"},{"lineNumber":966,"author":{"gitId":"-"},"content":"     * (ie. has an existing course(s) with the same {@code institute})."},{"lineNumber":967,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":968,"author":{"gitId":"-"},"content":"    public boolean canInstructorCreateCourse(String googleId, String institute) {"},{"lineNumber":969,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":970,"author":{"gitId":"-"},"content":"        assert institute !\u003d null;"},{"lineNumber":971,"author":{"gitId":"-"},"content":""},{"lineNumber":972,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e existingInstructors \u003d getInstructorsForGoogleId(googleId);"},{"lineNumber":973,"author":{"gitId":"-"},"content":"        return existingInstructors"},{"lineNumber":974,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":975,"author":{"gitId":"-"},"content":"                .filter(Instructor::hasCoownerPrivileges)"},{"lineNumber":976,"author":{"gitId":"-"},"content":"                .map(instructor -\u003e instructor.getCourse())"},{"lineNumber":977,"author":{"gitId":"-"},"content":"                .anyMatch(course -\u003e institute.equals(course.getInstitute()));"},{"lineNumber":978,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":979,"author":{"gitId":"-"},"content":""},{"lineNumber":980,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":981,"author":{"gitId":"-"},"content":"     * Utility function to convert user list to email-user map for faster email lookup."},{"lineNumber":982,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":983,"author":{"gitId":"-"},"content":"     * @param users users list which contains users with unique email addresses"},{"lineNumber":984,"author":{"gitId":"-"},"content":"     * @return email-user map for faster email lookup"},{"lineNumber":985,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":986,"author":{"gitId":"-"},"content":"    private Map\u003cString, User\u003e convertUserListToEmailUserMap(List\u003c? extends User\u003e users) {"},{"lineNumber":987,"author":{"gitId":"-"},"content":"        Map\u003cString, User\u003e emailUserMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":988,"author":{"gitId":"-"},"content":"        users.forEach(u -\u003e emailUserMap.put(u.getEmail(), u));"},{"lineNumber":989,"author":{"gitId":"-"},"content":""},{"lineNumber":990,"author":{"gitId":"-"},"content":"        return emailUserMap;"},{"lineNumber":991,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":992,"author":{"gitId":"-"},"content":""},{"lineNumber":993,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":201,"yuanxi1":21,"marquestye":30,"mingyuanc":3,"-":738}},{"path":"src/main/java/teammates/storage/sqlapi/AccountRequestsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":15,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.AccountRequestSearchManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.SearchManagerFactory;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.TypedQuery;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Generates CRUD operations for AccountRequest."},{"lineNumber":28,"author":{"gitId":"-"},"content":" *"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * @see AccountRequest"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public final class AccountRequestsDb extends EntitiesDb {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final AccountRequestsDb instance \u003d new AccountRequestsDb();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private AccountRequestsDb() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // prevent instantiation"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static AccountRequestsDb inst() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public AccountRequestSearchManager getSearchManager() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return SearchManagerFactory.getAccountRequestSearchManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates an AccountRequest in the database."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AccountRequest createAccountRequest(AccountRequest accountRequest)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assert accountRequest !\u003d null;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!accountRequest.isValid()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(accountRequest.getInvalidityInfo());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // don\u0027t need to check registrationKey for uniqueness since it is generated using email + institute"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()) !\u003d null) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException("},{"lineNumber":60,"author":{"gitId":"-"},"content":"                String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, accountRequest.toString()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        persist(accountRequest);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return accountRequest;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Get AccountRequest by {@code email} and {@code institute} from database."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.and(cb.equal("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                root.get(\"email\"), email), cb.equal(root.get(\"institute\"), institute)));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return query.getResultStream().findFirst().orElse(null);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Get AccountRequest by {@code registrationKey} from database."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":"    public AccountRequest getAccountRequestByRegistrationKey(String registrationKey) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.equal(root.get(\"registrationKey\"), registrationKey));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return query.getResultStream().findFirst().orElse(null);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Get AccountRequest with {@code createdTime} within the times {@code startTime} and {@code endTime}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public List\u003cAccountRequest\u003e getAccountRequests(Instant startTime, Instant endTime) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.and(cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                cb.lessThanOrEqualTo(root.get(\"createdAt\"), endTime)));"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return query.getResultList();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Updates or creates (if does not exist) the AccountRequest in the database."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public AccountRequest updateAccountRequest(AccountRequest accountRequest)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assert accountRequest !\u003d null;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!accountRequest.isValid()) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(accountRequest.getInvalidityInfo());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()) \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException("},{"lineNumber":121,"author":{"gitId":"-"},"content":"                String.format(ERROR_UPDATE_NON_EXISTENT, accountRequest.toString()));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        merge(accountRequest);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return accountRequest;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Deletes an AccountRequest."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void deleteAccountRequest(AccountRequest accountRequest) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (accountRequest !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            delete(accountRequest);"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"            deleteDocumentByAccountRequestId(accountRequest.getId());"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":"     * Removes search document for the given account request."},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":"    public void deleteDocumentByAccountRequestId(UUID accountRequestId) {"},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"        if (getSearchManager() !\u003d null) {"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":"            // Solr saves the id with the prefix \"java.util.UUID:\", so we need to add it here to"},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":"            // identify and delete the document from the index"},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"            getSearchManager().deleteDocuments("},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"                    Collections.singletonList(\"java.util.UUID:\" + accountRequestId.toString()));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"domoberzin"},"content":"     * Searches all account requests in the system."},{"lineNumber":152,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"domoberzin"},"content":"     * \u003cp\u003eThis is used by admin to search account requests in the whole system."},{"lineNumber":154,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"domoberzin"},"content":"    public List\u003cAccountRequest\u003e searchAccountRequestsInWholeSystem(String queryString)"},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":"            throws SearchServiceException {"},{"lineNumber":157,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":158,"author":{"gitId":"domoberzin"},"content":"        if (queryString.trim().isEmpty()) {"},{"lineNumber":159,"author":{"gitId":"domoberzin"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":160,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":162,"author":{"gitId":"domoberzin"},"content":"        return getSearchManager().searchAccountRequests(queryString);"},{"lineNumber":163,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":32,"dishenggg":1,"-":131}},{"path":"src/main/java/teammates/storage/sqlapi/FeedbackQuestionsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"marquestye"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":9,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":10,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Handles CRUD operations for feedback questions."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see FeedbackQuestion"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public final class FeedbackQuestionsDb extends EntitiesDb {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final FeedbackQuestionsDb instance \u003d new FeedbackQuestionsDb();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsDb() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static FeedbackQuestionsDb inst() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a new feedback question."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the created question"},{"lineNumber":42,"author":{"gitId":"marquestye"},"content":"     * @throws InvalidParametersException if the question is invalid"},{"lineNumber":43,"author":{"gitId":"marquestye"},"content":"     * @throws EntityAlreadyExistsException if the question already exists"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"marquestye"},"content":"    public FeedbackQuestion createFeedbackQuestion(FeedbackQuestion feedbackQuestion)"},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"        assert feedbackQuestion !\u003d null;"},{"lineNumber":48,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":49,"author":{"gitId":"marquestye"},"content":"        if (!feedbackQuestion.isValid()) {"},{"lineNumber":50,"author":{"gitId":"marquestye"},"content":"            throw new InvalidParametersException(feedbackQuestion.getInvalidityInfo());"},{"lineNumber":51,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":53,"author":{"gitId":"marquestye"},"content":"        if (getFeedbackQuestion(feedbackQuestion.getId()) !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"marquestye"},"content":"            String errorMessage \u003d String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, feedbackQuestion.toString());"},{"lineNumber":55,"author":{"gitId":"marquestye"},"content":"            throw new EntityAlreadyExistsException(errorMessage);"},{"lineNumber":56,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        persist(feedbackQuestion);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return feedbackQuestion;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Gets a feedback question."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @return null if not found"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public FeedbackQuestion getFeedbackQuestion(UUID fqId) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assert fqId !\u003d null;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(FeedbackQuestion.class, fqId);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Gets all feedback questions of a session."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForSession(UUID fdId) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackQuestion\u003e cq \u003d cb.createQuery(FeedbackQuestion.class);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackQuestion\u003e fqRoot \u003d cq.from(FeedbackQuestion.class);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fqJoin \u003d fqRoot.join(\"feedbackSession\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        cq.select(fqRoot).where(cb.equal(fqJoin.get(\"id\"), fdId));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Gets a list of feedback questions by {@code feedbackSession} and {@code giverType}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @return null if not found"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackQuestion\u003e getFeedbackQuestionsForGiverType("},{"lineNumber":91,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, FeedbackParticipantType giverType) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assert giverType !\u003d null;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackQuestion\u003e cq \u003d cb.createQuery(FeedbackQuestion.class);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackQuestion\u003e root \u003d cq.from(FeedbackQuestion.class);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fqJoin \u003d root.join(\"feedbackSession\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":101,"author":{"gitId":"-"},"content":"                        cb.equal(fqJoin.get(\"id\"), feedbackSession.getId()),"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                        cb.equal(root.get(\"giverType\"), giverType)));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Deletes a feedback question."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void deleteFeedbackQuestion(UUID fqId) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assert fqId !\u003d null;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq \u003d getFeedbackQuestion(fqId);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (fq !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            delete(fq);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Checks if there is any feedback questions in a session in a course for the given giver type."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean hasFeedbackQuestionsForGiverType("},{"lineNumber":122,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, FeedbackParticipantType giverType) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackQuestion\u003e cq \u003d cb.createQuery(FeedbackQuestion.class);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackQuestion\u003e root \u003d cq.from(FeedbackQuestion.class);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d root.join(\"feedbackSession\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e courseJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":131,"author":{"gitId":"-"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                        cb.equal(fsJoin.get(\"name\"), feedbackSessionName),"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                        cb.equal(root.get(\"giverType\"), giverType)));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return !HibernateUtil.createQuery(cq).getResultList().isEmpty();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":19,"-":117}},{"path":"src/main/java/teammates/storage/sqlapi/FeedbackResponseCommentsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Handles CRUD operations for feedbackResponseComments."},{"lineNumber":27,"author":{"gitId":"-"},"content":" *"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * @see FeedbackResponseComment"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public final class FeedbackResponseCommentsDb extends EntitiesDb {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final FeedbackResponseCommentsDb instance \u003d new FeedbackResponseCommentsDb();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsDb() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static FeedbackResponseCommentsDb inst() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Gets a feedbackResponseComment or null if it does not exist."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseComment(Long frId) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assert frId !\u003d null;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(FeedbackResponseComment.class, frId);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates a feedbackResponseComment."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment createFeedbackResponseComment(FeedbackResponseComment feedbackResponseComment)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assert feedbackResponseComment !\u003d null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!feedbackResponseComment.isValid()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(feedbackResponseComment.getInvalidityInfo());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (feedbackResponseComment.getId() !\u003d null"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 getFeedbackResponseComment(feedbackResponseComment.getId()) !\u003d null) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException("},{"lineNumber":65,"author":{"gitId":"-"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, feedbackResponseComment.toString()));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        persist(feedbackResponseComment);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return feedbackResponseComment;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Deletes a feedbackResponseComment."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponseComment(Long frcId) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assert frcId !\u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FeedbackResponseComment frc \u003d getFeedbackResponseComment(frcId);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (frc !\u003d null) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            delete(frc);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"     * Gets all feedback response comments for a response."},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForResponse(UUID feedbackResponseId) {"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"        assert feedbackResponseId !\u003d null;"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":"        cq.select(root)"},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"                .where(cb.and("},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"                        cb.equal(frJoin.get(\"id\"), feedbackResponseId)));"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Gets the comment associated with the feedback response."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment getFeedbackResponseCommentForResponseFromParticipant("},{"lineNumber":105,"author":{"gitId":"-"},"content":"            UUID feedbackResponseId) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":112,"author":{"gitId":"-"},"content":"                        cb.equal(frJoin.get(\"id\"), feedbackResponseId)));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultStream().findFirst().orElse(null);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Updates the giver email for all of the giver\u0027s comments in a course."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void updateGiverEmailOfFeedbackResponseComments(String courseId, String oldEmail, String updatedEmail) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assert oldEmail !\u003d null;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assert updatedEmail !\u003d null;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (oldEmail.equals(updatedEmail)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseComment\u003e responseComments \u003d"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                getFeedbackResponseCommentEntitiesForGiverInCourse(courseId, oldEmail);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        for (FeedbackResponseComment responseComment : responseComments) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            responseComment.setGiver(updatedEmail);"},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"            merge(responseComment);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"     * Updates the last editor to a new one for all comments in a course."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void updateLastEditorEmailOfFeedbackResponseComments(String courseId, String oldEmail, String updatedEmail) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assert oldEmail !\u003d null;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assert updatedEmail !\u003d null;"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (oldEmail.equals(updatedEmail)) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseComment\u003e responseComments \u003d"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                getFeedbackResponseCommentEntitiesForLastEditorInCourse(courseId, oldEmail);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        for (FeedbackResponseComment responseComment : responseComments) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            responseComment.setLastEditorEmail(updatedEmail);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentEntitiesForGiverInCourse("},{"lineNumber":158,"author":{"gitId":"-"},"content":"            String courseId, String giver) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    cb.equal(root.get(\"giver\"), giver)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentEntitiesForLastEditorInCourse("},{"lineNumber":176,"author":{"gitId":"-"},"content":"            String courseId, String lastEditorEmail) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":187,"author":{"gitId":"-"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    cb.equal(root.get(\"lastEditorEmail\"), lastEditorEmail)));"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"     * Updates the feedback response comment."},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"mingyuanc"},"content":"    public FeedbackResponseComment updateFeedbackResponseComment(FeedbackResponseComment feedbackResponseComment)"},{"lineNumber":197,"author":{"gitId":"mingyuanc"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"        assert feedbackResponseComment !\u003d null;"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":200,"author":{"gitId":"mingyuanc"},"content":"        if (!feedbackResponseComment.isValid()) {"},{"lineNumber":201,"author":{"gitId":"mingyuanc"},"content":"            throw new InvalidParametersException(feedbackResponseComment.getInvalidityInfo());"},{"lineNumber":202,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":204,"author":{"gitId":"mingyuanc"},"content":"        if (getFeedbackResponseComment(feedbackResponseComment.getId()) \u003d\u003d null) {"},{"lineNumber":205,"author":{"gitId":"mingyuanc"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":206,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return merge(feedbackResponseComment);"},{"lineNumber":209,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"     * Gets all comments in a feedback session of a course."},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForSession("},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName) {"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":224,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":225,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":226,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":"                        cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":"                        cb.equal(fsJoin.get(\"name\"), feedbackSessionName)"},{"lineNumber":231,"author":{"gitId":"xenosf"},"content":"                        ));"},{"lineNumber":232,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":233,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":234,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":236,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"xenosf"},"content":"     * Gets all comments of a feedback question of a course."},{"lineNumber":238,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForQuestion(UUID questionId) {"},{"lineNumber":240,"author":{"gitId":"xenosf"},"content":"        assert questionId !\u003d null;"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fqJoin.get(\"id\"), questionId)));"},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"     * Gets all comments in the given session where the giver or recipient is in the given section."},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForSessionInSection("},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, String sectionName) {"},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, Section\u003e giverJoin \u003d root.join(\"giverSection\");"},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, Section\u003e recipientJoin \u003d root.join(\"recipientSection\");"},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fsJoin.get(\"name\"), feedbackSessionName),"},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"                    cb.or("},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":"                        cb.equal(giverJoin.get(\"name\"), sectionName),"},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"                        cb.equal(recipientJoin.get(\"name\"), sectionName))"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":"     * Gets all comments for a question where the giver or recipient is in the given section."},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseCommentsForQuestionInSection("},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"            UUID questionId, String sectionName) {"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":"        assert questionId !\u003d null;"},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponseComment\u003e cq \u003d cb.createQuery(FeedbackResponseComment.class);"},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponseComment\u003e root \u003d cq.from(FeedbackResponseComment.class);"},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, FeedbackResponse\u003e frJoin \u003d root.join(\"feedbackResponse\");"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frJoin.join(\"feedbackQuestion\");"},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, Section\u003e giverJoin \u003d root.join(\"giverSection\");"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponseComment, Section\u003e recipientJoin \u003d root.join(\"recipientSection\");"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fqJoin.get(\"id\"), questionId),"},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"                    cb.or("},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":"                        cb.equal(giverJoin.get(\"name\"), sectionName),"},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"                        cb.equal(recipientJoin.get(\"name\"), sectionName))"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":26,"xenosf":105,"mingyuanc":12,"-":172}},{"path":"src/main/java/teammates/storage/sqlapi/FeedbackResponsesDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaDelete;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"import jakarta.persistence.criteria.Predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Subquery;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Handles CRUD operations for feedbackResponses."},{"lineNumber":30,"author":{"gitId":"-"},"content":" *"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * @see FeedbackResponse"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public final class FeedbackResponsesDb extends EntitiesDb {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final FeedbackResponsesDb instance \u003d new FeedbackResponsesDb();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private FeedbackResponsesDb() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static FeedbackResponsesDb inst() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Gets a feedbackResponse or null if it does not exist."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public FeedbackResponse getFeedbackResponse(UUID frId) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assert frId !\u003d null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(FeedbackResponse.class, frId);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Gets all responses given by a user in a course."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromGiverForCourse("},{"lineNumber":58,"author":{"gitId":"-"},"content":"            String courseId, String giver) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cr \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e frRoot \u003d cr.from(FeedbackResponse.class);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frRoot.join(\"feedbackQuestion\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        cr.select(frRoot)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                    cb.equal(frRoot.get(\"giver\"), giver)));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Gets all responses given to a user in a course."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForRecipientForCourse(String courseId, String recipient) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cr \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e frRoot \u003d cr.from(FeedbackResponse.class);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d frRoot.join(\"feedbackQuestion\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        cr.select(frRoot)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    cb.equal(frRoot.get(\"recipient\"), recipient)));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Creates a feedbackResponse."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public FeedbackResponse createFeedbackResponse(FeedbackResponse feedbackResponse)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert feedbackResponse !\u003d null;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!feedbackResponse.isValid()) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(feedbackResponse.getInvalidityInfo());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (getFeedbackResponse(feedbackResponse.getId()) !\u003d null) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException("},{"lineNumber":106,"author":{"gitId":"-"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, feedbackResponse.toString()));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        persist(feedbackResponse);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return feedbackResponse;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Deletes a feedbackResponse."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponse(FeedbackResponse feedbackResponse) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (feedbackResponse !\u003d null) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            delete(feedbackResponse);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Gets the feedback responses for a feedback question."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @param feedbackQuestionId the Id of the feedback question."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @param giverEmail the email of the response giver."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":128,"author":{"gitId":"-"},"content":"            UUID feedbackQuestionId, String giverEmail) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e frJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":135,"author":{"gitId":"-"},"content":"                        cb.equal(frJoin.get(\"id\"), feedbackQuestionId),"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                        cb.equal(root.get(\"giver\"), giverEmail)));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Deletes all feedback responses of a question cascade its associated comments."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesForQuestionCascade(UUID feedbackQuestionId) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        CriteriaDelete\u003cFeedbackResponse\u003e cd \u003d cb.createCriteriaDelete(FeedbackResponse.class);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e frRoot \u003d cd.from(FeedbackResponse.class);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Subquery\u003cUUID\u003e subquery \u003d cd.subquery(UUID.class);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e subqueryRoot \u003d subquery.from(FeedbackResponse.class);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e sqJoin \u003d subqueryRoot.join(\"feedbackQuestion\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        subquery.select(subqueryRoot.get(\"id\"));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        subquery.where(cb.equal(sqJoin.get(\"id\"), feedbackQuestionId));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        cd.where(cb.in(frRoot.get(\"id\")).value(subquery));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        HibernateUtil.createMutationQuery(cd).executeUpdate();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a question."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public boolean areThereResponsesForQuestion(UUID questionId) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                .where(cb.equal(fqJoin.get(\"id\"), questionId));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return !HibernateUtil.createQuery(cq).getResultList().isEmpty();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"     * Get responses for a question."},{"lineNumber":172,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"domoberzin"},"content":"    public List\u003cFeedbackResponse\u003e getResponsesForQuestion(UUID questionId) {"},{"lineNumber":174,"author":{"gitId":"domoberzin"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":175,"author":{"gitId":"domoberzin"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":176,"author":{"gitId":"domoberzin"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":177,"author":{"gitId":"domoberzin"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":178,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":179,"author":{"gitId":"domoberzin"},"content":"        cq.select(root)"},{"lineNumber":180,"author":{"gitId":"domoberzin"},"content":"                .where(cb.equal(fqJoin.get(\"id\"), questionId));"},{"lineNumber":181,"author":{"gitId":"domoberzin"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":182,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Checks whether a user has responses in a session."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public boolean hasResponsesFromGiverInSession("},{"lineNumber":188,"author":{"gitId":"-"},"content":"            String giver, String feedbackSessionName, String courseId) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e courseJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":198,"author":{"gitId":"-"},"content":"                        cb.equal(root.get(\"giver\"), giver),"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                        cb.equal(fsJoin.get(\"name\"), feedbackSessionName),"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId)));"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return !HibernateUtil.createQuery(cq).getResultList().isEmpty();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a course."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public boolean hasResponsesForCourse(String courseId) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e courseJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        cq.select(root)"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                .where(cb.equal(courseJoin.get(\"id\"), courseId));"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        return !HibernateUtil.createQuery(cq).getResultList().isEmpty();"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"domoberzin"},"content":"     * Updates a feedbackResponse."},{"lineNumber":224,"author":{"gitId":"domoberzin"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"domoberzin"},"content":"     * @throws EntityDoesNotExistException if the feedbackResponse does not exist"},{"lineNumber":226,"author":{"gitId":"domoberzin"},"content":"     * @throws InvalidParametersException if the feedbackResponse is not valid"},{"lineNumber":227,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"domoberzin"},"content":"    public FeedbackResponse updateFeedbackResponse(FeedbackResponse feedbackResponse)"},{"lineNumber":229,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":230,"author":{"gitId":"domoberzin"},"content":"        assert feedbackResponse !\u003d null;"},{"lineNumber":231,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":232,"author":{"gitId":"domoberzin"},"content":"        if (!feedbackResponse.isValid()) {"},{"lineNumber":233,"author":{"gitId":"domoberzin"},"content":"            throw new InvalidParametersException(feedbackResponse.getInvalidityInfo());"},{"lineNumber":234,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":236,"author":{"gitId":"domoberzin"},"content":"        if (getFeedbackResponse(feedbackResponse.getId()) \u003d\u003d null) {"},{"lineNumber":237,"author":{"gitId":"domoberzin"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":238,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":240,"author":{"gitId":"domoberzin"},"content":"        return merge(feedbackResponse);"},{"lineNumber":241,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"     * Gets all responses received by a user for a question."},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForRecipientForQuestion("},{"lineNumber":247,"author":{"gitId":"xenosf"},"content":"            UUID questionId, String recipient) {"},{"lineNumber":248,"author":{"gitId":"xenosf"},"content":"        assert questionId !\u003d null;"},{"lineNumber":249,"author":{"gitId":"xenosf"},"content":"        assert recipient !\u003d null;"},{"lineNumber":250,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":251,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":252,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":253,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":254,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":255,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":256,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":257,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":258,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fqJoin.get(\"id\"), questionId),"},{"lineNumber":259,"author":{"gitId":"xenosf"},"content":"                    cb.equal(root.get(\"recipient\"), recipient)"},{"lineNumber":260,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":261,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":262,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":263,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":265,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":266,"author":{"gitId":"xenosf"},"content":"     * Gets all responses given to/from a section in a feedback session in a course."},{"lineNumber":267,"author":{"gitId":"xenosf"},"content":"     * Optionally, retrieves by either giver, receiver sections, or both."},{"lineNumber":268,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForSessionInSection("},{"lineNumber":270,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId, String sectionName, FeedbackResultFetchType fetchType) {"},{"lineNumber":271,"author":{"gitId":"xenosf"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":272,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":273,"author":{"gitId":"xenosf"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":274,"author":{"gitId":"xenosf"},"content":"        assert fetchType !\u003d null;"},{"lineNumber":275,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":276,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":277,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":278,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":279,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":280,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":281,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":282,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":283,"author":{"gitId":"xenosf"},"content":"        // unless specified by fetchType, do not filter by giver/recipient section"},{"lineNumber":284,"author":{"gitId":"xenosf"},"content":"        Predicate giverSectionFilter \u003d cb.isTrue(cb.literal(true));"},{"lineNumber":285,"author":{"gitId":"xenosf"},"content":"        Predicate recipientSectionFilter \u003d cb.isTrue(cb.literal(true));"},{"lineNumber":286,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, Section\u003e giverJoin \u003d root.join(\"giverSection\");"},{"lineNumber":287,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, Section\u003e recipientJoin \u003d root.join(\"recipientSection\");"},{"lineNumber":288,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":289,"author":{"gitId":"xenosf"},"content":"        if (fetchType.shouldFetchByGiver()) {"},{"lineNumber":290,"author":{"gitId":"xenosf"},"content":"            giverSectionFilter \u003d cb.equal(giverJoin.get(\"name\"), sectionName);"},{"lineNumber":291,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":292,"author":{"gitId":"xenosf"},"content":"        if (fetchType.shouldFetchByReceiver()) {"},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"            recipientSectionFilter \u003d cb.equal(recipientJoin.get(\"name\"), sectionName);"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fsJoin.get(\"id\"), feedbackSession.getId()),"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId),"},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"                    giverSectionFilter,"},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"                    recipientSectionFilter"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":"     * Gets all feedback responses of a question in a specific section."},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForQuestionInSection("},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":"            UUID questionId, String sectionName, FeedbackResultFetchType fetchType) {"},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"        assert questionId !\u003d null;"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":"        assert fetchType !\u003d null;"},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":316,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":317,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":318,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":319,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":320,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":321,"author":{"gitId":"xenosf"},"content":"        // unless specified by fetchType, do not filter by giver/recipient section"},{"lineNumber":322,"author":{"gitId":"xenosf"},"content":"        Predicate giverSectionFilter \u003d cb.isTrue(cb.literal(true));"},{"lineNumber":323,"author":{"gitId":"xenosf"},"content":"        Predicate recipientSectionFilter \u003d cb.isTrue(cb.literal(true));"},{"lineNumber":324,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, Section\u003e giverJoin \u003d root.join(\"giverSection\");"},{"lineNumber":325,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, Section\u003e recipientJoin \u003d root.join(\"recipientSection\");"},{"lineNumber":326,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":327,"author":{"gitId":"xenosf"},"content":"        if (fetchType.shouldFetchByGiver()) {"},{"lineNumber":328,"author":{"gitId":"xenosf"},"content":"            giverSectionFilter \u003d cb.equal(giverJoin.get(\"name\"), sectionName);"},{"lineNumber":329,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"xenosf"},"content":"        if (fetchType.shouldFetchByReceiver()) {"},{"lineNumber":331,"author":{"gitId":"xenosf"},"content":"            recipientSectionFilter \u003d cb.equal(recipientJoin.get(\"name\"), sectionName);"},{"lineNumber":332,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":334,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fqJoin.get(\"id\"), questionId),"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":"                    giverSectionFilter,"},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":"                    recipientSectionFilter"},{"lineNumber":339,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":340,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":341,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":342,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":344,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":345,"author":{"gitId":"xenosf"},"content":"     * Gets all responses of a feedback session in a course."},{"lineNumber":346,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":347,"author":{"gitId":"xenosf"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponsesForSession("},{"lineNumber":348,"author":{"gitId":"xenosf"},"content":"            FeedbackSession feedbackSession, String courseId) {"},{"lineNumber":349,"author":{"gitId":"xenosf"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":350,"author":{"gitId":"xenosf"},"content":"        assert courseId !\u003d null;"},{"lineNumber":351,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":352,"author":{"gitId":"xenosf"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":353,"author":{"gitId":"xenosf"},"content":"        CriteriaQuery\u003cFeedbackResponse\u003e cq \u003d cb.createQuery(FeedbackResponse.class);"},{"lineNumber":354,"author":{"gitId":"xenosf"},"content":"        Root\u003cFeedbackResponse\u003e root \u003d cq.from(FeedbackResponse.class);"},{"lineNumber":355,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackResponse, FeedbackQuestion\u003e fqJoin \u003d root.join(\"feedbackQuestion\");"},{"lineNumber":356,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackQuestion, FeedbackSession\u003e fsJoin \u003d fqJoin.join(\"feedbackSession\");"},{"lineNumber":357,"author":{"gitId":"xenosf"},"content":"        Join\u003cFeedbackSession, Course\u003e cJoin \u003d fsJoin.join(\"course\");"},{"lineNumber":358,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":359,"author":{"gitId":"xenosf"},"content":"        cq.select(root)"},{"lineNumber":360,"author":{"gitId":"xenosf"},"content":"                .where(cb.and("},{"lineNumber":361,"author":{"gitId":"xenosf"},"content":"                    cb.equal(fsJoin.get(\"id\"), feedbackSession.getId()),"},{"lineNumber":362,"author":{"gitId":"xenosf"},"content":"                    cb.equal(cJoin.get(\"id\"), courseId)"},{"lineNumber":363,"author":{"gitId":"xenosf"},"content":"                    ));"},{"lineNumber":364,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":365,"author":{"gitId":"xenosf"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":366,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":367,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":37,"xenosf":128,"-":203}},{"path":"src/main/java/teammates/storage/sqlapi/FeedbackSessionsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Handles CRUD operations for feedback sessions."},{"lineNumber":26,"author":{"gitId":"-"},"content":" *"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * @see FeedbackSession"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public final class FeedbackSessionsDb extends EntitiesDb {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final FeedbackSessionsDb instance \u003d new FeedbackSessionsDb();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private FeedbackSessionsDb() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static FeedbackSessionsDb inst() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Gets a feedback session."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @return null if not found"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(UUID fsId) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assert fsId !\u003d null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(FeedbackSession.class, fsId);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Gets a feedback session for {@code feedbackSessionName} and {@code courseId}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return null if not found"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cq \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e fsRoot \u003d cq.from(FeedbackSession.class);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e fsJoin \u003d fsRoot.join(\"course\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        cq.select(fsRoot).where(cb.and("},{"lineNumber":63,"author":{"gitId":"-"},"content":"                cb.equal(fsRoot.get(\"name\"), feedbackSessionName),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                cb.equal(fsJoin.get(\"id\"), courseId)));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultStream().findFirst().orElse(null);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Gets a soft-deleted feedback session."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @return null if not found or not soft-deleted."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public FeedbackSession getSoftDeletedFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FeedbackSession feedbackSession \u003d getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (feedbackSession !\u003d null \u0026\u0026 feedbackSession.getDeletedAt() \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            log.info(feedbackSessionName + \"/\" + courseId + \" is not soft-deleted!\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return feedbackSession;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Gets soft-deleted feedback sessions for course."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getSoftDeletedFeedbackSessionsForCourse(String courseId) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cq \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e fsRoot \u003d cq.from(FeedbackSession.class);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e fsJoin \u003d fsRoot.join(\"course\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        cq.select(fsRoot).where(cb.and("},{"lineNumber":96,"author":{"gitId":"-"},"content":"                cb.isNotNull(fsRoot.get(\"deletedAt\")),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                cb.equal(fsJoin.get(\"id\"), courseId)));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Gets all and only the feedback sessions ongoing within a range of time."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getOngoingSessions(Instant rangeStart, Instant rangeEnd) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assert rangeStart !\u003d null;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assert rangeEnd !\u003d null;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":112,"author":{"gitId":"-"},"content":"                    cb.greaterThan(root.get(\"endTime\"), rangeStart),"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                    cb.lessThan(root.get(\"startTime\"), rangeEnd)));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Restores a specific soft deleted feedback session."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void restoreDeletedFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        FeedbackSession sessionEntity \u003d getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (sessionEntity \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        sessionEntity.setDeletedAt(null);"},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"        merge(sessionEntity);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Creates a feedback session."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public FeedbackSession createFeedbackSession(FeedbackSession session)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (!session.isValid()) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(session.getInvalidityInfo());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (getFeedbackSession(session.getId()) !\u003d null) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, session.toString()));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        persist(session);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return session;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Saves an updated {@code FeedbackSession} to the db."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @return updated feedback session"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException  if attributes to update are not valid"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public FeedbackSession updateFeedbackSession(FeedbackSession feedbackSession)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (!feedbackSession.isValid()) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(feedbackSession.getInvalidityInfo());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (getFeedbackSession(feedbackSession.getId()) \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return merge(feedbackSession);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Deletes a feedback session."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void deleteFeedbackSession(FeedbackSession feedbackSession) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        if (feedbackSession !\u003d null) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            delete(feedbackSession);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Soft-deletes a specific feedback session by its name and course id."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * @return Soft-deletion time of the feedback session."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public Instant softDeleteFeedbackSession(String feedbackSessionName, String courseId)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assert feedbackSessionName !\u003d null;"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        FeedbackSession feedbackSessionEntity \u003d getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        if (feedbackSessionEntity \u003d\u003d null) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        feedbackSessionEntity.setDeletedAt(Instant.now());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        merge(feedbackSessionEntity);"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return feedbackSessionEntity.getDeletedAt();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Gets feedback sessions for a given {@code courseId}."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionEntitiesForCourse(String courseId) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cq \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cq.from(FeedbackSession.class);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e courseJoin \u003d root.join(\"course\");"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        cq.select(root).where(cb.equal(courseJoin.get(\"id\"), courseId));"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cq).getResultList();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Gets feedback sessions for a given {@code courseId} that start after {@code after}."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionEntitiesForCourseStartingAfter(String courseId, Instant after) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assert after !\u003d null;"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Join\u003cFeedbackSession, Course\u003e courseJoin \u003d root.join(\"course\");"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    cb.greaterThanOrEqualTo(root.get(\"startTime\"), after),"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    cb.equal(courseJoin.get(\"id\"), courseId)));"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted feedback sessions which open in the future"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * and possibly need a opening soon email to be sent."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsPossiblyNeedingOpeningSoonEmail() {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        return getFeedbackSessionEntitiesPossiblyNeedingOpeningSoonEmail().stream()"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                .filter(session -\u003e session.getDeletedAt() \u003d\u003d null)"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackSession\u003e getFeedbackSessionEntitiesPossiblyNeedingOpeningSoonEmail() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":259,"author":{"gitId":"-"},"content":"                    cb.greaterThan(root.get(\"startTime\"), TimeHelper.getInstantDaysOffsetFromNow(-2)),"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                    cb.equal(root.get(\"isOpeningSoonEmailSent\"), false)));"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * and possibly need a closing soon email to be sent."},{"lineNumber":268,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsPossiblyNeedingClosingSoonEmail() {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return getFeedbackSessionEntitiesPossiblyNeedingClosingSoonEmail().stream()"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                .filter(session -\u003e session.getDeletedAt() \u003d\u003d null)"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackSession\u003e getFeedbackSessionEntitiesPossiblyNeedingClosingSoonEmail() {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":282,"author":{"gitId":"-"},"content":"                        cb.greaterThan(root.get(\"endTime\"), TimeHelper.getInstantDaysOffsetFromNow(-2)),"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                        cb.and("},{"lineNumber":284,"author":{"gitId":"-"},"content":"                                cb.equal(root.get(\"isClosingSoonEmailSent\"), false),"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                                cb.equal(root.get(\"isClosingEmailEnabled\"), true))"},{"lineNumber":286,"author":{"gitId":"-"},"content":"               ));"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted feedback sessions which end in the future (2 hour ago onward)"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * and possibly need a closed email to be sent."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsPossiblyNeedingClosedEmail() {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":302,"author":{"gitId":"-"},"content":"                        cb.greaterThan(root.get(\"endTime\"), TimeHelper.getInstantDaysOffsetFromNow(-2)),"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                        cb.isFalse(root.get(\"isClosedEmailSent\")),"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                        cb.isTrue(root.get(\"isClosingEmailEnabled\")),"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                        cb.isNull(root.get(\"deletedAt\"))"},{"lineNumber":306,"author":{"gitId":"-"},"content":"               ));"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted published feedback sessions which possibly need a published email"},{"lineNumber":313,"author":{"gitId":"-"},"content":"     * to be sent."},{"lineNumber":314,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsPossiblyNeedingPublishedEmail() {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        return getFeedbackSessionEntitiesPossiblyNeedingPublishedEmail().stream()"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                .filter(session -\u003e session.getDeletedAt() \u003d\u003d null)"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackSession\u003e getFeedbackSessionEntitiesPossiblyNeedingPublishedEmail() {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":328,"author":{"gitId":"-"},"content":"                        cb.greaterThan(root.get(\"resultsVisibleFromTime\"), TimeHelper.getInstantDaysOffsetFromNow(-2)),"},{"lineNumber":329,"author":{"gitId":"-"},"content":"                        cb.and("},{"lineNumber":330,"author":{"gitId":"-"},"content":"                                cb.equal(root.get(\"isPublishedEmailSent\"), false),"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                                cb.equal(root.get(\"isPublishedEmailEnabled\"), true))"},{"lineNumber":332,"author":{"gitId":"-"},"content":"               ));"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitId":"-"},"content":"     * Gets a list of undeleted feedback sessions which start within the last 2 days"},{"lineNumber":339,"author":{"gitId":"-"},"content":"     * and possibly need an open email to be sent."},{"lineNumber":340,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackSession\u003e getFeedbackSessionsPossiblyNeedingOpenEmail() {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cFeedbackSession\u003e cr \u003d cb.createQuery(FeedbackSession.class);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Root\u003cFeedbackSession\u003e root \u003d cr.from(FeedbackSession.class);"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"        cr.select(root)"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":348,"author":{"gitId":"-"},"content":"                    cb.greaterThan(root.get(\"startTime\"), TimeHelper.getInstantDaysOffsetFromNow(-2)),"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                    cb.isFalse(root.get(\"isOpenEmailSent\")),"},{"lineNumber":350,"author":{"gitId":"-"},"content":"                    cb.isNull(root.get(\"deletedAt\"))"},{"lineNumber":351,"author":{"gitId":"-"},"content":"                ));"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":1,"-":354}},{"path":"src/main/java/teammates/storage/sqlapi/UsersDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.InstructorSearchManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.SearchManagerFactory;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlsearch.StudentSearchManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Predicate;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Handles CRUD operations for users."},{"lineNumber":34,"author":{"gitId":"-"},"content":" *"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * @see User"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public final class UsersDb extends EntitiesDb {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final UsersDb instance \u003d new UsersDb();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private UsersDb() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static UsersDb inst() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public InstructorSearchManager getInstructorSearchManager() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return SearchManagerFactory.getInstructorSearchManager();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public StudentSearchManager getStudentSearchManager() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return SearchManagerFactory.getStudentSearchManager();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates an instructor."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Instructor createInstructor(Instructor instructor)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assert instructor !\u003d null;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!instructor.isValid()) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(instructor.getInvalidityInfo());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        persist(instructor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return instructor;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates a student."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Student createStudent(Student student)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assert student !\u003d null;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!student.isValid()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(student.getInvalidityInfo());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        persist(student);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return student;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Gets an instructor by its {@code id}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(Instructor.class, id);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Gets an instructor by {@code regKey}."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegKey(String regKey) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.equal(instructorRoot.get(\"regKey\"), regKey));"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Gets an instructor by {@code googleId}."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Join\u003cInstructor, Account\u003e accountsJoin \u003d instructorRoot.join(\"account\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.and("},{"lineNumber":119,"author":{"gitId":"-"},"content":"                cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                cb.equal(accountsJoin.get(\"googleId\"), googleId)));"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Gets all instructors that will be displayed to students of a course."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsDisplayedToStudents(String courseId) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.and("},{"lineNumber":134,"author":{"gitId":"-"},"content":"                cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                cb.equal(instructorRoot.get(\"isDisplayedToStudents\"), true)));"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Gets a student by its {@code id}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(Student.class, id);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Gets a student by {@code regKey}."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public Student getStudentByRegKey(String regKey) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.equal(studentRoot.get(\"regKey\"), regKey));"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Gets a student by {@code googleId}."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Account\u003e accountsJoin \u003d studentRoot.join(\"account\");"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.and("},{"lineNumber":172,"author":{"gitId":"-"},"content":"                cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                cb.equal(accountsJoin.get(\"googleId\"), googleId)));"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Gets all students by {@code googleId}."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsByGoogleId(String googleId) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Account\u003e accountsJoin \u003d studentRoot.join(\"account\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.equal(accountsJoin.get(\"googleId\"), googleId));"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Gets a list of students by {@code teamName} and {@code courseId}."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsByTeamName(String teamName, String courseId) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        studentRoot.alias(\"student\");"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Team\u003e teamsJoin \u003d studentRoot.join(\"team\");"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.and("},{"lineNumber":205,"author":{"gitId":"-"},"content":"                cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                cb.equal(teamsJoin.get(\"name\"), teamName)));"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Gets all instructors and students by {@code googleId}."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    public List\u003cUser\u003e getAllUsersByGoogleId(String googleId) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cUser\u003e usersCr \u003d cb.createQuery(User.class);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        Root\u003cUser\u003e usersRoot \u003d usersCr.from(User.class);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        Join\u003cUser, Account\u003e accountsJoin \u003d usersRoot.join(\"account\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        usersCr.select(usersRoot).where(cb.equal(accountsJoin.get(\"googleId\"), googleId));"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(usersCr).getResultList();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Gets all instructors by {@code googleId}."},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getAllInstructorsByGoogleId(String googleId) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e instructorsCr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorsRoot \u003d instructorsCr.from(Instructor.class);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Join\u003cInstructor, Account\u003e accountsJoin \u003d instructorsRoot.join(\"account\");"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        instructorsCr.select(instructorsRoot).where(cb.equal(accountsJoin.get(\"googleId\"), googleId));"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(instructorsCr).getResultList();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * Gets all students by {@code googleId}."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getAllStudentsByGoogleId(String googleId) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e studentsCr \u003d cb.createQuery(Student.class);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentsRoot \u003d studentsCr.from(Student.class);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Account\u003e accountsJoin \u003d studentsRoot.join(\"account\");"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        studentsCr.select(studentsRoot).where(cb.equal(accountsJoin.get(\"googleId\"), googleId));"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(studentsCr).getResultList();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Gets all instructors."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    public \u003cT extends User\u003e T updateUser(T user) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assert user !\u003d null;"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return merge(user);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * Searches all instructors in the system."},{"lineNumber":264,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":265,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis method should be used by admin only since the searching does not"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * restrict the visibility according to the logged-in user\u0027s google ID. This"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * is used by admin to search instructors in the whole system."},{"lineNumber":268,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e searchInstructorsInWholeSystem(String queryString)"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            throws SearchServiceException {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        if (queryString.trim().isEmpty()) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        return getInstructorSearchManager().searchInstructors(queryString);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"yuanxi1"},"content":"     * Searches for students."},{"lineNumber":280,"author":{"gitId":"yuanxi1"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"yuanxi1"},"content":"     * @param instructors the constraint that restricts the search result"},{"lineNumber":282,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudents(String queryString, List\u003cInstructor\u003e instructors)"},{"lineNumber":284,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":285,"author":{"gitId":"yuanxi1"},"content":"        if (queryString.trim().isEmpty()) {"},{"lineNumber":286,"author":{"gitId":"yuanxi1"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":287,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":289,"author":{"gitId":"yuanxi1"},"content":"        return getStudentSearchManager().searchStudents(queryString, instructors);"},{"lineNumber":290,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":292,"author":{"gitId":"yuanxi1"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"yuanxi1"},"content":"     * Searches all students in the system."},{"lineNumber":294,"author":{"gitId":"yuanxi1"},"content":"     *"},{"lineNumber":295,"author":{"gitId":"yuanxi1"},"content":"     * \u003cp\u003eThis method should be used by admin only since the searching does not restrict the"},{"lineNumber":296,"author":{"gitId":"yuanxi1"},"content":"     * visibility according to the logged-in user\u0027s google ID. This is used by admin to"},{"lineNumber":297,"author":{"gitId":"yuanxi1"},"content":"     * search instructors in the whole system."},{"lineNumber":298,"author":{"gitId":"yuanxi1"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"yuanxi1"},"content":"    public List\u003cStudent\u003e searchStudentsInWholeSystem(String queryString)"},{"lineNumber":300,"author":{"gitId":"yuanxi1"},"content":"            throws SearchServiceException {"},{"lineNumber":301,"author":{"gitId":"yuanxi1"},"content":"        if (queryString.trim().isEmpty()) {"},{"lineNumber":302,"author":{"gitId":"yuanxi1"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":303,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":304,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":305,"author":{"gitId":"yuanxi1"},"content":"        return getStudentSearchManager().searchStudents(queryString, null);"},{"lineNumber":306,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * Deletes a user."},{"lineNumber":310,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    public \u003cT extends User\u003e void deleteUser(T user) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        if (user !\u003d null) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            delete(user);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":318,"author":{"gitId":"-"},"content":"     * Gets the number of instructors created within a specified time range."},{"lineNumber":319,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    public long getNumInstructorsByTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cLong\u003e cr \u003d cb.createQuery(Long.class);"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e root \u003d cr.from(Instructor.class);"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"        cr.select(cb.count(root.get(\"id\"))).where(cb.and("},{"lineNumber":326,"author":{"gitId":"-"},"content":"                cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                cb.lessThan(root.get(\"createdAt\"), endTime)));"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getSingleResult();"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitId":"-"},"content":"     * Gets the number of students created within a specified time range."},{"lineNumber":334,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public long getNumStudentsByTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cLong\u003e cr \u003d cb.createQuery(Long.class);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e root \u003d cr.from(Student.class);"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"        cr.select(cb.count(root.get(\"id\"))).where(cb.and("},{"lineNumber":341,"author":{"gitId":"-"},"content":"                cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                cb.lessThan(root.get(\"createdAt\"), endTime)));"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getSingleResult();"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * Gets the list of instructors for the specified {@code courseId}."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForCourse(String courseId) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e root \u003d cr.from(Instructor.class);"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.equal(root.get(\"courseId\"), courseId));"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":363,"author":{"gitId":"-"},"content":"     * Gets the list of students for the specified {@code courseId}."},{"lineNumber":364,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForCourse(String courseId) {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null \u0026\u0026 !courseId.isEmpty();"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e root \u003d cr.from(Student.class);"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.equal(root.get(\"courseId\"), courseId));"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":378,"author":{"gitId":"-"},"content":"     * Gets the list of students for the specified {@code courseId} in batches with {@code batchSize}."},{"lineNumber":379,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForCourse(String courseId, int batchSize) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e root \u003d cr.from(Student.class);"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.equal(root.get(\"courseId\"), courseId));"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).setMaxResults(batchSize).getResultList();"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":393,"author":{"gitId":"-"},"content":"     * Gets the instructor with the specified {@code userEmail}."},{"lineNumber":394,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    public Instructor getInstructorForEmail(String courseId, String userEmail) {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot)"},{"lineNumber":404,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":405,"author":{"gitId":"-"},"content":"                        cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":406,"author":{"gitId":"-"},"content":"                        cb.equal(instructorRoot.get(\"email\"), userEmail)));"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":412,"author":{"gitId":"-"},"content":"     * Gets instructors with the specified {@code userEmail}."},{"lineNumber":413,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForEmails(String courseId, List\u003cString\u003e userEmails) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        assert userEmails !\u003d null;"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"        List\u003cPredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        for (String userEmail : userEmails) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            predicates.add(cb.equal(instructorRoot.get(\"email\"), userEmail));"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot)"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":429,"author":{"gitId":"-"},"content":"                        cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":430,"author":{"gitId":"-"},"content":"                        cb.or(predicates.toArray(new Predicate[0]))));"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":436,"author":{"gitId":"-"},"content":"     * Gets the student with the specified {@code userEmail}."},{"lineNumber":437,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    public Student getStudentForEmail(String courseId, String userEmail) {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":440,"author":{"gitId":"-"},"content":"        assert userEmail !\u003d null;"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"        cr.select(studentRoot)"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":448,"author":{"gitId":"-"},"content":"                        cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                        cb.equal(studentRoot.get(\"email\"), userEmail)));"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":455,"author":{"gitId":"-"},"content":"     * Gets students with the specified {@code userEmail}."},{"lineNumber":456,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForEmails(String courseId, List\u003cString\u003e userEmails) {"},{"lineNumber":458,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        assert userEmails !\u003d null;"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"        List\u003cPredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        for (String userEmail : userEmails) {"},{"lineNumber":467,"author":{"gitId":"-"},"content":"            predicates.add(cb.equal(studentRoot.get(\"email\"), userEmail));"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"        cr.select(studentRoot)"},{"lineNumber":471,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":472,"author":{"gitId":"-"},"content":"                        cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":473,"author":{"gitId":"-"},"content":"                        cb.or(predicates.toArray(new Predicate[0]))));"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":479,"author":{"gitId":"-"},"content":"     * Gets list of students by email."},{"lineNumber":480,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":481,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getAllStudentsForEmail(String email) {"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":486,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"        cr.select(studentRoot)"},{"lineNumber":489,"author":{"gitId":"-"},"content":"                .where(cb.equal(studentRoot.get(\"email\"), email));"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":495,"author":{"gitId":"-"},"content":"     * Gets all instructors associated with a googleId."},{"lineNumber":496,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":497,"author":{"gitId":"-"},"content":"    public List\u003cInstructor\u003e getInstructorsForGoogleId(String googleId) {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":502,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        Join\u003cInstructor, Account\u003e accountsJoin \u003d instructorRoot.join(\"account\");"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.equal(accountsJoin.get(\"googleId\"), googleId));"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":508,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":511,"author":{"gitId":"-"},"content":"     * Gets all students of a section of a course."},{"lineNumber":512,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForSection(String sectionName, String courseId) {"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Course\u003e courseJoin \u003d studentRoot.join(\"course\");"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Team\u003e teamsJoin \u003d studentRoot.join(\"team\");"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        Join\u003cTeam, Section\u003e sectionJoin \u003d teamsJoin.join(\"section\");"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"        cr.select(studentRoot)"},{"lineNumber":525,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":526,"author":{"gitId":"-"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":527,"author":{"gitId":"-"},"content":"                        cb.equal(sectionJoin.get(\"name\"), sectionName)));"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":531,"author":{"gitId":"-"},"content":""},{"lineNumber":532,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":533,"author":{"gitId":"-"},"content":"     * Gets all students of a team of a course."},{"lineNumber":534,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    public List\u003cStudent\u003e getStudentsForTeam(String teamName, String courseId) {"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        assert teamName !\u003d null;"},{"lineNumber":537,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Course\u003e courseJoin \u003d studentRoot.join(\"course\");"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Team\u003e teamsJoin \u003d studentRoot.join(\"team\");"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"        cr.select(studentRoot)"},{"lineNumber":546,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":547,"author":{"gitId":"-"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":548,"author":{"gitId":"-"},"content":"                        cb.equal(teamsJoin.get(\"name\"), teamName)));"},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":551,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":554,"author":{"gitId":"-"},"content":"     * Gets count of students of a team of a course."},{"lineNumber":555,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":556,"author":{"gitId":"-"},"content":"    public long getStudentCountForTeam(String teamName, String courseId) {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        assert teamName !\u003d null;"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":559,"author":{"gitId":"-"},"content":""},{"lineNumber":560,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cLong\u003e cr \u003d cb.createQuery(Long.class);"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Course\u003e courseJoin \u003d studentRoot.join(\"course\");"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Team\u003e teamsJoin \u003d studentRoot.join(\"team\");"},{"lineNumber":565,"author":{"gitId":"-"},"content":""},{"lineNumber":566,"author":{"gitId":"-"},"content":"        cr.select(cb.count(studentRoot.get(\"id\")))"},{"lineNumber":567,"author":{"gitId":"-"},"content":"                .where(cb.and("},{"lineNumber":568,"author":{"gitId":"-"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":569,"author":{"gitId":"-"},"content":"                        cb.equal(teamsJoin.get(\"name\"), teamName)));"},{"lineNumber":570,"author":{"gitId":"-"},"content":""},{"lineNumber":571,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getSingleResult();"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":573,"author":{"gitId":"-"},"content":""},{"lineNumber":574,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":575,"author":{"gitId":"domoberzin"},"content":"     * Gets the section with the specified {@code sectionName} and {@code courseId}."},{"lineNumber":576,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":577,"author":{"gitId":"domoberzin"},"content":"    public Section getSection(String courseId, String sectionName) {"},{"lineNumber":578,"author":{"gitId":"domoberzin"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":579,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":580,"author":{"gitId":"domoberzin"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":581,"author":{"gitId":"domoberzin"},"content":"        CriteriaQuery\u003cSection\u003e cr \u003d cb.createQuery(Section.class);"},{"lineNumber":582,"author":{"gitId":"domoberzin"},"content":"        Root\u003cSection\u003e sectionRoot \u003d cr.from(Section.class);"},{"lineNumber":583,"author":{"gitId":"domoberzin"},"content":"        Join\u003cSection, Course\u003e courseJoin \u003d sectionRoot.join(\"course\");"},{"lineNumber":584,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":585,"author":{"gitId":"domoberzin"},"content":"        cr.select(sectionRoot)"},{"lineNumber":586,"author":{"gitId":"domoberzin"},"content":"                .where(cb.and("},{"lineNumber":587,"author":{"gitId":"domoberzin"},"content":"                        cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":588,"author":{"gitId":"domoberzin"},"content":"                        cb.equal(sectionRoot.get(\"name\"), sectionName)));"},{"lineNumber":589,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":590,"author":{"gitId":"domoberzin"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":591,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":592,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":593,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":594,"author":{"gitId":"domoberzin"},"content":"     * Gets a section by its {@code courseId} and {@code sectionName}."},{"lineNumber":595,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":596,"author":{"gitId":"domoberzin"},"content":"    public Section getSectionOrCreate(String courseId, String sectionName) {"},{"lineNumber":597,"author":{"gitId":"domoberzin"},"content":"        assert courseId !\u003d null;"},{"lineNumber":598,"author":{"gitId":"domoberzin"},"content":"        assert sectionName !\u003d null;"},{"lineNumber":599,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":600,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getSection(courseId, sectionName);"},{"lineNumber":601,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":602,"author":{"gitId":"domoberzin"},"content":"        if (section \u003d\u003d null) {"},{"lineNumber":603,"author":{"gitId":"domoberzin"},"content":"            Course course \u003d CoursesDb.inst().getCourse(courseId);"},{"lineNumber":604,"author":{"gitId":"domoberzin"},"content":"            section \u003d new Section(course, sectionName);"},{"lineNumber":605,"author":{"gitId":"domoberzin"},"content":"            persist(section);"},{"lineNumber":606,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":607,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":608,"author":{"gitId":"domoberzin"},"content":"        return section;"},{"lineNumber":609,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":610,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":611,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":612,"author":{"gitId":"domoberzin"},"content":"     * Gets a team by its {@code section} and {@code teamName}."},{"lineNumber":613,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":614,"author":{"gitId":"domoberzin"},"content":"    public Team getTeam(Section section, String teamName) {"},{"lineNumber":615,"author":{"gitId":"domoberzin"},"content":"        assert teamName !\u003d null;"},{"lineNumber":616,"author":{"gitId":"domoberzin"},"content":"        assert section !\u003d null;"},{"lineNumber":617,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":618,"author":{"gitId":"domoberzin"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":619,"author":{"gitId":"domoberzin"},"content":"        CriteriaQuery\u003cTeam\u003e cr \u003d cb.createQuery(Team.class);"},{"lineNumber":620,"author":{"gitId":"domoberzin"},"content":"        Root\u003cTeam\u003e teamRoot \u003d cr.from(Team.class);"},{"lineNumber":621,"author":{"gitId":"domoberzin"},"content":"        Join\u003cTeam, Section\u003e sectionJoin \u003d teamRoot.join(\"section\");"},{"lineNumber":622,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":623,"author":{"gitId":"domoberzin"},"content":"        cr.select(teamRoot)"},{"lineNumber":624,"author":{"gitId":"domoberzin"},"content":"                .where(cb.and("},{"lineNumber":625,"author":{"gitId":"domoberzin"},"content":"                        cb.equal(sectionJoin.get(\"id\"), section.getId()),"},{"lineNumber":626,"author":{"gitId":"domoberzin"},"content":"                        cb.equal(teamRoot.get(\"name\"), teamName)));"},{"lineNumber":627,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":628,"author":{"gitId":"domoberzin"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":629,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":630,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":631,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":632,"author":{"gitId":"domoberzin"},"content":"     * Gets a team by its {@code section} and {@code teamName}."},{"lineNumber":633,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":634,"author":{"gitId":"domoberzin"},"content":"    public Team getTeamOrCreate(Section section, String teamName) {"},{"lineNumber":635,"author":{"gitId":"domoberzin"},"content":"        assert teamName !\u003d null;"},{"lineNumber":636,"author":{"gitId":"domoberzin"},"content":"        assert section !\u003d null;"},{"lineNumber":637,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":638,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d getTeam(section, teamName);"},{"lineNumber":639,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":640,"author":{"gitId":"domoberzin"},"content":"        if (team \u003d\u003d null) {"},{"lineNumber":641,"author":{"gitId":"domoberzin"},"content":"            team \u003d new Team(section, teamName);"},{"lineNumber":642,"author":{"gitId":"domoberzin"},"content":"            persist(team);"},{"lineNumber":643,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":644,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":645,"author":{"gitId":"domoberzin"},"content":"        return team;"},{"lineNumber":646,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":647,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":648,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":649,"author":{"gitId":"domoberzin"},"content":"     * Updates a student."},{"lineNumber":650,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":651,"author":{"gitId":"domoberzin"},"content":"    public Student updateStudent(Student student)"},{"lineNumber":652,"author":{"gitId":"domoberzin"},"content":"            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":653,"author":{"gitId":"marquestye"},"content":"        checkBeforeUpdateStudent(student);"},{"lineNumber":654,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":655,"author":{"gitId":"marquestye"},"content":"        return merge(student);"},{"lineNumber":656,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":657,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":658,"author":{"gitId":"marquestye"},"content":"    /**"},{"lineNumber":659,"author":{"gitId":"marquestye"},"content":"     * Performs checks on student without updating."},{"lineNumber":660,"author":{"gitId":"marquestye"},"content":"     */"},{"lineNumber":661,"author":{"gitId":"marquestye"},"content":"    public void checkBeforeUpdateStudent(Student student)"},{"lineNumber":662,"author":{"gitId":"marquestye"},"content":"            throws EntityDoesNotExistException, InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":663,"author":{"gitId":"domoberzin"},"content":"        assert student !\u003d null;"},{"lineNumber":664,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":665,"author":{"gitId":"domoberzin"},"content":"        if (!student.isValid()) {"},{"lineNumber":666,"author":{"gitId":"domoberzin"},"content":"            throw new InvalidParametersException(student.getInvalidityInfo());"},{"lineNumber":667,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":668,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":669,"author":{"gitId":"domoberzin"},"content":"        if (getStudent(student.getId()) \u003d\u003d null) {"},{"lineNumber":670,"author":{"gitId":"domoberzin"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":671,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":672,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":673,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":674,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":93,"yuanxi1":30,"marquestye":10,"-":541}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackConstantSumQuestion;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackContributionQuestion;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackMcqQuestion;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackMsqQuestion;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackNumericalScaleQuestion;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackRankOptionsQuestion;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackRankRecipientsQuestion;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackRubricQuestion;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.questions.FeedbackTextQuestion;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import jakarta.persistence.CascadeType;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import jakarta.persistence.EnumType;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import jakarta.persistence.Enumerated;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import jakarta.persistence.Id;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import jakarta.persistence.Inheritance;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import jakarta.persistence.InheritanceType;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Represents a feedback question."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":42,"author":{"gitId":"-"},"content":"@Table(name \u003d \"FeedbackQuestions\")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"@Inheritance(strategy \u003d InheritanceType.SINGLE_TABLE)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"public abstract class FeedbackQuestion extends BaseEntity implements Comparable\u003cFeedbackQuestion\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Id"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"sessionId\")"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private FeedbackSession feedbackSession;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @OneToMany(mappedBy \u003d \"feedbackQuestion\", cascade \u003d CascadeType.REMOVE)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponse\u003e feedbackResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private Integer questionNumber;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d true)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private String description;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private FeedbackParticipantType giverType;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private FeedbackParticipantType recipientType;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private Integer numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackParticipantType\u003e showResponsesTo;"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackParticipantType\u003e showGiverNameTo;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackParticipantType\u003e showRecipientNameTo;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @UpdateTimestamp"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Column"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private Instant updatedAt;"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    protected FeedbackQuestion() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public FeedbackQuestion("},{"lineNumber":93,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, Integer questionNumber,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            String description, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Integer numOfEntitiesToGiveFeedbackTo, List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo, List\u003cFeedbackParticipantType\u003e showRecipientNameTo"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.setFeedbackSession(feedbackSession);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.setQuestionNumber(questionNumber);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.setDescription(description);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.setGiverType(giverType);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        this.setRecipientType(recipientType);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        this.setNumOfEntitiesToGiveFeedbackTo(numOfEntitiesToGiveFeedbackTo);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.setShowResponsesTo(showResponsesTo);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.setShowGiverNameTo(showGiverNameTo);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.setShowRecipientNameTo(showRecipientNameTo);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Gets a copy of the question details of the feedback question."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public abstract FeedbackQuestionDetails getQuestionDetailsCopy();"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Make a copy of the FeedbackQuestion."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public abstract FeedbackQuestion makeDeepCopy(FeedbackSession newFeedbackSession);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Creates a feedback question according to its {@code FeedbackQuestionType}."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static FeedbackQuestion makeQuestion("},{"lineNumber":124,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, Integer questionNumber,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String description, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            Integer numOfEntitiesToGiveFeedbackTo, List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo, List\u003cFeedbackParticipantType\u003e showRecipientNameTo,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails feedbackQuestionDetails"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        FeedbackQuestion feedbackQuestion \u003d null;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        switch (feedbackQuestionDetails.getQuestionType()) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        case TEXT:"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackTextQuestion("},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        case MCQ:"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackMcqQuestion("},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        case MSQ:"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackMsqQuestion("},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        case NUMSCALE:"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackNumericalScaleQuestion("},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        case CONSTSUM:"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        case CONSTSUM_OPTIONS:"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        case CONSTSUM_RECIPIENTS:"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackConstantSumQuestion("},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        case CONTRIB:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackContributionQuestion("},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        case RUBRIC:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackRubricQuestion("},{"lineNumber":178,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        case RANK_OPTIONS:"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackRankOptionsQuestion("},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        case RANK_RECIPIENTS:"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d new FeedbackRankRecipientsQuestion("},{"lineNumber":192,"author":{"gitId":"-"},"content":"                    feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                    numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                    feedbackQuestionDetails"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return feedbackQuestion;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        errors.addAll(FieldValidator.getValidityInfoForFeedbackParticipantType(giverType, recipientType));"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        errors.addAll(FieldValidator.getValidityInfoForFeedbackResponseVisibility(showResponsesTo,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                showGiverNameTo,"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                showRecipientNameTo));"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Checks if updating this question to the question will"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * require the responses to be deleted for consistency."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * Does not check if any responses exist."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public boolean areResponseDeletionsRequiredForChanges(FeedbackParticipantType giverType,"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                                                          FeedbackParticipantType recipientType,"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                                                          FeedbackQuestionDetails questionDetails) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        if (!giverType.equals(this.giverType)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                || !recipientType.equals(this.recipientType)) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        return this.getQuestionDetailsCopy().shouldChangesRequireResponseDeletion(questionDetails);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession() {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return feedbackSession;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"xenosf"},"content":"    public String getFeedbackSessionName() {"},{"lineNumber":243,"author":{"gitId":"xenosf"},"content":"        return feedbackSession.getName();"},{"lineNumber":244,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    public void setFeedbackSession(FeedbackSession feedbackSession) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        this.feedbackSession \u003d feedbackSession;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponses() {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return feedbackResponses;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    public void setFeedbackResponses(List\u003cFeedbackResponse\u003e feedbackResponses) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        this.feedbackResponses \u003d feedbackResponses;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    public Integer getQuestionNumber() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        return questionNumber;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public void setQuestionNumber(Integer questionNumber) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        this.questionNumber \u003d questionNumber;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public String getDescription() {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        return description;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    public void setDescription(String description) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Set the question details of the question."},{"lineNumber":276,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public abstract void setQuestionDetails(FeedbackQuestionDetails questionDetails);"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public FeedbackParticipantType getGiverType() {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        return giverType;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    public void setGiverType(FeedbackParticipantType giverType) {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        this.giverType \u003d giverType;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    public FeedbackParticipantType getRecipientType() {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        return recipientType;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    public void setRecipientType(FeedbackParticipantType recipientType) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        this.recipientType \u003d recipientType;"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public Integer getNumOfEntitiesToGiveFeedbackTo() {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        return numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"    public void setNumOfEntitiesToGiveFeedbackTo(Integer numOfEntitiesToGiveFeedbackTo) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        this.numOfEntitiesToGiveFeedbackTo \u003d numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowResponsesTo() {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        return showResponsesTo;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public void setShowResponsesTo(List\u003cFeedbackParticipantType\u003e showResponsesTo) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        this.showResponsesTo \u003d showResponsesTo;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowGiverNameTo() {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        return showGiverNameTo;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"    public void setShowGiverNameTo(List\u003cFeedbackParticipantType\u003e showGiverNameTo) {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        this.showGiverNameTo \u003d showGiverNameTo;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowRecipientNameTo() {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        return showRecipientNameTo;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"    public void setShowRecipientNameTo(List\u003cFeedbackParticipantType\u003e showRecipientNameTo) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        this.showRecipientNameTo \u003d showRecipientNameTo;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"    public Course getCourse() {"},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"        return this.feedbackSession.getCourse();"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public String getCourseId() {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        return this.feedbackSession.getCourse().getId();"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        return \"Question [id\u003d\" + id + \", questionNumber\u003d\" + questionNumber + \", description\u003d\" + description"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                + \", giverType\u003d\" + giverType + \", recipientType\u003d\" + recipientType"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                + \", numOfEntitiesToGiveFeedbackTo\u003d\" + numOfEntitiesToGiveFeedbackTo + \", showResponsesTo\u003d\""},{"lineNumber":348,"author":{"gitId":"-"},"content":"                + showResponsesTo + \", showGiverNameTo\u003d\" + showGiverNameTo + \", showRecipientNameTo\u003d\""},{"lineNumber":349,"author":{"gitId":"-"},"content":"                + showRecipientNameTo + \", isClosingEmailEnabled\u003d\" + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\""},{"lineNumber":350,"author":{"gitId":"-"},"content":"                + updatedAt + \"]\";"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    public int compareTo(FeedbackQuestion o) {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        if (o \u003d\u003d null) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            return 1;"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"        if (!this.questionNumber.equals(o.questionNumber)) {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            return Integer.compare(this.questionNumber, o.questionNumber);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        // Although question numbers ought to be unique in a feedback session,"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        // eventual consistency can result in duplicate questions numbers."},{"lineNumber":364,"author":{"gitId":"-"},"content":"        // Therefore, to ensure that the question order is always consistent to the user,"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        // compare feedbackQuestionId, which is guaranteed to be unique,"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        // when the questionNumbers are the same."},{"lineNumber":367,"author":{"gitId":"-"},"content":"        return this.id.compareTo(o.id);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        // FeedbackQuestion ID uniquely identifies a FeedbackQuestion."},{"lineNumber":373,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            FeedbackQuestion otherQuestion \u003d (FeedbackQuestion) other;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherQuestion.getId());"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":391,"author":{"gitId":"-"},"content":"     * Returns true if the response is visible to the given participant type."},{"lineNumber":392,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    public boolean isResponseVisibleTo(FeedbackParticipantType userType) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        return showResponsesTo.contains(userType);"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"-"},"content":"}"},{"lineNumber":397,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"xenosf":8,"-":389}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackConstantSumResponse;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackContributionResponse;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackMcqResponse;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackMsqResponse;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackNumericalScaleResponse;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackRankOptionsResponse;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackRankRecipientsResponse;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackRubricResponse;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.responses.FeedbackTextResponse;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.CascadeType;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import jakarta.persistence.Id;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import jakarta.persistence.Inheritance;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import jakarta.persistence.InheritanceType;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Represents a Feedback Response."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":37,"author":{"gitId":"-"},"content":"@Table(name \u003d \"FeedbackResponses\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@Inheritance(strategy \u003d InheritanceType.SINGLE_TABLE)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public abstract class FeedbackResponse extends BaseEntity {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Id"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"questionId\")"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FeedbackQuestion feedbackQuestion;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @OneToMany(mappedBy \u003d \"feedbackResponse\", cascade \u003d CascadeType.REMOVE)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseComment\u003e feedbackResponseComments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private String giver;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"giverSectionId\")"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Section giverSection;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private String recipient;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"recipientSectionId\")"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private Section recipientSection;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @UpdateTimestamp"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private Instant updatedAt;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    protected FeedbackResponse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public FeedbackResponse("},{"lineNumber":72,"author":{"gitId":"-"},"content":"            FeedbackQuestion feedbackQuestion, String giver,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            Section giverSection, String recipient, Section recipientSection"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.setFeedbackQuestion(feedbackQuestion);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.setGiver(giver);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.setGiverSection(giverSection);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.setRecipient(recipient);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.setRecipientSection(recipientSection);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Creates a feedback response according to its {@code FeedbackQuestionType}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static FeedbackResponse makeResponse("},{"lineNumber":87,"author":{"gitId":"-"},"content":"            FeedbackQuestion feedbackQuestion, String giver,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            Section giverSection, String receiver, Section receiverSection,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            FeedbackResponseDetails responseDetails"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FeedbackResponse feedbackResponse \u003d null;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        switch (responseDetails.getQuestionType()) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        case TEXT:"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackTextResponse("},{"lineNumber":95,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        case MCQ:"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackMcqResponse("},{"lineNumber":100,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        case MSQ:"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackMsqResponse("},{"lineNumber":105,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        case NUMSCALE:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackNumericalScaleResponse("},{"lineNumber":110,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        case CONSTSUM:"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        case CONSTSUM_OPTIONS:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        case CONSTSUM_RECIPIENTS:"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackConstantSumResponse("},{"lineNumber":117,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        case CONTRIB:"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackContributionResponse("},{"lineNumber":122,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        case RUBRIC:"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackRubricResponse("},{"lineNumber":127,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        case RANK_OPTIONS:"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackRankOptionsResponse("},{"lineNumber":132,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        case RANK_RECIPIENTS:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            feedbackResponse \u003d new FeedbackRankRecipientsResponse("},{"lineNumber":137,"author":{"gitId":"-"},"content":"                feedbackQuestion, giver, giverSection, receiver, receiverSection, responseDetails"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return feedbackResponse;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Update a feedback response according to its {@code FeedbackQuestionType}."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static FeedbackResponse updateResponse("},{"lineNumber":148,"author":{"gitId":"-"},"content":"            FeedbackResponse originalFeedbackResponse,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            FeedbackQuestion feedbackQuestion, String giver,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Section giverSection, String receiver, Section receiverSection,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            FeedbackResponseDetails responseDetails"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        FeedbackResponse updatedFeedbackResponse \u003d FeedbackResponse.makeResponse("},{"lineNumber":154,"author":{"gitId":"-"},"content":"                feedbackQuestion,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                giver,"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                giverSection,"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                receiver,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                receiverSection,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                responseDetails"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        updatedFeedbackResponse.setCreatedAt(originalFeedbackResponse.getCreatedAt());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        updatedFeedbackResponse.setId(originalFeedbackResponse.getId());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return updatedFeedbackResponse;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Gets a copy of the question details of the feedback question."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public abstract FeedbackResponseDetails getFeedbackResponseDetailsCopy();"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public FeedbackQuestion getFeedbackQuestion() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return feedbackQuestion;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void setFeedbackQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        this.feedbackQuestion \u003d feedbackQuestion;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseComments() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return feedbackResponseComments;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void setFeedbackResponseComments(List\u003cFeedbackResponseComment\u003e feedbackResponseComments) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        this.feedbackResponseComments \u003d feedbackResponseComments;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public String getGiver() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return giver;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void setGiver(String giver) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        this.giver \u003d giver;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public Section getGiverSection() {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return giverSection;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"    public String getGiverSectionName() {"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"        return giverSection.getName();"},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void setGiverSection(Section giverSection) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        this.giverSection \u003d giverSection;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public String getRecipient() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return recipient;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void setRecipient(String recipient) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        this.recipient \u003d recipient;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public Section getRecipientSection() {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return recipientSection;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"    public String getRecipientSectionName() {"},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"        return recipientSection.getName();"},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public void setRecipientSection(Section recipientSection) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        this.recipientSection \u003d recipientSection;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return \"FeedbackResponse [id\u003d\" + id + \", giver\u003d\" + giver + \", recipient\u003d\" + recipient"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            FeedbackResponse otherResponse \u003d (FeedbackResponse) other;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherResponse.getId());"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":8,"-":264}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackResponseComment.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.OnDelete;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.OnDeleteAction;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import jakarta.persistence.GeneratedValue;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.Id;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Represents a feedback response comment."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":29,"author":{"gitId":"-"},"content":"@Table(name \u003d \"FeedbackResponseComments\")"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class FeedbackResponseComment extends BaseEntity {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Id"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @GeneratedValue"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Long id;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @OnDelete(action \u003d OnDeleteAction.CASCADE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"responseId\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private FeedbackResponse feedbackResponse;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private String giver;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeConverter.class)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FeedbackParticipantType giverType;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"giverSectionId\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Section giverSection;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"recipientSectionId\")"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Section recipientSection;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private String commentText;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private boolean isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private boolean isCommentFromFeedbackParticipant;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackParticipantType\u003e showCommentTo;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackParticipantType\u003e showGiverNameTo;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @UpdateTimestamp"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private Instant updatedAt;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private String lastEditorEmail;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected FeedbackResponseComment() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public FeedbackResponseComment("},{"lineNumber":83,"author":{"gitId":"-"},"content":"            FeedbackResponse feedbackResponse, String giver, FeedbackParticipantType giverType,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Section giverSection, Section recipientSection, String commentText,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            boolean isVisibilityFollowingFeedbackQuestion, boolean isCommentFromFeedbackParticipant,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showCommentTo, List\u003cFeedbackParticipantType\u003e showGiverNameTo,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            String lastEditorEmail"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.setFeedbackResponse(feedbackResponse);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.setGiver(giver);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.setGiverType(giverType);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.setGiverSection(giverSection);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.setRecipientSection(recipientSection);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.setCommentText(commentText);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.setIsVisibilityFollowingFeedbackQuestion(isVisibilityFollowingFeedbackQuestion);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.setIsCommentFromFeedbackParticipant(isCommentFromFeedbackParticipant);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.setShowCommentTo(showCommentTo);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.setShowGiverNameTo(showGiverNameTo);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.setLastEditorEmail(lastEditorEmail);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public Long getId() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setId(Long id) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public FeedbackResponse getFeedbackResponse() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return feedbackResponse;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setFeedbackResponse(FeedbackResponse feedbackResponse) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        this.feedbackResponse \u003d feedbackResponse;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String getGiver() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return giver;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void setGiver(String giver) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        this.giver \u003d giver;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public FeedbackParticipantType getGiverType() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return giverType;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setGiverType(FeedbackParticipantType giverType) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        this.giverType \u003d giverType;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public Section getGiverSection() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return giverSection;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void setGiverSection(Section giverSection) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        this.giverSection \u003d giverSection;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public Section getRecipientSection() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return recipientSection;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setRecipientSection(Section recipientSection) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        this.recipientSection \u003d recipientSection;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public String getCommentText() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return commentText;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void setCommentText(String commentText) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        this.commentText \u003d commentText;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public boolean getIsVisibilityFollowingFeedbackQuestion() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return this.isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setIsVisibilityFollowingFeedbackQuestion(boolean isVisibilityFollowingFeedbackQuestion) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        this.isVisibilityFollowingFeedbackQuestion \u003d isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public boolean getIsCommentFromFeedbackParticipant() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return this.isCommentFromFeedbackParticipant;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void setIsCommentFromFeedbackParticipant(boolean isCommentFromFeedbackParticipant) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        this.isCommentFromFeedbackParticipant \u003d isCommentFromFeedbackParticipant;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowCommentTo() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return showCommentTo;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void setShowCommentTo(List\u003cFeedbackParticipantType\u003e showCommentTo) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        this.showCommentTo \u003d showCommentTo;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowGiverNameTo() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return showGiverNameTo;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void setShowGiverNameTo(List\u003cFeedbackParticipantType\u003e showGiverNameTo) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        this.showGiverNameTo \u003d showGiverNameTo;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public String getLastEditorEmail() {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return lastEditorEmail;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void setLastEditorEmail(String lastEditorEmail) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        this.lastEditorEmail \u003d lastEditorEmail;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Formats the entity before persisting in database."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * TODO: Override when BaseEntity adds abstract sanitizeForSaving"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void sanitizeForSaving() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        this.commentText \u003d SanitizationHelper.sanitizeForRichText(this.commentText);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"     * Returns true if the response comment is visible to the given participant type."},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"    public boolean checkIsVisibleTo(FeedbackParticipantType viewerType) {"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"        return showCommentTo.contains(viewerType);"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForCommentGiverType(giverType), errors);"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForVisibilityOfFeedbackParticipantComments("},{"lineNumber":228,"author":{"gitId":"-"},"content":"                isCommentFromFeedbackParticipant, isVisibilityFollowingFeedbackQuestion), errors);"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        return \"FeedbackResponse [id\u003d\" + id + \", giver\u003d\" + giver + \", commentText\u003d\" + commentText"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                + \", isVisibilityFollowingFeedbackQuestion\u003d\" + isVisibilityFollowingFeedbackQuestion"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                + \", isCommentFromFeedbackParticipant\u003d\" + isCommentFromFeedbackParticipant"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                + \", lastEditorEmail\u003d\" + lastEditorEmail + \", createdAt\u003d\" + getCreatedAt()"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            FeedbackResponseComment otherResponse \u003d (FeedbackResponseComment) other;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherResponse.getId());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":7,"-":253}},{"path":"src/main/java/teammates/storage/sqlentity/Student.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Student."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Table(name \u003d \"Students\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Student extends User {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private String comments;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected Student() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Student(Course course, String name, String email, String comments) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(course, name, email);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.setComments(comments);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"domoberzin"},"content":"    public Student(Course course, String name, String email, String comments, Team team) {"},{"lineNumber":34,"author":{"gitId":"domoberzin"},"content":"        super(course, name, email);"},{"lineNumber":35,"author":{"gitId":"domoberzin"},"content":"        this.setComments(comments);"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"        this.setTeam(team);"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"domoberzin"},"content":"     * Gets the comments of the student."},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String getComments() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return comments;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"     * Sets the comments of the student."},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setComments(String comments) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.comments \u003d SanitizationHelper.sanitizeTextField(comments);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public String getTeamName() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return getTeam().getName();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getSectionName() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this.getTeam().getSection().getName();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Section getSection() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this.getTeam().getSection();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return \"Student [id\u003d\" + super.getId() + \", comments\u003d\" + comments"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assert comments !\u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(super.getEmail()), errors);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForStudentRoleComments(comments), errors);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(super.getName()), errors);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public String getRegistrationUrl() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Config.getFrontEndAppUrl(Const.WebPageURIs.JOIN_PAGE)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .withRegistrationKey(getRegKey())"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .withEntityType(Const.EntityType.STUDENT)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":12,"-":81}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackMsqQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents an msq question."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FeedbackMsqQuestion extends FeedbackQuestion {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false, columnDefinition \u003d \"TEXT\")"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackMsqQuestionDetailsConverter.class)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private FeedbackMsqQuestionDetails questionDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    protected FeedbackMsqQuestion() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public FeedbackMsqQuestion("},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, Integer questionNumber,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            String description, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Integer numOfEntitiesToGiveFeedbackTo, List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo, List\u003cFeedbackParticipantType\u003e showRecipientNameTo,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails feedbackQuestionDetails"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super(feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setFeedBackQuestionDetails((FeedbackMsqQuestionDetails) feedbackQuestionDetails);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public FeedbackQuestionDetails getQuestionDetailsCopy() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return questionDetails.getDeepCopy();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public FeedbackMsqQuestion makeDeepCopy(FeedbackSession newFeedbackSession) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new FeedbackMsqQuestion("},{"lineNumber":51,"author":{"gitId":"-"},"content":"                newFeedbackSession, this.getQuestionNumber(), this.getDescription(), this.getGiverType(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                this.getRecipientType(), this.getNumOfEntitiesToGiveFeedbackTo(), new ArrayList\u003c\u003e(this.getShowResponsesTo()),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                new ArrayList\u003c\u003e(this.getShowGiverNameTo()), new ArrayList\u003c\u003e(this.getShowRecipientNameTo()),"},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"                this.questionDetails.getDeepCopy()"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setQuestionDetails(FeedbackQuestionDetails questionDetails) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.questionDetails \u003d (FeedbackMsqQuestionDetails) questionDetails;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return \"FeedbackMsqQuestion [id\u003d\" + super.getId()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setFeedBackQuestionDetails(FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public FeedbackMsqQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return questionDetails;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Converter for FeedbackMsqQuestion specific attributes."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Converter"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static class FeedbackMsqQuestionDetailsConverter"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            extends FeedbackQuestionDetailsConverter {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":1,"-":83}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackRankOptionsQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents a rank options question."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FeedbackRankOptionsQuestion extends FeedbackQuestion {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false, columnDefinition \u003d \"TEXT\")"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d FeedbackRankOptionsQuestionDetailsConverter.class)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private FeedbackRankOptionsQuestionDetails questionDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    protected FeedbackRankOptionsQuestion() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public FeedbackRankOptionsQuestion("},{"lineNumber":32,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession, Integer questionNumber,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            String description, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            Integer numOfEntitiesToGiveFeedbackTo, List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo, List\u003cFeedbackParticipantType\u003e showRecipientNameTo,"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"            FeedbackQuestionDetails feedbackQuestionDetails) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(feedbackSession, questionNumber, description, giverType, recipientType,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                numOfEntitiesToGiveFeedbackTo, showResponsesTo, showGiverNameTo, showRecipientNameTo);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setFeedBackQuestionDetails((FeedbackRankOptionsQuestionDetails) feedbackQuestionDetails);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public FeedbackQuestionDetails getQuestionDetailsCopy() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return questionDetails.getDeepCopy();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public FeedbackRankOptionsQuestion makeDeepCopy(FeedbackSession newFeedbackSession) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new FeedbackRankOptionsQuestion("},{"lineNumber":50,"author":{"gitId":"-"},"content":"                newFeedbackSession, this.getQuestionNumber(), this.getDescription(), this.getGiverType(),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                this.getRecipientType(), this.getNumOfEntitiesToGiveFeedbackTo(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                new ArrayList\u003c\u003e(this.getShowResponsesTo()), new ArrayList\u003c\u003e(this.getShowGiverNameTo()),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                new ArrayList\u003c\u003e(this.getShowRecipientNameTo()),"},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":"                this.questionDetails.getDeepCopy());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setQuestionDetails(FeedbackQuestionDetails questionDetails) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.questionDetails \u003d (FeedbackRankOptionsQuestionDetails) questionDetails;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return \"FeedbackRankOptionsQuestion [id\u003d\" + super.getId()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setFeedBackQuestionDetails(FeedbackRankOptionsQuestionDetails questionDetails) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public FeedbackRankOptionsQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return questionDetails;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Converter for FeedbackRankOptionsQuestion specific attributes."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Converter"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static class FeedbackRankOptionsQuestionDetailsConverter"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            extends FeedbackQuestionDetailsConverter {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mingyuanc":2,"-":81}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackMissingResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":" * Represents a missing response."},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"public class FeedbackMissingResponse extends FeedbackTextResponse {"},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"    private String giverSectionName;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"    private String recipientSectionName;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"    protected FeedbackMissingResponse() {"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"        // required by Hibernate"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":"    public FeedbackMissingResponse("},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestion feedbackQuestion, String giver,"},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"            String giverSectionName, String recipient, String recipientSectionName"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"    ) {"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"        super(feedbackQuestion, giver, null, recipient, null, new FeedbackTextResponseDetails(Const.MISSING_RESPONSE_TEXT));"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"        this.giverSectionName \u003d giverSectionName;"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":"        this.recipientSectionName \u003d recipientSectionName;"},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"    public String getGiverSectionName() {"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"        return giverSectionName;"},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":"    public String getRecipientSectionName() {"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"        return recipientSectionName;"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":37}},{"path":"src/main/java/teammates/storage/sqlsearch/SearchManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlsearch;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.net.SocketTimeoutException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.apache.commons.lang.StringUtils;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.apache.solr.client.solrj.SolrQuery;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.apache.solr.client.solrj.SolrServerException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.apache.solr.client.solrj.impl.HttpSolrClient;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.apache.solr.client.solrj.response.QueryResponse;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.apache.solr.common.SolrDocument;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.apache.solr.common.SolrInputDocument;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Acts as a proxy to search service."},{"lineNumber":28,"author":{"gitId":"-"},"content":" *"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * @param \u003cT\u003e Type of entity to be returned"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"abstract class SearchManager\u003cT extends BaseEntity\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String ERROR_DELETE_DOCUMENT \u003d \"Failed to delete document(s) %s in Solr. Root cause: %s \";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String ERROR_SEARCH_DOCUMENT \u003d \"Failed to search for document(s) %s from Solr. Root cause: %s \";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String ERROR_SEARCH_NOT_IMPLEMENTED \u003d \"Search service is not implemented\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String ERROR_PUT_DOCUMENT \u003d \"Failed to put document %s into Solr. Root cause: %s \";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String ERROR_RESET_COLLECTION \u003d \"Failed to reset collections. Root cause: %s \";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final int START_INDEX \u003d 0;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final int NUM_OF_RESULTS \u003d Const.SEARCH_QUERY_SIZE_LIMIT;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final HttpSolrClient client;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final boolean isResetAllowed;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    SearchManager(String searchServiceHost, boolean isResetAllowed) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.isResetAllowed \u003d Config.IS_DEV_SERVER \u0026\u0026 isResetAllowed;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(searchServiceHost)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.client \u003d null;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.client \u003d new HttpSolrClient.Builder(searchServiceHost)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                    .withConnectionTimeout(2000) // timeout for connecting to Solr server"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    .withSocketTimeout(5000) // timeout for reading data"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    SolrQuery getBasicQuery(String queryString) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        SolrQuery query \u003d new SolrQuery();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String cleanQueryString \u003d cleanSpecialChars(queryString);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        query.setQuery(cleanQueryString);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        query.setStart(START_INDEX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        query.setRows(NUM_OF_RESULTS);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return query;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    QueryResponse performQuery(SolrQuery query) throws SearchServiceException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (client \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new SearchServiceException(\"Full-text search is not available.\", HttpStatus.SC_NOT_IMPLEMENTED);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return client.query(getCollectionName(), query);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        } catch (SolrServerException e) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Throwable rootCause \u003d e.getRootCause();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_SEARCH_DOCUMENT, query.getQuery(), rootCause), e);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (rootCause instanceof SocketTimeoutException) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                throw new SearchServiceException(\"A timeout was reached while processing your request. \""},{"lineNumber":84,"author":{"gitId":"-"},"content":"                        + \"Please try again later.\", e, HttpStatus.SC_GATEWAY_TIMEOUT);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                throw new SearchServiceException(\"An error has occurred while performing search. \""},{"lineNumber":87,"author":{"gitId":"-"},"content":"                        + \"Please try again later.\", e, HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_SEARCH_DOCUMENT, query.getQuery(), e.getCause()), e);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new SearchServiceException(\"An error has occurred while performing search. \""},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    + \"Please try again later.\", e, HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    abstract String getCollectionName();"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    abstract SearchDocument\u003cT\u003e createDocument(T entity);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Creates or updates search document for the given entity."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void putDocument(T entity) throws SearchServiceException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (client \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            log.warning(ERROR_SEARCH_NOT_IMPLEMENTED);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (entity \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Map\u003cString, Object\u003e searchableFields \u003d createDocument(entity).getSearchableFields();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        SolrInputDocument document \u003d new SolrInputDocument();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        searchableFields.forEach((key, value) -\u003e document.addField(key, value));"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            client.add(getCollectionName(), Collections.singleton(document));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            client.commit(getCollectionName());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (SolrServerException e) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_PUT_DOCUMENT, document, e.getRootCause()), e);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new SearchServiceException(e, HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_PUT_DOCUMENT, document, e.getCause()), e);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new SearchServiceException(e, HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Removes search documents based on the given keys."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void deleteDocuments(List\u003cString\u003e keys) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (client \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            log.warning(ERROR_SEARCH_NOT_IMPLEMENTED);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (keys.isEmpty()) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            client.deleteById(getCollectionName(), keys);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            client.commit(getCollectionName());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (SolrServerException e) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_DELETE_DOCUMENT, keys, e.getRootCause()), e);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_DELETE_DOCUMENT, keys, e.getCause()), e);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Resets the data for all collections if, and only if called during component"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * tests."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void resetCollections() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (client \u003d\u003d null || !isResetAllowed) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            client.deleteByQuery(getCollectionName(), \"*:*\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            client.commit(getCollectionName());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (SolrServerException e) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_RESET_COLLECTION, e.getRootCause()), e);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            log.severe(String.format(ERROR_RESET_COLLECTION, e.getCause()), e);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private String cleanSpecialChars(String queryString) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String htmlTagStripPattern \u003d \"\u003c[^\u003e]*\u003e\";"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // Solr special characters: + - \u0026\u0026 || ! ( ) { } [ ] ^ \" ~ * ? : \\ /"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        String res \u003d queryString.replaceAll(htmlTagStripPattern, \"\")"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .replace(\"\\\\\", \"\\\\\\\\\")"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .replace(\"+\", \"\\\\+\")"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .replace(\"-\", \"\\\\-\")"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .replace(\"\u0026\u0026\", \"\\\\\u0026\u0026\")"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .replace(\"||\", \"\\\\||\")"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                .replace(\"!\", \"\\\\!\")"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .replace(\"(\", \"\\\\(\")"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .replace(\")\", \"\\\\)\")"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                .replace(\"{\", \"\\\\{\")"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                .replace(\"}\", \"\\\\}\")"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .replace(\"[\", \"\\\\[\")"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                .replace(\"]\", \"\\\\]\")"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                .replace(\"^\", \"\\\\^\")"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .replace(\"~\", \"\\\\~\")"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                .replace(\"?\", \"\\\\?\")"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                .replace(\":\", \"\\\\:\")"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                .replace(\"/\", \"\\\\/\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // imbalanced double quotes are invalid"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        int count \u003d StringUtils.countMatches(res, \"\\\"\");"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        if (count % 2 \u003d\u003d 1) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            res \u003d res.replace(\"\\\"\", \"\");"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // use exact match only when there\u0027s email-like input"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        if (res.contains(\"@\") \u0026\u0026 count \u003d\u003d 0) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return \"\\\"\" + res + \"\\\"\";"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return res;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    abstract T getEntityFromDocument(SolrDocument document);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    abstract void sortResult(List\u003cT\u003e result);"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    List\u003cT\u003e convertDocumentToEntities(List\u003cSolrDocument\u003e documents) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (documents \u003d\u003d null) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        List\u003cT\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        for (SolrDocument document : documents) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            T entity \u003d getEntityFromDocument(document);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"            // Entity will be null if document corresponds to entity in datastore"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            if (entity \u003d\u003d null) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                // search engine out of sync as SearchManager may fail to delete documents"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                // the chance is low and it is generally not a big problem"},{"lineNumber":226,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":227,"author":{"gitId":"domoberzin"},"content":"                // these lines below are commented out as they interfere with the dual db search,"},{"lineNumber":228,"author":{"gitId":"domoberzin"},"content":"                // and cause unwanted deletions, please refer to the following PR for more details"},{"lineNumber":229,"author":{"gitId":"domoberzin"},"content":"                // [PR](https://github.com/TEAMMATES/teammates/pull/12838)"},{"lineNumber":230,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":231,"author":{"gitId":"domoberzin"},"content":"                // String id \u003d (String) document.getFirstValue(\"id\");"},{"lineNumber":232,"author":{"gitId":"domoberzin"},"content":"                // deleteDocuments(Collections.singletonList(id));"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            result.add(entity);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        sortResult(result);"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return result;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":7,"-":235}},{"path":"src/main/java/teammates/ui/output/NotificationData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.output;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"domoberzin"},"content":"import org.threeten.bp.Instant;"},{"lineNumber":4,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API output format of a notification."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class NotificationData extends ApiOutput {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private String notificationId;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private long startTimestamp;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private long endTimestamp;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private long createdAt;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private NotificationStyle style;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private NotificationTargetUser targetUser;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private String title;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private String message;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private boolean shown;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public NotificationData(NotificationAttributes notificationAttributes) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.notificationId \u003d notificationAttributes.getNotificationId();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.startTimestamp \u003d notificationAttributes.getStartTime().toEpochMilli();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.endTimestamp \u003d notificationAttributes.getEndTime().toEpochMilli();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.createdAt \u003d notificationAttributes.getCreatedAt().toEpochMilli();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.style \u003d notificationAttributes.getStyle();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetUser \u003d notificationAttributes.getTargetUser();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.title \u003d notificationAttributes.getTitle();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.message \u003d notificationAttributes.getMessage();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.shown \u003d notificationAttributes.isShown();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public NotificationData(Notification notification) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.notificationId \u003d notification.getId().toString();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.startTimestamp \u003d notification.getStartTime().toEpochMilli();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.endTimestamp \u003d notification.getEndTime().toEpochMilli();"},{"lineNumber":41,"author":{"gitId":"domoberzin"},"content":"        this.createdAt \u003d notification.getCreatedAt() \u003d\u003d null"},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"                ? Instant.now().toEpochMilli() : notification.getCreatedAt().toEpochMilli();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.style \u003d notification.getStyle();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.targetUser \u003d notification.getTargetUser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.title \u003d notification.getTitle();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.message \u003d notification.getMessage();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.shown \u003d notification.isShown();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String getNotificationId() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this.notificationId;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public long getStartTimestamp() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this.startTimestamp;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public long getEndTimestamp() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this.endTimestamp;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public long getCreatedAt() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this.createdAt;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public NotificationStyle getStyle() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this.style;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public NotificationTargetUser getTargetUser() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this.targetUser;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public String getTitle() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this.title;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this.message;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean isShown() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this.shown;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":4,"-":81}},{"path":"src/main/java/teammates/ui/output/SessionResultsData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.output;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Queue;"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.CourseRoster;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SessionResultsBundle;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlCourseRoster;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlSessionResultsBundle;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * API output format for session results, including statistics."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class SessionResultsData extends ApiOutput {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String REGEX_ANONYMOUS_PARTICIPANT_HASH \u003d \"[0-9]{1,10}\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    final List\u003cQuestionOutput\u003e questions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    SessionResultsData() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // use factory method instead"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Factory method to construct API output for instructor."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static SessionResultsData initForInstructor(SessionResultsBundle bundle) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        SessionResultsData sessionResultsData \u003d new SessionResultsData();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionsWithResponses \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                bundle.getQuestionResponseMap();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        questionsWithResponses.forEach((questionId, responses) -\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(questionId);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetailsCopy();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                    questionDetails.getQuestionResultStatisticsJson(question, null, bundle), false, false);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            // put normal responses"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            List\u003cResponseOutput\u003e allResponses \u003d buildResponsesForInstructor(responses, bundle, false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            qnOutput.allResponses.addAll(allResponses);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"            // put missing responses"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e missingResponses \u003d bundle.getQuestionMissingResponseMap().get(questionId);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            qnOutput.allResponses.addAll(buildResponsesForInstructor(missingResponses, bundle, true));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return sessionResultsData;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"     * Factory method to construct API output for instructor."},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"    public static SessionResultsData initForInstructor(SqlSessionResultsBundle bundle) {"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"        SessionResultsData sessionResultsData \u003d new SessionResultsData();"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e questionsWithResponses \u003d"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"                bundle.getQuestionResponseMap();"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"        questionsWithResponses.forEach((question, responses) -\u003e {"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetailsCopy();"},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question,"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"                    questionDetails.getQuestionResultStatisticsJson(question, null, bundle), false, false);"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"            // put normal responses"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"            List\u003cResponseOutput\u003e allResponses \u003d buildResponsesForInstructor(responses, bundle, false);"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":"            qnOutput.allResponses.addAll(allResponses);"},{"lineNumber":92,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":93,"author":{"gitId":"xenosf"},"content":"            // put missing responses"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e missingResponses \u003d bundle.getQuestionMissingResponseMap().get(question);"},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"            qnOutput.allResponses.addAll(buildResponsesForInstructor(missingResponses, bundle, true));"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":"        return sessionResultsData;"},{"lineNumber":101,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Factory method to construct API output for student."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static SessionResultsData initForStudent(SessionResultsBundle bundle, StudentAttributes student) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        SessionResultsData sessionResultsData \u003d new SessionResultsData();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionsWithResponses \u003d"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                bundle.getQuestionResponseMap();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        questionsWithResponses.forEach((questionId, responses) -\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(questionId);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetailsCopy();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            // check if question has comments (on any responses) not visible for preview"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            boolean hasCommentNotVisibleForPreview \u003d bundle.getQuestionsWithCommentNotVisibleForPreview()"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                    .contains(questionId);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                    questionDetails.getQuestionResultStatisticsJson(question, student.getEmail(), bundle),"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                    false, hasCommentNotVisibleForPreview);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Map\u003cString, List\u003cResponseOutput\u003e\u003e otherResponsesMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"            qnOutput.getFeedbackQuestion().hideInformationForStudent();"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"            if (questionDetails.isIndividualResponsesShownToStudents()) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                for (FeedbackResponseAttributes response : responses) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                    boolean isUserInstructor \u003d Const.USER_TEAM_FOR_INSTRUCTOR.equals(student.getTeam());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"                    boolean isUserGiver \u003d student.getEmail().equals(response.getGiver())"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                            \u0026\u0026 (isUserInstructor \u0026\u0026 question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                            || !isUserInstructor \u0026\u0026 question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    boolean isUserRecipient \u003d student.getEmail().equals(response.getRecipient())"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                            \u0026\u0026 (isUserInstructor \u0026\u0026 question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                            || !isUserInstructor \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    ResponseOutput responseOutput \u003d buildSingleResponseForStudent(response, bundle, student);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    if (isUserRecipient) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                        qnOutput.responsesToSelf.add(responseOutput);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    if (isUserGiver) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                        qnOutput.responsesFromSelf.add(responseOutput);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    if (!isUserRecipient \u0026\u0026 !isUserGiver) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                        // we don\u0027t need care about the keys of the map here"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                        // as only the values of the map will be used"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                        otherResponsesMap.computeIfAbsent(response.getRecipient(), k -\u003e new ArrayList\u003c\u003e())"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                                .add(responseOutput);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    qnOutput.allResponses.add(responseOutput);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            qnOutput.otherResponses.addAll(otherResponsesMap.values());"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Map\u003cString, FeedbackQuestionAttributes\u003e questionsWithResponsesNotVisibleForPreview \u003d"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                bundle.getQuestionsNotVisibleForPreviewMap();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        questionsWithResponsesNotVisibleForPreview.forEach((questionId, question) -\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question, \"\", true, false);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return sessionResultsData;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"     * Factory method to construct API output for student."},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"    public static SessionResultsData initForStudent(SqlSessionResultsBundle bundle, Student student) {"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":"        SessionResultsData sessionResultsData \u003d new SessionResultsData();"},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackQuestion, List\u003cFeedbackResponse\u003e\u003e questionsWithResponses \u003d"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"                bundle.getQuestionResponseMap();"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":178,"author":{"gitId":"xenosf"},"content":"        questionsWithResponses.forEach((question, responses) -\u003e {"},{"lineNumber":179,"author":{"gitId":"xenosf"},"content":"            FeedbackQuestionDetails questionDetails \u003d question.getQuestionDetailsCopy();"},{"lineNumber":180,"author":{"gitId":"xenosf"},"content":"            // check if question has comments (on any responses) not visible for preview"},{"lineNumber":181,"author":{"gitId":"xenosf"},"content":"            boolean hasCommentNotVisibleForPreview \u003d bundle.getQuestionsWithCommentNotVisibleForPreviewSet()"},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"                    .contains(question);"},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question,"},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":"                    questionDetails.getQuestionResultStatisticsJson(question, student.getEmail(), bundle),"},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"                    false, hasCommentNotVisibleForPreview);"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":"            Map\u003cString, List\u003cResponseOutput\u003e\u003e otherResponsesMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"            qnOutput.getFeedbackQuestion().hideInformationForStudent();"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"            if (questionDetails.isIndividualResponsesShownToStudents()) {"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"                for (FeedbackResponse response : responses) {"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"                    boolean isUserInstructor \u003d Const.USER_TEAM_FOR_INSTRUCTOR.equals(student.getTeamName());"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"                    boolean isUserGiver \u003d student.getEmail().equals(response.getGiver())"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"                            \u0026\u0026 (isUserInstructor \u0026\u0026 question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":"                            || !isUserInstructor \u0026\u0026 question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"                    boolean isUserRecipient \u003d student.getEmail().equals(response.getRecipient())"},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"                            \u0026\u0026 (isUserInstructor \u0026\u0026 question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"                            || !isUserInstructor \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":"                    ResponseOutput responseOutput \u003d buildSingleResponseForStudent(response, bundle, student);"},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":"                    if (isUserRecipient) {"},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":"                        qnOutput.responsesToSelf.add(responseOutput);"},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":"                    if (isUserGiver) {"},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"                        qnOutput.responsesFromSelf.add(responseOutput);"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":"                    if (!isUserRecipient \u0026\u0026 !isUserGiver) {"},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"                        // we don\u0027t need care about the keys of the map here"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"                        // as only the values of the map will be used"},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"                        otherResponsesMap.computeIfAbsent(response.getRecipient(), k -\u003e new ArrayList\u003c\u003e())"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":"                                .add(responseOutput);"},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"                    }"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"                    qnOutput.allResponses.add(responseOutput);"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":"            qnOutput.otherResponses.addAll(otherResponsesMap.values());"},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":224,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":225,"author":{"gitId":"xenosf"},"content":"        Set\u003cFeedbackQuestion\u003e questionsWithResponsesNotVisibleForPreview \u003d"},{"lineNumber":226,"author":{"gitId":"xenosf"},"content":"                bundle.getQuestionsNotVisibleForPreviewSet();"},{"lineNumber":227,"author":{"gitId":"xenosf"},"content":"        questionsWithResponsesNotVisibleForPreview.forEach(question -\u003e {"},{"lineNumber":228,"author":{"gitId":"xenosf"},"content":"            QuestionOutput qnOutput \u003d new QuestionOutput(question, \"\", true, false);"},{"lineNumber":229,"author":{"gitId":"xenosf"},"content":"            sessionResultsData.questions.add(qnOutput);"},{"lineNumber":230,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":231,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":232,"author":{"gitId":"xenosf"},"content":"        return sessionResultsData;"},{"lineNumber":233,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    private static ResponseOutput buildSingleResponseForStudent("},{"lineNumber":236,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes response, SessionResultsBundle bundle, StudentAttributes student) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(response.getFeedbackQuestionId());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        boolean isUserInstructor \u003d Const.USER_TEAM_FOR_INSTRUCTOR.equals(student.getTeam());"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        // process giver"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        boolean isUserGiver \u003d student.getEmail().equals(response.getGiver())"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                \u0026\u0026 (isUserInstructor \u0026\u0026 question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                || !isUserInstructor \u0026\u0026 question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        boolean isUserTeamGiver \u003d question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                \u0026\u0026 student.getTeam().equals(response.getGiver());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        String giverName;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        String giverTeam \u003d \"\";"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        if (isUserTeamGiver) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            giverName \u003d String.format(\"Your Team (%s)\", response.getGiver());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            giverTeam \u003d response.getGiver();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        } else if (isUserGiver) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            giverName \u003d \"You\";"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            giverTeam \u003d student.getTeam();"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            // we don\u0027t want student to figure out who is who by using the hash"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            giverName \u003d removeAnonymousHash(getGiverNameOfResponse(response, bundle));"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        // process recipient"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        boolean isUserRecipient \u003d student.getEmail().equals(response.getRecipient())"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                \u0026\u0026 (isUserInstructor \u0026\u0026 question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                || !isUserInstructor \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        boolean isUserTeamRecipient \u003d (question.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                || question.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION)"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                \u0026\u0026 student.getTeam().equals(response.getRecipient());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        String recipientName;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        String recipientTeam \u003d \"\";"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        if (isUserRecipient) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            recipientName \u003d \"You\";"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            recipientTeam \u003d student.getTeam();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        } else if (isUserTeamRecipient) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            recipientName \u003d String.format(\"Your Team (%s)\", response.getRecipient());"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            recipientTeam \u003d response.getRecipient();"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            // we don\u0027t want student to figure out who is who by using the hash"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            recipientName \u003d removeAnonymousHash(getRecipientNameOfResponse(response, bundle));"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            if (!recipientName.contains(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT)) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                recipientTeam \u003d bundle.getRoster().getInfoForIdentifier(response.getRecipient()).getTeamName();"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"        // process comments"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e feedbackResponseComments \u003d"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                bundle.getResponseCommentsMap().getOrDefault(response.getId(), Collections.emptyList());"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        Queue\u003cCommentOutput\u003e comments \u003d buildComments(feedbackResponseComments, bundle);"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"        return ResponseOutput.builder()"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                .withResponseId(response.getId())"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                .withGiver(giverName)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                .withGiverTeam(giverTeam)"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                .withGiverEmail(null)"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                .withRelatedGiverEmail(null)"},{"lineNumber":293,"author":{"gitId":"xenosf"},"content":"                .withGiverSectionName(response.getGiverSection())"},{"lineNumber":294,"author":{"gitId":"xenosf"},"content":"                .withRecipient(recipientName)"},{"lineNumber":295,"author":{"gitId":"xenosf"},"content":"                .withRecipientTeam(recipientTeam)"},{"lineNumber":296,"author":{"gitId":"xenosf"},"content":"                .withRecipientEmail(null)"},{"lineNumber":297,"author":{"gitId":"xenosf"},"content":"                .withRecipientSectionName(response.getRecipientSection())"},{"lineNumber":298,"author":{"gitId":"xenosf"},"content":"                .withResponseDetails(response.getResponseDetailsCopy())"},{"lineNumber":299,"author":{"gitId":"xenosf"},"content":"                .withParticipantComment(comments.poll())"},{"lineNumber":300,"author":{"gitId":"xenosf"},"content":"                .withInstructorComments(new ArrayList\u003c\u003e(comments))"},{"lineNumber":301,"author":{"gitId":"xenosf"},"content":"                .build();"},{"lineNumber":302,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":304,"author":{"gitId":"xenosf"},"content":"    private static ResponseOutput buildSingleResponseForStudent("},{"lineNumber":305,"author":{"gitId":"xenosf"},"content":"            FeedbackResponse response, SqlSessionResultsBundle bundle, Student student) {"},{"lineNumber":306,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":307,"author":{"gitId":"xenosf"},"content":"        boolean isUserInstructor \u003d Const.USER_TEAM_FOR_INSTRUCTOR.equals(student.getTeamName());"},{"lineNumber":308,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":309,"author":{"gitId":"xenosf"},"content":"        // process giver"},{"lineNumber":310,"author":{"gitId":"xenosf"},"content":"        boolean isUserGiver \u003d student.getEmail().equals(response.getGiver())"},{"lineNumber":311,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 (isUserInstructor \u0026\u0026 question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":312,"author":{"gitId":"xenosf"},"content":"                || !isUserInstructor \u0026\u0026 question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":313,"author":{"gitId":"xenosf"},"content":"        boolean isUserTeamGiver \u003d question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":314,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 student.getTeamName().equals(response.getGiver());"},{"lineNumber":315,"author":{"gitId":"xenosf"},"content":"        String giverName;"},{"lineNumber":316,"author":{"gitId":"xenosf"},"content":"        String giverTeam \u003d \"\";"},{"lineNumber":317,"author":{"gitId":"xenosf"},"content":"        if (isUserTeamGiver) {"},{"lineNumber":318,"author":{"gitId":"xenosf"},"content":"            giverName \u003d String.format(\"Your Team (%s)\", response.getGiver());"},{"lineNumber":319,"author":{"gitId":"xenosf"},"content":"            giverTeam \u003d response.getGiver();"},{"lineNumber":320,"author":{"gitId":"xenosf"},"content":"        } else if (isUserGiver) {"},{"lineNumber":321,"author":{"gitId":"xenosf"},"content":"            giverName \u003d \"You\";"},{"lineNumber":322,"author":{"gitId":"xenosf"},"content":"            giverTeam \u003d student.getTeamName();"},{"lineNumber":323,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":324,"author":{"gitId":"xenosf"},"content":"            // we don\u0027t want student to figure out who is who by using the hash"},{"lineNumber":325,"author":{"gitId":"xenosf"},"content":"            giverName \u003d removeAnonymousHash(getGiverNameOfResponse(response, bundle));"},{"lineNumber":326,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":328,"author":{"gitId":"xenosf"},"content":"        // process recipient"},{"lineNumber":329,"author":{"gitId":"xenosf"},"content":"        boolean isUserRecipient \u003d student.getEmail().equals(response.getRecipient())"},{"lineNumber":330,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 (isUserInstructor \u0026\u0026 question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":331,"author":{"gitId":"xenosf"},"content":"                || !isUserInstructor \u0026\u0026 question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":332,"author":{"gitId":"xenosf"},"content":"        boolean isUserTeamRecipient \u003d (question.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":333,"author":{"gitId":"xenosf"},"content":"                || question.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION)"},{"lineNumber":334,"author":{"gitId":"xenosf"},"content":"                \u0026\u0026 student.getTeamName().equals(response.getRecipient());"},{"lineNumber":335,"author":{"gitId":"xenosf"},"content":"        String recipientName;"},{"lineNumber":336,"author":{"gitId":"xenosf"},"content":"        String recipientTeam \u003d \"\";"},{"lineNumber":337,"author":{"gitId":"xenosf"},"content":"        if (isUserRecipient) {"},{"lineNumber":338,"author":{"gitId":"xenosf"},"content":"            recipientName \u003d \"You\";"},{"lineNumber":339,"author":{"gitId":"xenosf"},"content":"            recipientTeam \u003d student.getTeamName();"},{"lineNumber":340,"author":{"gitId":"xenosf"},"content":"        } else if (isUserTeamRecipient) {"},{"lineNumber":341,"author":{"gitId":"xenosf"},"content":"            recipientName \u003d String.format(\"Your Team (%s)\", response.getRecipient());"},{"lineNumber":342,"author":{"gitId":"xenosf"},"content":"            recipientTeam \u003d response.getRecipient();"},{"lineNumber":343,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":344,"author":{"gitId":"xenosf"},"content":"            // we don\u0027t want student to figure out who is who by using the hash"},{"lineNumber":345,"author":{"gitId":"xenosf"},"content":"            recipientName \u003d removeAnonymousHash(getRecipientNameOfResponse(response, bundle));"},{"lineNumber":346,"author":{"gitId":"xenosf"},"content":"            if (!recipientName.contains(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT)) {"},{"lineNumber":347,"author":{"gitId":"xenosf"},"content":"                recipientTeam \u003d bundle.getRoster().getInfoForIdentifier(response.getRecipient()).getTeamName();"},{"lineNumber":348,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":349,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":351,"author":{"gitId":"xenosf"},"content":"        // process comments"},{"lineNumber":352,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e feedbackResponseComments \u003d"},{"lineNumber":353,"author":{"gitId":"xenosf"},"content":"                bundle.getResponseCommentsMap().getOrDefault(response, Collections.emptyList());"},{"lineNumber":354,"author":{"gitId":"xenosf"},"content":"        Queue\u003cCommentOutput\u003e comments \u003d buildComments(feedbackResponseComments, bundle);"},{"lineNumber":355,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":356,"author":{"gitId":"xenosf"},"content":"        return ResponseOutput.builder()"},{"lineNumber":357,"author":{"gitId":"xenosf"},"content":"                .withResponse(response)"},{"lineNumber":358,"author":{"gitId":"xenosf"},"content":"                .withGiver(giverName)"},{"lineNumber":359,"author":{"gitId":"xenosf"},"content":"                .withGiverTeam(giverTeam)"},{"lineNumber":360,"author":{"gitId":"xenosf"},"content":"                .withGiverEmail(null)"},{"lineNumber":361,"author":{"gitId":"xenosf"},"content":"                .withRelatedGiverEmail(null)"},{"lineNumber":362,"author":{"gitId":"-"},"content":"                .withGiverSection(response.getGiverSection())"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                .withRecipient(recipientName)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"                .withRecipientTeam(recipientTeam)"},{"lineNumber":365,"author":{"gitId":"-"},"content":"                .withRecipientEmail(null)"},{"lineNumber":366,"author":{"gitId":"-"},"content":"                .withRecipientSection(response.getRecipientSection())"},{"lineNumber":367,"author":{"gitId":"xenosf"},"content":"                .withResponseDetails(response.getFeedbackResponseDetailsCopy())"},{"lineNumber":368,"author":{"gitId":"-"},"content":"                .withParticipantComment(comments.poll())"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                .withInstructorComments(new ArrayList\u003c\u003e(comments))"},{"lineNumber":370,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"    private static String removeAnonymousHash(String identifier) {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        return identifier.replaceAll(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" (student|instructor|team) \""},{"lineNumber":375,"author":{"gitId":"-"},"content":"                + REGEX_ANONYMOUS_PARTICIPANT_HASH, Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT + \" $1\");"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    private static List\u003cResponseOutput\u003e buildResponsesForInstructor("},{"lineNumber":379,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e responses, SessionResultsBundle bundle, boolean areMissingResponses) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        List\u003cResponseOutput\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responses) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"            output.add(buildSingleResponseForInstructor(response, bundle, areMissingResponses));"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"        return output;"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"xenosf"},"content":"    private static List\u003cResponseOutput\u003e buildResponsesForInstructor("},{"lineNumber":390,"author":{"gitId":"xenosf"},"content":"            List\u003cFeedbackResponse\u003e responses, SqlSessionResultsBundle bundle, boolean areMissingResponses) {"},{"lineNumber":391,"author":{"gitId":"xenosf"},"content":"        List\u003cResponseOutput\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":392,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":393,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponse response : responses) {"},{"lineNumber":394,"author":{"gitId":"xenosf"},"content":"            output.add(buildSingleResponseForInstructor(response, bundle, areMissingResponses));"},{"lineNumber":395,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":397,"author":{"gitId":"xenosf"},"content":"        return output;"},{"lineNumber":398,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":399,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"    private static ResponseOutput buildSingleResponseForInstructor("},{"lineNumber":401,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes response, SessionResultsBundle bundle, boolean isMissingResponse) {"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        // process giver"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        String giverEmail \u003d null;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        String relatedGiverEmail \u003d null;"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        if (bundle.isResponseGiverVisible(response)) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            giverEmail \u003d response.getGiver();"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            relatedGiverEmail \u003d response.getGiver();"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"            if (bundle.getRoster().isTeamInCourse(giverEmail)) {"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                // remove recipient email as it is a team name"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                relatedGiverEmail \u003d"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                        bundle.getRoster().getTeamToMembersTable().get(giverEmail).iterator().next().getEmail();"},{"lineNumber":413,"author":{"gitId":"-"},"content":"                giverEmail \u003d null;"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        String giverName \u003d getGiverNameOfResponse(response, bundle);"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        String giverTeam \u003d bundle.getRoster().getInfoForIdentifier(response.getGiver()).getTeamName();"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        String giverSection \u003d response.getGiverSection();"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(response.getFeedbackQuestionId());"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":421,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d bundle.getRoster().getInstructorForEmail(response.getGiver());"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            giverName \u003d instructor.getName();"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            giverTeam \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            giverSection \u003d Const.DEFAULT_SECTION;"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"        // process recipient"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        String recipientEmail \u003d null;"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        String recipientName \u003d getRecipientNameOfResponse(response, bundle);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        String recipientTeam \u003d"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                bundle.getRoster().getInfoForIdentifier(response.getRecipient()).getTeamName();"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        String recipientSection \u003d response.getRecipientSection();"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d bundle.getRoster().getInstructorForEmail(response.getRecipient());"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            recipientName \u003d instructor.getName();"},{"lineNumber":436,"author":{"gitId":"-"},"content":"            recipientTeam \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"},{"lineNumber":437,"author":{"gitId":"-"},"content":"            recipientSection \u003d Const.DEFAULT_SECTION;"},{"lineNumber":438,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        if (bundle.isResponseRecipientVisible(response)) {"},{"lineNumber":440,"author":{"gitId":"-"},"content":"            recipientEmail \u003d response.getRecipient();"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"            if (bundle.getRoster().isTeamInCourse(recipientEmail)) {"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                // remove recipient email as it is a team name"},{"lineNumber":444,"author":{"gitId":"-"},"content":"                recipientEmail \u003d null;"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            } else if (Const.GENERAL_QUESTION.equals(recipientEmail)) {"},{"lineNumber":446,"author":{"gitId":"-"},"content":"                // general recipient does not have email"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                recipientEmail \u003d null;"},{"lineNumber":448,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"        // process comments"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e feedbackResponseComments \u003d"},{"lineNumber":453,"author":{"gitId":"-"},"content":"                bundle.getResponseCommentsMap().getOrDefault(response.getId(), Collections.emptyList());"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        Queue\u003cCommentOutput\u003e comments \u003d buildComments(feedbackResponseComments, bundle);"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"        return ResponseOutput.builder()"},{"lineNumber":457,"author":{"gitId":"-"},"content":"                .withIsMissingResponse(isMissingResponse)"},{"lineNumber":458,"author":{"gitId":"-"},"content":"                .withResponseId(response.getId())"},{"lineNumber":459,"author":{"gitId":"-"},"content":"                .withGiver(giverName)"},{"lineNumber":460,"author":{"gitId":"-"},"content":"                .withGiverTeam(giverTeam)"},{"lineNumber":461,"author":{"gitId":"-"},"content":"                .withGiverEmail(giverEmail)"},{"lineNumber":462,"author":{"gitId":"-"},"content":"                .withRelatedGiverEmail(relatedGiverEmail)"},{"lineNumber":463,"author":{"gitId":"xenosf"},"content":"                .withGiverSectionName(giverSection)"},{"lineNumber":464,"author":{"gitId":"-"},"content":"                .withRecipient(recipientName)"},{"lineNumber":465,"author":{"gitId":"-"},"content":"                .withRecipientTeam(recipientTeam)"},{"lineNumber":466,"author":{"gitId":"-"},"content":"                .withRecipientEmail(recipientEmail)"},{"lineNumber":467,"author":{"gitId":"xenosf"},"content":"                .withRecipientSectionName(recipientSection)"},{"lineNumber":468,"author":{"gitId":"-"},"content":"                .withResponseDetails(response.getResponseDetailsCopy())"},{"lineNumber":469,"author":{"gitId":"-"},"content":"                .withParticipantComment(comments.poll())"},{"lineNumber":470,"author":{"gitId":"-"},"content":"                .withInstructorComments(new ArrayList\u003c\u003e(comments))"},{"lineNumber":471,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"xenosf"},"content":"    private static ResponseOutput buildSingleResponseForInstructor("},{"lineNumber":475,"author":{"gitId":"xenosf"},"content":"            FeedbackResponse response, SqlSessionResultsBundle bundle, boolean isMissingResponse) {"},{"lineNumber":476,"author":{"gitId":"xenosf"},"content":"        // process giver"},{"lineNumber":477,"author":{"gitId":"xenosf"},"content":"        String giverEmail \u003d null;"},{"lineNumber":478,"author":{"gitId":"xenosf"},"content":"        String relatedGiverEmail \u003d null;"},{"lineNumber":479,"author":{"gitId":"xenosf"},"content":"        if (bundle.isResponseGiverVisible(response)) {"},{"lineNumber":480,"author":{"gitId":"xenosf"},"content":"            giverEmail \u003d response.getGiver();"},{"lineNumber":481,"author":{"gitId":"xenosf"},"content":"            relatedGiverEmail \u003d response.getGiver();"},{"lineNumber":482,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":483,"author":{"gitId":"xenosf"},"content":"            if (bundle.getRoster().isTeamInCourse(giverEmail)) {"},{"lineNumber":484,"author":{"gitId":"xenosf"},"content":"                // remove recipient email as it is a team name"},{"lineNumber":485,"author":{"gitId":"xenosf"},"content":"                relatedGiverEmail \u003d"},{"lineNumber":486,"author":{"gitId":"xenosf"},"content":"                        bundle.getRoster().getTeamToMembersTable().get(giverEmail).iterator().next().getEmail();"},{"lineNumber":487,"author":{"gitId":"xenosf"},"content":"                giverEmail \u003d null;"},{"lineNumber":488,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":489,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":490,"author":{"gitId":"xenosf"},"content":"        String giverName \u003d getGiverNameOfResponse(response, bundle);"},{"lineNumber":491,"author":{"gitId":"xenosf"},"content":"        String giverTeam \u003d bundle.getRoster().getInfoForIdentifier(response.getGiver()).getTeamName();"},{"lineNumber":492,"author":{"gitId":"xenosf"},"content":"        String giverSectionName \u003d response.getGiverSectionName();"},{"lineNumber":493,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":494,"author":{"gitId":"xenosf"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":495,"author":{"gitId":"xenosf"},"content":"            Instructor instructor \u003d bundle.getRoster().getInstructorForEmail(response.getGiver());"},{"lineNumber":496,"author":{"gitId":"xenosf"},"content":"            giverName \u003d instructor.getName();"},{"lineNumber":497,"author":{"gitId":"xenosf"},"content":"            giverTeam \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"},{"lineNumber":498,"author":{"gitId":"xenosf"},"content":"            giverSectionName \u003d Const.DEFAULT_SECTION;"},{"lineNumber":499,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":500,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":501,"author":{"gitId":"xenosf"},"content":"        // process recipient"},{"lineNumber":502,"author":{"gitId":"xenosf"},"content":"        String recipientEmail \u003d null;"},{"lineNumber":503,"author":{"gitId":"xenosf"},"content":"        String recipientName \u003d getRecipientNameOfResponse(response, bundle);"},{"lineNumber":504,"author":{"gitId":"xenosf"},"content":"        String recipientTeam \u003d"},{"lineNumber":505,"author":{"gitId":"xenosf"},"content":"                bundle.getRoster().getInfoForIdentifier(response.getRecipient()).getTeamName();"},{"lineNumber":506,"author":{"gitId":"xenosf"},"content":"        String recipientSectionName \u003d response.getRecipientSectionName();"},{"lineNumber":507,"author":{"gitId":"xenosf"},"content":"        if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":508,"author":{"gitId":"xenosf"},"content":"            Instructor instructor \u003d bundle.getRoster().getInstructorForEmail(response.getRecipient());"},{"lineNumber":509,"author":{"gitId":"xenosf"},"content":"            recipientName \u003d instructor.getName();"},{"lineNumber":510,"author":{"gitId":"xenosf"},"content":"            recipientTeam \u003d Const.USER_TEAM_FOR_INSTRUCTOR;"},{"lineNumber":511,"author":{"gitId":"xenosf"},"content":"            recipientSectionName \u003d Const.DEFAULT_SECTION;"},{"lineNumber":512,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":513,"author":{"gitId":"xenosf"},"content":"        if (bundle.isResponseRecipientVisible(response)) {"},{"lineNumber":514,"author":{"gitId":"xenosf"},"content":"            recipientEmail \u003d response.getRecipient();"},{"lineNumber":515,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":516,"author":{"gitId":"xenosf"},"content":"            if (bundle.getRoster().isTeamInCourse(recipientEmail)) {"},{"lineNumber":517,"author":{"gitId":"xenosf"},"content":"                // remove recipient email as it is a team name"},{"lineNumber":518,"author":{"gitId":"xenosf"},"content":"                recipientEmail \u003d null;"},{"lineNumber":519,"author":{"gitId":"xenosf"},"content":"            } else if (Const.GENERAL_QUESTION.equals(recipientEmail)) {"},{"lineNumber":520,"author":{"gitId":"xenosf"},"content":"                // general recipient does not have email"},{"lineNumber":521,"author":{"gitId":"xenosf"},"content":"                recipientEmail \u003d null;"},{"lineNumber":522,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":523,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":524,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":525,"author":{"gitId":"xenosf"},"content":"        // process comments"},{"lineNumber":526,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponseComment\u003e feedbackResponseComments \u003d"},{"lineNumber":527,"author":{"gitId":"xenosf"},"content":"                bundle.getResponseCommentsMap().getOrDefault(response, Collections.emptyList());"},{"lineNumber":528,"author":{"gitId":"xenosf"},"content":"        Queue\u003cCommentOutput\u003e comments \u003d buildComments(feedbackResponseComments, bundle);"},{"lineNumber":529,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":530,"author":{"gitId":"xenosf"},"content":"        return ResponseOutput.builder()"},{"lineNumber":531,"author":{"gitId":"xenosf"},"content":"                .withIsMissingResponse(isMissingResponse)"},{"lineNumber":532,"author":{"gitId":"xenosf"},"content":"                .withResponse(response)"},{"lineNumber":533,"author":{"gitId":"xenosf"},"content":"                .withGiver(giverName)"},{"lineNumber":534,"author":{"gitId":"xenosf"},"content":"                .withGiverTeam(giverTeam)"},{"lineNumber":535,"author":{"gitId":"xenosf"},"content":"                .withGiverEmail(giverEmail)"},{"lineNumber":536,"author":{"gitId":"xenosf"},"content":"                .withRelatedGiverEmail(relatedGiverEmail)"},{"lineNumber":537,"author":{"gitId":"xenosf"},"content":"                .withGiverSectionName(giverSectionName)"},{"lineNumber":538,"author":{"gitId":"xenosf"},"content":"                .withRecipient(recipientName)"},{"lineNumber":539,"author":{"gitId":"xenosf"},"content":"                .withRecipientTeam(recipientTeam)"},{"lineNumber":540,"author":{"gitId":"xenosf"},"content":"                .withRecipientEmail(recipientEmail)"},{"lineNumber":541,"author":{"gitId":"xenosf"},"content":"                .withRecipientSectionName(recipientSectionName)"},{"lineNumber":542,"author":{"gitId":"xenosf"},"content":"                .withResponseDetails(response.getFeedbackResponseDetailsCopy())"},{"lineNumber":543,"author":{"gitId":"xenosf"},"content":"                .withParticipantComment(comments.poll())"},{"lineNumber":544,"author":{"gitId":"xenosf"},"content":"                .withInstructorComments(new ArrayList\u003c\u003e(comments))"},{"lineNumber":545,"author":{"gitId":"xenosf"},"content":"                .build();"},{"lineNumber":546,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":547,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":549,"author":{"gitId":"-"},"content":"     * Gets giver name of a response from the bundle."},{"lineNumber":550,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":551,"author":{"gitId":"-"},"content":"     * \u003cp\u003eAnonymized the name if necessary."},{"lineNumber":552,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    private static String getGiverNameOfResponse(FeedbackResponseAttributes response, SessionResultsBundle bundle) {"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(response.getFeedbackQuestionId());"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        FeedbackParticipantType participantType \u003d question.getGiverType();"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"        CourseRoster.ParticipantInfo userInfo \u003d bundle.getRoster().getInfoForIdentifier(response.getGiver());"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        String name \u003d userInfo.getName();"},{"lineNumber":559,"author":{"gitId":"-"},"content":""},{"lineNumber":560,"author":{"gitId":"-"},"content":"        if (!bundle.isResponseGiverVisible(response)) {"},{"lineNumber":561,"author":{"gitId":"-"},"content":"            name \u003d SessionResultsBundle.getAnonName(participantType, name);"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":565,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":566,"author":{"gitId":"-"},"content":""},{"lineNumber":567,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":568,"author":{"gitId":"xenosf"},"content":"     * Gets giver name of a response from the bundle."},{"lineNumber":569,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":570,"author":{"gitId":"xenosf"},"content":"     * \u003cp\u003eAnonymized the name if necessary."},{"lineNumber":571,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":572,"author":{"gitId":"xenosf"},"content":"    private static String getGiverNameOfResponse(FeedbackResponse response, SqlSessionResultsBundle bundle) {"},{"lineNumber":573,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":574,"author":{"gitId":"xenosf"},"content":"        FeedbackParticipantType participantType \u003d question.getGiverType();"},{"lineNumber":575,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":576,"author":{"gitId":"xenosf"},"content":"        SqlCourseRoster.ParticipantInfo userInfo \u003d bundle.getRoster().getInfoForIdentifier(response.getGiver());"},{"lineNumber":577,"author":{"gitId":"xenosf"},"content":"        String name \u003d userInfo.getName();"},{"lineNumber":578,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":579,"author":{"gitId":"xenosf"},"content":"        if (!bundle.isResponseGiverVisible(response)) {"},{"lineNumber":580,"author":{"gitId":"xenosf"},"content":"            name \u003d SessionResultsBundle.getAnonName(participantType, name);"},{"lineNumber":581,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":582,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":583,"author":{"gitId":"xenosf"},"content":"        return name;"},{"lineNumber":584,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":585,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":586,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":587,"author":{"gitId":"-"},"content":"     * Gets recipient name of a response from the bundle."},{"lineNumber":588,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":589,"author":{"gitId":"-"},"content":"     * \u003cp\u003eAnonymized the name if necessary."},{"lineNumber":590,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":591,"author":{"gitId":"-"},"content":"    private static String getRecipientNameOfResponse(FeedbackResponseAttributes response, SessionResultsBundle bundle) {"},{"lineNumber":592,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question \u003d bundle.getQuestionsMap().get(response.getFeedbackQuestionId());"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        FeedbackParticipantType participantType \u003d question.getRecipientType();"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        if (participantType \u003d\u003d FeedbackParticipantType.SELF) {"},{"lineNumber":595,"author":{"gitId":"-"},"content":"            // recipient type for self-feedback is the same as the giver type"},{"lineNumber":596,"author":{"gitId":"-"},"content":"            participantType \u003d question.getGiverType();"},{"lineNumber":597,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"        CourseRoster.ParticipantInfo userInfo \u003d bundle.getRoster().getInfoForIdentifier(response.getRecipient());"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        String name \u003d userInfo.getName();"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        if (Const.GENERAL_QUESTION.equals(response.getRecipient())) {"},{"lineNumber":602,"author":{"gitId":"-"},"content":"            // for general question"},{"lineNumber":603,"author":{"gitId":"-"},"content":"            name \u003d Const.USER_NOBODY_TEXT;"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        if (!bundle.isResponseRecipientVisible(response)) {"},{"lineNumber":606,"author":{"gitId":"-"},"content":"            name \u003d SessionResultsBundle.getAnonName(participantType, name);"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":608,"author":{"gitId":"-"},"content":""},{"lineNumber":609,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":610,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":611,"author":{"gitId":"-"},"content":""},{"lineNumber":612,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":613,"author":{"gitId":"xenosf"},"content":"     * Gets recipient name of a response from the bundle."},{"lineNumber":614,"author":{"gitId":"xenosf"},"content":"     *"},{"lineNumber":615,"author":{"gitId":"xenosf"},"content":"     * \u003cp\u003eAnonymized the name if necessary."},{"lineNumber":616,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":617,"author":{"gitId":"xenosf"},"content":"    private static String getRecipientNameOfResponse(FeedbackResponse response, SqlSessionResultsBundle bundle) {"},{"lineNumber":618,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question \u003d response.getFeedbackQuestion();"},{"lineNumber":619,"author":{"gitId":"xenosf"},"content":"        FeedbackParticipantType participantType \u003d question.getRecipientType();"},{"lineNumber":620,"author":{"gitId":"xenosf"},"content":"        if (participantType \u003d\u003d FeedbackParticipantType.SELF) {"},{"lineNumber":621,"author":{"gitId":"xenosf"},"content":"            // recipient type for self-feedback is the same as the giver type"},{"lineNumber":622,"author":{"gitId":"xenosf"},"content":"            participantType \u003d question.getGiverType();"},{"lineNumber":623,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":624,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":625,"author":{"gitId":"xenosf"},"content":"        SqlCourseRoster.ParticipantInfo userInfo \u003d bundle.getRoster().getInfoForIdentifier(response.getRecipient());"},{"lineNumber":626,"author":{"gitId":"xenosf"},"content":"        String name \u003d userInfo.getName();"},{"lineNumber":627,"author":{"gitId":"xenosf"},"content":"        if (Const.GENERAL_QUESTION.equals(response.getRecipient())) {"},{"lineNumber":628,"author":{"gitId":"xenosf"},"content":"            // for general question"},{"lineNumber":629,"author":{"gitId":"xenosf"},"content":"            name \u003d Const.USER_NOBODY_TEXT;"},{"lineNumber":630,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":631,"author":{"gitId":"xenosf"},"content":"        if (!bundle.isResponseRecipientVisible(response)) {"},{"lineNumber":632,"author":{"gitId":"xenosf"},"content":"            name \u003d SessionResultsBundle.getAnonName(participantType, name);"},{"lineNumber":633,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":634,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":635,"author":{"gitId":"xenosf"},"content":"        return name;"},{"lineNumber":636,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":637,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":638,"author":{"gitId":"-"},"content":"    private static Queue\u003cCommentOutput\u003e buildComments(List\u003cFeedbackResponseCommentAttributes\u003e feedbackResponseComments,"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                                                      SessionResultsBundle bundle) {"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        LinkedList\u003cCommentOutput\u003e outputs \u003d new LinkedList\u003c\u003e();"},{"lineNumber":641,"author":{"gitId":"-"},"content":""},{"lineNumber":642,"author":{"gitId":"-"},"content":"        CommentOutput participantComment \u003d null;"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        for (FeedbackResponseCommentAttributes comment : feedbackResponseComments) {"},{"lineNumber":644,"author":{"gitId":"-"},"content":"            if (comment.isCommentFromFeedbackParticipant()) {"},{"lineNumber":645,"author":{"gitId":"-"},"content":"                // participant comment will not need these fields"},{"lineNumber":646,"author":{"gitId":"-"},"content":"                participantComment \u003d CommentOutput.builder(comment)"},{"lineNumber":647,"author":{"gitId":"-"},"content":"                        .withCommentGiver(null)"},{"lineNumber":648,"author":{"gitId":"-"},"content":"                        .withCommentGiverName(null)"},{"lineNumber":649,"author":{"gitId":"-"},"content":"                        .withLastEditorEmail(null)"},{"lineNumber":650,"author":{"gitId":"-"},"content":"                        .withLastEditorName(null)"},{"lineNumber":651,"author":{"gitId":"-"},"content":"                        .build();"},{"lineNumber":652,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"                String giverEmail \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":654,"author":{"gitId":"-"},"content":"                String giverName \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":655,"author":{"gitId":"-"},"content":"                String lastEditorEmail \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                String lastEditorName \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":657,"author":{"gitId":"-"},"content":"                if (bundle.isCommentGiverVisible(comment)) {"},{"lineNumber":658,"author":{"gitId":"-"},"content":"                    giverEmail \u003d comment.getCommentGiver();"},{"lineNumber":659,"author":{"gitId":"-"},"content":"                    giverName \u003d bundle.getRoster().getInfoForIdentifier(comment.getCommentGiver()).getName();"},{"lineNumber":660,"author":{"gitId":"-"},"content":"                    lastEditorEmail \u003d comment.getLastEditorEmail();"},{"lineNumber":661,"author":{"gitId":"-"},"content":"                    lastEditorName \u003d bundle.getRoster().getInfoForIdentifier(comment.getLastEditorEmail()).getName();"},{"lineNumber":662,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                outputs.add(CommentOutput.builder(comment)"},{"lineNumber":664,"author":{"gitId":"-"},"content":"                        .withCommentGiver(giverEmail)"},{"lineNumber":665,"author":{"gitId":"-"},"content":"                        .withCommentGiverName(giverName)"},{"lineNumber":666,"author":{"gitId":"-"},"content":"                        .withLastEditorEmail(lastEditorEmail)"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                        .withLastEditorName(lastEditorName)"},{"lineNumber":668,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":669,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        outputs.addFirst(participantComment);"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"        return outputs;"},{"lineNumber":674,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":675,"author":{"gitId":"-"},"content":""},{"lineNumber":676,"author":{"gitId":"xenosf"},"content":"    private static Queue\u003cCommentOutput\u003e buildComments(List\u003cFeedbackResponseComment\u003e feedbackResponseComments,"},{"lineNumber":677,"author":{"gitId":"xenosf"},"content":"                                                      SqlSessionResultsBundle bundle) {"},{"lineNumber":678,"author":{"gitId":"xenosf"},"content":"        LinkedList\u003cCommentOutput\u003e outputs \u003d new LinkedList\u003c\u003e();"},{"lineNumber":679,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":680,"author":{"gitId":"xenosf"},"content":"        CommentOutput participantComment \u003d null;"},{"lineNumber":681,"author":{"gitId":"xenosf"},"content":"        for (FeedbackResponseComment comment : feedbackResponseComments) {"},{"lineNumber":682,"author":{"gitId":"xenosf"},"content":"            if (comment.getIsCommentFromFeedbackParticipant()) {"},{"lineNumber":683,"author":{"gitId":"xenosf"},"content":"                // participant comment will not need these fields"},{"lineNumber":684,"author":{"gitId":"xenosf"},"content":"                participantComment \u003d CommentOutput.builder(comment)"},{"lineNumber":685,"author":{"gitId":"xenosf"},"content":"                        .withCommentGiver(null)"},{"lineNumber":686,"author":{"gitId":"xenosf"},"content":"                        .withCommentGiverName(null)"},{"lineNumber":687,"author":{"gitId":"xenosf"},"content":"                        .withLastEditorEmail(null)"},{"lineNumber":688,"author":{"gitId":"xenosf"},"content":"                        .withLastEditorName(null)"},{"lineNumber":689,"author":{"gitId":"xenosf"},"content":"                        .build();"},{"lineNumber":690,"author":{"gitId":"xenosf"},"content":"            } else {"},{"lineNumber":691,"author":{"gitId":"xenosf"},"content":"                String giverEmail \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":692,"author":{"gitId":"xenosf"},"content":"                String giverName \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":693,"author":{"gitId":"xenosf"},"content":"                String lastEditorEmail \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":694,"author":{"gitId":"xenosf"},"content":"                String lastEditorName \u003d Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT;"},{"lineNumber":695,"author":{"gitId":"xenosf"},"content":"                if (bundle.isCommentGiverVisible(comment)) {"},{"lineNumber":696,"author":{"gitId":"xenosf"},"content":"                    giverEmail \u003d comment.getGiver();"},{"lineNumber":697,"author":{"gitId":"xenosf"},"content":"                    giverName \u003d bundle.getRoster().getInfoForIdentifier(comment.getGiver()).getName();"},{"lineNumber":698,"author":{"gitId":"xenosf"},"content":"                    lastEditorEmail \u003d comment.getLastEditorEmail();"},{"lineNumber":699,"author":{"gitId":"xenosf"},"content":"                    lastEditorName \u003d bundle.getRoster().getInfoForIdentifier(comment.getLastEditorEmail()).getName();"},{"lineNumber":700,"author":{"gitId":"xenosf"},"content":"                }"},{"lineNumber":701,"author":{"gitId":"xenosf"},"content":"                outputs.add(CommentOutput.builder(comment)"},{"lineNumber":702,"author":{"gitId":"xenosf"},"content":"                        .withCommentGiver(giverEmail)"},{"lineNumber":703,"author":{"gitId":"xenosf"},"content":"                        .withCommentGiverName(giverName)"},{"lineNumber":704,"author":{"gitId":"xenosf"},"content":"                        .withLastEditorEmail(lastEditorEmail)"},{"lineNumber":705,"author":{"gitId":"xenosf"},"content":"                        .withLastEditorName(lastEditorName)"},{"lineNumber":706,"author":{"gitId":"xenosf"},"content":"                        .build());"},{"lineNumber":707,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":708,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":709,"author":{"gitId":"xenosf"},"content":"        outputs.addFirst(participantComment);"},{"lineNumber":710,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":711,"author":{"gitId":"xenosf"},"content":"        return outputs;"},{"lineNumber":712,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":713,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"    public List\u003cQuestionOutput\u003e getQuestions() {"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        return questions;"},{"lineNumber":716,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":717,"author":{"gitId":"-"},"content":""},{"lineNumber":718,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":719,"author":{"gitId":"-"},"content":"     * API output format for questions in session results."},{"lineNumber":720,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":721,"author":{"gitId":"-"},"content":"    public static class QuestionOutput {"},{"lineNumber":722,"author":{"gitId":"-"},"content":""},{"lineNumber":723,"author":{"gitId":"-"},"content":"        private final FeedbackQuestionData feedbackQuestion;"},{"lineNumber":724,"author":{"gitId":"-"},"content":"        private final String questionStatistics;"},{"lineNumber":725,"author":{"gitId":"-"},"content":""},{"lineNumber":726,"author":{"gitId":"-"},"content":"        private final List\u003cResponseOutput\u003e allResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        private final boolean hasResponseButNotVisibleForPreview;"},{"lineNumber":728,"author":{"gitId":"-"},"content":"        private final boolean hasCommentNotVisibleForPreview;"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"        // For student view only"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        private final List\u003cResponseOutput\u003e responsesToSelf \u003d new ArrayList\u003c\u003e();"},{"lineNumber":732,"author":{"gitId":"-"},"content":"        private final List\u003cResponseOutput\u003e responsesFromSelf \u003d new ArrayList\u003c\u003e();"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        private final List\u003cList\u003cResponseOutput\u003e\u003e otherResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":734,"author":{"gitId":"-"},"content":""},{"lineNumber":735,"author":{"gitId":"-"},"content":"        private QuestionOutput(FeedbackQuestionAttributes feedbackQuestionAttributes, String questionStatistics,"},{"lineNumber":736,"author":{"gitId":"-"},"content":"                               boolean hasResponseButNotVisibleForPreview, boolean hasCommentNotVisibleForPreview) {"},{"lineNumber":737,"author":{"gitId":"-"},"content":"            this.feedbackQuestion \u003d new FeedbackQuestionData(feedbackQuestionAttributes);"},{"lineNumber":738,"author":{"gitId":"-"},"content":"            this.questionStatistics \u003d questionStatistics;"},{"lineNumber":739,"author":{"gitId":"-"},"content":"            this.hasResponseButNotVisibleForPreview \u003d hasResponseButNotVisibleForPreview;"},{"lineNumber":740,"author":{"gitId":"-"},"content":"            this.hasCommentNotVisibleForPreview \u003d hasCommentNotVisibleForPreview;"},{"lineNumber":741,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":742,"author":{"gitId":"-"},"content":""},{"lineNumber":743,"author":{"gitId":"xenosf"},"content":"        private QuestionOutput(FeedbackQuestion feedbackQuestion, String questionStatistics,"},{"lineNumber":744,"author":{"gitId":"xenosf"},"content":"                boolean hasResponseButNotVisibleForPreview, boolean hasCommentNotVisibleForPreview) {"},{"lineNumber":745,"author":{"gitId":"xenosf"},"content":"            this.feedbackQuestion \u003d new FeedbackQuestionData(feedbackQuestion);"},{"lineNumber":746,"author":{"gitId":"xenosf"},"content":"            this.questionStatistics \u003d questionStatistics;"},{"lineNumber":747,"author":{"gitId":"xenosf"},"content":"            this.hasResponseButNotVisibleForPreview \u003d hasResponseButNotVisibleForPreview;"},{"lineNumber":748,"author":{"gitId":"xenosf"},"content":"            this.hasCommentNotVisibleForPreview \u003d hasCommentNotVisibleForPreview;"},{"lineNumber":749,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":750,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":751,"author":{"gitId":"-"},"content":"        public FeedbackQuestionData getFeedbackQuestion() {"},{"lineNumber":752,"author":{"gitId":"-"},"content":"            return feedbackQuestion;"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":754,"author":{"gitId":"-"},"content":""},{"lineNumber":755,"author":{"gitId":"-"},"content":"        public String getQuestionStatistics() {"},{"lineNumber":756,"author":{"gitId":"-"},"content":"            return questionStatistics;"},{"lineNumber":757,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":758,"author":{"gitId":"-"},"content":""},{"lineNumber":759,"author":{"gitId":"-"},"content":"        public List\u003cResponseOutput\u003e getAllResponses() {"},{"lineNumber":760,"author":{"gitId":"-"},"content":"            return allResponses;"},{"lineNumber":761,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"        public boolean getHasResponseButNotVisibleForPreview() {"},{"lineNumber":764,"author":{"gitId":"-"},"content":"            return hasResponseButNotVisibleForPreview;"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":766,"author":{"gitId":"-"},"content":""},{"lineNumber":767,"author":{"gitId":"-"},"content":"        public boolean getHasCommentNotVisibleForPreview() {"},{"lineNumber":768,"author":{"gitId":"-"},"content":"            return hasCommentNotVisibleForPreview;"},{"lineNumber":769,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":770,"author":{"gitId":"-"},"content":""},{"lineNumber":771,"author":{"gitId":"-"},"content":"        public List\u003cResponseOutput\u003e getResponsesFromSelf() {"},{"lineNumber":772,"author":{"gitId":"-"},"content":"            return responsesFromSelf;"},{"lineNumber":773,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":774,"author":{"gitId":"-"},"content":""},{"lineNumber":775,"author":{"gitId":"-"},"content":"        public List\u003cResponseOutput\u003e getResponsesToSelf() {"},{"lineNumber":776,"author":{"gitId":"-"},"content":"            return responsesToSelf;"},{"lineNumber":777,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":778,"author":{"gitId":"-"},"content":""},{"lineNumber":779,"author":{"gitId":"-"},"content":"        public List\u003cList\u003cResponseOutput\u003e\u003e getOtherResponses() {"},{"lineNumber":780,"author":{"gitId":"-"},"content":"            return otherResponses;"},{"lineNumber":781,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":782,"author":{"gitId":"-"},"content":""},{"lineNumber":783,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":784,"author":{"gitId":"-"},"content":""},{"lineNumber":785,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":786,"author":{"gitId":"-"},"content":"     * API output format for question responses."},{"lineNumber":787,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":788,"author":{"gitId":"-"},"content":"    public static class ResponseOutput {"},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"        private boolean isMissingResponse;"},{"lineNumber":791,"author":{"gitId":"-"},"content":""},{"lineNumber":792,"author":{"gitId":"-"},"content":"        private String responseId;"},{"lineNumber":793,"author":{"gitId":"-"},"content":""},{"lineNumber":794,"author":{"gitId":"-"},"content":"        private String giver;"},{"lineNumber":795,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":796,"author":{"gitId":"-"},"content":"         * Depending on the question giver type, {@code giverIdentifier} may contain the giver\u0027s email, any team member\u0027s"},{"lineNumber":797,"author":{"gitId":"-"},"content":"         * email or null."},{"lineNumber":798,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":800,"author":{"gitId":"-"},"content":"        private String relatedGiverEmail;"},{"lineNumber":801,"author":{"gitId":"-"},"content":"        private String giverTeam;"},{"lineNumber":802,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":803,"author":{"gitId":"-"},"content":"        private String giverEmail;"},{"lineNumber":804,"author":{"gitId":"-"},"content":"        private String giverSection;"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        private String recipient;"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        private String recipientTeam;"},{"lineNumber":807,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        private String recipientEmail;"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        private String recipientSection;"},{"lineNumber":810,"author":{"gitId":"-"},"content":"        private FeedbackResponseDetails responseDetails;"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"        // comments"},{"lineNumber":813,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        private CommentOutput participantComment;"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        private List\u003cCommentOutput\u003e instructorComments;"},{"lineNumber":816,"author":{"gitId":"-"},"content":""},{"lineNumber":817,"author":{"gitId":"-"},"content":"        private ResponseOutput() {"},{"lineNumber":818,"author":{"gitId":"-"},"content":"            // use builder instead"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":820,"author":{"gitId":"-"},"content":""},{"lineNumber":821,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":822,"author":{"gitId":"-"},"content":"         * Returns a builder for {@link ResponseOutput}."},{"lineNumber":823,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":824,"author":{"gitId":"-"},"content":"        static Builder builder() {"},{"lineNumber":825,"author":{"gitId":"-"},"content":"            return new Builder();"},{"lineNumber":826,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":827,"author":{"gitId":"-"},"content":""},{"lineNumber":828,"author":{"gitId":"-"},"content":"        public boolean isMissingResponse() {"},{"lineNumber":829,"author":{"gitId":"-"},"content":"            return isMissingResponse;"},{"lineNumber":830,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":831,"author":{"gitId":"-"},"content":""},{"lineNumber":832,"author":{"gitId":"-"},"content":"        public String getResponseId() {"},{"lineNumber":833,"author":{"gitId":"-"},"content":"            return responseId;"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":835,"author":{"gitId":"-"},"content":""},{"lineNumber":836,"author":{"gitId":"-"},"content":"        public String getGiver() {"},{"lineNumber":837,"author":{"gitId":"-"},"content":"            return giver;"},{"lineNumber":838,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":841,"author":{"gitId":"-"},"content":"        public String getGiverEmail() {"},{"lineNumber":842,"author":{"gitId":"-"},"content":"            return giverEmail;"},{"lineNumber":843,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":844,"author":{"gitId":"-"},"content":""},{"lineNumber":845,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        public String getRelatedGiverEmail() {"},{"lineNumber":847,"author":{"gitId":"-"},"content":"            return relatedGiverEmail;"},{"lineNumber":848,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":849,"author":{"gitId":"-"},"content":""},{"lineNumber":850,"author":{"gitId":"-"},"content":"        public String getGiverTeam() {"},{"lineNumber":851,"author":{"gitId":"-"},"content":"            return giverTeam;"},{"lineNumber":852,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":853,"author":{"gitId":"-"},"content":""},{"lineNumber":854,"author":{"gitId":"-"},"content":"        public String getGiverSection() {"},{"lineNumber":855,"author":{"gitId":"-"},"content":"            return giverSection;"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":857,"author":{"gitId":"-"},"content":""},{"lineNumber":858,"author":{"gitId":"-"},"content":"        public String getRecipient() {"},{"lineNumber":859,"author":{"gitId":"-"},"content":"            return recipient;"},{"lineNumber":860,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":861,"author":{"gitId":"-"},"content":""},{"lineNumber":862,"author":{"gitId":"-"},"content":"        public String getRecipientTeam() {"},{"lineNumber":863,"author":{"gitId":"-"},"content":"            return recipientTeam;"},{"lineNumber":864,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":865,"author":{"gitId":"-"},"content":""},{"lineNumber":866,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":867,"author":{"gitId":"-"},"content":"        public String getRecipientEmail() {"},{"lineNumber":868,"author":{"gitId":"-"},"content":"            return recipientEmail;"},{"lineNumber":869,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":870,"author":{"gitId":"-"},"content":""},{"lineNumber":871,"author":{"gitId":"-"},"content":"        public String getRecipientSection() {"},{"lineNumber":872,"author":{"gitId":"-"},"content":"            return recipientSection;"},{"lineNumber":873,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":874,"author":{"gitId":"-"},"content":""},{"lineNumber":875,"author":{"gitId":"-"},"content":"        public FeedbackResponseDetails getResponseDetails() {"},{"lineNumber":876,"author":{"gitId":"-"},"content":"            return responseDetails;"},{"lineNumber":877,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":878,"author":{"gitId":"-"},"content":""},{"lineNumber":879,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":880,"author":{"gitId":"-"},"content":"        public CommentOutput getParticipantComment() {"},{"lineNumber":881,"author":{"gitId":"-"},"content":"            return participantComment;"},{"lineNumber":882,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"        public List\u003cCommentOutput\u003e getInstructorComments() {"},{"lineNumber":885,"author":{"gitId":"-"},"content":"            return instructorComments;"},{"lineNumber":886,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":887,"author":{"gitId":"-"},"content":""},{"lineNumber":888,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":889,"author":{"gitId":"-"},"content":"         * Builder class for {@link ResponseOutput}."},{"lineNumber":890,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":891,"author":{"gitId":"-"},"content":"        public static final class Builder {"},{"lineNumber":892,"author":{"gitId":"-"},"content":"            private final ResponseOutput responseOutput;"},{"lineNumber":893,"author":{"gitId":"-"},"content":""},{"lineNumber":894,"author":{"gitId":"-"},"content":"            private Builder() {"},{"lineNumber":895,"author":{"gitId":"-"},"content":"                responseOutput \u003d new ResponseOutput();"},{"lineNumber":896,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":897,"author":{"gitId":"-"},"content":""},{"lineNumber":898,"author":{"gitId":"-"},"content":"            Builder withIsMissingResponse(boolean isMissingResponse) {"},{"lineNumber":899,"author":{"gitId":"-"},"content":"                responseOutput.isMissingResponse \u003d isMissingResponse;"},{"lineNumber":900,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":901,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":902,"author":{"gitId":"-"},"content":""},{"lineNumber":903,"author":{"gitId":"-"},"content":"            Builder withResponseId(String responseId) {"},{"lineNumber":904,"author":{"gitId":"-"},"content":"                responseOutput.responseId \u003d StringHelper.encrypt(responseId);"},{"lineNumber":905,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":906,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":907,"author":{"gitId":"-"},"content":""},{"lineNumber":908,"author":{"gitId":"xenosf"},"content":"            Builder withResponse(FeedbackResponse response) {"},{"lineNumber":909,"author":{"gitId":"xenosf"},"content":"                responseOutput.responseId \u003d StringHelper.encrypt(response.getId().toString());"},{"lineNumber":910,"author":{"gitId":"xenosf"},"content":"                return this;"},{"lineNumber":911,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":912,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":913,"author":{"gitId":"-"},"content":"            Builder withGiver(String giverName) {"},{"lineNumber":914,"author":{"gitId":"-"},"content":"                responseOutput.giver \u003d giverName;"},{"lineNumber":915,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":916,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":917,"author":{"gitId":"-"},"content":""},{"lineNumber":918,"author":{"gitId":"-"},"content":"            Builder withRelatedGiverEmail(@Nullable String relatedGiverEmail) {"},{"lineNumber":919,"author":{"gitId":"-"},"content":"                responseOutput.relatedGiverEmail \u003d relatedGiverEmail;"},{"lineNumber":920,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":921,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":922,"author":{"gitId":"-"},"content":""},{"lineNumber":923,"author":{"gitId":"-"},"content":"            Builder withGiverTeam(String giverTeam) {"},{"lineNumber":924,"author":{"gitId":"-"},"content":"                responseOutput.giverTeam \u003d giverTeam;"},{"lineNumber":925,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":926,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":927,"author":{"gitId":"-"},"content":""},{"lineNumber":928,"author":{"gitId":"-"},"content":"            Builder withGiverEmail(@Nullable String giverEmail) {"},{"lineNumber":929,"author":{"gitId":"-"},"content":"                responseOutput.giverEmail \u003d giverEmail;"},{"lineNumber":930,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":931,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":932,"author":{"gitId":"-"},"content":""},{"lineNumber":933,"author":{"gitId":"xenosf"},"content":"            Builder withGiverSectionName(String giverSection) {"},{"lineNumber":934,"author":{"gitId":"-"},"content":"                responseOutput.giverSection \u003d giverSection;"},{"lineNumber":935,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":936,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":937,"author":{"gitId":"-"},"content":""},{"lineNumber":938,"author":{"gitId":"xenosf"},"content":"            Builder withGiverSection(Section giverSection) {"},{"lineNumber":939,"author":{"gitId":"xenosf"},"content":"                responseOutput.giverSection \u003d giverSection.getName();"},{"lineNumber":940,"author":{"gitId":"xenosf"},"content":"                return this;"},{"lineNumber":941,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":942,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":943,"author":{"gitId":"-"},"content":"            Builder withRecipient(String recipientName) {"},{"lineNumber":944,"author":{"gitId":"-"},"content":"                responseOutput.recipient \u003d recipientName;"},{"lineNumber":945,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":946,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":947,"author":{"gitId":"-"},"content":""},{"lineNumber":948,"author":{"gitId":"-"},"content":"            Builder withRecipientTeam(String recipientTeam) {"},{"lineNumber":949,"author":{"gitId":"-"},"content":"                responseOutput.recipientTeam \u003d recipientTeam;"},{"lineNumber":950,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":951,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":952,"author":{"gitId":"-"},"content":""},{"lineNumber":953,"author":{"gitId":"-"},"content":"            Builder withRecipientEmail(@Nullable String recipientEmail) {"},{"lineNumber":954,"author":{"gitId":"-"},"content":"                responseOutput.recipientEmail \u003d recipientEmail;"},{"lineNumber":955,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":956,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":957,"author":{"gitId":"-"},"content":""},{"lineNumber":958,"author":{"gitId":"xenosf"},"content":"            Builder withRecipientSectionName(String recipientSection) {"},{"lineNumber":959,"author":{"gitId":"-"},"content":"                responseOutput.recipientSection \u003d recipientSection;"},{"lineNumber":960,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":961,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":962,"author":{"gitId":"-"},"content":""},{"lineNumber":963,"author":{"gitId":"xenosf"},"content":"            Builder withRecipientSection(Section recipientSection) {"},{"lineNumber":964,"author":{"gitId":"xenosf"},"content":"                responseOutput.recipientSection \u003d recipientSection.getName();"},{"lineNumber":965,"author":{"gitId":"xenosf"},"content":"                return this;"},{"lineNumber":966,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":967,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":968,"author":{"gitId":"-"},"content":"            Builder withResponseDetails(FeedbackResponseDetails responseDetails) {"},{"lineNumber":969,"author":{"gitId":"-"},"content":"                responseOutput.responseDetails \u003d responseDetails;"},{"lineNumber":970,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":971,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":972,"author":{"gitId":"-"},"content":""},{"lineNumber":973,"author":{"gitId":"-"},"content":"            Builder withParticipantComment(@Nullable CommentOutput participantComment) {"},{"lineNumber":974,"author":{"gitId":"-"},"content":"                responseOutput.participantComment \u003d participantComment;"},{"lineNumber":975,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":976,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":977,"author":{"gitId":"-"},"content":""},{"lineNumber":978,"author":{"gitId":"-"},"content":"            Builder withInstructorComments(List\u003cCommentOutput\u003e instructorComments) {"},{"lineNumber":979,"author":{"gitId":"-"},"content":"                responseOutput.instructorComments \u003d instructorComments;"},{"lineNumber":980,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":981,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":982,"author":{"gitId":"-"},"content":""},{"lineNumber":983,"author":{"gitId":"-"},"content":"            ResponseOutput build() {"},{"lineNumber":984,"author":{"gitId":"-"},"content":"                return responseOutput;"},{"lineNumber":985,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":986,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":987,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":988,"author":{"gitId":"-"},"content":""},{"lineNumber":989,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":990,"author":{"gitId":"-"},"content":"     * API output format for response comments."},{"lineNumber":991,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":992,"author":{"gitId":"-"},"content":"    public static class CommentOutput extends FeedbackResponseCommentData {"},{"lineNumber":993,"author":{"gitId":"-"},"content":""},{"lineNumber":994,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":995,"author":{"gitId":"-"},"content":"        private String commentGiverName;"},{"lineNumber":996,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":997,"author":{"gitId":"-"},"content":"        private String lastEditorName;"},{"lineNumber":998,"author":{"gitId":"-"},"content":""},{"lineNumber":999,"author":{"gitId":"xenosf"},"content":"        private CommentOutput(FeedbackResponseCommentAttributes frca) {"},{"lineNumber":1000,"author":{"gitId":"xenosf"},"content":"            // use builder instead"},{"lineNumber":1001,"author":{"gitId":"xenosf"},"content":"            super(frca);"},{"lineNumber":1002,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1003,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1004,"author":{"gitId":"xenosf"},"content":"        private CommentOutput(FeedbackResponseComment frc) {"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"            // use builder instead"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"            super(frc);"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1008,"author":{"gitId":"-"},"content":""},{"lineNumber":1009,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"         * Returns a builder for {@link CommentOutput}."},{"lineNumber":1011,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":1012,"author":{"gitId":"xenosf"},"content":"        static Builder builder(FeedbackResponseCommentAttributes frca) {"},{"lineNumber":1013,"author":{"gitId":"xenosf"},"content":"            return new Builder(frca);"},{"lineNumber":1014,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":1015,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1016,"author":{"gitId":"xenosf"},"content":"        /**"},{"lineNumber":1017,"author":{"gitId":"xenosf"},"content":"         * Returns a builder for {@link CommentOutput}."},{"lineNumber":1018,"author":{"gitId":"xenosf"},"content":"         */"},{"lineNumber":1019,"author":{"gitId":"xenosf"},"content":"        static Builder builder(FeedbackResponseComment frc) {"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"            return new Builder(frc);"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1022,"author":{"gitId":"-"},"content":""},{"lineNumber":1023,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"        public String getCommentGiverName() {"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"            return commentGiverName;"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1027,"author":{"gitId":"-"},"content":""},{"lineNumber":1028,"author":{"gitId":"-"},"content":"        @Nullable"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"        public String getLastEditorName() {"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"            return lastEditorName;"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1032,"author":{"gitId":"-"},"content":""},{"lineNumber":1033,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"         * Builder class for {@link CommentOutput}."},{"lineNumber":1035,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"        public static final class Builder {"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"            private final CommentOutput commentOutput;"},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"xenosf"},"content":"            private Builder(FeedbackResponseCommentAttributes frca) {"},{"lineNumber":1040,"author":{"gitId":"xenosf"},"content":"                commentOutput \u003d new CommentOutput(frca);"},{"lineNumber":1041,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":1042,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":1043,"author":{"gitId":"xenosf"},"content":"            private Builder(FeedbackResponseComment frc) {"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"                commentOutput \u003d new CommentOutput(frc);"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1046,"author":{"gitId":"-"},"content":""},{"lineNumber":1047,"author":{"gitId":"-"},"content":"            Builder withCommentGiver(@Nullable String commentGiver) {"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"                commentOutput.commentGiver \u003d commentGiver;"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1051,"author":{"gitId":"-"},"content":""},{"lineNumber":1052,"author":{"gitId":"-"},"content":"            Builder withCommentGiverName(@Nullable String commentGiverName) {"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"                commentOutput.commentGiverName \u003d commentGiverName;"},{"lineNumber":1054,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1056,"author":{"gitId":"-"},"content":""},{"lineNumber":1057,"author":{"gitId":"-"},"content":"            Builder withLastEditorEmail(@Nullable String lastEditorEmail) {"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"                commentOutput.lastEditorEmail \u003d lastEditorEmail;"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1061,"author":{"gitId":"-"},"content":""},{"lineNumber":1062,"author":{"gitId":"-"},"content":"            Builder withLastEditorName(@Nullable String lastEditorName) {"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"                commentOutput.lastEditorName \u003d lastEditorName;"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"                return this;"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1066,"author":{"gitId":"-"},"content":""},{"lineNumber":1067,"author":{"gitId":"-"},"content":"            CommentOutput build() {"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"                return commentOutput;"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1072,"author":{"gitId":"-"},"content":""},{"lineNumber":1073,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":386,"-":687}},{"path":"src/main/java/teammates/ui/webapi/AccountRequestSearchIndexingWorkerAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const.ParamsNames;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Task queue worker action: performs account request search indexing."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AccountRequestSearchIndexingWorkerAction extends AdminOnlyAction {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public ActionResult execute() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String email \u003d getNonNullRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String institute \u003d getNonNullRequestParamValue(ParamsNames.INSTRUCTOR_INSTITUTION);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":"        AccountRequest accRequest \u003d sqlLogic.getAccountRequest(email, institute);"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"            sqlLogic.putAccountRequestDocument(accRequest);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            // Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            return new JsonResult(\"Failure\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Successful\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":3,"-":27}},{"path":"src/main/java/teammates/ui/webapi/BasicFeedbackSubmissionAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The basic action for feedback submission."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abstract class BasicFeedbackSubmissionAction extends Action {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks whether instructors can see the question."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    boolean canInstructorSeeQuestion(FeedbackQuestionAttributes feedbackQuestion) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        boolean isGiverVisibleToInstructor \u003d"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowGiverNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        boolean isRecipientVisibleToInstructor \u003d"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowRecipientNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        boolean isResponseVisibleToInstructor \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return isResponseVisibleToInstructor \u0026\u0026 isGiverVisibleToInstructor \u0026\u0026 isRecipientVisibleToInstructor;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Checks whether instructors can see the question."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    boolean canInstructorSeeQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        boolean isGiverVisibleToInstructor \u003d"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowGiverNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        boolean isRecipientVisibleToInstructor \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowRecipientNameTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        boolean isResponseVisibleToInstructor \u003d"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                feedbackQuestion.getShowResponsesTo().contains(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return isResponseVisibleToInstructor \u0026\u0026 isGiverVisibleToInstructor \u0026\u0026 isRecipientVisibleToInstructor;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Verifies that instructor can see the moderated question in moderation request."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void verifyInstructorCanSeeQuestionIfInModeration(FeedbackQuestionAttributes feedbackQuestion)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson) \u0026\u0026 !canInstructorSeeQuestion(feedbackQuestion)) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            // should not moderate question which instructors cannot see"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"The question is not applicable for moderation\", true);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Verifies that instructor can see the moderated question in moderation request."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    void verifyInstructorCanSeeQuestionIfInModeration(FeedbackQuestion feedbackQuestion)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson) \u0026\u0026 !canInstructorSeeQuestion(feedbackQuestion)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            // should not moderate question which instructors cannot see"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"The question is not applicable for moderation\", true);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Gets the student involved in the submission process."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    StudentAttributes getStudentOfCourseFromRequest(String courseId) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return logic.getStudentForEmail(courseId, moderatedPerson);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return logic.getStudentForEmail(courseId, previewAsPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return getPossiblyUnregisteredStudent(courseId);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Gets the student involved in the submission process."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    Student getSqlStudentOfCourseFromRequest(String courseId) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // TODO: Rename method to remove Sql after migration."},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return sqlLogic.getStudentForEmail(courseId, moderatedPerson);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return sqlLogic.getStudentForEmail(courseId, previewAsPerson);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return getPossiblyUnregisteredSqlStudent(courseId);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Checks the access control for student feedback submission."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    void checkAccessControlForStudentFeedbackSubmission("},{"lineNumber":110,"author":{"gitId":"-"},"content":"            StudentAttributes student, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent student entity\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":121,"author":{"gitId":"-"},"content":"                    logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()), feedbackSession,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                    student.getSection(),"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            checkAccessControlForPreview(feedbackSession, false);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(student, feedbackSession);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            verifyMatchingGoogleId(student.getGoogleId());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Checks the access control for student feedback submission."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    void checkAccessControlForStudentFeedbackSubmission(Student student, FeedbackSession feedbackSession)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent student entity\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":147,"author":{"gitId":"-"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()), feedbackSession,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    student.getSectionName(),"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()), feedbackSession,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(student, feedbackSession);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            if (student.getAccount() !\u003d null) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                if (userInfo \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    // Student is associated with an account; even if registration key is passed, do not allow access"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                    throw new UnauthorizedAccessException(\"Login is required to access this feedback session\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                } else if (!userInfo.id.equals(student.getAccount().getGoogleId())) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                    // Logged in student is not the same as the student registered for the given key, do not allow access"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                    throw new UnauthorizedAccessException(\"You are not authorized to access this feedback session\");"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Checks the access control for student feedback result."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    void checkAccessControlForStudentFeedbackResult("},{"lineNumber":173,"author":{"gitId":"-"},"content":"            StudentAttributes student, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent student entity\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(student, feedbackSession);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            verifyMatchingGoogleId(student.getGoogleId());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            checkAccessControlForPreview(feedbackSession, false);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":"     * Checks the access control for student feedback result."},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"    void checkAccessControlForStudentFeedbackResult("},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"            Student student, FeedbackSession feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent student entity\");"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"        if (StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyAccessible(student, feedbackSession);"},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":"            verifyMatchingGoogleId(student.getGoogleId());"},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":"            checkAccessControlForPreview(feedbackSession, false);"},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Gets the instructor involved in the submission process."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    InstructorAttributes getInstructorOfCourseFromRequest(String courseId) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return logic.getInstructorForEmail(courseId, moderatedPerson);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return logic.getInstructorForEmail(courseId, previewAsPerson);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return getPossiblyUnregisteredInstructor(courseId);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Gets the instructor involved in the submission process."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    Instructor getSqlInstructorOfCourseFromRequest(String courseId) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return sqlLogic.getInstructorForEmail(courseId, moderatedPerson);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return sqlLogic.getInstructorForEmail(courseId, previewAsPerson);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return getPossiblyUnregisteredSqlInstructor(courseId);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * Checks the access control for instructor feedback submission."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    void checkAccessControlForInstructorFeedbackSubmission("},{"lineNumber":243,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent instructor entity\");"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()),"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            checkAccessControlForPreview(feedbackSession, true);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            gateKeeper.verifySessionSubmissionPrivilegeForInstructor(feedbackSession, instructor);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            verifyMatchingGoogleId(instructor.getGoogleId());"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * Checks the access control for instructor feedback submission."},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    void checkAccessControlForInstructorFeedbackSubmission("},{"lineNumber":267,"author":{"gitId":"-"},"content":"            Instructor instructor, FeedbackSession feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent instructor entity\");"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(moderatedPerson)) {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":278,"author":{"gitId":"-"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()),"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                    feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        } else if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":283,"author":{"gitId":"-"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()),"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                    feedbackSession, Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            gateKeeper.verifySessionSubmissionPrivilegeForInstructor(feedbackSession, instructor);"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            if (instructor.getAccount() !\u003d null) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                if (userInfo \u003d\u003d null) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                    // Instructor is associated to an account; even if registration key is passed, do not allow access"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                    throw new UnauthorizedAccessException(\"Login is required to access this feedback session\");"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                } else if (!userInfo.id.equals(instructor.getAccount().getGoogleId())) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                    // Logged in instructor is not the same as the instructor registered for the given key,"},{"lineNumber":293,"author":{"gitId":"-"},"content":"                    // do not allow access"},{"lineNumber":294,"author":{"gitId":"-"},"content":"                    throw new UnauthorizedAccessException(\"You are not authorized to access this feedback session\");"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"-"},"content":"     * Checks the access control for instructor feedback result."},{"lineNumber":302,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    void checkAccessControlForInstructorFeedbackResult("},{"lineNumber":304,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor, FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent instructor entity\");"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructor, feedbackSession,"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            verifyMatchingGoogleId(instructor.getGoogleId());"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            checkAccessControlForPreview(feedbackSession, true);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":321,"author":{"gitId":"-"},"content":"     * Checks the access control for instructor feedback result."},{"lineNumber":322,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    void checkAccessControlForInstructorFeedbackResult("},{"lineNumber":324,"author":{"gitId":"-"},"content":"            Instructor instructor, FeedbackSession feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        if (instructor \u003d\u003d null) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Trying to access system using a non-existent instructor entity\");"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructor, feedbackSession,"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            verifyMatchingGoogleId(instructor.getGoogleId());"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"            checkAccessControlForPreview(feedbackSession, true);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"    private void verifyMatchingGoogleId(String googleId) throws UnauthorizedAccessException {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(googleId)) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            if (userInfo \u003d\u003d null) {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                // Student/Instructor is associated to a google ID; even if registration key is passed, do not allow access"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                throw new UnauthorizedAccessException(\"Login is required to access this feedback session\");"},{"lineNumber":345,"author":{"gitId":"-"},"content":"            } else if (!userInfo.id.equals(googleId)) {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                // Logged in student/instructor is not the same as the student/instructor registered for the given key,"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                // do not allow access"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                throw new UnauthorizedAccessException(\"You are not authorized to access this feedback session\");"},{"lineNumber":349,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    private void checkAccessControlForPreview(FeedbackSessionAttributes feedbackSession, boolean isInstructor)"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        if (isInstructor) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":358,"author":{"gitId":"-"},"content":"                    logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()), feedbackSession,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":362,"author":{"gitId":"-"},"content":"                    logic.getInstructorForGoogleId(feedbackSession.getCourseId(), userInfo.getId()), feedbackSession,"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"xenosf"},"content":"    private void checkAccessControlForPreview(FeedbackSession feedbackSession, boolean isInstructor)"},{"lineNumber":368,"author":{"gitId":"xenosf"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":369,"author":{"gitId":"xenosf"},"content":"        gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":370,"author":{"gitId":"xenosf"},"content":"        if (isInstructor) {"},{"lineNumber":371,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":372,"author":{"gitId":"xenosf"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()), feedbackSession,"},{"lineNumber":373,"author":{"gitId":"xenosf"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":374,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":375,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":376,"author":{"gitId":"xenosf"},"content":"                    sqlLogic.getInstructorByGoogleId(feedbackSession.getCourse().getId(), userInfo.getId()), feedbackSession,"},{"lineNumber":377,"author":{"gitId":"xenosf"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":378,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":379,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":380,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":382,"author":{"gitId":"-"},"content":"     * Verifies that it is not a preview request."},{"lineNumber":383,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    void verifyNotPreview() throws UnauthorizedAccessException {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(previewAsPerson)) {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"            // should not view response under preview mode"},{"lineNumber":388,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"You are not allowed to see responses when previewing\", true);"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":393,"author":{"gitId":"-"},"content":"     * Verifies that the session is open for submission."},{"lineNumber":394,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":395,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf it is moderation request, omit the check."},{"lineNumber":396,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    void verifySessionOpenExceptForModeration(FeedbackSessionAttributes feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(moderatedPerson) \u0026\u0026 !(feedbackSession.isOpened() || feedbackSession.isInGracePeriod())) {"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"The feedback session is not available for submission\", true);"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":406,"author":{"gitId":"-"},"content":"     * Verifies that the session is open for submission."},{"lineNumber":407,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":408,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf it is moderation request, omit the check."},{"lineNumber":409,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    void verifySessionOpenExceptForModeration(FeedbackSession feedbackSession) throws UnauthorizedAccessException {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        String moderatedPerson \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON);"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"        if (StringHelper.isEmpty(moderatedPerson) \u0026\u0026 !(feedbackSession.isOpened() || feedbackSession.isInGracePeriod())) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"The feedback session is not available for submission\", true);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":419,"author":{"gitId":"-"},"content":"     * Gets the section of a recipient."},{"lineNumber":420,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    Section getRecipientSection("},{"lineNumber":422,"author":{"gitId":"-"},"content":"            String courseId, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":423,"author":{"gitId":"-"},"content":"            String recipientIdentifier) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"        switch (recipientType) {"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            switch (giverType) {"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            case INSTRUCTORS:"},{"lineNumber":429,"author":{"gitId":"-"},"content":"            case SELF:"},{"lineNumber":430,"author":{"gitId":"-"},"content":"                return Const.DEFAULT_SQL_SECTION;"},{"lineNumber":431,"author":{"gitId":"-"},"content":"            case TEAMS:"},{"lineNumber":432,"author":{"gitId":"-"},"content":"            case TEAMS_IN_SAME_SECTION:"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                Section section \u003d sqlLogic.getSectionByCourseIdAndTeam(courseId, recipientIdentifier);"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                return section \u003d\u003d null ? Const.DEFAULT_SQL_SECTION : section;"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            case STUDENTS:"},{"lineNumber":436,"author":{"gitId":"-"},"content":"            case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":437,"author":{"gitId":"-"},"content":"                Student student \u003d sqlLogic.getStudentForEmail(courseId, recipientIdentifier);"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                return student \u003d\u003d null ? Const.DEFAULT_SQL_SECTION : student.getSection();"},{"lineNumber":439,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":440,"author":{"gitId":"-"},"content":"                assert false : \"Invalid giver type \" + giverType + \" for recipient type \" + recipientType;"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":442,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        case NONE:"},{"lineNumber":445,"author":{"gitId":"-"},"content":"            return Const.DEFAULT_SQL_SECTION;"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        case OWN_TEAM:"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            Section section \u003d sqlLogic.getSectionByCourseIdAndTeam(courseId, recipientIdentifier);"},{"lineNumber":451,"author":{"gitId":"-"},"content":"            return section \u003d\u003d null ? Const.DEFAULT_SQL_SECTION : section;"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":457,"author":{"gitId":"-"},"content":"            Student student \u003d sqlLogic.getStudentForEmail(courseId, recipientIdentifier);"},{"lineNumber":458,"author":{"gitId":"-"},"content":"            return student \u003d\u003d null ? Const.DEFAULT_SQL_SECTION : student.getSection();"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":460,"author":{"gitId":"-"},"content":"            assert false : \"Unknown recipient type \" + recipientType;"},{"lineNumber":461,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":466,"author":{"gitId":"-"},"content":"     * Gets the section of a recipient."},{"lineNumber":467,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    String getDatastoreRecipientSection("},{"lineNumber":469,"author":{"gitId":"-"},"content":"            String courseId, FeedbackParticipantType giverType, FeedbackParticipantType recipientType,"},{"lineNumber":470,"author":{"gitId":"-"},"content":"            String recipientIdentifier) {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        switch (recipientType) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":473,"author":{"gitId":"-"},"content":"            switch (giverType) {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"            case INSTRUCTORS:"},{"lineNumber":475,"author":{"gitId":"-"},"content":"            case SELF:"},{"lineNumber":476,"author":{"gitId":"-"},"content":"                return Const.DEFAULT_SECTION;"},{"lineNumber":477,"author":{"gitId":"-"},"content":"            case TEAMS:"},{"lineNumber":478,"author":{"gitId":"-"},"content":"            case TEAMS_IN_SAME_SECTION:"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                return logic.getSectionForTeam(courseId, recipientIdentifier);"},{"lineNumber":480,"author":{"gitId":"-"},"content":"            case STUDENTS:"},{"lineNumber":481,"author":{"gitId":"-"},"content":"            case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                StudentAttributes student \u003d logic.getStudentForEmail(courseId, recipientIdentifier);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                return student \u003d\u003d null ? Const.DEFAULT_SECTION : student.getSection();"},{"lineNumber":484,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                assert false : \"Invalid giver type \" + giverType + \" for recipient type \" + recipientType;"},{"lineNumber":486,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":489,"author":{"gitId":"-"},"content":"        case NONE:"},{"lineNumber":490,"author":{"gitId":"-"},"content":"            return Const.DEFAULT_SECTION;"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        case TEAMS_EXCLUDING_SELF:"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        case OWN_TEAM:"},{"lineNumber":495,"author":{"gitId":"-"},"content":"            return logic.getSectionForTeam(courseId, recipientIdentifier);"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        case STUDENTS:"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        case STUDENTS_EXCLUDING_SELF:"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        case STUDENTS_IN_SAME_SECTION:"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS:"},{"lineNumber":500,"author":{"gitId":"-"},"content":"        case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":501,"author":{"gitId":"-"},"content":"            StudentAttributes student \u003d logic.getStudentForEmail(courseId, recipientIdentifier);"},{"lineNumber":502,"author":{"gitId":"-"},"content":"            return student \u003d\u003d null ? Const.DEFAULT_SECTION : student.getSection();"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":504,"author":{"gitId":"-"},"content":"            assert false : \"Unknown recipient type \" + recipientType;"},{"lineNumber":505,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":507,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":33,"-":476}},{"path":"src/main/java/teammates/ui/webapi/CreateFeedbackQuestionAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":8,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackQuestionData;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackQuestionCreateRequest;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Creates a feedback question."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class CreateFeedbackQuestionAction extends Action {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        InstructorAttributes instructorDetailForCourse \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!isCourseMigrated(courseId)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructorDetailForCourse,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    getNonNullFeedbackSession(feedbackSessionName, courseId),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // TODO: Remove sql from variable name after migration"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Instructor sqlInstructorDetailForCourse \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        gateKeeper.verifyAccessible(sqlInstructorDetailForCourse,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getNonNullSqlFeedbackSession(feedbackSessionName, courseId),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FeedbackQuestionCreateRequest request \u003d getAndValidateRequestBody(FeedbackQuestionCreateRequest.class);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!isCourseMigrated(courseId)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return executeWithDataStore(courseId, feedbackSessionName, request);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        FeedbackQuestion feedbackQuestion \u003d FeedbackQuestion.makeQuestion("},{"lineNumber":57,"author":{"gitId":"-"},"content":"                getNonNullSqlFeedbackSession(feedbackSessionName, courseId),"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                request.getQuestionNumber(),"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                request.getQuestionDescription(),"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                request.getGiverType(),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                request.getRecipientType(),"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                request.getNumberOfEntitiesToGiveFeedbackTo(),"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                request.getShowResponsesTo(),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                request.getShowGiverNameTo(),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                request.getShowRecipientNameTo(),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                request.getQuestionDetails()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            // validate questions (giver \u0026 recipient)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            String err \u003d feedbackQuestion.getQuestionDetailsCopy().validateGiverRecipientVisibility(feedbackQuestion);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            if (!err.isEmpty()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(err);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            // validate questions (question details)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails questionDetails \u003d feedbackQuestion.getQuestionDetailsCopy();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            List\u003cString\u003e questionDetailsErrors \u003d questionDetails.validateQuestionDetails();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            if (!questionDetailsErrors.isEmpty()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(questionDetailsErrors.toString());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            feedbackQuestion \u003d sqlLogic.createFeedbackQuestion(feedbackQuestion);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return new JsonResult(new FeedbackQuestionData(feedbackQuestion));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException ex) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(ex);"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":"        } catch (EntityAlreadyExistsException e) {"},{"lineNumber":87,"author":{"gitId":"marquestye"},"content":"            throw new InvalidOperationException(e);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private JsonResult executeWithDataStore(String courseId, String feedbackSessionName,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            FeedbackQuestionCreateRequest request) throws InvalidHttpRequestBodyException {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes attributes \u003d FeedbackQuestionAttributes.builder()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .withCourseId(courseId)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .withFeedbackSessionName(feedbackSessionName)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .withGiverType(request.getGiverType())"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .withRecipientType(request.getRecipientType())"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .withQuestionNumber(request.getQuestionNumber())"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withNumberOfEntitiesToGiveFeedbackTo(request.getNumberOfEntitiesToGiveFeedbackTo())"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .withShowResponsesTo(request.getShowResponsesTo())"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .withShowGiverNameTo(request.getShowGiverNameTo())"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .withShowRecipientNameTo(request.getShowRecipientNameTo())"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .withQuestionDetails(request.getQuestionDetails())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .withQuestionDescription(request.getQuestionDescription())"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // validate questions (giver \u0026 recipient)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String err \u003d attributes.getQuestionDetailsCopy().validateGiverRecipientVisibility(attributes);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!err.isEmpty()) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(err);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // validate questions (question details)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FeedbackQuestionDetails questionDetails \u003d attributes.getQuestionDetailsCopy();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cString\u003e questionDetailsErrors \u003d questionDetails.validateQuestionDetails();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!questionDetailsErrors.isEmpty()) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(String.join(\"\\n\", questionDetailsErrors));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            attributes \u003d logic.createFeedbackQuestion(attributes);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new JsonResult(new FeedbackQuestionData(attributes));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":4,"-":124}},{"path":"src/main/java/teammates/ui/webapi/CreateFeedbackSessionAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPermissionSet;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackSessionData;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.ui.request.FeedbackSessionCreateRequest;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Create a feedback session."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CreateFeedbackSessionAction extends Action {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructor, course, Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            CourseAttributes course \u003d logic.getCourse(courseId);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructor, course, Const.InstructorPermissions.CAN_MODIFY_SESSION);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        FeedbackSessionCreateRequest createRequest \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    getAndValidateRequestBody(FeedbackSessionCreateRequest.class);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d SanitizationHelper.sanitizeTitle(createRequest.getFeedbackSessionName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            if (course \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                throw new InvalidHttpParameterException(\"Failed to find course with the given course id.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            if (instructor \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                throw new InvalidHttpParameterException(\"Failed to find instructor with the given courseId and googleId.\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            String timeZone \u003d course.getTimeZone();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            Instant startTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    createRequest.getSubmissionStartTime(), timeZone, true);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            String startTimeError \u003d FieldValidator.getInvalidityInfoForNewStartTime(startTime, timeZone);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            if (!startTimeError.isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid submission opening time: \" + startTimeError);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    createRequest.getSubmissionEndTime(), timeZone, true);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            String endTimeError \u003d FieldValidator.getInvalidityInfoForNewEndTime(endTime, timeZone);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (!endTimeError.isEmpty()) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid submission closing time: \" + endTimeError);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Instant sessionVisibleTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    createRequest.getSessionVisibleFromTime(), timeZone, true);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            String visibilityStartAndSessionStartTimeError \u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    FieldValidator.getInvalidityInfoForTimeForNewVisibilityStart(sessionVisibleTime, startTime);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            if (!visibilityStartAndSessionStartTimeError.isEmpty()) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid session visible time: \""},{"lineNumber":91,"author":{"gitId":"-"},"content":"                        + visibilityStartAndSessionStartTimeError);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Instant resultsVisibleTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    createRequest.getResultsVisibleFromTime(), timeZone, true);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FeedbackSession feedbackSession \u003d new FeedbackSession("},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    feedbackSessionName,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    course,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    instructor.getEmail(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    createRequest.getInstructions(),"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    startTime,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                    endTime,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    sessionVisibleTime,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    resultsVisibleTime,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                    createRequest.getGracePeriod(),"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                    true,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                    createRequest.isClosingEmailEnabled(),"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    createRequest.isPublishedEmailEnabled()"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                feedbackSession \u003d sqlLogic.createFeedbackSession(feedbackSession);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                throw new InvalidOperationException(\"A session named \" + feedbackSessionName"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                        + \" exists already in the course \" + course.getName()"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        + \" (Course ID: \" + courseId + \")\", e);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            } catch (InvalidParametersException e) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"            if (createRequest.getToCopyCourseId() !\u003d null) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                createCopiedFeedbackQuestions(createRequest.getToCopyCourseId(), courseId,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                        feedbackSessionName, createRequest.getToCopySessionName());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            FeedbackSessionData output \u003d new FeedbackSessionData(feedbackSession);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            InstructorPermissionSet privilege \u003d constructInstructorPrivileges(instructor, feedbackSessionName);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            output.setPrivileges(privilege);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return new JsonResult(output);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            CourseAttributes course \u003d logic.getCourse(courseId);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String timeZone \u003d course.getTimeZone();"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"            Instant startTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    createRequest.getSubmissionStartTime(), timeZone, true);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            String startTimeError \u003d FieldValidator.getInvalidityInfoForNewStartTime(startTime, timeZone);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            if (!startTimeError.isEmpty()) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid submission opening time: \" + startTimeError);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            Instant endTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    createRequest.getSubmissionEndTime(), timeZone, true);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            String endTimeError \u003d FieldValidator.getInvalidityInfoForNewEndTime(endTime, timeZone);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            if (!endTimeError.isEmpty()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid submission closing time: \" + endTimeError);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            Instant sessionVisibleTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":147,"author":{"gitId":"-"},"content":"                    createRequest.getSessionVisibleFromTime(), timeZone, true);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String visibilityStartAndSessionStartTimeError \u003d"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                    FieldValidator.getInvalidityInfoForTimeForNewVisibilityStart(sessionVisibleTime, startTime);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            if (!visibilityStartAndSessionStartTimeError.isEmpty()) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(\"Invalid session visible time: \""},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        + visibilityStartAndSessionStartTimeError);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            Instant resultsVisibleTime \u003d TimeHelper.getMidnightAdjustedInstantBasedOnZone("},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    createRequest.getResultsVisibleFromTime(), timeZone, true);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"            FeedbackSessionAttributes fs \u003d"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                    FeedbackSessionAttributes"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                            .builder(feedbackSessionName, course.getId())"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                            .withCreatorEmail(instructor.getEmail())"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                            .withTimeZone(course.getTimeZone())"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                            .withInstructions(createRequest.getInstructions())"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                            .withStartTime(startTime)"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                            .withEndTime(endTime)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                            .withGracePeriod(createRequest.getGracePeriod())"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                            .withSessionVisibleFromTime(sessionVisibleTime)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                            .withResultsVisibleFromTime(resultsVisibleTime)"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                            .withIsClosingEmailEnabled(createRequest.isClosingEmailEnabled())"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                            .withIsPublishedEmailEnabled(createRequest.isPublishedEmailEnabled())"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                            .build();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                logic.createFeedbackSession(fs);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                throw new InvalidOperationException(\"A session named \" + feedbackSessionName"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                        + \" exists already in the course \" + course.getName()"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                        + \" (Course ID: \" + courseId + \")\", e);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            } catch (InvalidParametersException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"            if (createRequest.getToCopyCourseId() !\u003d null) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                createFeedbackQuestions(createRequest.getToCopyCourseId(), courseId, feedbackSessionName,"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                        createRequest.getToCopySessionName());"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            fs \u003d getNonNullFeedbackSession(fs.getFeedbackSessionName(), fs.getCourseId());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            FeedbackSessionData output \u003d new FeedbackSessionData(fs);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            InstructorPermissionSet privilege \u003d constructInstructorPrivileges(instructor, feedbackSessionName);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            output.setPrivileges(privilege);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return new JsonResult(output);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private void createCopiedFeedbackQuestions(String oldCourseId, String newCourseId,"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            String newFeedbackSessionName, String oldFeedbackSessionName) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        FeedbackSession oldFeedbackSession \u003d sqlLogic.getFeedbackSession(oldFeedbackSessionName, oldCourseId);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        FeedbackSession newFeedbackSession \u003d sqlLogic.getFeedbackSession(newFeedbackSessionName, newCourseId);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        sqlLogic.getFeedbackQuestionsForSession(oldFeedbackSession).forEach(question -\u003e {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            FeedbackQuestion feedbackQuestion \u003d question.makeDeepCopy(newFeedbackSession);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                sqlLogic.createFeedbackQuestion(feedbackQuestion);"},{"lineNumber":204,"author":{"gitId":"marquestye"},"content":"            } catch (InvalidParametersException | EntityAlreadyExistsException e) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                log.severe(\"Error when copying feedback question: \" + e.getMessage());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    private void createFeedbackQuestions(String copyCourseId, String newCourseId, String feedbackSessionName,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            String oldSessionName) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        logic.getFeedbackQuestionsForSession(oldSessionName, copyCourseId).forEach(question -\u003e {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes attributes \u003d FeedbackQuestionAttributes.builder()"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    .withCourseId(newCourseId)"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                    .withFeedbackSessionName(feedbackSessionName)"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                    .withGiverType(question.getGiverType())"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                    .withRecipientType(question.getRecipientType())"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                    .withQuestionNumber(question.getQuestionNumber())"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                    .withNumberOfEntitiesToGiveFeedbackTo(question.getNumberOfEntitiesToGiveFeedbackTo())"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    .withShowResponsesTo(question.getShowResponsesTo())"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    .withShowGiverNameTo(question.getShowGiverNameTo())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    .withShowRecipientNameTo(question.getShowRecipientNameTo())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    .withQuestionDetails(question.getQuestionDetails())"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    .withQuestionDescription(question.getQuestionDescription())"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    .build();"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                logic.createFeedbackQuestion(attributes);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            } catch (InvalidParametersException e) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                log.severe(\"Error when copying feedback question: \" + e.getMessage());"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":1,"-":233}},{"path":"src/main/java/teammates/ui/webapi/CreateInstructorAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.request.InstructorCreateRequest;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Action: adds another instructor to a course that already exists."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":"public class CreateInstructorAction extends Action {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        if (userInfo.isAdmin) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!userInfo.isInstructor) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Instructor privilege is required to access this resource.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.id);"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":"                    instructor, sqlLogic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR);"},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.id);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    instructor, logic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_INSTRUCTOR);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        InstructorCreateRequest instructorRequest \u003d getAndValidateRequestBody(InstructorCreateRequest.class);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"            if (isCourseMigrated(courseId)) {"},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":"                return executeWithSql(courseId, instructorRequest);"},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":"                return executeWithDataStore(courseId, instructorRequest);"},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException e) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException("},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    \"An instructor with the same email address already exists in the course.\", e);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":"     * Executes the action using SQL storage."},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"     * @param courseId          Id of the course the instructor is being added"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":"     *                          to."},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":"     * @param instructorRequest Request body containing the instructor\u0027s info."},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"     * @return The Json result of the created Instructor"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":"     * @throws InvalidParametersException   If a parameter is invalid"},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":"     * @throws EntityAlreadyExistsException If there is a conflict at the email"},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":"     *                                      field"},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"    private JsonResult executeWithSql(String courseId, InstructorCreateRequest instructorRequest)"},{"lineNumber":80,"author":{"gitId":"mingyuanc"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":81,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":82,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructorToAdd \u003d createInstructorWithBasicAttributesSql(courseId,"},{"lineNumber":83,"author":{"gitId":"mingyuanc"},"content":"                SanitizationHelper.sanitizeName(instructorRequest.getName()),"},{"lineNumber":84,"author":{"gitId":"mingyuanc"},"content":"                SanitizationHelper.sanitizeEmail(instructorRequest.getEmail()), instructorRequest.getRoleName(),"},{"lineNumber":85,"author":{"gitId":"mingyuanc"},"content":"                instructorRequest.getIsDisplayedToStudent(),"},{"lineNumber":86,"author":{"gitId":"mingyuanc"},"content":"                SanitizationHelper.sanitizeName(instructorRequest.getDisplayName()));"},{"lineNumber":87,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":88,"author":{"gitId":"mingyuanc"},"content":"        Instructor createdInstructor \u003d sqlLogic.createInstructor(instructorToAdd);"},{"lineNumber":89,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":90,"author":{"gitId":"mingyuanc"},"content":"        taskQueuer.scheduleCourseRegistrationInviteToInstructor("},{"lineNumber":91,"author":{"gitId":"mingyuanc"},"content":"                this.userInfo.id, instructorToAdd.getEmail(), courseId, false);"},{"lineNumber":92,"author":{"gitId":"mingyuanc"},"content":"        taskQueuer.scheduleInstructorForSearchIndexing(createdInstructor.getCourseId(), createdInstructor.getEmail());"},{"lineNumber":93,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":94,"author":{"gitId":"mingyuanc"},"content":"        return new JsonResult(new InstructorData(createdInstructor));"},{"lineNumber":95,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":97,"author":{"gitId":"mingyuanc"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"mingyuanc"},"content":"     * Executes the action using Datastore storage."},{"lineNumber":99,"author":{"gitId":"mingyuanc"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"mingyuanc"},"content":"     * @param courseId          Id of the course the instructor is being added"},{"lineNumber":101,"author":{"gitId":"mingyuanc"},"content":"     *                          to."},{"lineNumber":102,"author":{"gitId":"mingyuanc"},"content":"     * @param instructorRequest Request body containing the instructor\u0027s info."},{"lineNumber":103,"author":{"gitId":"mingyuanc"},"content":"     * @return The Json result of the created Instructor"},{"lineNumber":104,"author":{"gitId":"mingyuanc"},"content":"     * @throws InvalidParametersException   If a parameter is invalid"},{"lineNumber":105,"author":{"gitId":"mingyuanc"},"content":"     * @throws EntityAlreadyExistsException If there is a conflict at the email"},{"lineNumber":106,"author":{"gitId":"mingyuanc"},"content":"     *                                      field"},{"lineNumber":107,"author":{"gitId":"mingyuanc"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"mingyuanc"},"content":"    private JsonResult executeWithDataStore(String courseId, InstructorCreateRequest instructorRequest)"},{"lineNumber":109,"author":{"gitId":"mingyuanc"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        InstructorAttributes instructorToAdd \u003d createInstructorWithBasicAttributes(courseId,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                instructorRequest.getName(), instructorRequest.getEmail(), instructorRequest.getRoleName(),"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                instructorRequest.getIsDisplayedToStudent(), instructorRequest.getDisplayName());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        InstructorAttributes createdInstructor \u003d logic.createInstructor(instructorToAdd);"},{"lineNumber":115,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        taskQueuer.scheduleCourseRegistrationInviteToInstructor("},{"lineNumber":117,"author":{"gitId":"-"},"content":"                userInfo.id, instructorToAdd.getEmail(), instructorToAdd.getCourseId(), false);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        taskQueuer.scheduleInstructorForSearchIndexing(createdInstructor.getCourseId(), createdInstructor.getEmail());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return new JsonResult(new InstructorData(createdInstructor));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"mingyuanc"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"mingyuanc"},"content":"     * Creates a new instructor with basic information."},{"lineNumber":125,"author":{"gitId":"mingyuanc"},"content":"     * This consists of everything apart from custom privileges."},{"lineNumber":126,"author":{"gitId":"mingyuanc"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"mingyuanc"},"content":"     * @param courseId              Id of the course the instructor is being added"},{"lineNumber":128,"author":{"gitId":"mingyuanc"},"content":"     *                              to."},{"lineNumber":129,"author":{"gitId":"mingyuanc"},"content":"     * @param instructorName        Name of the instructor."},{"lineNumber":130,"author":{"gitId":"mingyuanc"},"content":"     * @param instructorEmail       Email of the instructor."},{"lineNumber":131,"author":{"gitId":"mingyuanc"},"content":"     * @param instructorRole        Role of the instructor."},{"lineNumber":132,"author":{"gitId":"mingyuanc"},"content":"     * @param isDisplayedToStudents Whether the instructor should be visible to"},{"lineNumber":133,"author":{"gitId":"mingyuanc"},"content":"     *                              students."},{"lineNumber":134,"author":{"gitId":"mingyuanc"},"content":"     * @param displayedName         Name to be visible to students."},{"lineNumber":135,"author":{"gitId":"mingyuanc"},"content":"     *                              Should not be {@code null} even if"},{"lineNumber":136,"author":{"gitId":"mingyuanc"},"content":"     *                              {@code isDisplayedToStudents} is false."},{"lineNumber":137,"author":{"gitId":"mingyuanc"},"content":"     * @return An instructor with basic info, excluding custom privileges"},{"lineNumber":138,"author":{"gitId":"mingyuanc"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"mingyuanc"},"content":"    private Instructor createInstructorWithBasicAttributesSql(String courseId, String instructorName,"},{"lineNumber":140,"author":{"gitId":"mingyuanc"},"content":"            String instructorEmail, String instructorRole,"},{"lineNumber":141,"author":{"gitId":"mingyuanc"},"content":"            boolean isDisplayedToStudents, String displayedName) {"},{"lineNumber":142,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":143,"author":{"gitId":"mingyuanc"},"content":"        String instrName \u003d SanitizationHelper.sanitizeName(instructorName);"},{"lineNumber":144,"author":{"gitId":"mingyuanc"},"content":"        String instrEmail \u003d SanitizationHelper.sanitizeEmail(instructorEmail);"},{"lineNumber":145,"author":{"gitId":"mingyuanc"},"content":"        String instrRole \u003d SanitizationHelper.sanitizeName(instructorRole);"},{"lineNumber":146,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":147,"author":{"gitId":"mingyuanc"},"content":"        String instrDisplayedName \u003d displayedName;"},{"lineNumber":148,"author":{"gitId":"mingyuanc"},"content":"        if (displayedName \u003d\u003d null || displayedName.isEmpty()) {"},{"lineNumber":149,"author":{"gitId":"mingyuanc"},"content":"            instrDisplayedName \u003d Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR;"},{"lineNumber":150,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":152,"author":{"gitId":"mingyuanc"},"content":"        InstructorPrivileges privileges \u003d new InstructorPrivileges(instrRole);"},{"lineNumber":153,"author":{"gitId":"mingyuanc"},"content":"        InstructorPermissionRole role \u003d InstructorPermissionRole.getEnum(instrRole);"},{"lineNumber":154,"author":{"gitId":"mingyuanc"},"content":"        Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"mingyuanc"},"content":"        return new Instructor(course, instrName, instrEmail, isDisplayedToStudents, instrDisplayedName, role,"},{"lineNumber":157,"author":{"gitId":"mingyuanc"},"content":"                privileges);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Creates a new instructor with basic information."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * This consists of everything apart from custom privileges."},{"lineNumber":163,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"mingyuanc"},"content":"     * @param courseId              Id of the course the instructor is being added"},{"lineNumber":165,"author":{"gitId":"mingyuanc"},"content":"     *                              to."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @param instructorName        Name of the instructor."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * @param instructorEmail       Email of the instructor."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * @param instructorRole        Role of the instructor."},{"lineNumber":169,"author":{"gitId":"mingyuanc"},"content":"     * @param isDisplayedToStudents Whether the instructor should be visible to"},{"lineNumber":170,"author":{"gitId":"mingyuanc"},"content":"     *                              students."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * @param displayedName         Name to be visible to students."},{"lineNumber":172,"author":{"gitId":"mingyuanc"},"content":"     *                              Should not be {@code null} even if"},{"lineNumber":173,"author":{"gitId":"mingyuanc"},"content":"     *                              {@code isDisplayedToStudents} is false."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * @return An instructor with basic info, excluding custom privileges"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private InstructorAttributes createInstructorWithBasicAttributes(String courseId, String instructorName,"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            String instructorEmail, String instructorRole,"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            boolean isDisplayedToStudents, String displayedName) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String instrName \u003d SanitizationHelper.sanitizeName(instructorName);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String instrEmail \u003d SanitizationHelper.sanitizeEmail(instructorEmail);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String instrRole \u003d SanitizationHelper.sanitizeName(instructorRole);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String instrDisplayedName \u003d displayedName;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        if (displayedName \u003d\u003d null || displayedName.isEmpty()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            instrDisplayedName \u003d Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        instrDisplayedName \u003d SanitizationHelper.sanitizeName(instrDisplayedName);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        InstructorPrivileges privileges \u003d new InstructorPrivileges(instructorRole);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return InstructorAttributes.builder(courseId, instrEmail)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                .withName(instrName)"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                .withRole(instrRole)"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                .withIsDisplayedToStudents(isDisplayedToStudents)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withDisplayedName(instrDisplayedName)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withPrivileges(privileges)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mingyuanc":99,"-":102}},{"path":"src/main/java/teammates/ui/webapi/EnrollStudentsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EnrollException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.RequestTracer;"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":17,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":19,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.ui.output.EnrollStudentsData;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentsData;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.ui.request.StudentsEnrollRequest;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Enroll a list of students."},{"lineNumber":29,"author":{"gitId":"-"},"content":" *"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * \u003cp\u003eCreate the students who are not in the course."},{"lineNumber":31,"author":{"gitId":"-"},"content":" *"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * \u003cp\u003eUpdate the students who are already existed."},{"lineNumber":33,"author":{"gitId":"-"},"content":" *"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * \u003cp\u003eReturn all students who are successfully enrolled."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"public class EnrollStudentsAction extends Action {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!userInfo.isInstructor) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Instructor privilege is required to access this resource.\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        if (!isCourseMigrated(courseId)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.id);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    instructor, logic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_STUDENT);"},{"lineNumber":54,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":55,"author":{"gitId":"domoberzin"},"content":"            return;"},{"lineNumber":56,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"domoberzin"},"content":"        Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.id);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        gateKeeper.verifyAccessible("},{"lineNumber":60,"author":{"gitId":"domoberzin"},"content":"                    instructor, sqlLogic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_STUDENT);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        StudentsEnrollRequest enrollRequests \u003d getAndValidateRequestBody(StudentsEnrollRequest.class);"},{"lineNumber":68,"author":{"gitId":"domoberzin"},"content":"        List\u003cStudentsEnrollRequest.StudentEnrollRequest\u003e studentEnrollRequests \u003d enrollRequests.getStudentEnrollRequests();"},{"lineNumber":69,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":70,"author":{"gitId":"domoberzin"},"content":"        boolean isCourseMigrated \u003d isCourseMigrated(courseId);"},{"lineNumber":71,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":72,"author":{"gitId":"domoberzin"},"content":"        if (isCourseMigrated) {"},{"lineNumber":73,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudent\u003e studentsToEnroll \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"domoberzin"},"content":"            studentEnrollRequests.forEach(studentEnrollRequest -\u003e {"},{"lineNumber":75,"author":{"gitId":"domoberzin"},"content":"                Section section \u003d new Section(course, studentEnrollRequest.getSection());"},{"lineNumber":76,"author":{"gitId":"domoberzin"},"content":"                Team team \u003d new Team(section, studentEnrollRequest.getTeam());"},{"lineNumber":77,"author":{"gitId":"domoberzin"},"content":"                studentsToEnroll.add(new Student("},{"lineNumber":78,"author":{"gitId":"domoberzin"},"content":"                        course, studentEnrollRequest.getName(),"},{"lineNumber":79,"author":{"gitId":"domoberzin"},"content":"                        studentEnrollRequest.getEmail(), studentEnrollRequest.getComments(), team));"},{"lineNumber":80,"author":{"gitId":"domoberzin"},"content":"            });"},{"lineNumber":81,"author":{"gitId":"domoberzin"},"content":"            try {"},{"lineNumber":82,"author":{"gitId":"domoberzin"},"content":"                sqlLogic.validateSectionsAndTeams(studentsToEnroll, courseId);"},{"lineNumber":83,"author":{"gitId":"domoberzin"},"content":"            } catch (EnrollException e) {"},{"lineNumber":84,"author":{"gitId":"domoberzin"},"content":"                throw new InvalidOperationException(e);"},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudent\u003e enrolledStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"            List\u003cEnrollStudentsData.EnrollErrorResults\u003e failToEnrollStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"            Set\u003cString\u003e existingStudentsEmail;"},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudent\u003e existingStudents \u003d sqlLogic.getStudentsForCourse(courseId);"},{"lineNumber":92,"author":{"gitId":"domoberzin"},"content":"            existingStudentsEmail \u003d"},{"lineNumber":93,"author":{"gitId":"domoberzin"},"content":"                    existingStudents.stream().map(Student::getEmail).collect(Collectors.toSet());"},{"lineNumber":94,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":95,"author":{"gitId":"domoberzin"},"content":"            for (StudentsEnrollRequest.StudentEnrollRequest enrollRequest : studentEnrollRequests) {"},{"lineNumber":96,"author":{"gitId":"domoberzin"},"content":"                RequestTracer.checkRemainingTime();"},{"lineNumber":97,"author":{"gitId":"domoberzin"},"content":"                if (existingStudentsEmail.contains(enrollRequest.getEmail())) {"},{"lineNumber":98,"author":{"gitId":"domoberzin"},"content":"                    // The student has been enrolled in the course."},{"lineNumber":99,"author":{"gitId":"domoberzin"},"content":"                    try {"},{"lineNumber":100,"author":{"gitId":"domoberzin"},"content":"                        Section section \u003d sqlLogic.getSectionOrCreate(courseId, enrollRequest.getSection());"},{"lineNumber":101,"author":{"gitId":"domoberzin"},"content":"                        Team team \u003d sqlLogic.getTeamOrCreate(section, enrollRequest.getTeam());"},{"lineNumber":102,"author":{"gitId":"domoberzin"},"content":"                        Student newStudent \u003d new Student("},{"lineNumber":103,"author":{"gitId":"domoberzin"},"content":"                                course, enrollRequest.getName(),"},{"lineNumber":104,"author":{"gitId":"domoberzin"},"content":"                                enrollRequest.getEmail(), enrollRequest.getComments(), team);"},{"lineNumber":105,"author":{"gitId":"marquestye"},"content":"                        newStudent.setId(sqlLogic.getStudentForEmail(courseId, enrollRequest.getEmail()).getId());"},{"lineNumber":106,"author":{"gitId":"domoberzin"},"content":"                        Student updatedStudent \u003d sqlLogic.updateStudentCascade(newStudent);"},{"lineNumber":107,"author":{"gitId":"domoberzin"},"content":"                        taskQueuer.scheduleStudentForSearchIndexing("},{"lineNumber":108,"author":{"gitId":"domoberzin"},"content":"                                updatedStudent.getCourseId(), updatedStudent.getEmail());"},{"lineNumber":109,"author":{"gitId":"domoberzin"},"content":"                        enrolledStudents.add(updatedStudent);"},{"lineNumber":110,"author":{"gitId":"domoberzin"},"content":"                    } catch (InvalidParametersException | EntityDoesNotExistException"},{"lineNumber":111,"author":{"gitId":"domoberzin"},"content":"                            | EntityAlreadyExistsException exception) {"},{"lineNumber":112,"author":{"gitId":"domoberzin"},"content":"                        // Unsuccessfully enrolled students will not be returned."},{"lineNumber":113,"author":{"gitId":"domoberzin"},"content":"                        failToEnrollStudents.add(new EnrollStudentsData.EnrollErrorResults(enrollRequest.getEmail(),"},{"lineNumber":114,"author":{"gitId":"domoberzin"},"content":"                                exception.getMessage()));"},{"lineNumber":115,"author":{"gitId":"domoberzin"},"content":"                    }"},{"lineNumber":116,"author":{"gitId":"domoberzin"},"content":"                } else {"},{"lineNumber":117,"author":{"gitId":"domoberzin"},"content":"                    // The student is new."},{"lineNumber":118,"author":{"gitId":"domoberzin"},"content":"                    try {"},{"lineNumber":119,"author":{"gitId":"domoberzin"},"content":"                        Section section \u003d sqlLogic.getSectionOrCreate(courseId, enrollRequest.getSection());"},{"lineNumber":120,"author":{"gitId":"domoberzin"},"content":"                        Team team \u003d sqlLogic.getTeamOrCreate(section, enrollRequest.getTeam());"},{"lineNumber":121,"author":{"gitId":"domoberzin"},"content":"                        Student newStudent \u003d new Student("},{"lineNumber":122,"author":{"gitId":"domoberzin"},"content":"                                course, enrollRequest.getName(),"},{"lineNumber":123,"author":{"gitId":"domoberzin"},"content":"                                enrollRequest.getEmail(), enrollRequest.getComments(), team);"},{"lineNumber":124,"author":{"gitId":"domoberzin"},"content":"                        newStudent \u003d sqlLogic.createStudent(newStudent);"},{"lineNumber":125,"author":{"gitId":"domoberzin"},"content":"                        taskQueuer.scheduleStudentForSearchIndexing("},{"lineNumber":126,"author":{"gitId":"domoberzin"},"content":"                                newStudent.getCourseId(), newStudent.getEmail());"},{"lineNumber":127,"author":{"gitId":"domoberzin"},"content":"                        enrolledStudents.add(newStudent);"},{"lineNumber":128,"author":{"gitId":"domoberzin"},"content":"                    } catch (InvalidParametersException | EntityAlreadyExistsException exception) {"},{"lineNumber":129,"author":{"gitId":"domoberzin"},"content":"                        // Unsuccessfully enrolled students will not be returned."},{"lineNumber":130,"author":{"gitId":"domoberzin"},"content":"                        failToEnrollStudents.add(new EnrollStudentsData.EnrollErrorResults(enrollRequest.getEmail(),"},{"lineNumber":131,"author":{"gitId":"domoberzin"},"content":"                                exception.getMessage()));"},{"lineNumber":132,"author":{"gitId":"domoberzin"},"content":"                    }"},{"lineNumber":133,"author":{"gitId":"domoberzin"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":136,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudentData\u003e studentDataList \u003d enrolledStudents"},{"lineNumber":137,"author":{"gitId":"domoberzin"},"content":"                    .stream()"},{"lineNumber":138,"author":{"gitId":"domoberzin"},"content":"                    .map(StudentData::new)"},{"lineNumber":139,"author":{"gitId":"domoberzin"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":140,"author":{"gitId":"domoberzin"},"content":"            StudentsData data \u003d new StudentsData();"},{"lineNumber":141,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":142,"author":{"gitId":"domoberzin"},"content":"            data.setStudents(studentDataList);"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":"            return new JsonResult(new EnrollStudentsData(data, failToEnrollStudents));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            List\u003cStudentAttributes\u003e studentsToEnroll \u003d new ArrayList\u003c\u003e();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            enrollRequests.getStudentEnrollRequests().forEach(studentEnrollRequest -\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                studentsToEnroll.add(StudentAttributes.builder(courseId, studentEnrollRequest.getEmail())"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                        .withName(studentEnrollRequest.getName())"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                        .withSectionName(studentEnrollRequest.getSection())"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        .withTeamName(studentEnrollRequest.getTeam())"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                        .withComment(studentEnrollRequest.getComments())"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                logic.validateSectionsAndTeams(studentsToEnroll, courseId);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            } catch (EnrollException e) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                throw new InvalidOperationException(e);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"            List\u003cStudentAttributes\u003e enrolledStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            List\u003cEnrollStudentsData.EnrollErrorResults\u003e failToEnrollStudents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":165,"author":{"gitId":"domoberzin"},"content":"            Set\u003cString\u003e existingStudentsEmail;"},{"lineNumber":166,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":167,"author":{"gitId":"domoberzin"},"content":"            List\u003cStudentAttributes\u003e existingStudents \u003d logic.getStudentsForCourse(courseId);"},{"lineNumber":168,"author":{"gitId":"domoberzin"},"content":"            existingStudentsEmail \u003d"},{"lineNumber":169,"author":{"gitId":"domoberzin"},"content":"                    existingStudents.stream().map(StudentAttributes::getEmail).collect(Collectors.toSet());"},{"lineNumber":170,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"            for (StudentAttributes student : studentsToEnroll) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                RequestTracer.checkRemainingTime();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                if (existingStudentsEmail.contains(student.getEmail())) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                    // The student has been enrolled in the course."},{"lineNumber":175,"author":{"gitId":"domoberzin"},"content":"                    try {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                        StudentAttributes.UpdateOptions updateOptions \u003d"},{"lineNumber":177,"author":{"gitId":"domoberzin"},"content":"                                StudentAttributes.updateOptionsBuilder(courseId, student.getEmail())"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                                .withName(student.getName())"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                                .withSectionName(student.getSection())"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                                .withTeamName(student.getTeam())"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                                .withComment(student.getComments())"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                                .build();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                        StudentAttributes updatedStudent \u003d logic.updateStudentCascade(updateOptions);"},{"lineNumber":184,"author":{"gitId":"domoberzin"},"content":"                        taskQueuer.scheduleStudentForSearchIndexing("},{"lineNumber":185,"author":{"gitId":"domoberzin"},"content":"                                updatedStudent.getCourse(), updatedStudent.getEmail());"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                        enrolledStudents.add(updatedStudent);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                    } catch (InvalidParametersException | EntityDoesNotExistException"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                            | EntityAlreadyExistsException exception) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                        // Unsuccessfully enrolled students will not be returned."},{"lineNumber":190,"author":{"gitId":"-"},"content":"                        failToEnrollStudents.add(new EnrollStudentsData.EnrollErrorResults(student.getEmail(),"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                                exception.getMessage()));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                    // The student is new."},{"lineNumber":195,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":"                        StudentAttributes studentAttributes \u003d StudentAttributes.builder(courseId, student.getEmail())"},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":"                                .withName(student.getName())"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"                                .withSectionName(student.getSection())"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":"                                .withTeamName(student.getTeam())"},{"lineNumber":200,"author":{"gitId":"domoberzin"},"content":"                                .withComment(student.getComments())"},{"lineNumber":201,"author":{"gitId":"domoberzin"},"content":"                                .build();"},{"lineNumber":202,"author":{"gitId":"domoberzin"},"content":"                        StudentAttributes newStudent \u003d logic.createStudent(studentAttributes);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                        taskQueuer.scheduleStudentForSearchIndexing(newStudent.getCourse(), newStudent.getEmail());"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                        enrolledStudents.add(newStudent);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                    } catch (InvalidParametersException | EntityAlreadyExistsException exception) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                        // Unsuccessfully enrolled students will not be returned."},{"lineNumber":207,"author":{"gitId":"-"},"content":"                        failToEnrollStudents.add(new EnrollStudentsData.EnrollErrorResults(student.getEmail(),"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                                exception.getMessage()));"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            List\u003cStudentData\u003e studentDataList \u003d enrolledStudents"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    .stream()"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                    .map(StudentData::new)"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            StudentsData data \u003d new StudentsData();"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            data.setStudents(studentDataList);"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return new JsonResult(new EnrollStudentsData(data, failToEnrollStudents));"},{"lineNumber":222,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":108,"marquestye":1,"-":116}},{"path":"src/main/java/teammates/ui/webapi/GetCourseJoinStatusAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":8,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":9,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.JoinStatus;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Get the join status of a course."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"public class GetCourseJoinStatusAction extends Action {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // Any user can use a join link as long as its parameters are valid"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String regkey \u003d getNonNullRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String entityType \u003d getNonNullRequestParamValue(Const.ParamsNames.ENTITY_TYPE);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String isCreatingAccount \u003d getRequestParamValue(Const.ParamsNames.IS_CREATING_ACCOUNT);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        switch (entityType) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        case Const.EntityType.STUDENT:"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return getStudentJoinStatus(regkey);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        case Const.EntityType.INSTRUCTOR:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            return getInstructorJoinStatus(regkey, \"true\".equals(isCreatingAccount));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Error: invalid entity type\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private JsonResult getStudentJoinStatus(String regkey) {"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"        StudentAttributes studentAttributes \u003d logic.getStudentForRegistrationKey(regkey);"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"        if (studentAttributes !\u003d null \u0026\u0026 !isCourseMigrated(studentAttributes.getCourse())) {"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"            return getJoinStatusResult(studentAttributes.isRegistered());"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"            Student student \u003d sqlLogic.getStudentByRegistrationKey(regkey);"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            if (student \u003d\u003d null) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                throw new EntityNotFoundException(\"No student with given registration key: \" + regkey);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return getJoinStatusResult(student.isRegistered());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private JsonResult getInstructorJoinStatus(String regkey, boolean isCreatingAccount) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (isCreatingAccount) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            AccountRequestAttributes accountRequest \u003d logic.getAccountRequestForRegistrationKey(regkey);"},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":"            AccountRequest sqlAccountRequest \u003d sqlLogic.getAccountRequestByRegistrationKey(regkey);"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":"            if (accountRequest \u003d\u003d null \u0026\u0026 sqlAccountRequest \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                throw new EntityNotFoundException(\"No account request with given registration key: \" + regkey);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"            if (sqlAccountRequest !\u003d null) {"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"                return getJoinStatusResult(sqlAccountRequest.getRegisteredAt() !\u003d null);"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":"            if (accountRequest !\u003d null) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                return getJoinStatusResult(accountRequest.getRegisteredAt() !\u003d null);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":"        InstructorAttributes instructorAttributes \u003d logic.getInstructorForRegistrationKey(regkey);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"        if (instructorAttributes !\u003d null \u0026\u0026 !isCourseMigrated(instructorAttributes.getCourseId())) {"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":"            return getJoinStatusResult(instructorAttributes.isRegistered());"},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByRegistrationKey(regkey);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (instructor \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                throw new EntityNotFoundException(\"No instructor with given registration key: \" + regkey);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return getJoinStatusResult(instructor.isRegistered());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private JsonResult getJoinStatusResult(boolean hasJoined) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        JoinStatus result \u003d new JoinStatus(hasJoined);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return new JsonResult(result);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":24,"-":69}},{"path":"src/main/java/teammates/ui/webapi/GetSessionResponseStatsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":6,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackSessionStatsData;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Action: gets the response stats (submitted / total) of a feedback session."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"domoberzin"},"content":"public class GetSessionResponseStatsAction extends Action {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        if (userInfo.isAdmin) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"            FeedbackSession fs \u003d getNonNullSqlFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":30,"author":{"gitId":"domoberzin"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"            gateKeeper.verifyAccessible(instructor, fs);"},{"lineNumber":32,"author":{"gitId":"domoberzin"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            FeedbackSessionAttributes fsa \u003d getNonNullFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible(instructor, fsa);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"            FeedbackSession fsa \u003d getNonNullSqlFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"            int expectedTotal \u003d sqlLogic.getExpectedTotalSubmission(fsa);"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"            int actualTotal \u003d sqlLogic.getActualTotalSubmission(fsa);"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":"            FeedbackSessionStatsData output \u003d new FeedbackSessionStatsData(actualTotal, expectedTotal);"},{"lineNumber":49,"author":{"gitId":"domoberzin"},"content":"            return new JsonResult(output);"},{"lineNumber":50,"author":{"gitId":"domoberzin"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            FeedbackSessionAttributes fsa \u003d getNonNullFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            int expectedTotal \u003d logic.getExpectedTotalSubmission(fsa);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            int actualTotal \u003d logic.getActualTotalSubmission(fsa);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            FeedbackSessionStatsData output \u003d new FeedbackSessionStatsData(actualTotal, expectedTotal);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new JsonResult(output);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":15,"-":44}},{"path":"src/main/java/teammates/ui/webapi/GetSessionResultsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SessionResultsBundle;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.SqlSessionResultsBundle;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.ui.output.SessionResultsData;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.ui.request.Intent;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Gets feedback session results including statistics where necessary."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"public class GetSessionResultsAction extends BasicFeedbackSubmissionAction {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AuthType.PUBLIC;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Intent intent \u003d Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        boolean isPreviewResults \u003d !StringHelper.isEmpty(previewAsPerson);"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"            checkSpecificAccessControlSql(courseId, feedbackSessionName, intent, isPreviewResults);"},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"            checkSpecificAccessControlDatastore(courseId, feedbackSessionName, intent, isPreviewResults);"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"    private void checkSpecificAccessControlDatastore("},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, Intent intent, boolean isPreviewResults)"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        FeedbackSessionAttributes feedbackSession \u003d getNonNullFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (intent) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case FULL_DETAIL:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyAccessible(instructor, feedbackSession);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case INSTRUCTOR_RESULT:"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"            if (!isPreviewResults \u0026\u0026 !feedbackSession.isPublished()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                throw new UnauthorizedAccessException(\"This feedback session is not yet published.\", true);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            instructor \u003d getInstructorOfCourseFromRequest(courseId);"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"            checkAccessControlForInstructorFeedbackResult(instructor, feedbackSession);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case STUDENT_RESULT:"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":"            if (!isPreviewResults \u0026\u0026 !feedbackSession.isPublished()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                throw new UnauthorizedAccessException(\"This feedback session is not yet published.\", true);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            StudentAttributes student \u003d getStudentOfCourseFromRequest(courseId);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            checkAccessControlForStudentFeedbackResult(student, feedbackSession);"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":"        case INSTRUCTOR_SUBMISSION:"},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":"        case STUDENT_SUBMISSION:"},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"            throw new InvalidHttpParameterException(\"Invalid intent for this action\");"},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"        default:"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"    private void checkSpecificAccessControlSql("},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, Intent intent, boolean isPreviewResults)"},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"            throws UnauthorizedAccessException {"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d getNonNullSqlFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"        switch (intent) {"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"        case FULL_DETAIL:"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyLoggedInUserPrivileges(userInfo);"},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":"            gateKeeper.verifyAccessible(instructor, feedbackSession);"},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"        case INSTRUCTOR_RESULT:"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"            if (!isPreviewResults \u0026\u0026 !feedbackSession.isPublished()) {"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"                throw new UnauthorizedAccessException(\"This feedback session is not yet published.\", true);"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            instructor \u003d getSqlInstructorOfCourseFromRequest(courseId);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            checkAccessControlForInstructorFeedbackResult(instructor, feedbackSession);"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":"            break;"},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"        case STUDENT_RESULT:"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":"            if (!isPreviewResults \u0026\u0026 !feedbackSession.isPublished()) {"},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":"                throw new UnauthorizedAccessException(\"This feedback session is not yet published.\", true);"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Student student \u003d getSqlStudentOfCourseFromRequest(courseId);"},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":"            checkAccessControlForStudentFeedbackResult(student, feedbackSession);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        case INSTRUCTOR_SUBMISSION:"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        case STUDENT_SUBMISSION:"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Invalid intent for this action\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String feedbackSessionName \u003d getNonNullRequestParamValue(Const.ParamsNames.FEEDBACK_SESSION_NAME);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"xenosf"},"content":"        // Allow additional filter by question ID and section name"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String questionId \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String selectedSection \u003d getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_GROUPBYSECTION);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        FeedbackResultFetchType fetchType \u003d FeedbackResultFetchType.parseFetchType("},{"lineNumber":119,"author":{"gitId":"-"},"content":"                getRequestParamValue(Const.ParamsNames.FEEDBACK_RESULTS_SECTION_BY_GIVER_RECEIVER));"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String previewAsPerson \u003d getRequestParamValue(Const.ParamsNames.PREVIEWAS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        boolean isPreviewResults \u003d !StringHelper.isEmpty(previewAsPerson);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        Intent intent \u003d Intent.valueOf(getNonNullRequestParamValue(Const.ParamsNames.INTENT));"},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"            if (questionId !\u003d null) {"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"                UUID questionUuid \u003d getUuidRequestParamValue(Const.ParamsNames.FEEDBACK_QUESTION_ID);"},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"                executeWithSql(courseId, feedbackSessionName, questionUuid,"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"                        selectedSection, fetchType, intent, isPreviewResults);"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"            return executeWithSql(courseId, feedbackSessionName, null, selectedSection,"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":"                    fetchType, intent, isPreviewResults);"},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"            return executeWithDatastore(courseId, feedbackSessionName, questionId, selectedSection,"},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":"                    fetchType, intent, isPreviewResults);"},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":"    private JsonResult executeWithDatastore("},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, String questionId, String selectedSection,"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"            FeedbackResultFetchType fetchType, Intent intent, boolean isPreviewResults) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        StudentAttributes student;"},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":"        SessionResultsBundle bundle;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        switch (intent) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        case FULL_DETAIL:"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.id);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"            bundle \u003d logic.getSessionResultsForCourse(feedbackSessionName, courseId, instructor.getEmail(),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    questionId, selectedSection, fetchType);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return new JsonResult(SessionResultsData.initForInstructor(bundle));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        case INSTRUCTOR_RESULT:"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            // Section name filter is not applicable here"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            instructor \u003d getInstructorOfCourseFromRequest(courseId);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"            bundle \u003d logic.getSessionResultsForUser(feedbackSessionName, courseId, instructor.getEmail(),"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    true, questionId, isPreviewResults);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"            // Build a fake student object, as the results will be displayed as if they are displayed to a student"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            student \u003d StudentAttributes.builder(instructor.getCourseId(), instructor.getEmail())"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                    .withTeamName(Const.USER_TEAM_FOR_INSTRUCTOR)"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                    .build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return new JsonResult(SessionResultsData.initForStudent(bundle, student));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        case STUDENT_RESULT:"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            // Section name filter is not applicable here"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            student \u003d getStudentOfCourseFromRequest(courseId);"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"            bundle \u003d logic.getSessionResultsForUser(feedbackSessionName, courseId, student.getEmail(),"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    false, questionId, isPreviewResults);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return new JsonResult(SessionResultsData.initForStudent(bundle, student));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        case INSTRUCTOR_SUBMISSION:"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        case STUDENT_SUBMISSION:"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Invalid intent for this action\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"    private JsonResult executeWithSql("},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":"            String courseId, String feedbackSessionName, UUID questionUuid, String selectedSection,"},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":"            FeedbackResultFetchType fetchType, Intent intent, boolean isPreviewResults) {"},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"        Instructor instructor;"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":"        Student student;"},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":"        FeedbackSession feedbackSession \u003d getNonNullSqlFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"        SqlSessionResultsBundle bundle;"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":"        switch (intent) {"},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"        case FULL_DETAIL:"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"            instructor \u003d getSqlInstructorOfCourseFromRequest(courseId);"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"            bundle \u003d sqlLogic.getSessionResultsForCourse(feedbackSession, courseId, instructor.getEmail(),"},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"                    questionUuid, selectedSection, fetchType);"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"            return new JsonResult(SessionResultsData.initForInstructor(bundle));"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":"        case INSTRUCTOR_RESULT:"},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"            // Section name filter is not applicable here"},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"            instructor \u003d getPossiblyUnregisteredSqlInstructor(courseId);"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":"            bundle \u003d sqlLogic.getSessionResultsForUser(feedbackSession, courseId, instructor.getEmail(),"},{"lineNumber":201,"author":{"gitId":"xenosf"},"content":"                    true, questionUuid, isPreviewResults);"},{"lineNumber":202,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":203,"author":{"gitId":"xenosf"},"content":"            // Build a fake student object, as the results will be displayed as if they are displayed to a student"},{"lineNumber":204,"author":{"gitId":"xenosf"},"content":"            student \u003d new Student(instructor.getCourse(), instructor.getName(), instructor.getEmail(), \"\");"},{"lineNumber":205,"author":{"gitId":"xenosf"},"content":"            student.setTeam(instructor.getTeam());"},{"lineNumber":206,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":207,"author":{"gitId":"xenosf"},"content":"            return new JsonResult(SessionResultsData.initForStudent(bundle, student));"},{"lineNumber":208,"author":{"gitId":"xenosf"},"content":"        case STUDENT_RESULT:"},{"lineNumber":209,"author":{"gitId":"xenosf"},"content":"            // Section name filter is not applicable here"},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":"            student \u003d getSqlStudentOfCourseFromRequest(courseId);"},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"            bundle \u003d sqlLogic.getSessionResultsForUser(feedbackSession, courseId, student.getEmail(),"},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":"                    false, questionUuid, isPreviewResults);"},{"lineNumber":214,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":215,"author":{"gitId":"xenosf"},"content":"            return new JsonResult(SessionResultsData.initForStudent(bundle, student));"},{"lineNumber":216,"author":{"gitId":"xenosf"},"content":"        case INSTRUCTOR_SUBMISSION:"},{"lineNumber":217,"author":{"gitId":"xenosf"},"content":"        case STUDENT_SUBMISSION:"},{"lineNumber":218,"author":{"gitId":"xenosf"},"content":"            throw new InvalidHttpParameterException(\"Invalid intent for this action\");"},{"lineNumber":219,"author":{"gitId":"xenosf"},"content":"        default:"},{"lineNumber":220,"author":{"gitId":"xenosf"},"content":"            throw new InvalidHttpParameterException(\"Unknown intent \" + intent);"},{"lineNumber":221,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":117,"-":107}},{"path":"src/main/java/teammates/ui/webapi/InstructorSearchIndexingWorkerAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.Const.ParamsNames;"},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Task queue worker action: performs instructor search indexing."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class InstructorSearchIndexingWorkerAction extends AdminOnlyAction {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public ActionResult execute() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(ParamsNames.COURSE_ID);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String email \u003d getNonNullRequestParamValue(ParamsNames.INSTRUCTOR_EMAIL);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":"            return executeWithSql(courseId, email);"},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"            return executeWithDataStore(courseId, email);"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":"    private JsonResult executeWithSql(String courseId, String email) {"},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":"        Instructor instructor \u003d sqlLogic.getInstructorForEmail(courseId, email);"},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":"            sqlLogic.putInstructorDocument(instructor);"},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":"            // Set an arbitrary retry code outside the range 200-299 to trigger automatic retry"},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":"            return new JsonResult(\"Failure\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"        return new JsonResult(\"Successful\");"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"    private JsonResult executeWithDataStore(String courseId, String email) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d logic.getInstructorForEmail(courseId, email);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            logic.putInstructorDocument(instructor);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            // Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return new JsonResult(\"Failure\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Successful\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"mingyuanc":21,"-":29}},{"path":"src/main/java/teammates/ui/webapi/JoinCourseAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yuanxi1"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":16,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":17,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Action: joins a course for a student/instructor."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yuanxi1"},"content":"public class JoinCourseAction extends Action {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // Any user can use a join link as long as its parameters are valid"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidOperationException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String regKey \u003d getNonNullRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String entityType \u003d getNonNullRequestParamValue(Const.ParamsNames.ENTITY_TYPE);"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"        String courseId \u003d getCourseId(regKey, entityType);"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"        // courseId is null when the registration key does not exist, this case is handled in the AccountsLogic."},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"        // Hence default to not migrated. Getting the courseId in the action layer is not needed once migration is done."},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":"        if (courseId \u003d\u003d null || !isCourseMigrated(courseId)) {"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"            switch (entityType) {"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"            case Const.EntityType.STUDENT:"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"                return joinCourseForStudentDatastore(regKey);"},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"            case Const.EntityType.INSTRUCTOR:"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"                return joinCourseForInstructorDatastore(regKey);"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":"            default:"},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"                throw new InvalidHttpParameterException(\"Error: invalid entity type\");"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        switch (entityType) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case Const.EntityType.STUDENT:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return joinCourseForStudent(regKey);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case Const.EntityType.INSTRUCTOR:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return joinCourseForInstructor(regKey);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(\"Error: invalid entity type\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private JsonResult joinCourseForStudent(String regkey) throws InvalidOperationException {"},{"lineNumber":68,"author":{"gitId":"yuanxi1"},"content":"        Student student;"},{"lineNumber":69,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"yuanxi1"},"content":"            student \u003d sqlLogic.joinCourseForStudent(regkey, userInfo.id);"},{"lineNumber":72,"author":{"gitId":"yuanxi1"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":74,"author":{"gitId":"yuanxi1"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":"            throw new InvalidOperationException(eaee);"},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":"            // There should not be any invalid parameter here"},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"            log.severe(\"Unexpected error\", ipe);"},{"lineNumber":79,"author":{"gitId":"yuanxi1"},"content":"            return new JsonResult(ipe.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":80,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":82,"author":{"gitId":"yuanxi1"},"content":"        sendJoinEmail(student.getCourseId(), student.getName(), student.getEmail(), false);"},{"lineNumber":83,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":84,"author":{"gitId":"yuanxi1"},"content":"        return new JsonResult(\"Student successfully joined course\");"},{"lineNumber":85,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":87,"author":{"gitId":"yuanxi1"},"content":"    private JsonResult joinCourseForInstructor(String regkey) throws InvalidOperationException {"},{"lineNumber":88,"author":{"gitId":"yuanxi1"},"content":"        Instructor instructor;"},{"lineNumber":89,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":90,"author":{"gitId":"yuanxi1"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"yuanxi1"},"content":"            instructor \u003d sqlLogic.joinCourseForInstructor(regkey, userInfo.id);"},{"lineNumber":92,"author":{"gitId":"yuanxi1"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":93,"author":{"gitId":"yuanxi1"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":94,"author":{"gitId":"yuanxi1"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":95,"author":{"gitId":"yuanxi1"},"content":"            throw new InvalidOperationException(eaee);"},{"lineNumber":96,"author":{"gitId":"yuanxi1"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":97,"author":{"gitId":"yuanxi1"},"content":"            // There should not be any invalid parameter here"},{"lineNumber":98,"author":{"gitId":"yuanxi1"},"content":"            log.severe(\"Unexpected error\", ipe);"},{"lineNumber":99,"author":{"gitId":"yuanxi1"},"content":"            return new JsonResult(ipe.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":100,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":102,"author":{"gitId":"yuanxi1"},"content":"        sendJoinEmail(instructor.getCourseId(), instructor.getName(), instructor.getEmail(), true);"},{"lineNumber":103,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":104,"author":{"gitId":"yuanxi1"},"content":"        return new JsonResult(\"Instructor successfully joined course\");"},{"lineNumber":105,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":107,"author":{"gitId":"yuanxi1"},"content":"    private JsonResult joinCourseForStudentDatastore(String regkey) throws InvalidOperationException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        StudentAttributes student;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            student \u003d logic.joinCourseForStudent(regkey, userInfo.id);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(eaee);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            // There should not be any invalid parameter here"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            log.severe(\"Unexpected error\", ipe);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return new JsonResult(ipe.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"yuanxi1"},"content":"        sendJoinEmailDatastore(student.getCourse(), student.getName(), student.getEmail(), false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Student successfully joined course\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"yuanxi1"},"content":"    private JsonResult joinCourseForInstructorDatastore(String regkey) throws InvalidOperationException {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor;"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            instructor \u003d logic.joinCourseForInstructor(regkey, userInfo.id);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(eaee);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            // There should not be any invalid parameter here"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            log.severe(\"Unexpected error\", ipe);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return new JsonResult(ipe.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"yuanxi1"},"content":"        sendJoinEmailDatastore(instructor.getCourseId(), instructor.getName(), instructor.getEmail(), true);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Instructor successfully joined course\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"yuanxi1"},"content":"    private void sendJoinEmailDatastore(String courseId, String userName, String userEmail, boolean isInstructor) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        CourseAttributes course \u003d logic.getCourse(courseId);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d emailGenerator.generateUserCourseRegisteredEmail("},{"lineNumber":150,"author":{"gitId":"-"},"content":"                userName, userEmail, userInfo.id, isInstructor, course);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        emailSender.sendEmail(email);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"yuanxi1"},"content":"    private void sendJoinEmail(String courseId, String userName, String userEmail, boolean isInstructor) {"},{"lineNumber":155,"author":{"gitId":"yuanxi1"},"content":"        Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":156,"author":{"gitId":"yuanxi1"},"content":"        EmailWrapper email \u003d sqlEmailGenerator.generateUserCourseRegisteredEmail("},{"lineNumber":157,"author":{"gitId":"yuanxi1"},"content":"                userName, userEmail, userInfo.id, isInstructor, course);"},{"lineNumber":158,"author":{"gitId":"yuanxi1"},"content":"        emailSender.sendEmail(email);"},{"lineNumber":159,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":161,"author":{"gitId":"yuanxi1"},"content":"    private String getCourseId(String regKey, String entityType) {"},{"lineNumber":162,"author":{"gitId":"yuanxi1"},"content":"        String courseIdSql;"},{"lineNumber":163,"author":{"gitId":"yuanxi1"},"content":"        String courseIdDatastore;"},{"lineNumber":164,"author":{"gitId":"yuanxi1"},"content":"        switch (entityType) {"},{"lineNumber":165,"author":{"gitId":"yuanxi1"},"content":"        case Const.EntityType.STUDENT:"},{"lineNumber":166,"author":{"gitId":"yuanxi1"},"content":"            courseIdSql \u003d Optional.ofNullable(sqlLogic.getStudentByRegistrationKey(regKey))"},{"lineNumber":167,"author":{"gitId":"yuanxi1"},"content":"                                            .map(Student::getCourseId)"},{"lineNumber":168,"author":{"gitId":"yuanxi1"},"content":"                                            .orElse(null);"},{"lineNumber":169,"author":{"gitId":"yuanxi1"},"content":"            courseIdDatastore \u003d Optional.ofNullable(logic.getStudentForRegistrationKey(regKey))"},{"lineNumber":170,"author":{"gitId":"yuanxi1"},"content":"                                                .map(StudentAttributes::getCourse)"},{"lineNumber":171,"author":{"gitId":"yuanxi1"},"content":"                                                .orElse(null);"},{"lineNumber":172,"author":{"gitId":"yuanxi1"},"content":"            break;"},{"lineNumber":173,"author":{"gitId":"yuanxi1"},"content":"        case Const.EntityType.INSTRUCTOR:"},{"lineNumber":174,"author":{"gitId":"yuanxi1"},"content":"            courseIdSql \u003d Optional.ofNullable(sqlLogic.getInstructorByRegistrationKey(regKey))"},{"lineNumber":175,"author":{"gitId":"yuanxi1"},"content":"                                            .map(Instructor::getCourseId)"},{"lineNumber":176,"author":{"gitId":"yuanxi1"},"content":"                                            .orElse(null);"},{"lineNumber":177,"author":{"gitId":"yuanxi1"},"content":"            courseIdDatastore \u003d Optional.ofNullable(logic.getInstructorForRegistrationKey(regKey))"},{"lineNumber":178,"author":{"gitId":"yuanxi1"},"content":"                                                .map(InstructorAttributes::getCourseId)"},{"lineNumber":179,"author":{"gitId":"yuanxi1"},"content":"                                                .orElse(null);"},{"lineNumber":180,"author":{"gitId":"yuanxi1"},"content":"            break;"},{"lineNumber":181,"author":{"gitId":"yuanxi1"},"content":"        default:"},{"lineNumber":182,"author":{"gitId":"yuanxi1"},"content":"            throw new InvalidHttpParameterException(\"Error: invalid entity type\");"},{"lineNumber":183,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"yuanxi1"},"content":"        return courseIdDatastore !\u003d null ? courseIdDatastore : courseIdSql;"},{"lineNumber":185,"author":{"gitId":"yuanxi1"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":98,"-":88}},{"path":"src/main/java/teammates/ui/webapi/PutDataBundleDocumentsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":10,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Puts searchable documents from the data bundle into the DB."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"public class PutDataBundleDocumentsAction extends Action {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return AuthType.ALL_ACCESS;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (!Config.IS_DEV_SERVER) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Admin privilege is required to access this resource.\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"dishenggg"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException {"},{"lineNumber":31,"author":{"gitId":"dishenggg"},"content":"        String type \u003d getNonNullRequestParamValue(\"databundletype\");"},{"lineNumber":32,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":33,"author":{"gitId":"dishenggg"},"content":"        switch (type) {"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":"        case \"sql\":"},{"lineNumber":35,"author":{"gitId":"dishenggg"},"content":"            return putSqlDataBundleDocuments();"},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"        case \"datastore\":"},{"lineNumber":37,"author":{"gitId":"dishenggg"},"content":"            return putDataBundleDocuments();"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":"        default:"},{"lineNumber":39,"author":{"gitId":"dishenggg"},"content":"            throw new InvalidHttpParameterException(\"Error: invalid data bundle type\");"},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":43,"author":{"gitId":"dishenggg"},"content":"    private JsonResult putSqlDataBundleDocuments() throws InvalidHttpRequestBodyException {"},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"        SqlDataBundle sqlDataBundle \u003d JsonUtils.fromJson(getRequestBody(), SqlDataBundle.class);"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"            sqlLogic.putDocuments(sqlDataBundle);"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"            return new JsonResult(\"Failed to add data bundle documents.\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"        return new JsonResult(\"Data bundle documents successfully added.\");"},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"    private JsonResult putDataBundleDocuments() throws InvalidHttpRequestBodyException {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DataBundle dataBundle \u003d JsonUtils.fromJson(getRequestBody(), DataBundle.class);"},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            logic.putDocuments(dataBundle);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new JsonResult(\"Failed to add data bundle documents.\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Data bundle documents successfully added.\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":29,"-":35}},{"path":"src/main/java/teammates/ui/webapi/SearchAccountRequestsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountRequestData;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountRequestsData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Searches for account requests."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"domoberzin"},"content":"public class SearchAccountRequestsAction extends AdminOnlyAction {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String searchKey \u003d getNonNullRequestParamValue(Const.ParamsNames.SEARCH_KEY);"},{"lineNumber":21,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":22,"author":{"gitId":"domoberzin"},"content":"        List\u003cAccountRequest\u003e accountRequests;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"            accountRequests \u003d sqlLogic.searchAccountRequestsInWholeSystem(searchKey);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":27,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":29,"author":{"gitId":"domoberzin"},"content":"        List\u003cAccountRequestAttributes\u003e requestsDatastore;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"domoberzin"},"content":"            requestsDatastore \u003d logic.searchAccountRequestsInWholeSystem(searchKey);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cAccountRequestData\u003e accountRequestDataList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":"        for (AccountRequest accountRequest : accountRequests) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            AccountRequestData accountRequestData \u003d new AccountRequestData(accountRequest);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            accountRequestDataList.add(accountRequestData);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"domoberzin"},"content":"        for (AccountRequestAttributes request : requestsDatastore) {"},{"lineNumber":43,"author":{"gitId":"domoberzin"},"content":"            if (accountRequestDataList.stream().noneMatch(data -\u003e data.getEmail().equals(request.getEmail()))) {"},{"lineNumber":44,"author":{"gitId":"domoberzin"},"content":"                AccountRequestData accountRequestData \u003d new AccountRequestData(request);"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"                accountRequestDataList.add(accountRequestData);"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AccountRequestsData accountRequestsData \u003d new AccountRequestsData();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        accountRequestsData.setAccountRequests(accountRequestDataList);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new JsonResult(accountRequestsData);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":17,"-":37}},{"path":"src/main/java/teammates/ui/webapi/SearchInstructorsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorsData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Searches for instructors."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class SearchInstructorsAction extends AdminOnlyAction {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // Search for sql db"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String searchKey \u003d getNonNullRequestParamValue(Const.ParamsNames.SEARCH_KEY);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        List\u003cInstructor\u003e instructors;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            instructors \u003d sqlLogic.searchInstructorsInWholeSystem(searchKey);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // Search for datastore"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        List\u003cInstructorAttributes\u003e instructorsDatastore;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            instructorsDatastore \u003d logic.searchInstructorsInWholeSystem(searchKey);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cInstructorData\u003e instructorDataList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // Add instructors from sql db"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        for (Instructor instructor : instructors) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            InstructorData instructorData \u003d new InstructorData(instructor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            instructorData.addAdditionalInformationForAdminSearch("},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    instructor.getRegKey(),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    sqlLogic.getCourse(instructor.getCourseId()).getInstitute(),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    instructor.getGoogleId());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            instructorDataList.add(instructorData);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Add instructors from datastore"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (InstructorAttributes instructor : instructorsDatastore) {"},{"lineNumber":52,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            InstructorData instructorData \u003d new InstructorData(instructor);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            if (isCourseMigrated(instructorData.getCourseId())) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"            instructorData.addAdditionalInformationForAdminSearch("},{"lineNumber":60,"author":{"gitId":"-"},"content":"                    instructor.getKey(),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                    logic.getCourseInstitute(instructor.getCourseId()),"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    instructor.getGoogleId());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"            instructorDataList.add(instructorData);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        InstructorsData instructorsData \u003d new InstructorsData();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        instructorsData.setInstructors(instructorDataList);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new JsonResult(instructorsData);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":1,"-":71}},{"path":"src/main/java/teammates/ui/webapi/SearchStudentsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":11,"author":{"gitId":"yuanxi1"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentsData;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Action for searching for students."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"yuanxi1"},"content":"public class SearchStudentsAction extends Action {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // Only instructors and admins can search for student"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        if (!userInfo.isInstructor \u0026\u0026 !userInfo.isAdmin) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Instructor or Admin privilege is required to access this resource.\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String searchKey \u003d getNonNullRequestParamValue(Const.ParamsNames.SEARCH_KEY);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String entity \u003d getNonNullRequestParamValue(Const.ParamsNames.ENTITY_TYPE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"        List\u003cStudent\u003e students;"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":40,"author":{"gitId":"yuanxi1"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"yuanxi1"},"content":"            if (userInfo.isInstructor \u0026\u0026 entity.equals(Const.EntityType.INSTRUCTOR)) {"},{"lineNumber":42,"author":{"gitId":"yuanxi1"},"content":"                List\u003cInstructor\u003e instructors \u003d sqlLogic.getInstructorsForGoogleId(userInfo.id);"},{"lineNumber":43,"author":{"gitId":"yuanxi1"},"content":"                students \u003d sqlLogic.searchStudents(searchKey, instructors);"},{"lineNumber":44,"author":{"gitId":"yuanxi1"},"content":"            } else if (userInfo.isAdmin \u0026\u0026 entity.equals(Const.EntityType.ADMIN)) {"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"                students \u003d sqlLogic.searchStudentsInWholeSystem(searchKey);"},{"lineNumber":46,"author":{"gitId":"yuanxi1"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"yuanxi1"},"content":"                throw new InvalidHttpParameterException(\"Invalid entity type for search\");"},{"lineNumber":48,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"yuanxi1"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":50,"author":{"gitId":"yuanxi1"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":51,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":53,"author":{"gitId":"yuanxi1"},"content":"        // Search in datastore. For more information on dual db support, see this [PR](https://github.com/TEAMMATES/teammates/pull/12728/files)"},{"lineNumber":54,"author":{"gitId":"yuanxi1"},"content":"        List\u003cStudentAttributes\u003e studentsDatastore;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            if (userInfo.isInstructor \u0026\u0026 entity.equals(Const.EntityType.INSTRUCTOR)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                List\u003cInstructorAttributes\u003e instructors \u003d logic.getInstructorsForGoogleId(userInfo.id);"},{"lineNumber":58,"author":{"gitId":"yuanxi1"},"content":"                studentsDatastore \u003d logic.searchStudents(searchKey, instructors);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            } else if (userInfo.isAdmin \u0026\u0026 entity.equals(Const.EntityType.ADMIN)) {"},{"lineNumber":60,"author":{"gitId":"yuanxi1"},"content":"                studentsDatastore \u003d logic.searchStudentsInWholeSystem(searchKey);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                throw new InvalidHttpParameterException(\"Invalid entity type for search\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), e.getStatusCode());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cStudentData\u003e studentDataList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"yuanxi1"},"content":"        // Add students from sql database"},{"lineNumber":70,"author":{"gitId":"yuanxi1"},"content":"        for (Student s : students) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            StudentData studentData \u003d new StudentData(s);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"yuanxi1"},"content":"            if (userInfo.isAdmin \u0026\u0026 entity.equals(Const.EntityType.ADMIN)) {"},{"lineNumber":74,"author":{"gitId":"yuanxi1"},"content":"                studentData.addAdditionalInformationForAdminSearch("},{"lineNumber":75,"author":{"gitId":"yuanxi1"},"content":"                        s.getRegKey(),"},{"lineNumber":76,"author":{"gitId":"yuanxi1"},"content":"                        sqlLogic.getCourseInstitute(s.getCourseId()),"},{"lineNumber":77,"author":{"gitId":"yuanxi1"},"content":"                        s.getGoogleId()"},{"lineNumber":78,"author":{"gitId":"yuanxi1"},"content":"                );"},{"lineNumber":79,"author":{"gitId":"yuanxi1"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":81,"author":{"gitId":"yuanxi1"},"content":"            studentDataList.add(studentData);"},{"lineNumber":82,"author":{"gitId":"yuanxi1"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"yuanxi1"},"content":"        // Add students from datastore"},{"lineNumber":84,"author":{"gitId":"yuanxi1"},"content":"        for (StudentAttributes s : studentsDatastore) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            StudentData studentData \u003d new StudentData(s);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"            if (isCourseMigrated(studentData.getCourseId())) {"},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"                continue;"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"            if (userInfo.isAdmin \u0026\u0026 entity.equals(Const.EntityType.ADMIN)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                studentData.addAdditionalInformationForAdminSearch("},{"lineNumber":93,"author":{"gitId":"-"},"content":"                        s.getKey(),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                        logic.getCourseInstitute(s.getCourse()),"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                        s.getGoogleId()"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                );"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"            studentDataList.add(studentData);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        StudentsData studentsData \u003d new StudentsData();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        studentsData.setStudents(studentDataList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new JsonResult(studentsData);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":4,"yuanxi1":36,"-":66}},{"path":"src/main/java/teammates/ui/webapi/StudentSearchIndexingWorkerAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.SearchServiceException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.Const.ParamsNames;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Task queue worker action: performs student search indexing."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StudentSearchIndexingWorkerAction extends AdminOnlyAction {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public ActionResult execute() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(ParamsNames.COURSE_ID);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String email \u003d getNonNullRequestParamValue(ParamsNames.STUDENT_EMAIL);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"            return executeWithSql(courseId, email);"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"            return executeWithDataStore(courseId, email);"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"    private ActionResult executeWithDataStore(String courseId, String email) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d logic.getStudentForEmail(courseId, email);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            logic.putStudentDocument(student);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            // Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            return new JsonResult(\"Failure\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Successful\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"    private ActionResult executeWithSql(String courseId, String email) {"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"        Student student \u003d sqlLogic.getStudentForEmail(courseId, email);"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"            sqlLogic.putStudentDocument(student);"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":"        } catch (SearchServiceException e) {"},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"            // Set an arbitrary retry code outside of the range 200-299 to trigger automatic retry"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"            return new JsonResult(\"Failure\", HttpStatus.SC_BAD_GATEWAY);"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"        return new JsonResult(\"Successful\");"},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":22,"-":29}},{"path":"src/main/java/teammates/ui/webapi/UpdateStudentAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.EnrollException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailSendingStatus;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":15,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":16,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":17,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":18,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":19,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.ui.request.StudentUpdateRequest;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Action: Edits details of a student in a course."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"marquestye"},"content":"public class UpdateStudentAction extends Action {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    static final String STUDENT_NOT_FOUND_FOR_EDIT \u003d \"The student you tried to edit does not exist. \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"If the student was created during the last few minutes, \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"try again in a few more minutes as the student may still be being saved.\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String SUCCESSFUL_UPDATE \u003d \"Student has been updated\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String SUCCESSFUL_UPDATE_WITH_EMAIL \u003d SUCCESSFUL_UPDATE + \" and email sent\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String SUCCESSFUL_UPDATE_BUT_EMAIL_FAILED \u003d SUCCESSFUL_UPDATE + \" but email failed to send\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!userInfo.isInstructor) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Instructor privilege is required to access this resource.\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":48,"author":{"gitId":"marquestye"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":49,"author":{"gitId":"marquestye"},"content":"                    instructor, sqlLogic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_STUDENT);"},{"lineNumber":50,"author":{"gitId":"marquestye"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            InstructorAttributes instructor \u003d logic.getInstructorForGoogleId(courseId, userInfo.id);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            gateKeeper.verifyAccessible("},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    instructor, logic.getCourse(courseId), Const.InstructorPermissions.CAN_MODIFY_STUDENT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String courseId \u003d getNonNullRequestParamValue(Const.ParamsNames.COURSE_ID);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String studentEmail \u003d getNonNullRequestParamValue(Const.ParamsNames.STUDENT_EMAIL);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"marquestye"},"content":"        if (!isCourseMigrated(courseId)) {"},{"lineNumber":63,"author":{"gitId":"marquestye"},"content":"            return executeWithDatastore(courseId, studentEmail);"},{"lineNumber":64,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":66,"author":{"gitId":"marquestye"},"content":"        Student existingStudent \u003d sqlLogic.getStudentForEmail(courseId, studentEmail);"},{"lineNumber":67,"author":{"gitId":"marquestye"},"content":"        if (existingStudent \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"marquestye"},"content":"            throw new EntityNotFoundException(STUDENT_NOT_FOUND_FOR_EDIT);"},{"lineNumber":69,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":71,"author":{"gitId":"marquestye"},"content":"        StudentUpdateRequest updateRequest \u003d getAndValidateRequestBody(StudentUpdateRequest.class);"},{"lineNumber":72,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":73,"author":{"gitId":"marquestye"},"content":"        Course course \u003d sqlLogic.getCourse(courseId);"},{"lineNumber":74,"author":{"gitId":"marquestye"},"content":"        Section section \u003d sqlLogic.getSectionOrCreate(courseId, updateRequest.getSection());"},{"lineNumber":75,"author":{"gitId":"marquestye"},"content":"        Team team \u003d sqlLogic.getTeamOrCreate(section, updateRequest.getTeam());"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":"        Student studentToUpdate \u003d new Student(course, updateRequest.getName(), updateRequest.getEmail(),"},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":"                updateRequest.getComments(), team);"},{"lineNumber":78,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":"            //we swap out email before we validate"},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"            //TODO: this is duct tape at the moment, need to refactor how we do the validation"},{"lineNumber":82,"author":{"gitId":"marquestye"},"content":"            String newEmail \u003d studentToUpdate.getEmail();"},{"lineNumber":83,"author":{"gitId":"marquestye"},"content":"            studentToUpdate.setEmail(existingStudent.getEmail());"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":"            sqlLogic.validateSectionsAndTeams(Arrays.asList(studentToUpdate), courseId);"},{"lineNumber":85,"author":{"gitId":"marquestye"},"content":"            studentToUpdate.setEmail(newEmail);"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":87,"author":{"gitId":"marquestye"},"content":"            studentToUpdate.setId(existingStudent.getId());"},{"lineNumber":88,"author":{"gitId":"marquestye"},"content":"            Student updatedStudent \u003d sqlLogic.updateStudentCascade(studentToUpdate);"},{"lineNumber":89,"author":{"gitId":"marquestye"},"content":"            taskQueuer.scheduleStudentForSearchIndexing(courseId, updatedStudent.getEmail());"},{"lineNumber":90,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":91,"author":{"gitId":"marquestye"},"content":"            if (!studentEmail.equals(updateRequest.getEmail()) \u0026\u0026 updateRequest.getIsSessionSummarySendEmail()) {"},{"lineNumber":92,"author":{"gitId":"marquestye"},"content":"                boolean emailSent \u003d sendEmail(courseId, updateRequest.getEmail());"},{"lineNumber":93,"author":{"gitId":"marquestye"},"content":"                String statusMessage \u003d emailSent ? SUCCESSFUL_UPDATE_WITH_EMAIL"},{"lineNumber":94,"author":{"gitId":"marquestye"},"content":"                        : SUCCESSFUL_UPDATE_BUT_EMAIL_FAILED;"},{"lineNumber":95,"author":{"gitId":"marquestye"},"content":"                return new JsonResult(statusMessage);"},{"lineNumber":96,"author":{"gitId":"marquestye"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"marquestye"},"content":"        } catch (EnrollException e) {"},{"lineNumber":98,"author":{"gitId":"marquestye"},"content":"            throw new InvalidOperationException(e);"},{"lineNumber":99,"author":{"gitId":"marquestye"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":100,"author":{"gitId":"marquestye"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":101,"author":{"gitId":"marquestye"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":102,"author":{"gitId":"marquestye"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":103,"author":{"gitId":"marquestye"},"content":"        } catch (EntityAlreadyExistsException e) {"},{"lineNumber":104,"author":{"gitId":"marquestye"},"content":"            throw new InvalidOperationException(\"Trying to update to an email that is already in use\", e);"},{"lineNumber":105,"author":{"gitId":"marquestye"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":107,"author":{"gitId":"marquestye"},"content":"        return new JsonResult(SUCCESSFUL_UPDATE);"},{"lineNumber":108,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":110,"author":{"gitId":"marquestye"},"content":"    private JsonResult executeWithDatastore(String courseId, String studentEmail)"},{"lineNumber":111,"author":{"gitId":"marquestye"},"content":"            throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d logic.getStudentForEmail(courseId, studentEmail);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (student \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(STUDENT_NOT_FOUND_FOR_EDIT);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        StudentUpdateRequest updateRequest \u003d getAndValidateRequestBody(StudentUpdateRequest.class);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        StudentAttributes studentToUpdate \u003d StudentAttributes.builder(courseId, updateRequest.getEmail())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withName(updateRequest.getName())"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .withSectionName(updateRequest.getSection())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .withTeamName(updateRequest.getTeam())"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .withComment(updateRequest.getComments())"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            //we swap out email before we validate"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            //TODO: this is duct tape at the moment, need to refactor how we do the validation"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            String newEmail \u003d studentToUpdate.getEmail();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            studentToUpdate.setEmail(student.getEmail());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            logic.validateSectionsAndTeams(Arrays.asList(studentToUpdate), student.getCourse());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            studentToUpdate.setEmail(newEmail);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"            StudentAttributes updatedStudent \u003d logic.updateStudentCascade("},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    StudentAttributes.updateOptionsBuilder(courseId, studentEmail)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                            .withName(updateRequest.getName())"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                            .withNewEmail(updateRequest.getEmail())"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                            .withTeamName(updateRequest.getTeam())"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                            .withSectionName(updateRequest.getSection())"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                            .withComment(updateRequest.getComments())"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                            .build());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            taskQueuer.scheduleStudentForSearchIndexing(updatedStudent.getCourse(), updatedStudent.getEmail());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"            if (!student.getEmail().equals(updateRequest.getEmail())) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                logic.resetStudentGoogleId(updateRequest.getEmail(), courseId);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"                if (updateRequest.getIsSessionSummarySendEmail()) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                    boolean emailSent \u003d sendEmail(courseId, updateRequest.getEmail());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    String statusMessage \u003d emailSent ? SUCCESSFUL_UPDATE_WITH_EMAIL"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                            : SUCCESSFUL_UPDATE_BUT_EMAIL_FAILED;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                    return new JsonResult(statusMessage);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (EnrollException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(e);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException e) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(\"Trying to update to an email that is already in use\", e);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new JsonResult(SUCCESSFUL_UPDATE);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Sends the feedback session summary as an email."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * @return The true if email was sent successfully or false otherwise."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private boolean sendEmail(String courseId, String studentEmail) {"},{"lineNumber":172,"author":{"gitId":"marquestye"},"content":"        if (isCourseMigrated(courseId)) {"},{"lineNumber":173,"author":{"gitId":"marquestye"},"content":"            EmailWrapper email \u003d sqlEmailGenerator.generateFeedbackSessionSummaryOfCourse("},{"lineNumber":174,"author":{"gitId":"marquestye"},"content":"                    courseId, studentEmail, EmailType.STUDENT_EMAIL_CHANGED);"},{"lineNumber":175,"author":{"gitId":"marquestye"},"content":"            EmailSendingStatus status \u003d emailSender.sendEmail(email);"},{"lineNumber":176,"author":{"gitId":"marquestye"},"content":"            return status.isSuccess();"},{"lineNumber":177,"author":{"gitId":"marquestye"},"content":"        } else {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            EmailWrapper email \u003d emailGenerator.generateFeedbackSessionSummaryOfCourse("},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    courseId, studentEmail, EmailType.STUDENT_EMAIL_CHANGED);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            EmailSendingStatus status \u003d emailSender.sendEmail(email);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return status.isSuccess();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":68,"-":117}},{"path":"src/test/java/teammates/common/datatransfer/SqlSessionResultsBundleTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.common.datatransfer;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.Test;"},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":" * SUT: {@link SqlSessionResultsBundle}."},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"public class SqlSessionResultsBundleTest extends BaseTestCase {"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"    public void testGetQuestionResponseMap() {"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":"        SqlDataBundle responseBundle \u003d loadSqlDataBundle(\"/SqlFeedbackSessionResultsBundleTest.json\");"},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e allExpectedResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":"        allExpectedResponses.add(responseBundle.feedbackResponses.get(\"response1ForQ1\").toString());"},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"        allExpectedResponses.add(responseBundle.feedbackResponses.get(\"response2ForQ1\").toString());"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"        SqlSessionResultsBundle bundle \u003d"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"                new SqlSessionResultsBundle("},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackQuestions.values()),"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackResponses.values()),"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(),"},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"                        new SqlCourseRoster(new ArrayList\u003c\u003e(responseBundle.students.values()),"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"                                new ArrayList\u003c\u003e(responseBundle.instructors.values()))"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":"                );"},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Test question having responses\");"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d responseBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e allResponses \u003d bundle.getQuestionResponseMap().get(fq);"},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"        assertEquals(2, allResponses.size());"},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e allResponsesString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"        allResponsesString.add(allResponses.get(0).toString());"},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"        allResponsesString.add(allResponses.get(1).toString());"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"        assertEquals(allExpectedResponses, allResponsesString);"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Test question having no responses\");"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":"        fq \u003d responseBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":"        allResponses \u003d bundle.getQuestionResponseMap().get(fq);"},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, allResponses.size());"},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"xenosf"},"content":"    public void testGetQuestionMissingResponseMap() {"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":"        SqlDataBundle responseBundle \u003d loadSqlDataBundle(\"/SqlFeedbackSessionResultsBundleTest.json\");"},{"lineNumber":64,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":65,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e expectedMissingResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"xenosf"},"content":"        expectedMissingResponses.add(responseBundle.feedbackResponses.get(\"response1ForQ1\").toString());"},{"lineNumber":67,"author":{"gitId":"xenosf"},"content":"        expectedMissingResponses.add(responseBundle.feedbackResponses.get(\"response2ForQ1\").toString());"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":"        SqlSessionResultsBundle bundle \u003d"},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":"                new SqlSessionResultsBundle("},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackQuestions.values()),"},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(),"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackResponses.values()),"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":"                        new SqlCourseRoster(new ArrayList\u003c\u003e(responseBundle.students.values()),"},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":"                                new ArrayList\u003c\u003e(responseBundle.instructors.values()))"},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"                );"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Test question having missing responses\");"},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion fq \u003d responseBundle.feedbackQuestions.get(\"qn1InSession1InCourse1\");"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":"        List\u003cFeedbackResponse\u003e missingResponses \u003d bundle.getQuestionMissingResponseMap().get(fq);"},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"        assertEquals(2, missingResponses.size());"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"        List\u003cString\u003e missingResponsesString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"        missingResponsesString.add(missingResponses.get(0).toString());"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"        missingResponsesString.add(missingResponses.get(1).toString());"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":"        assertEquals(expectedMissingResponses, missingResponsesString);"},{"lineNumber":92,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":93,"author":{"gitId":"xenosf"},"content":"        ______TS(\"Test question having no missing responses\");"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":"        fq \u003d responseBundle.feedbackQuestions.get(\"qn4InSession1InCourse1\");"},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"        missingResponses \u003d bundle.getQuestionMissingResponseMap().get(fq);"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":"        assertEquals(0, missingResponses.size());"},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":"    public void testIsResponseGiverRecipientVisible_typicalCase_shouldReturnCorrectValues() {"},{"lineNumber":101,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":102,"author":{"gitId":"xenosf"},"content":"        SqlDataBundle responseBundle \u003d loadSqlDataBundle(\"/SqlFeedbackSessionResultsBundleTest.json\");"},{"lineNumber":103,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":104,"author":{"gitId":"xenosf"},"content":"        FeedbackSession session1Course1 \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":105,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":106,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question1ForS1C1 \u003d getTypicalFeedbackQuestionForSession(session1Course1);"},{"lineNumber":107,"author":{"gitId":"xenosf"},"content":"        FeedbackQuestion question2ForS1C1 \u003d getTypicalFeedbackQuestionForSession(session1Course1);"},{"lineNumber":108,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":109,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse response1ForQ1S1C1 \u003d getTypicalFeedbackResponseForQuestion(question1ForS1C1);"},{"lineNumber":110,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse response2ForQ1S1C1 \u003d getTypicalFeedbackResponseForQuestion(question1ForS1C1);"},{"lineNumber":111,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse response1ForQ2S1C1 \u003d getTypicalFeedbackResponseForQuestion(question2ForS1C1);"},{"lineNumber":112,"author":{"gitId":"xenosf"},"content":"        FeedbackResponse response2ForQ2S1C1 \u003d getTypicalFeedbackResponseForQuestion(question2ForS1C1);"},{"lineNumber":113,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":114,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackResponse, Boolean\u003e responseGiverVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":115,"author":{"gitId":"xenosf"},"content":"        responseGiverVisibilityTable.put(response1ForQ1S1C1, true);"},{"lineNumber":116,"author":{"gitId":"xenosf"},"content":"        responseGiverVisibilityTable.put(response2ForQ1S1C1, false);"},{"lineNumber":117,"author":{"gitId":"xenosf"},"content":"        responseGiverVisibilityTable.put(response1ForQ2S1C1, true);"},{"lineNumber":118,"author":{"gitId":"xenosf"},"content":"        responseGiverVisibilityTable.put(response2ForQ2S1C1, false);"},{"lineNumber":119,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":120,"author":{"gitId":"xenosf"},"content":"        Map\u003cFeedbackResponse, Boolean\u003e responseRecipientVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"xenosf"},"content":"        responseRecipientVisibilityTable.put(response1ForQ1S1C1, false);"},{"lineNumber":122,"author":{"gitId":"xenosf"},"content":"        responseRecipientVisibilityTable.put(response2ForQ1S1C1, true);"},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":"        responseRecipientVisibilityTable.put(response1ForQ2S1C1, true);"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        responseRecipientVisibilityTable.put(response2ForQ2S1C1, false);"},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"        SqlSessionResultsBundle bundle \u003d"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"                new SqlSessionResultsBundle("},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackQuestions.values()),"},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackResponses.values()),"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(),"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":"                        responseGiverVisibilityTable,"},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"                        responseRecipientVisibilityTable,"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":"                        new SqlCourseRoster(new ArrayList\u003c\u003e(responseBundle.students.values()),"},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"                                new ArrayList\u003c\u003e(responseBundle.instructors.values()))"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":"                );"},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"        for (Map.Entry\u003cFeedbackResponse, Boolean\u003e visibilityEntry : responseGiverVisibilityTable.entrySet()) {"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"            assertEquals(visibilityEntry.getValue(),"},{"lineNumber":143,"author":{"gitId":"xenosf"},"content":"                    bundle.isResponseGiverVisible(visibilityEntry.getKey()));"},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":146,"author":{"gitId":"xenosf"},"content":"        for (Map.Entry\u003cFeedbackResponse, Boolean\u003e visibilityEntry : responseRecipientVisibilityTable.entrySet()) {"},{"lineNumber":147,"author":{"gitId":"xenosf"},"content":"            assertEquals(visibilityEntry.getValue(),"},{"lineNumber":148,"author":{"gitId":"xenosf"},"content":"                    bundle.isResponseRecipientVisible(visibilityEntry.getKey()));"},{"lineNumber":149,"author":{"gitId":"xenosf"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":"    public void testIsCommentGiverVisible_typicalCase_shouldReturnCorrectValues() {"},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":"        SqlDataBundle responseBundle \u003d loadSqlDataBundle(\"/SqlFeedbackSessionResultsBundleTest.json\");"},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":"        Map\u003cLong, Boolean\u003e commentGiverVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":"        commentGiverVisibilityTable.put(1L, true);"},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"        commentGiverVisibilityTable.put(2L, false);"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":"        SqlSessionResultsBundle bundle \u003d"},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"                new SqlSessionResultsBundle("},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackQuestions.values()),"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":"                        new HashSet\u003c\u003e(),"},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(responseBundle.feedbackResponses.values()),"},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":"                        new ArrayList\u003c\u003e(),"},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"                        new HashMap\u003c\u003e(),"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"                        commentGiverVisibilityTable,"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"                        new SqlCourseRoster(new ArrayList\u003c\u003e(responseBundle.students.values()),"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"                                new ArrayList\u003c\u003e(responseBundle.instructors.values()))"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":"                );"},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"        // Manually add comment IDs as loadSqlDataBundle does not add comment IDs"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"        FeedbackResponseComment comment1 \u003d responseBundle.feedbackResponseComments.get(\"comment1ToResponse1ForQ1\");"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":"        FeedbackResponseComment comment2 \u003d responseBundle.feedbackResponseComments.get(\"comment2ToResponse1ForQ1\");"},{"lineNumber":178,"author":{"gitId":"xenosf"},"content":"        comment1.setId(1L);"},{"lineNumber":179,"author":{"gitId":"xenosf"},"content":"        comment2.setId(2L);"},{"lineNumber":180,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":181,"author":{"gitId":"xenosf"},"content":"        assertTrue(bundle.isCommentGiverVisible(comment1));"},{"lineNumber":182,"author":{"gitId":"xenosf"},"content":"        assertFalse(bundle.isCommentGiverVisible(comment2));"},{"lineNumber":183,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":185,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"xenosf"},"content":"    public void testGetAnonName_typicalCase_shouldGenerateCorrectly() {"},{"lineNumber":187,"author":{"gitId":"xenosf"},"content":"        String anonName \u003d SqlSessionResultsBundle.getAnonName(FeedbackParticipantType.STUDENTS, \"\");"},{"lineNumber":188,"author":{"gitId":"xenosf"},"content":"        assertTrue(anonName.startsWith(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT));"},{"lineNumber":189,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":190,"author":{"gitId":"xenosf"},"content":"        anonName \u003d SqlSessionResultsBundle.getAnonName(FeedbackParticipantType.STUDENTS, \"test@gmail.com\");"},{"lineNumber":191,"author":{"gitId":"xenosf"},"content":"        assertTrue(anonName.startsWith(Const.DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT));"},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":193}},{"path":"src/test/java/teammates/sqllogic/core/AccountRequestsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xenosf"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":3,"author":{"gitId":"xenosf"},"content":"import static org.mockito.ArgumentMatchers.any;"},{"lineNumber":4,"author":{"gitId":"xenosf"},"content":"import static org.mockito.ArgumentMatchers.nullable;"},{"lineNumber":5,"author":{"gitId":"xenosf"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":6,"author":{"gitId":"xenosf"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":7,"author":{"gitId":"xenosf"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":8,"author":{"gitId":"xenosf"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":9,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":10,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":11,"author":{"gitId":"xenosf"},"content":"import org.testng.annotations.Test;"},{"lineNumber":12,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":13,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":14,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":15,"author":{"gitId":"xenosf"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":16,"author":{"gitId":"xenosf"},"content":"import teammates.common.util.Const;"},{"lineNumber":17,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":18,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":19,"author":{"gitId":"xenosf"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":20,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":21,"author":{"gitId":"xenosf"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"xenosf"},"content":" * SUT: {@link AccountRequestsLogic}."},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":" */"},{"lineNumber":24,"author":{"gitId":"xenosf"},"content":"public class AccountRequestsLogicTest extends BaseTestCase {"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":26,"author":{"gitId":"xenosf"},"content":"    private final AccountRequestsLogic arLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":27,"author":{"gitId":"xenosf"},"content":"    private AccountRequestsDb arDb;"},{"lineNumber":28,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":29,"author":{"gitId":"xenosf"},"content":"    @BeforeMethod"},{"lineNumber":30,"author":{"gitId":"xenosf"},"content":"    public void setUpMethod() {"},{"lineNumber":31,"author":{"gitId":"xenosf"},"content":"        arDb \u003d mock(AccountRequestsDb.class);"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"        arLogic.initLogicDependencies(arDb);"},{"lineNumber":33,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"xenosf"},"content":"    public void testCreateAccountRequest_typicalRequest_success() throws Exception {"},{"lineNumber":37,"author":{"gitId":"xenosf"},"content":"        AccountRequest accountRequest \u003d getTypicalAccountRequest();"},{"lineNumber":38,"author":{"gitId":"xenosf"},"content":"        when(arDb.createAccountRequest(accountRequest)).thenReturn(accountRequest);"},{"lineNumber":39,"author":{"gitId":"xenosf"},"content":"        AccountRequest createdAccountRequest \u003d arLogic.createAccountRequest(accountRequest);"},{"lineNumber":40,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":41,"author":{"gitId":"xenosf"},"content":"        assertEquals(accountRequest, createdAccountRequest);"},{"lineNumber":42,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).createAccountRequest(accountRequest);"},{"lineNumber":43,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":45,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"xenosf"},"content":"    public void testCreateAccountRequest_requestAlreadyExists_failure() throws Exception {"},{"lineNumber":47,"author":{"gitId":"xenosf"},"content":"        AccountRequest duplicateAccountRequest \u003d getTypicalAccountRequest();"},{"lineNumber":48,"author":{"gitId":"xenosf"},"content":"        when(arDb.createAccountRequest(duplicateAccountRequest))"},{"lineNumber":49,"author":{"gitId":"xenosf"},"content":"                .thenThrow(new EntityAlreadyExistsException(\"test exception\"));"},{"lineNumber":50,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":51,"author":{"gitId":"xenosf"},"content":"        assertThrows(EntityAlreadyExistsException.class, () -\u003e {"},{"lineNumber":52,"author":{"gitId":"xenosf"},"content":"            arLogic.createAccountRequest(duplicateAccountRequest);"},{"lineNumber":53,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":54,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).createAccountRequest(duplicateAccountRequest);"},{"lineNumber":55,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":57,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"xenosf"},"content":"    public void testCreateAccountRequest_invalidParams_failure() throws Exception {"},{"lineNumber":59,"author":{"gitId":"xenosf"},"content":"        AccountRequest invalidEmailAccountRequest \u003d getTypicalAccountRequest();"},{"lineNumber":60,"author":{"gitId":"xenosf"},"content":"        invalidEmailAccountRequest.setEmail(\"invalid email\");"},{"lineNumber":61,"author":{"gitId":"xenosf"},"content":"        when(arDb.createAccountRequest(invalidEmailAccountRequest))"},{"lineNumber":62,"author":{"gitId":"xenosf"},"content":"                .thenThrow(new InvalidParametersException(\"test exception\"));"},{"lineNumber":63,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":64,"author":{"gitId":"xenosf"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e {"},{"lineNumber":65,"author":{"gitId":"xenosf"},"content":"            arLogic.createAccountRequest(invalidEmailAccountRequest);"},{"lineNumber":66,"author":{"gitId":"xenosf"},"content":"        });"},{"lineNumber":67,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).createAccountRequest(invalidEmailAccountRequest);"},{"lineNumber":68,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":70,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"xenosf"},"content":"    public void testUpdateAccountRequest_typicalRequest_success()"},{"lineNumber":72,"author":{"gitId":"xenosf"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":73,"author":{"gitId":"xenosf"},"content":"        AccountRequest ar \u003d getTypicalAccountRequest();"},{"lineNumber":74,"author":{"gitId":"xenosf"},"content":"        when(arDb.updateAccountRequest(ar)).thenReturn(ar);"},{"lineNumber":75,"author":{"gitId":"xenosf"},"content":"        AccountRequest updatedAr \u003d arLogic.updateAccountRequest(ar);"},{"lineNumber":76,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":77,"author":{"gitId":"xenosf"},"content":"        assertEquals(ar, updatedAr);"},{"lineNumber":78,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).updateAccountRequest(ar);"},{"lineNumber":79,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":81,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"xenosf"},"content":"    public void testUpdateAccountRequest_requestNotFound_failure()"},{"lineNumber":83,"author":{"gitId":"xenosf"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":84,"author":{"gitId":"xenosf"},"content":"        AccountRequest arNotFound \u003d getTypicalAccountRequest();"},{"lineNumber":85,"author":{"gitId":"xenosf"},"content":"        when(arDb.updateAccountRequest(arNotFound)).thenThrow(new EntityDoesNotExistException(\"test message\"));"},{"lineNumber":86,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":87,"author":{"gitId":"xenosf"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":88,"author":{"gitId":"xenosf"},"content":"                () -\u003e arLogic.updateAccountRequest(arNotFound));"},{"lineNumber":89,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).updateAccountRequest(any(AccountRequest.class));"},{"lineNumber":90,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":92,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"xenosf"},"content":"    public void testDeleteAccountRequest_typicalRequest_success() {"},{"lineNumber":94,"author":{"gitId":"xenosf"},"content":"        AccountRequest ar \u003d getTypicalAccountRequest();"},{"lineNumber":95,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequest(ar.getEmail(), ar.getInstitute())).thenReturn(ar);"},{"lineNumber":96,"author":{"gitId":"xenosf"},"content":"        arLogic.deleteAccountRequest(ar.getEmail(), ar.getInstitute());"},{"lineNumber":97,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":98,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).deleteAccountRequest(any(AccountRequest.class));"},{"lineNumber":99,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":101,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"xenosf"},"content":"    public void testDeleteAccountRequest_nonexistentRequest_shouldSilentlyDelete() {"},{"lineNumber":103,"author":{"gitId":"xenosf"},"content":"        arLogic.deleteAccountRequest(\"not_exist\", \"not_exist\");"},{"lineNumber":104,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":105,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).deleteAccountRequest(nullable(AccountRequest.class));"},{"lineNumber":106,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":108,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"xenosf"},"content":"    public void testGetAccountRequestByRegistrationKey_typicalRequest_success() {"},{"lineNumber":110,"author":{"gitId":"xenosf"},"content":"        AccountRequest ar \u003d getTypicalAccountRequest();"},{"lineNumber":111,"author":{"gitId":"xenosf"},"content":"        String regkey \u003d \"regkey\";"},{"lineNumber":112,"author":{"gitId":"xenosf"},"content":"        ar.setRegistrationKey(regkey);"},{"lineNumber":113,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequestByRegistrationKey(regkey)).thenReturn(ar);"},{"lineNumber":114,"author":{"gitId":"xenosf"},"content":"        AccountRequest actualAr \u003d"},{"lineNumber":115,"author":{"gitId":"xenosf"},"content":"                arLogic.getAccountRequestByRegistrationKey(ar.getRegistrationKey());"},{"lineNumber":116,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":117,"author":{"gitId":"xenosf"},"content":"        assertEquals(ar, actualAr);"},{"lineNumber":118,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequestByRegistrationKey(regkey);"},{"lineNumber":119,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":121,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"xenosf"},"content":"    public void testGetAccountRequestByRegistrationKey_nonexistentRequest_shouldReturnNull() throws Exception {"},{"lineNumber":123,"author":{"gitId":"xenosf"},"content":"        String nonexistentRegkey \u003d \"not_exist\";"},{"lineNumber":124,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequestByRegistrationKey(nonexistentRegkey)).thenReturn(null);"},{"lineNumber":125,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":126,"author":{"gitId":"xenosf"},"content":"        assertNull(arLogic.getAccountRequestByRegistrationKey(nonexistentRegkey));"},{"lineNumber":127,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequestByRegistrationKey(nonexistentRegkey);"},{"lineNumber":128,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":130,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"xenosf"},"content":"    public void testGetAccountRequest_typicalRequest_success() {"},{"lineNumber":132,"author":{"gitId":"xenosf"},"content":"        AccountRequest expectedAr \u003d getTypicalAccountRequest();"},{"lineNumber":133,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequest(expectedAr.getEmail(), expectedAr.getInstitute())).thenReturn(expectedAr);"},{"lineNumber":134,"author":{"gitId":"xenosf"},"content":"        AccountRequest actualAr \u003d"},{"lineNumber":135,"author":{"gitId":"xenosf"},"content":"                arLogic.getAccountRequest(expectedAr.getEmail(), expectedAr.getInstitute());"},{"lineNumber":136,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":137,"author":{"gitId":"xenosf"},"content":"        assertEquals(expectedAr, actualAr);"},{"lineNumber":138,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequest(expectedAr.getEmail(), expectedAr.getInstitute());"},{"lineNumber":139,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":141,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"xenosf"},"content":"    public void testGetAccountRequest_nonexistentRequest_shouldReturnNull() {"},{"lineNumber":143,"author":{"gitId":"xenosf"},"content":"        String nonexistentEmail \u003d \"not-found@test.com\";"},{"lineNumber":144,"author":{"gitId":"xenosf"},"content":"        String nonexistentInstitute \u003d \"not-found\";"},{"lineNumber":145,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequest(nonexistentEmail, nonexistentInstitute)).thenReturn(null);"},{"lineNumber":146,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":147,"author":{"gitId":"xenosf"},"content":"        assertNull(arLogic.getAccountRequest(nonexistentEmail, nonexistentInstitute));"},{"lineNumber":148,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequest(nonexistentEmail, nonexistentInstitute);"},{"lineNumber":149,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":151,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"xenosf"},"content":"    public void testResetAccountRequest_typicalRequest_success()"},{"lineNumber":153,"author":{"gitId":"xenosf"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":154,"author":{"gitId":"xenosf"},"content":"        AccountRequest accountRequest \u003d getTypicalAccountRequest();"},{"lineNumber":155,"author":{"gitId":"xenosf"},"content":"        accountRequest.setRegisteredAt(Const.TIME_REPRESENTS_NOW);"},{"lineNumber":156,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()))"},{"lineNumber":157,"author":{"gitId":"xenosf"},"content":"                .thenReturn(accountRequest);"},{"lineNumber":158,"author":{"gitId":"xenosf"},"content":"        when(arDb.updateAccountRequest(accountRequest)).thenReturn(accountRequest);"},{"lineNumber":159,"author":{"gitId":"xenosf"},"content":"        accountRequest \u003d arLogic.resetAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":160,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":161,"author":{"gitId":"xenosf"},"content":"        assertNull(accountRequest.getRegisteredAt());"},{"lineNumber":162,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":163,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":165,"author":{"gitId":"xenosf"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"xenosf"},"content":"    public void testResetAccountRequest_nonexistentRequest_failure()"},{"lineNumber":167,"author":{"gitId":"xenosf"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":168,"author":{"gitId":"xenosf"},"content":"        AccountRequest accountRequest \u003d getTypicalAccountRequest();"},{"lineNumber":169,"author":{"gitId":"xenosf"},"content":"        accountRequest.setRegisteredAt(Const.TIME_REPRESENTS_NOW);"},{"lineNumber":170,"author":{"gitId":"xenosf"},"content":"        when(arDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()))"},{"lineNumber":171,"author":{"gitId":"xenosf"},"content":"                .thenReturn(null);"},{"lineNumber":172,"author":{"gitId":"xenosf"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":173,"author":{"gitId":"xenosf"},"content":"                () -\u003e arLogic.resetAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()));"},{"lineNumber":174,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(1)).getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":175,"author":{"gitId":"xenosf"},"content":"        verify(arDb, times(0)).updateAccountRequest(nullable(AccountRequest.class));"},{"lineNumber":176,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"xenosf"},"content":"}"}],"authorContributionMap":{"xenosf":177}},{"path":"src/test/java/teammates/sqllogic/core/AccountsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * SUT: {@link AccountsLogic}."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AccountsLogicTest extends BaseTestCase {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private AccountsDb accountsDb;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private NotificationsLogic notificationsLogic;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"yuanxi1"},"content":"    private CoursesLogic coursesLogic;"},{"lineNumber":39,"author":{"gitId":"yuanxi1"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void setUpMethod() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        accountsDb \u003d mock(AccountsDb.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        notificationsLogic \u003d mock(NotificationsLogic.class);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        usersLogic \u003d mock(UsersLogic.class);"},{"lineNumber":45,"author":{"gitId":"yuanxi1"},"content":"        accountsLogic.initLogicDependencies(accountsDb, notificationsLogic, usersLogic, coursesLogic);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void testDeleteAccount_accountExists_success() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        when(accountsLogic.getAccountForGoogleId(googleId)).thenReturn(account);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        accountsLogic.deleteAccount(googleId);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        verify(accountsDb, times(1)).deleteAccount(account);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void testDeleteAccountCascade_googleIdExists_success() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        List\u003cUser\u003e users \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 2; ++i) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            users.add(getTypicalInstructor());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            users.add(getTypicalStudent());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        when(usersLogic.getAllUsersByGoogleId(googleId)).thenReturn(users);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        when(accountsLogic.getAccountForGoogleId(googleId)).thenReturn(account);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        accountsLogic.deleteAccountCascade(googleId);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (User user : users) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            verify(usersLogic, times(1)).deleteUser(user);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        verify(accountsDb, times(1)).deleteAccount(account);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications_shouldReturnCorrectReadNotificationId_success()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cUUID\u003e readNotificationIds \u003d accountsLogic.updateReadNotifications(googleId, notificationId,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                notification.getEndTime());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        verify(accountsDb, times(1)).getAccountByGoogleId(googleId);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        verify(notificationsLogic, times(1)).getNotification(notificationId);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(1, readNotificationIds.size());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(notificationId, readNotificationIds.get(0));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications_shouldAddReadNotificationToAccount_success()"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        verify(accountsDb, times(1)).getAccountByGoogleId(googleId);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        verify(notificationsLogic, times(1)).getNotification(notificationId);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        List\u003cReadNotification\u003e accountReadNotifications \u003d account.getReadNotifications();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(1, accountReadNotifications.size());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        ReadNotification readNotification \u003d accountReadNotifications.get(0);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertSame(account, readNotification.getAccount());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertSame(notification, readNotification.getNotification());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications_accountDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(null);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to update the read notifications of a non-existent account.\", ex.getMessage());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications_notificationDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(null);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to mark as read a notification that does not exist.\", ex.getMessage());"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void testUpdateReadNotifications_markExpiredNotificationAsRead_throwInvalidParametersException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        notification.setEndTime(Instant.parse(\"2012-01-01T00:00:00Z\"));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to mark an expired notification as read.\", ex.getMessage());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void testGetReadNotificationsId_doesNotHaveReadNotifications_success() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        List\u003cUUID\u003e readNotifications \u003d accountsLogic.getReadNotificationsId(googleId);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertEquals(0, readNotifications.size());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void testGetReadNotificationsId_hasReadNotifications_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        Account account \u003d getTypicalAccount();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        List\u003cReadNotification\u003e readNotifications \u003d new ArrayList\u003c\u003e();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            ReadNotification readNotification \u003d new ReadNotification(account, notification);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            readNotifications.add(readNotification);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        account.setReadNotifications(readNotifications);"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        List\u003cUUID\u003e actualReadNotifications \u003d accountsLogic.getReadNotificationsId(googleId);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(10, actualReadNotifications.size());"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            assertEquals(readNotifications.get(i).getNotification().getId(),"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                    actualReadNotifications.get(i));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuanxi1":3,"-":203}},{"path":"src/test/java/teammates/sqllogic/core/CoursesLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitId":"domoberzin"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":8,"author":{"gitId":"domoberzin"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"domoberzin"},"content":"import java.time.Duration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":20,"author":{"gitId":"domoberzin"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":23,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":24,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":26,"author":{"gitId":"domoberzin"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * SUT: {@code CoursesLogic}."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CoursesLogicTest extends BaseTestCase {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"domoberzin"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":37,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":38,"author":{"gitId":"domoberzin"},"content":"    private FeedbackSessionsLogic fsLogic;"},{"lineNumber":39,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private CoursesDb coursesDb;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        coursesDb \u003d mock(CoursesDb.class);"},{"lineNumber":45,"author":{"gitId":"domoberzin"},"content":"        fsLogic \u003d mock(FeedbackSessionsLogic.class);"},{"lineNumber":46,"author":{"gitId":"domoberzin"},"content":"        usersLogic \u003d mock(UsersLogic.class);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        coursesLogic.initLogicDependencies(coursesDb, fsLogic, usersLogic);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void testMoveCourseToRecycleBin_shouldReturnBinnedCourse_success()"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Course binnedCourse \u003d coursesLogic.moveCourseToRecycleBin(courseId);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertNotNull(binnedCourse);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void testMoveCourseToRecycleBin_courseDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String courseId \u003d getTypicalCourse().getId();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(null);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                () -\u003e coursesLogic.moveCourseToRecycleBin(courseId));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to move a non-existent course to recycling bin.\", ex.getMessage());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void testRestoreCourseFromRecycleBin_shouldSetDeletedAtToNull_success()"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        course.setDeletedAt(Instant.parse(\"2021-01-01T00:00:00Z\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        coursesLogic.restoreCourseFromRecycleBin(courseId);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertNull(course.getDeletedAt());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void testRestoreCourseFromRecycleBin_courseDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String courseId \u003d getTypicalCourse().getId();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(null);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                () -\u003e coursesLogic.restoreCourseFromRecycleBin(courseId));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to restore a non-existent course from recycling bin.\", ex.getMessage());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void testGetSectionNamesForCourse_shouldReturnListOfSectionNames_success() throws EntityDoesNotExistException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Section s1 \u003d getTypicalSection();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        s1.setName(\"test-sectionName1\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Section s2 \u003d getTypicalSection();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        s2.setName(\"test-sectionName2\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cSection\u003e sections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        sections.add(s1);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        sections.add(s2);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        course.setSections(sections);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        List\u003cString\u003e sectionNames \u003d coursesLogic.getSectionNamesForCourse(courseId);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedSectionNames \u003d List.of(\"test-sectionName1\", \"test-sectionName2\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedSectionNames, sectionNames);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void testGetSectionNamesForCourse_courseDoesNotExist_throwEntityDoesNotExistException()"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String courseId \u003d getTypicalCourse().getId();"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(null);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                () -\u003e coursesLogic.getSectionNamesForCourse(courseId));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(\"Trying to get section names for a non-existent course.\", ex.getMessage());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":144,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"domoberzin"},"content":"    public void testCreateCourse_shouldReturnCreatedCourse_success()"},{"lineNumber":146,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":147,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":148,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":149,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createCourse(course)).thenReturn(course);"},{"lineNumber":150,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":151,"author":{"gitId":"domoberzin"},"content":"        Course createdCourse \u003d coursesLogic.createCourse(course);"},{"lineNumber":152,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":153,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).createCourse(course);"},{"lineNumber":154,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(createdCourse);"},{"lineNumber":155,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":157,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"domoberzin"},"content":"    public void testCreateDuplicateCourse_throwEntityAlreadyExistsException()"},{"lineNumber":159,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":160,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":161,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":162,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createCourse(course))"},{"lineNumber":163,"author":{"gitId":"domoberzin"},"content":"                .thenThrow(new EntityAlreadyExistsException("},{"lineNumber":164,"author":{"gitId":"domoberzin"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, course.toString())));"},{"lineNumber":165,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":166,"author":{"gitId":"domoberzin"},"content":"        EntityAlreadyExistsException ex \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":167,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.createCourse(course));"},{"lineNumber":168,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":169,"author":{"gitId":"domoberzin"},"content":"        assertEquals(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, course.toString()), ex.getMessage());"},{"lineNumber":170,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":172,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"domoberzin"},"content":"    public void testGetCourse_shouldReturnCourse_success() {"},{"lineNumber":174,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":175,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":176,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":177,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":178,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":179,"author":{"gitId":"domoberzin"},"content":"        Course returnedCourse \u003d coursesLogic.getCourse(courseId);"},{"lineNumber":180,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":181,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":182,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(returnedCourse);"},{"lineNumber":183,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":185,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"domoberzin"},"content":"    public void testDeleteCourseCascade_shouldDeleteCourse_success() {"},{"lineNumber":187,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":188,"author":{"gitId":"domoberzin"},"content":"        List\u003cInstructor\u003e instructors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":189,"author":{"gitId":"domoberzin"},"content":"        List\u003cFeedbackSession\u003e feedbackSessions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":190,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":191,"author":{"gitId":"domoberzin"},"content":"        FeedbackSession fs \u003d new FeedbackSession(\"test-fs\", course, \"test@email.com\","},{"lineNumber":192,"author":{"gitId":"domoberzin"},"content":"                \"test\", Instant.now(), Instant.now(), Instant.now(), Instant.now(), Duration.ofSeconds(60),"},{"lineNumber":193,"author":{"gitId":"domoberzin"},"content":"                false, false, false);"},{"lineNumber":194,"author":{"gitId":"domoberzin"},"content":"        feedbackSessions.add(fs);"},{"lineNumber":195,"author":{"gitId":"domoberzin"},"content":"        instructors.add(getTypicalInstructor());"},{"lineNumber":196,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":197,"author":{"gitId":"domoberzin"},"content":"        when(fsLogic.getFeedbackSessionsForCourse(course.getId())).thenReturn(feedbackSessions);"},{"lineNumber":198,"author":{"gitId":"domoberzin"},"content":"        when(usersLogic.getInstructorsForCourse(course.getId())).thenReturn(instructors);"},{"lineNumber":199,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(course.getId())).thenReturn(course);"},{"lineNumber":200,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":201,"author":{"gitId":"domoberzin"},"content":"        coursesLogic.deleteCourseCascade(course.getId());"},{"lineNumber":202,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":203,"author":{"gitId":"domoberzin"},"content":"        verify(usersLogic, times(1)).deleteStudentsInCourseCascade(course.getId());"},{"lineNumber":204,"author":{"gitId":"domoberzin"},"content":"        verify(usersLogic, times(1)).getInstructorsForCourse(course.getId());"},{"lineNumber":205,"author":{"gitId":"domoberzin"},"content":"        verify(usersLogic, times(1)).deleteInstructorCascade(course.getId(), instructors.get(0).getEmail());"},{"lineNumber":206,"author":{"gitId":"domoberzin"},"content":"        verify(fsLogic, times(1)).deleteFeedbackSessionCascade(fs.getName(), course.getId());"},{"lineNumber":207,"author":{"gitId":"domoberzin"},"content":"        verify(fsLogic, times(1)).getFeedbackSessionsForCourse(course.getId());"},{"lineNumber":208,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).deleteCourse(course);"},{"lineNumber":209,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).deleteSectionsByCourseId(course.getId());"},{"lineNumber":210,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":212,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":213,"author":{"gitId":"domoberzin"},"content":"    public void testUpdateCourse_shouldReturnUpdatedCourse_success()"},{"lineNumber":214,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":215,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":216,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":217,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":218,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":219,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":220,"author":{"gitId":"domoberzin"},"content":"        Course updatedCourse \u003d coursesLogic.updateCourse(courseId, \"Test Course 1\", \"Asia/India\");"},{"lineNumber":221,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":222,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":223,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(updatedCourse);"},{"lineNumber":224,"author":{"gitId":"domoberzin"},"content":"        assertEquals(\"Test Course 1\", updatedCourse.getName());"},{"lineNumber":225,"author":{"gitId":"domoberzin"},"content":"        assertEquals(\"Asia/India\", updatedCourse.getTimeZone());"},{"lineNumber":226,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":228,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"domoberzin"},"content":"    public void testUpdateCourse_throwEntityDoesNotExistException()"},{"lineNumber":230,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":231,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":232,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":233,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":234,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(null);"},{"lineNumber":235,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":236,"author":{"gitId":"domoberzin"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":237,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.updateCourse(courseId, course.getName(), \"Asia/Singapore\"));"},{"lineNumber":238,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":239,"author":{"gitId":"domoberzin"},"content":"        assertEquals(ERROR_UPDATE_NON_EXISTENT + Course.class, ex.getMessage());"},{"lineNumber":240,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":242,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":243,"author":{"gitId":"domoberzin"},"content":"    public void testUpdateCourse_throwInvalidParametersException()"},{"lineNumber":244,"author":{"gitId":"domoberzin"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":245,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":246,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":247,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":248,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":249,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":250,"author":{"gitId":"domoberzin"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":251,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.updateCourse(courseId, \"\", \"Asia/Singapore\"));"},{"lineNumber":252,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":253,"author":{"gitId":"domoberzin"},"content":"        String expectedMessage \u003d \"The field \u0027course name\u0027 is empty.\""},{"lineNumber":254,"author":{"gitId":"domoberzin"},"content":"                + \" The value of a/an course name should be no longer than 80 characters.\""},{"lineNumber":255,"author":{"gitId":"domoberzin"},"content":"                + \" It should not be empty.\";"},{"lineNumber":256,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":257,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedMessage, ex.getMessage());"},{"lineNumber":258,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":260,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":261,"author":{"gitId":"domoberzin"},"content":"    public void testCreateSection_shouldReturnCreatedSection_success()"},{"lineNumber":262,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":263,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":264,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":265,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createSection(section)).thenReturn(section);"},{"lineNumber":266,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":267,"author":{"gitId":"domoberzin"},"content":"        Section createdSection \u003d coursesLogic.createSection(section);"},{"lineNumber":268,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":269,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).createSection(section);"},{"lineNumber":270,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(createdSection);"},{"lineNumber":271,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":273,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":274,"author":{"gitId":"domoberzin"},"content":"    public void testCreateDuplicateSection_throwEntityAlreadyExistsException()"},{"lineNumber":275,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":276,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":277,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":278,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createSection(section))"},{"lineNumber":279,"author":{"gitId":"domoberzin"},"content":"                .thenThrow(new EntityAlreadyExistsException("},{"lineNumber":280,"author":{"gitId":"domoberzin"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, section.toString())));"},{"lineNumber":281,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":282,"author":{"gitId":"domoberzin"},"content":"        EntityAlreadyExistsException ex \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":283,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.createSection(section));"},{"lineNumber":284,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":285,"author":{"gitId":"domoberzin"},"content":"        assertEquals(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, section.toString()), ex.getMessage());"},{"lineNumber":286,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":288,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":289,"author":{"gitId":"domoberzin"},"content":"    public void testCreateSectionInvalidName_throwInvalidParametersException()"},{"lineNumber":290,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":291,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":292,"author":{"gitId":"domoberzin"},"content":"        section.setName(null);"},{"lineNumber":293,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":294,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createSection(section)).thenThrow(new InvalidParametersException(section.getInvalidityInfo()));"},{"lineNumber":295,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":296,"author":{"gitId":"domoberzin"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":297,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.createSection(section));"},{"lineNumber":298,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":299,"author":{"gitId":"domoberzin"},"content":"        assertEquals(\"The provided section name is not acceptable to TEAMMATES as it cannot be empty.\", ex.getMessage());"},{"lineNumber":300,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":302,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":303,"author":{"gitId":"domoberzin"},"content":"    public void testGetSectionByCourseIdAndTeam_shouldReturnSection_success() {"},{"lineNumber":304,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":305,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d section.getCourse().getId();"},{"lineNumber":306,"author":{"gitId":"domoberzin"},"content":"        String teamName \u003d section.getName();"},{"lineNumber":307,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":308,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getSectionByCourseIdAndTeam(courseId, teamName)).thenReturn(section);"},{"lineNumber":309,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":310,"author":{"gitId":"domoberzin"},"content":"        Section returnedSection \u003d coursesLogic.getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":311,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":312,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":313,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(returnedSection);"},{"lineNumber":314,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":316,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":317,"author":{"gitId":"domoberzin"},"content":"    public void testGetSectionByCourseIdAndTeam_sectionDoesNotExist_returnNull() {"},{"lineNumber":318,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d getTypicalCourse().getId();"},{"lineNumber":319,"author":{"gitId":"domoberzin"},"content":"        String teamName \u003d getTypicalSection().getName();"},{"lineNumber":320,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":321,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getSectionByCourseIdAndTeam(courseId, teamName)).thenReturn(null);"},{"lineNumber":322,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":323,"author":{"gitId":"domoberzin"},"content":"        Section returnedSection \u003d coursesLogic.getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":324,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":325,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":326,"author":{"gitId":"domoberzin"},"content":"        assertNull(returnedSection);"},{"lineNumber":327,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":329,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":330,"author":{"gitId":"domoberzin"},"content":"    public void testGetCourseInstitute_shouldReturnInstitute_success() {"},{"lineNumber":331,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":332,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":333,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":334,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(course);"},{"lineNumber":335,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":336,"author":{"gitId":"domoberzin"},"content":"        String institute \u003d coursesLogic.getCourseInstitute(courseId);"},{"lineNumber":337,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":338,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getCourse(courseId);"},{"lineNumber":339,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(institute);"},{"lineNumber":340,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":342,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":343,"author":{"gitId":"domoberzin"},"content":"    public void testGetCourseInstituteNonExistentCourse_throwAssertionError() {"},{"lineNumber":344,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":345,"author":{"gitId":"domoberzin"},"content":"        String courseId \u003d course.getId();"},{"lineNumber":346,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":347,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getCourse(courseId)).thenReturn(null);"},{"lineNumber":348,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":349,"author":{"gitId":"domoberzin"},"content":"        AssertionError ex \u003d assertThrows(AssertionError.class,"},{"lineNumber":350,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.getCourseInstitute(courseId));"},{"lineNumber":351,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":352,"author":{"gitId":"domoberzin"},"content":"        assertEquals(\"Trying to getCourseInstitute for inexistent course with id \" + courseId, ex.getMessage());"},{"lineNumber":353,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":355,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":356,"author":{"gitId":"domoberzin"},"content":"    public void testCreateTeam_shouldReturnCreatedTeam_success()"},{"lineNumber":357,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":358,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d getTypicalTeam();"},{"lineNumber":359,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":360,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createTeam(team)).thenReturn(team);"},{"lineNumber":361,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":362,"author":{"gitId":"domoberzin"},"content":"        Team createdTeam \u003d coursesLogic.createTeam(team);"},{"lineNumber":363,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":364,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).createTeam(team);"},{"lineNumber":365,"author":{"gitId":"domoberzin"},"content":"        assertNotNull(createdTeam);"},{"lineNumber":366,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":367,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":368,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":369,"author":{"gitId":"domoberzin"},"content":"    public void testCreateDuplicateTeam_throwEntityAlreadyExistsException()"},{"lineNumber":370,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":371,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d getTypicalTeam();"},{"lineNumber":372,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":373,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createTeam(team)).thenThrow("},{"lineNumber":374,"author":{"gitId":"domoberzin"},"content":"                new EntityAlreadyExistsException("},{"lineNumber":375,"author":{"gitId":"domoberzin"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, team.toString())));"},{"lineNumber":376,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":377,"author":{"gitId":"domoberzin"},"content":"        EntityAlreadyExistsException ex \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":378,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.createTeam(team));"},{"lineNumber":379,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":380,"author":{"gitId":"domoberzin"},"content":"        assertEquals(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, team.toString()), ex.getMessage());"},{"lineNumber":381,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":383,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":384,"author":{"gitId":"domoberzin"},"content":"    public void testCreateTeamInvalidName_throwInvalidParametersException()"},{"lineNumber":385,"author":{"gitId":"domoberzin"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":386,"author":{"gitId":"domoberzin"},"content":"        Team team \u003d getTypicalTeam();"},{"lineNumber":387,"author":{"gitId":"domoberzin"},"content":"        team.setName(null);"},{"lineNumber":388,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":389,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.createTeam(team)).thenThrow(new InvalidParametersException(team.getInvalidityInfo()));"},{"lineNumber":390,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":391,"author":{"gitId":"domoberzin"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":392,"author":{"gitId":"domoberzin"},"content":"                () -\u003e coursesLogic.createTeam(team));"},{"lineNumber":393,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":394,"author":{"gitId":"domoberzin"},"content":"        assertEquals(\"The provided team name is not acceptable to TEAMMATES as it cannot be empty.\", ex.getMessage());"},{"lineNumber":395,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":397,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":398,"author":{"gitId":"domoberzin"},"content":"    public void testGetTeamsForSection_shouldReturnListOfTeams_success() {"},{"lineNumber":399,"author":{"gitId":"domoberzin"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":400,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":401,"author":{"gitId":"domoberzin"},"content":"        Team t1 \u003d getTypicalTeam();"},{"lineNumber":402,"author":{"gitId":"domoberzin"},"content":"        t1.setName(\"test-teamName1\");"},{"lineNumber":403,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":404,"author":{"gitId":"domoberzin"},"content":"        Team t2 \u003d getTypicalTeam();"},{"lineNumber":405,"author":{"gitId":"domoberzin"},"content":"        t2.setName(\"test-teamName2\");"},{"lineNumber":406,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":407,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e teams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":408,"author":{"gitId":"domoberzin"},"content":"        teams.add(t1);"},{"lineNumber":409,"author":{"gitId":"domoberzin"},"content":"        teams.add(t2);"},{"lineNumber":410,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":411,"author":{"gitId":"domoberzin"},"content":"        section.setTeams(teams);"},{"lineNumber":412,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":413,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getTeamsForSection(section)).thenReturn(teams);"},{"lineNumber":414,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":415,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e returnedTeams \u003d coursesLogic.getTeamsForSection(section);"},{"lineNumber":416,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":417,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getTeamsForSection(section);"},{"lineNumber":418,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":419,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e expectedTeams \u003d List.of(t1, t2);"},{"lineNumber":420,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":421,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedTeams, returnedTeams);"},{"lineNumber":422,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":423,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":424,"author":{"gitId":"domoberzin"},"content":"    @Test"},{"lineNumber":425,"author":{"gitId":"domoberzin"},"content":"    public void testGetTeamsForCourse_shouldReturnListOfTeams_success() {"},{"lineNumber":426,"author":{"gitId":"domoberzin"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":427,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":428,"author":{"gitId":"domoberzin"},"content":"        Team t1 \u003d getTypicalTeam();"},{"lineNumber":429,"author":{"gitId":"domoberzin"},"content":"        t1.setName(\"test-teamName1\");"},{"lineNumber":430,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":431,"author":{"gitId":"domoberzin"},"content":"        Team t2 \u003d getTypicalTeam();"},{"lineNumber":432,"author":{"gitId":"domoberzin"},"content":"        t2.setName(\"test-teamName2\");"},{"lineNumber":433,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":434,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e teams \u003d new ArrayList\u003c\u003e();"},{"lineNumber":435,"author":{"gitId":"domoberzin"},"content":"        teams.add(t1);"},{"lineNumber":436,"author":{"gitId":"domoberzin"},"content":"        teams.add(t2);"},{"lineNumber":437,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":438,"author":{"gitId":"domoberzin"},"content":"        when(coursesDb.getTeamsForCourse(course.getId())).thenReturn(teams);"},{"lineNumber":439,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":440,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e returnedTeams \u003d coursesLogic.getTeamsForCourse(course.getId());"},{"lineNumber":441,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":442,"author":{"gitId":"domoberzin"},"content":"        verify(coursesDb, times(1)).getTeamsForCourse(course.getId());"},{"lineNumber":443,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":444,"author":{"gitId":"domoberzin"},"content":"        List\u003cTeam\u003e expectedTeams \u003d List.of(t1, t2);"},{"lineNumber":445,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":446,"author":{"gitId":"domoberzin"},"content":"        assertEquals(expectedTeams, returnedTeams);"},{"lineNumber":447,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":319,"-":129}},{"path":"src/test/java/teammates/sqllogic/core/FeedbackQuestionsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlCourseRoster;"},{"lineNumber":15,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackQuestionsDb;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackQuestionsLogic}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FeedbackQuestionsLogicTest extends BaseTestCase {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsDb fqDb;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private UsersLogic usersLogic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setUpMethod() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        fqDb \u003d mock(FeedbackQuestionsDb.class);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        CoursesLogic coursesLogic \u003d mock(CoursesLogic.class);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        usersLogic \u003d mock(UsersLogic.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        FeedbackResponsesLogic frLogic \u003d mock(FeedbackResponsesLogic.class);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        FeedbackSessionsLogic feedbackSessionsLogic \u003d mock(FeedbackSessionsLogic.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        fqLogic.initLogicDependencies(fqDb, coursesLogic, frLogic, usersLogic, feedbackSessionsLogic);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForSession_questionNumbersInOrder_success() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questions \u003d createQuestionList(fs, 5);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questions);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForSession(fs);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(questions.size(), actualQuestions.size());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(questions.containsAll(actualQuestions));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForSession_questionNumbersOutOfOrder_success() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fq1.setQuestionNumber(1);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        fq2.setQuestionNumber(2);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        fq3.setQuestionNumber(3);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        fq4.setQuestionNumber(4);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fq5.setQuestionNumber(5);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        ArrayList\u003cFeedbackQuestion\u003e questions \u003d new ArrayList\u003c\u003e(List.of(fq2, fq4, fq3, fq1, fq5));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questions);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForSession(fs);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(questions.size(), actualQuestions.size());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(questions.containsAll(actualQuestions));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void testCreateFeedbackQuestion_questionNumbersAreConsistent_canCreateFeedbackQuestion()"},{"lineNumber":88,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FeedbackQuestion newQuestion \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        newQuestion.setQuestionNumber(5);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsBefore \u003d createQuestionList(fs, 4);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questionsBefore);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        when(fqDb.createFeedbackQuestion(newQuestion)).thenReturn(newQuestion);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FeedbackQuestion createdQuestion \u003d fqLogic.createFeedbackQuestion(newQuestion);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(newQuestion, createdQuestion);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void testCreateFeedbackQuestion_questionNumbersAreInconsistent_canCreateFeedbackQuestion()"},{"lineNumber":106,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        fq1.setQuestionNumber(2);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        fq2.setQuestionNumber(3);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        fq3.setQuestionNumber(4);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        fq4.setQuestionNumber(5);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        ArrayList\u003cFeedbackQuestion\u003e questionsBefore \u003d new ArrayList\u003c\u003e(List.of(fq1, fq2, fq3, fq4));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questionsBefore);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        when(fqDb.createFeedbackQuestion(fq5)).thenReturn(fq5);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        FeedbackQuestion createdQuestion \u003d fqLogic.createFeedbackQuestion(fq5);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(fq5, createdQuestion);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void testCreateFeedbackQuestion_oldQuestionNumberLargerThanNewQuestionNumber_adjustQuestionNumberCorrectly()"},{"lineNumber":131,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        fq1.setQuestionNumber(2);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        fq2.setQuestionNumber(3);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        fq3.setQuestionNumber(4);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        fq4.setQuestionNumber(5);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        fq5.setQuestionNumber(1);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ArrayList\u003cFeedbackQuestion\u003e questionsBefore \u003d new ArrayList\u003c\u003e(List.of(fq1, fq2, fq3, fq4));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questionsBefore);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        when(fqDb.createFeedbackQuestion(fq5)).thenReturn(fq5);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        fqLogic.createFeedbackQuestion(fq5);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(1, fq1.getQuestionNumber().intValue());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(2, fq2.getQuestionNumber().intValue());"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(3, fq3.getQuestionNumber().intValue());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(4, fq4.getQuestionNumber().intValue());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void testCreateFeedbackQuestion_oldQuestionNumberSmallerThanNewQuestionNumber_adjustQuestionNumberCorrectly()"},{"lineNumber":160,"author":{"gitId":"marquestye"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq5 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        fq1.setQuestionNumber(0);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        fq2.setQuestionNumber(1);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        fq3.setQuestionNumber(2);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        fq4.setQuestionNumber(3);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ArrayList\u003cFeedbackQuestion\u003e questionsBefore \u003d new ArrayList\u003c\u003e(List.of(fq1, fq2, fq3, fq4));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        fs.setId(UUID.randomUUID());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForSession(fs.getId())).thenReturn(questionsBefore);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        when(fqDb.createFeedbackQuestion(fq5)).thenReturn(fq5);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        fqLogic.createFeedbackQuestion(fq5);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertEquals(1, fq1.getQuestionNumber().intValue());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(2, fq2.getQuestionNumber().intValue());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertEquals(3, fq3.getQuestionNumber().intValue());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(4, fq4.getQuestionNumber().intValue());"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForStudents_success() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsSelf \u003d List.of(fq1, fq2);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsStudent \u003d List.of(fq3, fq4);"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2, fq3, fq4);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.SELF)).thenReturn(questionsSelf);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.STUDENTS)).thenReturn(questionsStudent);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForStudents(fs);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertTrue(actualQuestions.containsAll(actualQuestions));"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForInstructors_instructorIsCreator_success() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        fs.setCreatorEmail(\"instr1@teammates.tmt\");"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsInstructors \u003d List.of(fq1, fq2);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsSelf \u003d List.of(fq3, fq4);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.INSTRUCTORS))"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                .thenReturn(questionsInstructors);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.SELF)).thenReturn(questionsSelf);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2, fq3, fq4);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForInstructors(fs, \"instr1@teammates.tmt\");"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        assertTrue(actualQuestions.containsAll(actualQuestions));"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void testGetFeedbackQuestionsForInstructors_instructorIsNotCreator_success() {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        fs.setCreatorEmail(\"instr1@teammates.tmt\");"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq1 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq2 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq3 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq4 \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsInstructors \u003d List.of(fq1, fq2);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e questionsSelf \u003d List.of(fq3, fq4);"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.INSTRUCTORS))"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                .thenReturn(questionsInstructors);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        when(fqDb.getFeedbackQuestionsForGiverType(fs, FeedbackParticipantType.SELF)).thenReturn(questionsSelf);"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e expectedQuestions \u003d List.of(fq1, fq2);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestion\u003e actualQuestions \u003d fqLogic.getFeedbackQuestionsForInstructors(fs, \"instr2@teammates.tmt\");"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        assertEquals(expectedQuestions.size(), actualQuestions.size());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        assertTrue(actualQuestions.containsAll(actualQuestions));"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    public void testGetRecipientsOfQuestion_giverTypeStudents() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        Course c \u003d getTypicalCourse();"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        FeedbackSession fs \u003d getTypicalFeedbackSessionForCourse(c);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        FeedbackQuestion fq \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"        Student s1 \u003d getTypicalStudent();"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        Student s2 \u003d getTypicalStudent();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        List\u003cStudent\u003e studentsInCourse \u003d List.of(s1, s2);"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"        SqlCourseRoster courseRoster \u003d new SqlCourseRoster(studentsInCourse, null);"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        when(usersLogic.getStudentsForCourse(\"course-1\")).thenReturn(studentsInCourse);"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"        ______TS(\"response to students except self\");"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        assertEquals(fqLogic.getRecipientsOfQuestion(fq, null, s2, null).size(), studentsInCourse.size() - 1);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        assertEquals(fqLogic.getRecipientsOfQuestion(fq, null, s2, courseRoster).size(), studentsInCourse.size() - 1);"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackQuestion\u003e createQuestionList(FeedbackSession fs, int numOfQuestions) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        ArrayList\u003cFeedbackQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c\u003d numOfQuestions; i++) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            FeedbackQuestion fq \u003d getTypicalFeedbackQuestionForSession(fs);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            fq.setQuestionNumber(i);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            questions.add(fq);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        return questions;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marquestye":5,"-":281}},{"path":"src/test/java/teammates/sqllogic/core/FeedbackResponseCommentsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mingyuanc"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":5,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"mingyuanc"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":12,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":13,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.Test;"},{"lineNumber":14,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":15,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":16,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":17,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":18,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlapi.FeedbackResponseCommentsDb;"},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.output.CommentVisibilityType;"},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"import teammates.ui.request.FeedbackResponseCommentUpdateRequest;"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":" * SUT: {@link FeedbackResponseCommentsLogic}."},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":" */"},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":"public class FeedbackResponseCommentsLogicTest extends BaseTestCase {"},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":"    private static final Long TYPICAL_ID \u003d 100L;"},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"    private static final Long NOT_TYPICAL_ID \u003d 101L;"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":"    private static final UUID TYPICAL_UUID \u003d UUID.randomUUID();"},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":"    private FeedbackResponseCommentsLogic frcLogic \u003d FeedbackResponseCommentsLogic.inst();"},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":"    private FeedbackResponseCommentsDb frcDb;"},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"    @BeforeMethod"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":"    public void setUpMethod() {"},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":"        frcDb \u003d mock(FeedbackResponseCommentsDb.class);"},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"        frcLogic.initLogicDependencies(frcDb);"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"mingyuanc"},"content":"    public void testGetComment_commentAlreadyExists_success() {"},{"lineNumber":44,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":45,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":46,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseComment(comment.getId())).thenReturn(comment);"},{"lineNumber":47,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":48,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment commentFetched \u003d frcLogic.getFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":49,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":50,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(comment, commentFetched);"},{"lineNumber":51,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":53,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":"    public void testGetCommentForResponse_commentAlreadyExists_success() {"},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"        List\u003cFeedbackResponseComment\u003e expectedReturn \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":"        expectedReturn.add(getTypicalResponseComment(TYPICAL_ID));"},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseCommentsForResponse(TYPICAL_UUID)).thenReturn(expectedReturn);"},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":60,"author":{"gitId":"mingyuanc"},"content":"        List\u003cFeedbackResponseComment\u003e fetchedReturn \u003d frcLogic.getFeedbackResponseCommentsForResponse(TYPICAL_UUID);"},{"lineNumber":61,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":62,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(expectedReturn, fetchedReturn);"},{"lineNumber":63,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":65,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"    public void testGetCommentForResponseFromParticipant_commentAlreadyExists_success() {"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseCommentForResponseFromParticipant(TYPICAL_UUID)).thenReturn(comment);"},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment commentFetched \u003d frcLogic"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":"                .getFeedbackResponseCommentForResponseFromParticipant(TYPICAL_UUID);"},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(comment, commentFetched);"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":"    public void testGetComment_commentDoesNotExist_returnsNull() {"},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseComment(NOT_TYPICAL_ID)).thenReturn(null);"},{"lineNumber":80,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":81,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment commentFetched \u003d frcLogic.getFeedbackResponseComment(NOT_TYPICAL_ID);"},{"lineNumber":82,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":83,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).getFeedbackResponseComment(NOT_TYPICAL_ID);"},{"lineNumber":84,"author":{"gitId":"mingyuanc"},"content":"        assertNull(commentFetched);"},{"lineNumber":85,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":87,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"mingyuanc"},"content":"    public void testCreateComment_commentDoesNotExist_success()"},{"lineNumber":89,"author":{"gitId":"mingyuanc"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":90,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":91,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":92,"author":{"gitId":"mingyuanc"},"content":"        frcLogic.createFeedbackResponseComment(comment);"},{"lineNumber":93,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":94,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).createFeedbackResponseComment(comment);"},{"lineNumber":95,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":97,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"mingyuanc"},"content":"    public void testCreateComment_commentAlreadyExists_throwsEntityAlreadyExistsException()"},{"lineNumber":99,"author":{"gitId":"mingyuanc"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":100,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":101,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":102,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.createFeedbackResponseComment(comment)).thenThrow(EntityAlreadyExistsException.class);"},{"lineNumber":103,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":104,"author":{"gitId":"mingyuanc"},"content":"        assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":105,"author":{"gitId":"mingyuanc"},"content":"                () -\u003e frcLogic.createFeedbackResponseComment(comment));"},{"lineNumber":106,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":107,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":109,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"mingyuanc"},"content":"    public void testDeleteComment_commentExists_success() {"},{"lineNumber":111,"author":{"gitId":"mingyuanc"},"content":"        frcLogic.deleteFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":112,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":113,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).deleteFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":114,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":116,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateCommentEmails_success() {"},{"lineNumber":118,"author":{"gitId":"mingyuanc"},"content":"        String courseId \u003d \"Course_id\";"},{"lineNumber":119,"author":{"gitId":"mingyuanc"},"content":"        String oldEmail \u003d \"oldEmail@gmail.com\";"},{"lineNumber":120,"author":{"gitId":"mingyuanc"},"content":"        String newEmail \u003d \"newEmail@gmail.com\";"},{"lineNumber":121,"author":{"gitId":"mingyuanc"},"content":"        frcLogic.updateFeedbackResponseCommentsEmails(courseId, oldEmail, newEmail);"},{"lineNumber":122,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":123,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).updateGiverEmailOfFeedbackResponseComments(courseId, oldEmail, newEmail);"},{"lineNumber":124,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).updateLastEditorEmailOfFeedbackResponseComments(courseId, oldEmail, newEmail);"},{"lineNumber":125,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":127,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateComment_entityAlreadyExists_success()"},{"lineNumber":129,"author":{"gitId":"mingyuanc"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":130,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":131,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":132,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseComment(comment.getId())).thenReturn(comment);"},{"lineNumber":133,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":134,"author":{"gitId":"mingyuanc"},"content":"        String updatedCommentText \u003d \"Update\";"},{"lineNumber":135,"author":{"gitId":"mingyuanc"},"content":"        String lastEditorEmail \u003d \"me@gmail.com\";"},{"lineNumber":136,"author":{"gitId":"mingyuanc"},"content":"        List\u003cCommentVisibilityType\u003e showCommentTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":137,"author":{"gitId":"mingyuanc"},"content":"        showCommentTo.add(CommentVisibilityType.STUDENTS);"},{"lineNumber":138,"author":{"gitId":"mingyuanc"},"content":"        showCommentTo.add(CommentVisibilityType.INSTRUCTORS);"},{"lineNumber":139,"author":{"gitId":"mingyuanc"},"content":"        List\u003cCommentVisibilityType\u003e showGiverNameTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":140,"author":{"gitId":"mingyuanc"},"content":"        showGiverNameTo.add(CommentVisibilityType.INSTRUCTORS);"},{"lineNumber":141,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":142,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseCommentUpdateRequest updateRequest \u003d new FeedbackResponseCommentUpdateRequest("},{"lineNumber":143,"author":{"gitId":"mingyuanc"},"content":"                updatedCommentText, showCommentTo, showGiverNameTo);"},{"lineNumber":144,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment updatedComment \u003d frcLogic.updateFeedbackResponseComment(TYPICAL_ID, updateRequest,"},{"lineNumber":145,"author":{"gitId":"mingyuanc"},"content":"                lastEditorEmail);"},{"lineNumber":146,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":147,"author":{"gitId":"mingyuanc"},"content":"        verify(frcDb, times(1)).getFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":148,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":149,"author":{"gitId":"mingyuanc"},"content":"        List\u003cFeedbackParticipantType\u003e expectedShowCommentTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitId":"mingyuanc"},"content":"        expectedShowCommentTo.add(FeedbackParticipantType.STUDENTS);"},{"lineNumber":151,"author":{"gitId":"mingyuanc"},"content":"        expectedShowCommentTo.add(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":152,"author":{"gitId":"mingyuanc"},"content":"        List\u003cFeedbackParticipantType\u003e expectedShowGiverNameTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":153,"author":{"gitId":"mingyuanc"},"content":"        expectedShowGiverNameTo.add(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":154,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":155,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(TYPICAL_ID, updatedComment.getId());"},{"lineNumber":156,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(updatedCommentText, updatedComment.getCommentText());"},{"lineNumber":157,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(expectedShowCommentTo, updatedComment.getShowCommentTo());"},{"lineNumber":158,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(expectedShowGiverNameTo, updatedComment.getShowGiverNameTo());"},{"lineNumber":159,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(lastEditorEmail, updatedComment.getLastEditorEmail());"},{"lineNumber":160,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":162,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateComment_entityDoesNotExist() {"},{"lineNumber":164,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":165,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":166,"author":{"gitId":"mingyuanc"},"content":"        when(frcDb.getFeedbackResponseComment(comment.getId())).thenReturn(comment);"},{"lineNumber":167,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":168,"author":{"gitId":"mingyuanc"},"content":"        long nonExistentId \u003d 101L;"},{"lineNumber":169,"author":{"gitId":"mingyuanc"},"content":"        String updatedCommentText \u003d \"Update\";"},{"lineNumber":170,"author":{"gitId":"mingyuanc"},"content":"        String lastEditorEmail \u003d \"me@gmail.com\";"},{"lineNumber":171,"author":{"gitId":"mingyuanc"},"content":"        List\u003cCommentVisibilityType\u003e showCommentTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":172,"author":{"gitId":"mingyuanc"},"content":"        showCommentTo.add(CommentVisibilityType.STUDENTS);"},{"lineNumber":173,"author":{"gitId":"mingyuanc"},"content":"        showCommentTo.add(CommentVisibilityType.INSTRUCTORS);"},{"lineNumber":174,"author":{"gitId":"mingyuanc"},"content":"        List\u003cCommentVisibilityType\u003e showGiverNameTo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitId":"mingyuanc"},"content":"        showGiverNameTo.add(CommentVisibilityType.INSTRUCTORS);"},{"lineNumber":176,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":177,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseCommentUpdateRequest updateRequest \u003d new FeedbackResponseCommentUpdateRequest("},{"lineNumber":178,"author":{"gitId":"mingyuanc"},"content":"                updatedCommentText, showCommentTo, showGiverNameTo);"},{"lineNumber":179,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":180,"author":{"gitId":"mingyuanc"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":181,"author":{"gitId":"mingyuanc"},"content":"                () -\u003e frcLogic.updateFeedbackResponseComment(nonExistentId, updateRequest, lastEditorEmail));"},{"lineNumber":182,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":183,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(\"Trying to update a feedback response comment that does not exist.\", ex.getMessage());"},{"lineNumber":184,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"mingyuanc"},"content":"}"}],"authorContributionMap":{"mingyuanc":185}},{"path":"src/test/java/teammates/storage/sqlapi/FeedbackQuestionsDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marquestye"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":3,"author":{"gitId":"marquestye"},"content":"import static org.mockito.ArgumentMatchers.any;"},{"lineNumber":4,"author":{"gitId":"marquestye"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":5,"author":{"gitId":"marquestye"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":6,"author":{"gitId":"marquestye"},"content":"import static org.mockito.Mockito.spy;"},{"lineNumber":7,"author":{"gitId":"marquestye"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":8,"author":{"gitId":"marquestye"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":9,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":10,"author":{"gitId":"marquestye"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"marquestye"},"content":"import java.util.UUID;"},{"lineNumber":12,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":13,"author":{"gitId":"marquestye"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":14,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":15,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":16,"author":{"gitId":"marquestye"},"content":"import org.testng.annotations.Test;"},{"lineNumber":17,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":18,"author":{"gitId":"marquestye"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":19,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":20,"author":{"gitId":"marquestye"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":21,"author":{"gitId":"marquestye"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":22,"author":{"gitId":"marquestye"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":23,"author":{"gitId":"marquestye"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":24,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":25,"author":{"gitId":"marquestye"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"marquestye"},"content":" * SUT: {@link FeedbackQuestionsDb}."},{"lineNumber":27,"author":{"gitId":"marquestye"},"content":" */"},{"lineNumber":28,"author":{"gitId":"marquestye"},"content":"public class FeedbackQuestionsDbTest extends BaseTestCase {"},{"lineNumber":29,"author":{"gitId":"marquestye"},"content":"    private FeedbackQuestionsDb feedbackQuestionsDb;"},{"lineNumber":30,"author":{"gitId":"marquestye"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":31,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":32,"author":{"gitId":"marquestye"},"content":"    @BeforeMethod"},{"lineNumber":33,"author":{"gitId":"marquestye"},"content":"    public void setUpMethod() {"},{"lineNumber":34,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":35,"author":{"gitId":"marquestye"},"content":"        feedbackQuestionsDb \u003d spy(FeedbackQuestionsDb.class);"},{"lineNumber":36,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":38,"author":{"gitId":"marquestye"},"content":"    @AfterMethod"},{"lineNumber":39,"author":{"gitId":"marquestye"},"content":"    public void teardownMethod() {"},{"lineNumber":40,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.close();"},{"lineNumber":41,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":43,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"marquestye"},"content":"    public void testCreateFeedbackQuestion_success() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":45,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion feedbackQuestion \u003d getFeedbackQuestion();"},{"lineNumber":46,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":47,"author":{"gitId":"marquestye"},"content":"        feedbackQuestionsDb.createFeedbackQuestion(feedbackQuestion);"},{"lineNumber":48,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":49,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackQuestion), times(1));"},{"lineNumber":50,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":52,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"marquestye"},"content":"    public void testCreateFeedbackQuestion_questionAlreadyExists_throwsEntityAlreadyExistsException() {"},{"lineNumber":54,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion feedbackQuestion \u003d getFeedbackQuestion();"},{"lineNumber":55,"author":{"gitId":"marquestye"},"content":"        UUID fqid \u003d feedbackQuestion.getId();"},{"lineNumber":56,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":57,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid)).thenReturn(feedbackQuestion);"},{"lineNumber":58,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":59,"author":{"gitId":"marquestye"},"content":"        EntityAlreadyExistsException eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":60,"author":{"gitId":"marquestye"},"content":"                () -\u003e feedbackQuestionsDb.createFeedbackQuestion(feedbackQuestion));"},{"lineNumber":61,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":62,"author":{"gitId":"marquestye"},"content":"        assertEquals(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, feedbackQuestion.toString()), eaee.getMessage());"},{"lineNumber":63,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackQuestion), never());"},{"lineNumber":64,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":66,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"marquestye"},"content":"    public void testCreateFeedbackQuestion_invalidQuestion_throwsInvalidParametersException() {"},{"lineNumber":68,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion feedbackQuestion \u003d getFeedbackQuestion();"},{"lineNumber":69,"author":{"gitId":"marquestye"},"content":"        feedbackQuestion.setGiverType(FeedbackParticipantType.NONE);"},{"lineNumber":70,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":71,"author":{"gitId":"marquestye"},"content":"        InvalidParametersException ipe \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":72,"author":{"gitId":"marquestye"},"content":"                () -\u003e feedbackQuestionsDb.createFeedbackQuestion(feedbackQuestion));"},{"lineNumber":73,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":74,"author":{"gitId":"marquestye"},"content":"        assertEquals(feedbackQuestion.getInvalidityInfo(), List.of(ipe.getMessage()));"},{"lineNumber":75,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackQuestion), never());"},{"lineNumber":76,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":78,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"marquestye"},"content":"    public void testGetFeedbackQuestion_success() {"},{"lineNumber":80,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion feedbackQuestion \u003d getFeedbackQuestion();"},{"lineNumber":81,"author":{"gitId":"marquestye"},"content":"        UUID fqid \u003d feedbackQuestion.getId();"},{"lineNumber":82,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":83,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid)).thenReturn(feedbackQuestion);"},{"lineNumber":84,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":85,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion retrievedSession \u003d feedbackQuestionsDb.getFeedbackQuestion(fqid);"},{"lineNumber":86,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":87,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid), times(1));"},{"lineNumber":88,"author":{"gitId":"marquestye"},"content":"        assertEquals(feedbackQuestion, retrievedSession);"},{"lineNumber":89,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":91,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"marquestye"},"content":"    public void testGetFeedbackQuestion_questionDoesNotExist_returnNull() {"},{"lineNumber":93,"author":{"gitId":"marquestye"},"content":"        UUID fqid \u003d UUID.randomUUID();"},{"lineNumber":94,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":95,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid)).thenReturn(null);"},{"lineNumber":96,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":97,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion retrievedSession \u003d feedbackQuestionsDb.getFeedbackQuestion(fqid);"},{"lineNumber":98,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":99,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid), times(1));"},{"lineNumber":100,"author":{"gitId":"marquestye"},"content":"        assertNull(retrievedSession);"},{"lineNumber":101,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":103,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"marquestye"},"content":"    public void testDeleteFeedbackQuestion_success() {"},{"lineNumber":105,"author":{"gitId":"marquestye"},"content":"        FeedbackQuestion feedbackQuestion \u003d getFeedbackQuestion();"},{"lineNumber":106,"author":{"gitId":"marquestye"},"content":"        UUID fqid \u003d feedbackQuestion.getId();"},{"lineNumber":107,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":108,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid)).thenReturn(feedbackQuestion);"},{"lineNumber":109,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":110,"author":{"gitId":"marquestye"},"content":"        feedbackQuestionsDb.deleteFeedbackQuestion(fqid);"},{"lineNumber":111,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":112,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(feedbackQuestion), times(1));"},{"lineNumber":113,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":115,"author":{"gitId":"marquestye"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"marquestye"},"content":"    public void testDeleteFeedbackQuestion_questionDoesNotExist_nothingHappens() {"},{"lineNumber":117,"author":{"gitId":"marquestye"},"content":"        UUID fqid \u003d UUID.randomUUID();"},{"lineNumber":118,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":119,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackQuestion.class, fqid)).thenReturn(null);"},{"lineNumber":120,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":121,"author":{"gitId":"marquestye"},"content":"        feedbackQuestionsDb.deleteFeedbackQuestion(fqid);"},{"lineNumber":122,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":123,"author":{"gitId":"marquestye"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(any()), never());"},{"lineNumber":124,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"marquestye"},"content":""},{"lineNumber":126,"author":{"gitId":"marquestye"},"content":"    private FeedbackQuestion getFeedbackQuestion() {"},{"lineNumber":127,"author":{"gitId":"marquestye"},"content":"        return getTypicalFeedbackQuestionForSession(getTypicalFeedbackSessionForCourse(getTypicalCourse()));"},{"lineNumber":128,"author":{"gitId":"marquestye"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"marquestye"},"content":"}"}],"authorContributionMap":{"marquestye":129}},{"path":"src/test/java/teammates/storage/sqlapi/FeedbackResponseCommentsDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mingyuanc"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":3,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.ArgumentMatchers.anyLong;"},{"lineNumber":4,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.doReturn;"},{"lineNumber":5,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":6,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":7,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.spy;"},{"lineNumber":8,"author":{"gitId":"mingyuanc"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":9,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":10,"author":{"gitId":"mingyuanc"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":11,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":12,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":13,"author":{"gitId":"mingyuanc"},"content":"import org.testng.annotations.Test;"},{"lineNumber":14,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":15,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":16,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":17,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":18,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":19,"author":{"gitId":"mingyuanc"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":20,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":21,"author":{"gitId":"mingyuanc"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":22,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":23,"author":{"gitId":"mingyuanc"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"mingyuanc"},"content":" * SUT: {@code FeedbackResponseCommentsDb}."},{"lineNumber":25,"author":{"gitId":"mingyuanc"},"content":" */"},{"lineNumber":26,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":27,"author":{"gitId":"mingyuanc"},"content":"public class FeedbackResponseCommentsDbTest extends BaseTestCase {"},{"lineNumber":28,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":29,"author":{"gitId":"mingyuanc"},"content":"    private static final Long TYPICAL_ID \u003d 100L;"},{"lineNumber":30,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":31,"author":{"gitId":"mingyuanc"},"content":"    private static final Long NOT_TYPICAL_ID \u003d 101L;"},{"lineNumber":32,"author":{"gitId":"mingyuanc"},"content":"    private FeedbackResponseCommentsDb feedbackResponseCommentsDb;"},{"lineNumber":33,"author":{"gitId":"mingyuanc"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":34,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":35,"author":{"gitId":"mingyuanc"},"content":"    @BeforeMethod"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"    public void setUpMethod() {"},{"lineNumber":37,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":38,"author":{"gitId":"mingyuanc"},"content":"        feedbackResponseCommentsDb \u003d spy(FeedbackResponseCommentsDb.class);"},{"lineNumber":39,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":41,"author":{"gitId":"mingyuanc"},"content":"    @AfterMethod"},{"lineNumber":42,"author":{"gitId":"mingyuanc"},"content":"    public void teardownMethod() {"},{"lineNumber":43,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.close();"},{"lineNumber":44,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":45,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":47,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"mingyuanc"},"content":"    public void testCreateComment_commentDoesNotExist_success()"},{"lineNumber":49,"author":{"gitId":"mingyuanc"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":50,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":51,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":52,"author":{"gitId":"mingyuanc"},"content":"        feedbackResponseCommentsDb.createFeedbackResponseComment(comment);"},{"lineNumber":53,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":54,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(comment));"},{"lineNumber":55,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":57,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"mingyuanc"},"content":"    public void testCreateComment_commentAlreadyExists_throwsEntityAlreadyExistsException() {"},{"lineNumber":59,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":60,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":61,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, TYPICAL_ID)).thenReturn(comment);"},{"lineNumber":62,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":63,"author":{"gitId":"mingyuanc"},"content":"        EntityAlreadyExistsException ex \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":64,"author":{"gitId":"mingyuanc"},"content":"                () -\u003e feedbackResponseCommentsDb.createFeedbackResponseComment(comment));"},{"lineNumber":65,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":66,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(\"Trying to create an entity that exists: \" + comment.toString(), ex.getMessage());"},{"lineNumber":67,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(comment), never());"},{"lineNumber":68,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":70,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"mingyuanc"},"content":"    public void testGetComment_commentAlreadyExists_success() {"},{"lineNumber":72,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":73,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":74,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, TYPICAL_ID)).thenReturn(comment);"},{"lineNumber":75,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":76,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment commentFetched \u003d feedbackResponseCommentsDb.getFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":77,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":78,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, TYPICAL_ID)).thenReturn(comment);"},{"lineNumber":79,"author":{"gitId":"mingyuanc"},"content":"        assertEquals(comment, commentFetched);"},{"lineNumber":80,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":82,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"mingyuanc"},"content":"    public void testGetComment_commentDoesNotExist_returnsNull() {"},{"lineNumber":84,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, NOT_TYPICAL_ID)).thenReturn(null);"},{"lineNumber":85,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":86,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment commentFetched \u003d feedbackResponseCommentsDb.getFeedbackResponseComment(NOT_TYPICAL_ID);"},{"lineNumber":87,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":88,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, NOT_TYPICAL_ID), times(1));"},{"lineNumber":89,"author":{"gitId":"mingyuanc"},"content":"        assertNull(commentFetched);"},{"lineNumber":90,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":92,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"mingyuanc"},"content":"    public void testDeleteComment_commentExists_success() {"},{"lineNumber":94,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":95,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":96,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackResponseComment.class, TYPICAL_ID)).thenReturn(comment);"},{"lineNumber":97,"author":{"gitId":"mingyuanc"},"content":"        feedbackResponseCommentsDb.deleteFeedbackResponseComment(TYPICAL_ID);"},{"lineNumber":98,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":99,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(comment));"},{"lineNumber":100,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":102,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateComment_commentInvalid_throwsInvalidParametersException() {"},{"lineNumber":104,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":105,"author":{"gitId":"mingyuanc"},"content":"        comment.setGiverType(FeedbackParticipantType.SELF);"},{"lineNumber":106,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":107,"author":{"gitId":"mingyuanc"},"content":"        assertThrows(InvalidParametersException.class,"},{"lineNumber":108,"author":{"gitId":"mingyuanc"},"content":"                () -\u003e feedbackResponseCommentsDb.updateFeedbackResponseComment(comment));"},{"lineNumber":109,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":110,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(comment), never());"},{"lineNumber":111,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":113,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateComment_commentDoesNotExist_throwsEntityDoesNotExistException() {"},{"lineNumber":115,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(NOT_TYPICAL_ID);"},{"lineNumber":116,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":117,"author":{"gitId":"mingyuanc"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":118,"author":{"gitId":"mingyuanc"},"content":"                () -\u003e feedbackResponseCommentsDb.updateFeedbackResponseComment(comment));"},{"lineNumber":119,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":120,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(comment), never());"},{"lineNumber":121,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":123,"author":{"gitId":"mingyuanc"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"mingyuanc"},"content":"    public void testUpdateCourse_success() throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":125,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d getTypicalResponseComment(TYPICAL_ID);"},{"lineNumber":126,"author":{"gitId":"mingyuanc"},"content":"        comment.setCommentText(\"Placeholder Text\");"},{"lineNumber":127,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":128,"author":{"gitId":"mingyuanc"},"content":"        doReturn(comment).when(feedbackResponseCommentsDb).getFeedbackResponseComment(anyLong());"},{"lineNumber":129,"author":{"gitId":"mingyuanc"},"content":"        feedbackResponseCommentsDb.updateFeedbackResponseComment(comment);"},{"lineNumber":130,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":131,"author":{"gitId":"mingyuanc"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(comment));"},{"lineNumber":132,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":134,"author":{"gitId":"mingyuanc"},"content":"}"}],"authorContributionMap":{"mingyuanc":134}},{"path":"src/test/java/teammates/storage/sqlapi/FeedbackSessionsDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dishenggg"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":3,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.ArgumentMatchers.any;"},{"lineNumber":4,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.Mockito.doReturn;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":7,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.Mockito.spy;"},{"lineNumber":8,"author":{"gitId":"dishenggg"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":9,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":10,"author":{"gitId":"dishenggg"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":12,"author":{"gitId":"dishenggg"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":13,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":14,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":15,"author":{"gitId":"dishenggg"},"content":"import org.testng.annotations.Test;"},{"lineNumber":16,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":17,"author":{"gitId":"dishenggg"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":18,"author":{"gitId":"dishenggg"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":19,"author":{"gitId":"dishenggg"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":20,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":21,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.TimeHelperExtension;"},{"lineNumber":22,"author":{"gitId":"dishenggg"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":23,"author":{"gitId":"dishenggg"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":24,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":25,"author":{"gitId":"dishenggg"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"dishenggg"},"content":" * SUT: {@code FeedbackSessionsDb}."},{"lineNumber":27,"author":{"gitId":"dishenggg"},"content":" */"},{"lineNumber":28,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"public class FeedbackSessionsDbTest extends BaseTestCase {"},{"lineNumber":30,"author":{"gitId":"dishenggg"},"content":"    private FeedbackSessionsDb feedbackSessionsDb;"},{"lineNumber":31,"author":{"gitId":"dishenggg"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":32,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":33,"author":{"gitId":"dishenggg"},"content":"    @BeforeMethod"},{"lineNumber":34,"author":{"gitId":"dishenggg"},"content":"    public void setUpMethod() {"},{"lineNumber":35,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":36,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb \u003d spy(FeedbackSessionsDb.class);"},{"lineNumber":37,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":39,"author":{"gitId":"dishenggg"},"content":"    @AfterMethod"},{"lineNumber":40,"author":{"gitId":"dishenggg"},"content":"    public void teardownMethod() {"},{"lineNumber":41,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.close();"},{"lineNumber":42,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":44,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"dishenggg"},"content":"    public void testCreateSession_sessionDoesNotExist_success()"},{"lineNumber":46,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":47,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":48,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":49,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb.createFeedbackSession(feedbackSession);"},{"lineNumber":50,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":51,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackSession), times(1));"},{"lineNumber":52,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":54,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"dishenggg"},"content":"    public void testCreateSession_duplicateSession_throwsEntityAlreadyExistsException()"},{"lineNumber":56,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":57,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":58,"author":{"gitId":"dishenggg"},"content":"        UUID uuid \u003d feedbackSession.getId();"},{"lineNumber":59,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(uuid);"},{"lineNumber":60,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":61,"author":{"gitId":"dishenggg"},"content":"        assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":62,"author":{"gitId":"dishenggg"},"content":"                () -\u003e feedbackSessionsDb.createFeedbackSession(feedbackSession));"},{"lineNumber":63,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackSession), never());"},{"lineNumber":64,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":66,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"dishenggg"},"content":"    public void testCreateSession_invalidParams_throwsInvalidParametersException()"},{"lineNumber":68,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":69,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":70,"author":{"gitId":"dishenggg"},"content":"        feedbackSession.setName(\"\");"},{"lineNumber":71,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":72,"author":{"gitId":"dishenggg"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e feedbackSessionsDb.createFeedbackSession(feedbackSession));"},{"lineNumber":73,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(feedbackSession), never());"},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"    public void testCreateSession_nullParams_throwsAssertionError()"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"        assertThrows(AssertionError.class, () -\u003e feedbackSessionsDb.createFeedbackSession(null));"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":82,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":"    public void testGetFeedbackSession_sessionExists_success() {"},{"lineNumber":84,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":85,"author":{"gitId":"dishenggg"},"content":"        UUID uuid \u003d feedbackSession.getId();"},{"lineNumber":86,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackSession.class, uuid)).thenReturn(feedbackSession);"},{"lineNumber":87,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":88,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession sessionFetched \u003d feedbackSessionsDb.getFeedbackSession(uuid);"},{"lineNumber":89,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":90,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(FeedbackSession.class, uuid), times(1));"},{"lineNumber":91,"author":{"gitId":"dishenggg"},"content":"        assertEquals(feedbackSession, sessionFetched);"},{"lineNumber":92,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":94,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"dishenggg"},"content":"    public void testGetFeedbackSession_sessionDoesNotExists_returnNull() {"},{"lineNumber":96,"author":{"gitId":"dishenggg"},"content":"        UUID randomUuid \u003d UUID.randomUUID();"},{"lineNumber":97,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(FeedbackSession.class, randomUuid)).thenReturn(null);"},{"lineNumber":98,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":99,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession sessionFetched \u003d feedbackSessionsDb.getFeedbackSession(randomUuid);"},{"lineNumber":100,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":101,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(FeedbackSession.class, randomUuid), times(1));"},{"lineNumber":102,"author":{"gitId":"dishenggg"},"content":"        assertNull(sessionFetched);"},{"lineNumber":103,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":105,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"dishenggg"},"content":"    public void testUpdateFeedbackSession_success() throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":107,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":108,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(any(UUID.class));"},{"lineNumber":109,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":110,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb.updateFeedbackSession(feedbackSession);"},{"lineNumber":111,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":112,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), times(1));"},{"lineNumber":113,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":115,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"dishenggg"},"content":"    public void testUpdateFeedbackSession_sessionDoesNotExist_throwsEntityDoesNotExistException()"},{"lineNumber":117,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":118,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":119,"author":{"gitId":"dishenggg"},"content":"        UUID uuid \u003d feedbackSession.getId();"},{"lineNumber":120,"author":{"gitId":"dishenggg"},"content":"        doReturn(null).when(feedbackSessionsDb).getFeedbackSession(uuid);"},{"lineNumber":121,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":122,"author":{"gitId":"dishenggg"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":123,"author":{"gitId":"dishenggg"},"content":"                () -\u003e feedbackSessionsDb.updateFeedbackSession(feedbackSession));"},{"lineNumber":124,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), never());"},{"lineNumber":125,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":127,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"dishenggg"},"content":"    public void testUpdateFeedbackSession_sessionInvalid_throwsInvalidParametersException()"},{"lineNumber":129,"author":{"gitId":"dishenggg"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":130,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":131,"author":{"gitId":"dishenggg"},"content":"        UUID uuid \u003d feedbackSession.getId();"},{"lineNumber":132,"author":{"gitId":"dishenggg"},"content":"        feedbackSession.setName(\"\");"},{"lineNumber":133,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(uuid);"},{"lineNumber":134,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":135,"author":{"gitId":"dishenggg"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e feedbackSessionsDb.updateFeedbackSession(feedbackSession));"},{"lineNumber":136,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), never());"},{"lineNumber":137,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":139,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"dishenggg"},"content":"    public void testDeleteFeedbackSession_success() throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":141,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":142,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":143,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb.deleteFeedbackSession(feedbackSession);"},{"lineNumber":144,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":145,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(feedbackSession), times(1));"},{"lineNumber":146,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":148,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"dishenggg"},"content":"    public void testGetSoftDeletedFeedbackSession_isSoftDeleted_success() {"},{"lineNumber":150,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":151,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":152,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":153,"author":{"gitId":"dishenggg"},"content":"        feedbackSession.setDeletedAt(TimeHelperExtension.getInstantDaysOffsetFromNow(2));"},{"lineNumber":154,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":155,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":156,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession sessionFetched \u003d feedbackSessionsDb.getSoftDeletedFeedbackSession(sessionName, courseId);"},{"lineNumber":157,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":158,"author":{"gitId":"dishenggg"},"content":"        assertEquals(feedbackSession, sessionFetched);"},{"lineNumber":159,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":161,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"dishenggg"},"content":"    public void testGetSoftDeletedFeedbackSession_notSoftDeleted_returnNull() {"},{"lineNumber":163,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":164,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":165,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":166,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":167,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":168,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession sessionFetched \u003d feedbackSessionsDb.getSoftDeletedFeedbackSession(sessionName, courseId);"},{"lineNumber":169,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":170,"author":{"gitId":"dishenggg"},"content":"        assertNull(sessionFetched);"},{"lineNumber":171,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":173,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"dishenggg"},"content":"    public void testGetSoftDeletedFeedbackSession_sessionDoesNotExist_returnNull() {"},{"lineNumber":175,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":176,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":177,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":178,"author":{"gitId":"dishenggg"},"content":"        doReturn(null).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":179,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":180,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession sessionFetched \u003d feedbackSessionsDb.getSoftDeletedFeedbackSession(sessionName, courseId);"},{"lineNumber":181,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":182,"author":{"gitId":"dishenggg"},"content":"        assertNull(sessionFetched);"},{"lineNumber":183,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":185,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"dishenggg"},"content":"    public void testRestoreDeletedFeedbackSession_success() throws EntityDoesNotExistException {"},{"lineNumber":187,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":188,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":189,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":190,"author":{"gitId":"dishenggg"},"content":"        feedbackSession.setDeletedAt(TimeHelperExtension.getInstantDaysOffsetFromNow(2));"},{"lineNumber":191,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":192,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":193,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb.restoreDeletedFeedbackSession(sessionName, courseId);"},{"lineNumber":194,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":195,"author":{"gitId":"dishenggg"},"content":"        assertNull(feedbackSession.getDeletedAt());"},{"lineNumber":196,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), times(1));"},{"lineNumber":197,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":199,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":200,"author":{"gitId":"dishenggg"},"content":"    public void testRestoreDeletedFeedbackSession_sessionDoesNotExist_throwsEntityDoesNotExistException()"},{"lineNumber":201,"author":{"gitId":"dishenggg"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":202,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":203,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":204,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":205,"author":{"gitId":"dishenggg"},"content":"        doReturn(null).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":206,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":207,"author":{"gitId":"dishenggg"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":208,"author":{"gitId":"dishenggg"},"content":"                () -\u003e feedbackSessionsDb.restoreDeletedFeedbackSession(sessionName, courseId));"},{"lineNumber":209,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), never());"},{"lineNumber":210,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":212,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":213,"author":{"gitId":"dishenggg"},"content":"    public void testSoftDeleteFeedbackSession_success() throws EntityDoesNotExistException {"},{"lineNumber":214,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":215,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":216,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":217,"author":{"gitId":"dishenggg"},"content":"        doReturn(feedbackSession).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":218,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":219,"author":{"gitId":"dishenggg"},"content":"        feedbackSessionsDb.softDeleteFeedbackSession(sessionName, courseId);"},{"lineNumber":220,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":221,"author":{"gitId":"dishenggg"},"content":"        assertNotNull(feedbackSession.getDeletedAt());"},{"lineNumber":222,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), times(1));"},{"lineNumber":223,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":225,"author":{"gitId":"dishenggg"},"content":"    @Test"},{"lineNumber":226,"author":{"gitId":"dishenggg"},"content":"    public void testSoftDeleteFeedbackSession_sessionDoesNotExist_throwsEntityDoesNotExistException()"},{"lineNumber":227,"author":{"gitId":"dishenggg"},"content":"            throws EntityDoesNotExistException {"},{"lineNumber":228,"author":{"gitId":"dishenggg"},"content":"        FeedbackSession feedbackSession \u003d getTypicalFeedbackSessionForCourse(getTypicalCourse());"},{"lineNumber":229,"author":{"gitId":"dishenggg"},"content":"        String sessionName \u003d feedbackSession.getName();"},{"lineNumber":230,"author":{"gitId":"dishenggg"},"content":"        String courseId \u003d feedbackSession.getCourse().getId();"},{"lineNumber":231,"author":{"gitId":"dishenggg"},"content":"        doReturn(null).when(feedbackSessionsDb).getFeedbackSession(sessionName, courseId);"},{"lineNumber":232,"author":{"gitId":"dishenggg"},"content":""},{"lineNumber":233,"author":{"gitId":"dishenggg"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":234,"author":{"gitId":"dishenggg"},"content":"                () -\u003e feedbackSessionsDb.restoreDeletedFeedbackSession(sessionName, courseId));"},{"lineNumber":235,"author":{"gitId":"dishenggg"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.merge(feedbackSession), never());"},{"lineNumber":236,"author":{"gitId":"dishenggg"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"dishenggg"},"content":"}"}],"authorContributionMap":{"dishenggg":237}},{"path":"src/test/java/teammates/test/AbstractBackDoor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.apache.http.HttpEntity;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.CloseableHttpResponse;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.HttpDelete;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.HttpGet;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.HttpPost;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.HttpPut;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import org.apache.http.client.methods.HttpRequestBase;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import org.apache.http.client.utils.URIBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.apache.http.entity.StringEntity;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.apache.http.impl.client.CloseableHttpClient;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.apache.http.impl.client.HttpClients;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import org.apache.http.message.BasicNameValuePair;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import com.google.gson.JsonParser;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":38,"author":{"gitId":"dishenggg"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountAttributes;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.DeadlineExtensionAttributes;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import teammates.common.exception.HttpRequestFailedException;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import teammates.common.util.TimeHelper;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountData;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountRequestData;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import teammates.ui.output.CourseData;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import teammates.ui.output.CoursesData;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import teammates.ui.output.DeadlineExtensionData;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackQuestionData;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackQuestionsData;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponseCommentData;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponseData;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponsesData;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackSessionData;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackSessionsData;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackVisibilityType;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorsData;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"import teammates.ui.output.NumberOfEntitiesToGiveFeedbackToSetting;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"import teammates.ui.output.ResponseVisibleSetting;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"import teammates.ui.output.SessionVisibleSetting;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"import teammates.ui.request.Intent;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":78,"author":{"gitId":"-"},"content":" * Used to create API calls to the back-end without going through the UI."},{"lineNumber":79,"author":{"gitId":"-"},"content":" */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"public abstract class AbstractBackDoor {"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Gets the URL of the back-end."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    protected abstract String getAppUrl();"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Gets the backdoor key used to authenticate with the back-end."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    protected abstract String getBackdoorKey();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Gets the CSRF key used to authenticate with the back-end."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    protected abstract String getCsrfKey();"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes GET request with the given {@code relativeUrl}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The body content and status of the HTTP response"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public ResponseBodyAndCode executeGetRequest(String relativeUrl, Map\u003cString, String\u003e params) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return executeRequest(HttpGet.METHOD_NAME, relativeUrl, params, null);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes POST request with the given {@code relativeUrl}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @return The body content and status of the HTTP response"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public ResponseBodyAndCode executePostRequest(String relativeUrl, Map\u003cString, String\u003e params, String body) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return executeRequest(HttpPost.METHOD_NAME, relativeUrl, params, body);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes PUT request with the given {@code relativeUrl}."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @return The body content and status of the HTTP response"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public ResponseBodyAndCode executePutRequest(String relativeUrl, Map\u003cString, String\u003e params, String body) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return executeRequest(HttpPut.METHOD_NAME, relativeUrl, params, body);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes DELETE request with the given {@code relativeUrl}."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @return The body content and status of the HTTP response"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public ResponseBodyAndCode executeDeleteRequest(String relativeUrl, Map\u003cString, String\u003e params) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return executeRequest(HttpDelete.METHOD_NAME, relativeUrl, params, null);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes HTTP request with the given {@code method} and {@code relativeUrl}."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * @return The content of the HTTP response"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private ResponseBodyAndCode executeRequest("},{"lineNumber":139,"author":{"gitId":"-"},"content":"            String method, String relativeUrl, Map\u003cString, String\u003e params, String body) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String url \u003d getAppUrl() + relativeUrl;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        HttpRequestBase request;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        switch (method) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        case HttpGet.METHOD_NAME:"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            request \u003d createGetRequest(url, params);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        case HttpPost.METHOD_NAME:"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            request \u003d createPostRequest(url, params, body);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        case HttpPut.METHOD_NAME:"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            request \u003d createPutRequest(url, params, body);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        case HttpDelete.METHOD_NAME:"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            request \u003d createDeleteRequest(url, params);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unaccepted HTTP method: \" + method);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        addAuthKeys(request);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try (CloseableHttpClient httpClient \u003d HttpClients.createDefault();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                CloseableHttpResponse response \u003d httpClient.execute(request)) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"            String responseBody \u003d null;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            HttpEntity entity \u003d response.getEntity();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            if (entity !\u003d null) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                try (BufferedReader br \u003d new BufferedReader("},{"lineNumber":169,"author":{"gitId":"-"},"content":"                        new InputStreamReader(entity.getContent(), Const.ENCODING))) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    responseBody \u003d br.lines().collect(Collectors.joining(System.lineSeparator()));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return new ResponseBodyAndCode(responseBody, response.getStatusLine().getStatusCode());"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Executes GET request with the given {@code relativeUrl}."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * @return The content of the HTTP response"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private static HttpGet createGetRequest(String url, Map\u003cString, String\u003e params) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return new HttpGet(createBasicUri(url, params));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private static HttpPost createPostRequest(String url, Map\u003cString, String\u003e params, String body) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        HttpPost post \u003d new HttpPost(createBasicUri(url, params));"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        if (body !\u003d null) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            StringEntity entity \u003d new StringEntity(body, Const.ENCODING);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            post.setEntity(entity);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return post;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    private static HttpPut createPutRequest(String url, Map\u003cString, String\u003e params, String body) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        HttpPut put \u003d new HttpPut(createBasicUri(url, params));"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        if (body !\u003d null) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            StringEntity entity \u003d new StringEntity(body, Const.ENCODING);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            put.setEntity(entity);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return put;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    private static HttpDelete createDeleteRequest(String url, Map\u003cString, String\u003e params) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return new HttpDelete(createBasicUri(url, params));"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    private static URI createBasicUri(String url, Map\u003cString, String\u003e params) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        List\u003cNameValuePair\u003e postParameters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        if (params !\u003d null) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            params.forEach((key, value) -\u003e postParameters.add(new BasicNameValuePair(key, value)));"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            URIBuilder uriBuilder \u003d new URIBuilder(url);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            uriBuilder.addParameters(postParameters);"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return uriBuilder.build();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    private void addAuthKeys(HttpRequestBase request) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        request.addHeader(Const.HeaderNames.BACKDOOR_KEY, getBackdoorKey());"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        request.addHeader(Const.HeaderNames.CSRF_KEY, getCsrfKey());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Removes and restores given data in the database. This method is to be called on test startup."},{"lineNumber":238,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * \u003cp\u003eNote:  The data associated with the test accounts have to be \u003cstrong\u003emanually\u003c/strong\u003e removed by removing the data"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * bundle when a test ends because the test accounts are shared across tests."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * \u003cp\u003eTest data should never be cleared after test in order to prevent incurring additional database costs because the"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * test\u0027s data may not be accessed in another test. Also although unlikely in normal conditions, when a test fail to"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * remove data bundle on teardown, another test should have no reason to fail."},{"lineNumber":245,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * \u003cp\u003eAnother reason not to remove associated data after a test is that in case of test failures, it helps to have the"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * associated data in the database to debug the failure."},{"lineNumber":248,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis means that removing the data bundle on startup is not always sufficient because a test only knows how"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     * to remove its associated data."},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * This is why some tests would fail when they use the same account and use different data."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * Extending this method to remove data outside its associated data would introduce"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * unnecessary complications such as extra costs and knowing exactly how much data to remove. Removing too much data"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * would not just incur higher database costs but we can make tests unexpectedly pass(fail) when the data is expected to"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * be not present(present) in another test."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * \u003cp\u003eTODO: Hence, we need to explicitly remove the data bundle in tests on teardown to avoid instability of tests."},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * However, removing the data bundle on teardown manually is not a perfect solution because two tests can concurrently"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * access the same account and their data may get mixed up in the process. This is a major problem we need to address."},{"lineNumber":260,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    public String removeAndRestoreDataBundle(DataBundle dataBundle) throws HttpRequestFailedException {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        removeDataBundle(dataBundle);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode putRequestOutput \u003d"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                executePostRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        if (putRequestOutput.responseCode !\u003d HttpStatus.SC_OK) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            throw new HttpRequestFailedException(\"Request failed: [\" + putRequestOutput.responseCode + \"] \""},{"lineNumber":267,"author":{"gitId":"-"},"content":"                    + putRequestOutput.responseBody);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        return putRequestOutput.responseBody;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Removes and restores given data in the database. This method is to be called on test startup."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    public SqlDataBundle removeAndRestoreSqlDataBundle(SqlDataBundle dataBundle) throws HttpRequestFailedException {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        removeSqlDataBundle(dataBundle);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode putRequestOutput \u003d"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                executePostRequest(Const.ResourceURIs.SQL_DATABUNDLE, null, JsonUtils.toJson(dataBundle));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        if (putRequestOutput.responseCode !\u003d HttpStatus.SC_OK) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            throw new HttpRequestFailedException(\"Request failed: [\" + putRequestOutput.responseCode + \"] \""},{"lineNumber":281,"author":{"gitId":"-"},"content":"                    + putRequestOutput.responseBody);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        JsonObject jsonObject \u003d JsonParser.parseString(putRequestOutput.responseBody).getAsJsonObject();"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        // data bundle is nested under message key"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        String message \u003d jsonObject.get(\"message\").getAsString();"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(message, SqlDataBundle.class);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitId":"-"},"content":"     * Removes given data from the database."},{"lineNumber":292,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf given entities have already been deleted, it fails silently."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public void removeDataBundle(DataBundle dataBundle) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        executePutRequest(Const.ResourceURIs.DATABUNDLE, null, JsonUtils.toJson(dataBundle));"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitId":"-"},"content":"     * Removes given data from the database."},{"lineNumber":301,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":302,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf given entities have already been deleted, it fails silently."},{"lineNumber":303,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public void removeSqlDataBundle(SqlDataBundle dataBundle) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        executePutRequest(Const.ResourceURIs.SQL_DATABUNDLE, null, JsonUtils.toJson(dataBundle));"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * Gets the cookie format for the given user ID."},{"lineNumber":310,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    public String getUserCookie(String userId) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.USER_ID, userId);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executePostRequest(Const.ResourceURIs.USER_COOKIE, params, null);"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"        MessageOutput output \u003d JsonUtils.fromJson(response.responseBody, MessageOutput.class);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        return output.getMessage();"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"dishenggg"},"content":"    // TODO: remove params after migration"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":322,"author":{"gitId":"-"},"content":"     * Puts searchable documents in data bundle into the database."},{"lineNumber":323,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    public String putDocuments(DataBundle dataBundle) throws HttpRequestFailedException {"},{"lineNumber":325,"author":{"gitId":"dishenggg"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":326,"author":{"gitId":"dishenggg"},"content":"        params.put(\"databundletype\", \"datastore\");"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode putRequestOutput \u003d"},{"lineNumber":328,"author":{"gitId":"dishenggg"},"content":"                executePutRequest(Const.ResourceURIs.DATABUNDLE_DOCUMENTS, params, JsonUtils.toJson(dataBundle));"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        if (putRequestOutput.responseCode !\u003d HttpStatus.SC_OK) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            throw new HttpRequestFailedException(\"Request failed: [\" + putRequestOutput.responseCode + \"] \""},{"lineNumber":331,"author":{"gitId":"-"},"content":"                    + putRequestOutput.responseBody);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        return putRequestOutput.responseBody;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"dishenggg"},"content":"    // TODO: remove method after migration"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitId":"dishenggg"},"content":"     * Puts searchable documents in data bundle into the SQL database."},{"lineNumber":339,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitId":"dishenggg"},"content":"    public String putSqlDocuments(SqlDataBundle dataBundle) throws HttpRequestFailedException {"},{"lineNumber":341,"author":{"gitId":"dishenggg"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":342,"author":{"gitId":"dishenggg"},"content":"        params.put(\"databundletype\", \"sql\");"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode putRequestOutput \u003d"},{"lineNumber":344,"author":{"gitId":"dishenggg"},"content":"                executePutRequest(Const.ResourceURIs.DATABUNDLE_DOCUMENTS, params, JsonUtils.toJson(dataBundle));"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        if (putRequestOutput.responseCode !\u003d HttpStatus.SC_OK) {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            throw new HttpRequestFailedException(\"Request failed: [\" + putRequestOutput.responseCode + \"] \""},{"lineNumber":347,"author":{"gitId":"-"},"content":"                    + putRequestOutput.responseBody);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        return putRequestOutput.responseBody;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":353,"author":{"gitId":"-"},"content":"     * Gets account data from the database."},{"lineNumber":354,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    public AccountData getAccountData(String googleId) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_ID, googleId);"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.ACCOUNT, params);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, AccountData.class);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"-"},"content":"     * Gets an account from the database."},{"lineNumber":368,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    public AccountAttributes getAccount(String googleId) {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        AccountData accountData \u003d getAccountData(googleId);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        return AccountAttributes.builder(accountData.getGoogleId())"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                .withName(accountData.getName())"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                .withEmail(accountData.getEmail())"},{"lineNumber":374,"author":{"gitId":"-"},"content":"                .withReadNotifications("},{"lineNumber":375,"author":{"gitId":"-"},"content":"                    accountData.getReadNotifications()"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                        .entrySet()"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                        .stream()"},{"lineNumber":378,"author":{"gitId":"-"},"content":"                        .collect(Collectors.toMap("},{"lineNumber":379,"author":{"gitId":"-"},"content":"                            e -\u003e e.getKey(),"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                            e -\u003e Instant.ofEpochMilli(e.getValue())"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                        ))"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                )"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":387,"author":{"gitId":"-"},"content":"     * Gets course data from the database."},{"lineNumber":388,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    public CourseData getCourseData(String courseId) {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.COURSE, params);"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, CourseData.class);"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":401,"author":{"gitId":"-"},"content":"     * Gets a course from the database."},{"lineNumber":402,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    public CourseAttributes getCourse(String courseId) {"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        CourseData courseData \u003d getCourseData(courseId);"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        if (courseData \u003d\u003d null) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        return CourseAttributes.builder(courseData.getCourseId())"},{"lineNumber":409,"author":{"gitId":"-"},"content":"                .withName(courseData.getCourseName())"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                .withTimezone(courseData.getTimeZone())"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                .withInstitute(courseData.getInstitute())"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":416,"author":{"gitId":"-"},"content":"     * Gets archived course data from the database."},{"lineNumber":417,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public CourseData getArchivedCourseData(String instructorId, String courseId) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.USER_ID, instructorId);"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR);"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_STATUS, Const.CourseStatus.ARCHIVED);"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.COURSES, params);"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"        CoursesData coursesData \u003d JsonUtils.fromJson(response.responseBody, CoursesData.class);"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        CourseData courseData \u003d coursesData.getCourses()"},{"lineNumber":432,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":433,"author":{"gitId":"-"},"content":"                .filter(cd -\u003e cd.getCourseId().equals(courseId))"},{"lineNumber":434,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":435,"author":{"gitId":"-"},"content":"                .orElse(null);"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"        if (courseData \u003d\u003d null) {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"        return courseData;"},{"lineNumber":442,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":445,"author":{"gitId":"-"},"content":"     * Gets a archived course from the database."},{"lineNumber":446,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    public CourseAttributes getArchivedCourse(String instructorId, String courseId) {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        CourseData courseData \u003d getArchivedCourseData(instructorId, courseId);"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        if (courseData \u003d\u003d null) {"},{"lineNumber":450,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        return CourseAttributes.builder(courseData.getCourseId())"},{"lineNumber":453,"author":{"gitId":"-"},"content":"                .withName(courseData.getCourseName())"},{"lineNumber":454,"author":{"gitId":"-"},"content":"                .withTimezone(courseData.getTimeZone())"},{"lineNumber":455,"author":{"gitId":"-"},"content":"                .withInstitute(courseData.getInstitute())"},{"lineNumber":456,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":460,"author":{"gitId":"-"},"content":"     * Returns true if the course exists and is in recycle bin."},{"lineNumber":461,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":462,"author":{"gitId":"-"},"content":"    public boolean isCourseInRecycleBin(String courseId) {"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        CourseData courseData \u003d getCourseData(courseId);"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        if (courseData \u003d\u003d null) {"},{"lineNumber":465,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        return courseData.getDeletionTimestamp() !\u003d 0;"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":471,"author":{"gitId":"-"},"content":"     * Gets instructor data from the database."},{"lineNumber":472,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    public InstructorData getInstructorData(String courseId, String email) {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString());"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.INSTRUCTORS, params);"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"        InstructorsData instructorsData \u003d JsonUtils.fromJson(response.responseBody, InstructorsData.class);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        InstructorData instructorData \u003d instructorsData.getInstructors()"},{"lineNumber":484,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                .filter(instructor -\u003e instructor.getEmail().equals(email))"},{"lineNumber":486,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":487,"author":{"gitId":"-"},"content":"                .orElse(null);"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"        if (instructorData \u003d\u003d null) {"},{"lineNumber":490,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"        return instructorData;"},{"lineNumber":494,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":497,"author":{"gitId":"-"},"content":"     * Get instructor from database. Does not include certain fields like InstructorPrivileges."},{"lineNumber":498,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    public InstructorAttributes getInstructor(String courseId, String instructorEmail) {"},{"lineNumber":500,"author":{"gitId":"-"},"content":"        InstructorData instructorData \u003d getInstructorData(courseId, instructorEmail);"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        if (instructorData \u003d\u003d null) {"},{"lineNumber":502,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        InstructorAttributes.Builder instructor \u003d InstructorAttributes.builder(instructorData.getCourseId(),"},{"lineNumber":505,"author":{"gitId":"-"},"content":"                instructorData.getEmail());"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        if (instructorData.getGoogleId() !\u003d null) {"},{"lineNumber":507,"author":{"gitId":"-"},"content":"            instructor.withGoogleId(instructorData.getGoogleId());"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        if (instructorData.getName() !\u003d null) {"},{"lineNumber":510,"author":{"gitId":"-"},"content":"            instructor.withName(instructorData.getName());"},{"lineNumber":511,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        if (instructorData.getRole() !\u003d null) {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"            instructor.withRole(instructorData.getRole().getRoleName());"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        if (instructorData.getIsDisplayedToStudents() !\u003d null) {"},{"lineNumber":516,"author":{"gitId":"-"},"content":"            instructor.withIsDisplayedToStudents(instructorData.getIsDisplayedToStudents());"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        if (instructorData.getDisplayedToStudentsAs() !\u003d null) {"},{"lineNumber":519,"author":{"gitId":"-"},"content":"            instructor.withDisplayedName(instructorData.getDisplayedToStudentsAs());"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        InstructorAttributes instructorAttributes \u003d instructor.build();"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        if (instructorData.getKey() !\u003d null) {"},{"lineNumber":523,"author":{"gitId":"-"},"content":"            instructorAttributes.setKey(instructorData.getKey());"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        return instructorAttributes;"},{"lineNumber":526,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":527,"author":{"gitId":"-"},"content":""},{"lineNumber":528,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":529,"author":{"gitId":"-"},"content":"     * Gets student data from the database."},{"lineNumber":530,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    public StudentData getStudentData(String courseId, String studentEmail) {"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.STUDENT_EMAIL, studentEmail);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.STUDENT, params);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":537,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, StudentData.class);"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":543,"author":{"gitId":"-"},"content":"     * Get student from database."},{"lineNumber":544,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    public StudentAttributes getStudent(String courseId, String studentEmail) {"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        StudentData studentData \u003d getStudentData(courseId, studentEmail);"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        if (studentData \u003d\u003d null) {"},{"lineNumber":548,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":549,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":550,"author":{"gitId":"-"},"content":"        StudentAttributes.Builder builder \u003d StudentAttributes.builder(studentData.getCourseId(),"},{"lineNumber":551,"author":{"gitId":"-"},"content":"                studentData.getEmail());"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        if (studentData.getGoogleId() !\u003d null) {"},{"lineNumber":553,"author":{"gitId":"-"},"content":"            builder.withGoogleId(studentData.getGoogleId());"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        if (studentData.getName() !\u003d null) {"},{"lineNumber":556,"author":{"gitId":"-"},"content":"            builder.withName(studentData.getName());"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        if (studentData.getSectionName() !\u003d null) {"},{"lineNumber":559,"author":{"gitId":"-"},"content":"            builder.withSectionName(studentData.getSectionName());"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        if (studentData.getTeamName() !\u003d null) {"},{"lineNumber":562,"author":{"gitId":"-"},"content":"            builder.withTeamName(studentData.getTeamName());"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        if (studentData.getComments() !\u003d null) {"},{"lineNumber":565,"author":{"gitId":"-"},"content":"            builder.withComment(studentData.getComments());"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d builder.build();"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        if (studentData.getKey() !\u003d null) {"},{"lineNumber":569,"author":{"gitId":"-"},"content":"            student.setKey(studentData.getKey());"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        return student;"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":573,"author":{"gitId":"-"},"content":""},{"lineNumber":574,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":575,"author":{"gitId":"-"},"content":"     * Get feedback session data from database."},{"lineNumber":576,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":577,"author":{"gitId":"-"},"content":"    public FeedbackSessionData getFeedbackSessionData(String courseId, String feedbackSessionName) {"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSessionName);"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString());"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.SESSION, params);"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":584,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, FeedbackSessionData.class);"},{"lineNumber":587,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":588,"author":{"gitId":"-"},"content":""},{"lineNumber":589,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":590,"author":{"gitId":"-"},"content":"     * Get feedback session from database."},{"lineNumber":591,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    public FeedbackSessionAttributes getFeedbackSession(String courseId, String feedbackSessionName) {"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        FeedbackSessionData sessionData \u003d getFeedbackSessionData(courseId, feedbackSessionName);"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        if (sessionData \u003d\u003d null) {"},{"lineNumber":595,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"        Map\u003cString, Instant\u003e studentDeadlines \u003d"},{"lineNumber":599,"author":{"gitId":"-"},"content":"                convertDeadlinesToInstant(sessionData.getStudentDeadlines(), sessionData.getTimeZone());"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        Map\u003cString, Instant\u003e instructorDeadlines \u003d"},{"lineNumber":601,"author":{"gitId":"-"},"content":"                convertDeadlinesToInstant(sessionData.getInstructorDeadlines(), sessionData.getTimeZone());"},{"lineNumber":602,"author":{"gitId":"-"},"content":""},{"lineNumber":603,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes sessionAttributes \u003d FeedbackSessionAttributes"},{"lineNumber":604,"author":{"gitId":"-"},"content":"                .builder(sessionData.getFeedbackSessionName(), sessionData.getCourseId())"},{"lineNumber":605,"author":{"gitId":"-"},"content":"                .withInstructions(sessionData.getInstructions())"},{"lineNumber":606,"author":{"gitId":"-"},"content":"                .withStartTime(Instant.ofEpochMilli(sessionData.getSubmissionStartTimestamp()))"},{"lineNumber":607,"author":{"gitId":"-"},"content":"                .withEndTime(Instant.ofEpochMilli(sessionData.getSubmissionEndTimestamp()))"},{"lineNumber":608,"author":{"gitId":"-"},"content":"                .withTimeZone(sessionData.getTimeZone())"},{"lineNumber":609,"author":{"gitId":"-"},"content":"                .withGracePeriod(Duration.ofMinutes(sessionData.getGracePeriod()))"},{"lineNumber":610,"author":{"gitId":"-"},"content":"                .withIsClosingEmailEnabled(sessionData.getIsClosingEmailEnabled())"},{"lineNumber":611,"author":{"gitId":"-"},"content":"                .withIsPublishedEmailEnabled(sessionData.getIsPublishedEmailEnabled())"},{"lineNumber":612,"author":{"gitId":"-"},"content":"                .withStudentDeadlines(studentDeadlines)"},{"lineNumber":613,"author":{"gitId":"-"},"content":"                .withInstructorDeadlines(instructorDeadlines)"},{"lineNumber":614,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":615,"author":{"gitId":"-"},"content":""},{"lineNumber":616,"author":{"gitId":"-"},"content":"        sessionAttributes.setCreatedTime(Instant.ofEpochMilli(sessionData.getCreatedAtTimestamp()));"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"        if (sessionData.getSessionVisibleSetting().equals(SessionVisibleSetting.AT_OPEN)) {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"            sessionAttributes.setSessionVisibleFromTime(Const.TIME_REPRESENTS_FOLLOW_OPENING);"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":621,"author":{"gitId":"-"},"content":"            sessionAttributes.setSessionVisibleFromTime(Instant.ofEpochMilli("},{"lineNumber":622,"author":{"gitId":"-"},"content":"                    sessionData.getCustomSessionVisibleTimestamp()));"},{"lineNumber":623,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":624,"author":{"gitId":"-"},"content":""},{"lineNumber":625,"author":{"gitId":"-"},"content":"        if (sessionData.getResponseVisibleSetting().equals(ResponseVisibleSetting.AT_VISIBLE)) {"},{"lineNumber":626,"author":{"gitId":"-"},"content":"            sessionAttributes.setResultsVisibleFromTime(Const.TIME_REPRESENTS_FOLLOW_VISIBLE);"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        } else if (sessionData.getResponseVisibleSetting().equals(ResponseVisibleSetting.LATER)) {"},{"lineNumber":628,"author":{"gitId":"-"},"content":"            sessionAttributes.setResultsVisibleFromTime(Const.TIME_REPRESENTS_LATER);"},{"lineNumber":629,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":630,"author":{"gitId":"-"},"content":"            sessionAttributes.setResultsVisibleFromTime(Instant.ofEpochMilli("},{"lineNumber":631,"author":{"gitId":"-"},"content":"                    sessionData.getCustomResponseVisibleTimestamp()));"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"        return sessionAttributes;"},{"lineNumber":635,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"    private Map\u003cString, Instant\u003e convertDeadlinesToInstant(Map\u003cString, Long\u003e deadlines, String timezone) {"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        return deadlines.entrySet()"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                .collect(Collectors.toMap(Map.Entry::getKey, entry -\u003e {"},{"lineNumber":641,"author":{"gitId":"-"},"content":"                    Instant deadline \u003d Instant.ofEpochMilli(entry.getValue());"},{"lineNumber":642,"author":{"gitId":"-"},"content":"                    return TimeHelper.getMidnightAdjustedInstantBasedOnZone(deadline, timezone, true);"},{"lineNumber":643,"author":{"gitId":"-"},"content":"                }));"},{"lineNumber":644,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":647,"author":{"gitId":"-"},"content":"     * Get soft deleted feedback session from database."},{"lineNumber":648,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":649,"author":{"gitId":"-"},"content":"    public FeedbackSessionAttributes getSoftDeletedSession(String feedbackSessionName, String instructorId) {"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.ENTITY_TYPE, Const.EntityType.INSTRUCTOR);"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.IS_IN_RECYCLE_BIN, \"true\");"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.USER_ID, instructorId);"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.SESSIONS, params);"},{"lineNumber":655,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":656,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":658,"author":{"gitId":"-"},"content":""},{"lineNumber":659,"author":{"gitId":"-"},"content":"        FeedbackSessionsData sessionsData \u003d JsonUtils.fromJson(response.responseBody, FeedbackSessionsData.class);"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        FeedbackSessionData feedbackSession \u003d sessionsData.getFeedbackSessions()"},{"lineNumber":661,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":662,"author":{"gitId":"-"},"content":"                .filter(fs -\u003e fs.getFeedbackSessionName().equals(feedbackSessionName))"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":664,"author":{"gitId":"-"},"content":"                .orElse(null);"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"        if (feedbackSession \u003d\u003d null) {"},{"lineNumber":667,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"-"},"content":"        return FeedbackSessionAttributes"},{"lineNumber":671,"author":{"gitId":"-"},"content":"                .builder(feedbackSession.getCourseId(), feedbackSession.getFeedbackSessionName())"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":673,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":674,"author":{"gitId":"-"},"content":""},{"lineNumber":675,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":676,"author":{"gitId":"-"},"content":"     * Get feedback question data from database."},{"lineNumber":677,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    public FeedbackQuestionData getFeedbackQuestionData(String courseId, String feedbackSessionName,"},{"lineNumber":679,"author":{"gitId":"-"},"content":"                                                                int qnNumber) {"},{"lineNumber":680,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":681,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":682,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSessionName);"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INTENT, Intent.FULL_DETAIL.toString());"},{"lineNumber":684,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.QUESTIONS, params);"},{"lineNumber":685,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":686,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"        FeedbackQuestionsData questionsData \u003d JsonUtils.fromJson(response.responseBody, FeedbackQuestionsData.class);"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        return questionsData.getQuestions()"},{"lineNumber":691,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":692,"author":{"gitId":"-"},"content":"                .filter(fq -\u003e fq.getQuestionNumber() \u003d\u003d qnNumber)"},{"lineNumber":693,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":694,"author":{"gitId":"-"},"content":"                .orElse(null);"},{"lineNumber":695,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":696,"author":{"gitId":"-"},"content":""},{"lineNumber":697,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":698,"author":{"gitId":"-"},"content":"     * Get feedback question from database."},{"lineNumber":699,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":700,"author":{"gitId":"-"},"content":"    public FeedbackQuestionAttributes getFeedbackQuestion(String courseId, String feedbackSessionName,"},{"lineNumber":701,"author":{"gitId":"-"},"content":"                                                                 int qnNumber) {"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        FeedbackQuestionData question \u003d getFeedbackQuestionData(courseId, feedbackSessionName, qnNumber);"},{"lineNumber":703,"author":{"gitId":"-"},"content":""},{"lineNumber":704,"author":{"gitId":"-"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":705,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes questionAttr \u003d FeedbackQuestionAttributes.builder()"},{"lineNumber":709,"author":{"gitId":"-"},"content":"                .withCourseId(courseId)"},{"lineNumber":710,"author":{"gitId":"-"},"content":"                .withFeedbackSessionName(feedbackSessionName)"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                .withQuestionDetails(question.getQuestionDetails())"},{"lineNumber":712,"author":{"gitId":"-"},"content":"                .withQuestionDescription(question.getQuestionDescription())"},{"lineNumber":713,"author":{"gitId":"-"},"content":"                .withQuestionNumber(question.getQuestionNumber())"},{"lineNumber":714,"author":{"gitId":"-"},"content":"                .withGiverType(question.getGiverType())"},{"lineNumber":715,"author":{"gitId":"-"},"content":"                .withRecipientType(question.getRecipientType())"},{"lineNumber":716,"author":{"gitId":"-"},"content":"                .withNumberOfEntitiesToGiveFeedbackTo(question.getNumberOfEntitiesToGiveFeedbackToSetting()"},{"lineNumber":717,"author":{"gitId":"-"},"content":"                        .equals(NumberOfEntitiesToGiveFeedbackToSetting.UNLIMITED)"},{"lineNumber":718,"author":{"gitId":"-"},"content":"                        ? Const.MAX_POSSIBLE_RECIPIENTS"},{"lineNumber":719,"author":{"gitId":"-"},"content":"                        : question.getCustomNumberOfEntitiesToGiveFeedbackTo())"},{"lineNumber":720,"author":{"gitId":"-"},"content":"                .withShowResponsesTo(convertToFeedbackParticipantType(question.getShowResponsesTo()))"},{"lineNumber":721,"author":{"gitId":"-"},"content":"                .withShowGiverNameTo(convertToFeedbackParticipantType(question.getShowGiverNameTo()))"},{"lineNumber":722,"author":{"gitId":"-"},"content":"                .withShowRecipientNameTo(convertToFeedbackParticipantType(question.getShowRecipientNameTo()))"},{"lineNumber":723,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":724,"author":{"gitId":"-"},"content":"        if (question.getFeedbackQuestionId() !\u003d null) {"},{"lineNumber":725,"author":{"gitId":"-"},"content":"            questionAttr.setId(question.getFeedbackQuestionId());"},{"lineNumber":726,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        return questionAttr;"},{"lineNumber":728,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":731,"author":{"gitId":"-"},"content":"     * Converts List of FeedbackParticipantType to sorted List of FeedbackVisibilityType."},{"lineNumber":732,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":733,"author":{"gitId":"-"},"content":"    private static List\u003cFeedbackParticipantType\u003e convertToFeedbackParticipantType("},{"lineNumber":734,"author":{"gitId":"-"},"content":"            List\u003cFeedbackVisibilityType\u003e feedbackVisibilityTypeList) {"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e feedbackParticipantTypeList \u003d feedbackVisibilityTypeList.stream()"},{"lineNumber":736,"author":{"gitId":"-"},"content":"                .map(feedbackParticipantType -\u003e {"},{"lineNumber":737,"author":{"gitId":"-"},"content":"                    switch (feedbackParticipantType) {"},{"lineNumber":738,"author":{"gitId":"-"},"content":"                    case STUDENTS:"},{"lineNumber":739,"author":{"gitId":"-"},"content":"                        return FeedbackParticipantType.STUDENTS;"},{"lineNumber":740,"author":{"gitId":"-"},"content":"                    case INSTRUCTORS:"},{"lineNumber":741,"author":{"gitId":"-"},"content":"                        return FeedbackParticipantType.INSTRUCTORS;"},{"lineNumber":742,"author":{"gitId":"-"},"content":"                    case RECIPIENT:"},{"lineNumber":743,"author":{"gitId":"-"},"content":"                        return FeedbackParticipantType.RECEIVER;"},{"lineNumber":744,"author":{"gitId":"-"},"content":"                    case GIVER_TEAM_MEMBERS:"},{"lineNumber":745,"author":{"gitId":"-"},"content":"                        return FeedbackParticipantType.OWN_TEAM_MEMBERS;"},{"lineNumber":746,"author":{"gitId":"-"},"content":"                    case RECIPIENT_TEAM_MEMBERS:"},{"lineNumber":747,"author":{"gitId":"-"},"content":"                        return FeedbackParticipantType.RECEIVER_TEAM_MEMBERS;"},{"lineNumber":748,"author":{"gitId":"-"},"content":"                    default:"},{"lineNumber":749,"author":{"gitId":"-"},"content":"                        throw new RuntimeException(\"Unknown FeedbackVisibilityType \" + feedbackParticipantType);"},{"lineNumber":750,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":751,"author":{"gitId":"-"},"content":"                }).collect(Collectors.toList());"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        Collections.sort(feedbackParticipantTypeList);"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        return feedbackParticipantTypeList;"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":755,"author":{"gitId":"-"},"content":""},{"lineNumber":756,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":757,"author":{"gitId":"-"},"content":"     * Get feedback response data from database."},{"lineNumber":758,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":759,"author":{"gitId":"-"},"content":"    public FeedbackResponseData getFeedbackResponseData(String feedbackQuestionId, String giver,"},{"lineNumber":760,"author":{"gitId":"-"},"content":"                                                                String recipient) {"},{"lineNumber":761,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":762,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_QUESTION_ID, feedbackQuestionId);"},{"lineNumber":763,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString());"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_SESSION_MODERATED_PERSON, giver);"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.RESPONSES, params);"},{"lineNumber":766,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":767,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":768,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":769,"author":{"gitId":"-"},"content":""},{"lineNumber":770,"author":{"gitId":"-"},"content":"        FeedbackResponsesData responsesData \u003d JsonUtils.fromJson(response.responseBody, FeedbackResponsesData.class);"},{"lineNumber":771,"author":{"gitId":"-"},"content":"        return responsesData.getResponses()"},{"lineNumber":772,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":773,"author":{"gitId":"-"},"content":"                .filter(r -\u003e r.getGiverIdentifier().equals(giver) \u0026\u0026 r.getRecipientIdentifier().equals(recipient))"},{"lineNumber":774,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":775,"author":{"gitId":"-"},"content":"                .orElse(null);"},{"lineNumber":776,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":777,"author":{"gitId":"-"},"content":""},{"lineNumber":778,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":779,"author":{"gitId":"-"},"content":"     * Get feedback response from database."},{"lineNumber":780,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":781,"author":{"gitId":"-"},"content":"    public FeedbackResponseAttributes getFeedbackResponse(String feedbackQuestionId, String giver,"},{"lineNumber":782,"author":{"gitId":"-"},"content":"                                                                 String recipient) {"},{"lineNumber":783,"author":{"gitId":"-"},"content":"        FeedbackResponseData fr \u003d getFeedbackResponseData(feedbackQuestionId, giver, recipient);"},{"lineNumber":784,"author":{"gitId":"-"},"content":""},{"lineNumber":785,"author":{"gitId":"-"},"content":"        if (fr \u003d\u003d null) {"},{"lineNumber":786,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":788,"author":{"gitId":"-"},"content":""},{"lineNumber":789,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes responseAttr \u003d FeedbackResponseAttributes"},{"lineNumber":790,"author":{"gitId":"-"},"content":"                .builder(feedbackQuestionId, fr.getGiverIdentifier(), fr.getRecipientIdentifier())"},{"lineNumber":791,"author":{"gitId":"-"},"content":"                .withResponseDetails(fr.getResponseDetails())"},{"lineNumber":792,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":793,"author":{"gitId":"-"},"content":"        if (fr.getFeedbackResponseId() !\u003d null) {"},{"lineNumber":794,"author":{"gitId":"-"},"content":"            responseAttr.setId(fr.getFeedbackResponseId());"},{"lineNumber":795,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":796,"author":{"gitId":"-"},"content":"        return responseAttr;"},{"lineNumber":797,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":798,"author":{"gitId":"-"},"content":""},{"lineNumber":799,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":800,"author":{"gitId":"-"},"content":"     * Get feedback response comment from database."},{"lineNumber":801,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":802,"author":{"gitId":"-"},"content":"    public FeedbackResponseCommentAttributes getFeedbackResponseComment(String feedbackResponseId) {"},{"lineNumber":803,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":804,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_RESPONSE_ID, feedbackResponseId);"},{"lineNumber":805,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INTENT, Intent.STUDENT_SUBMISSION.toString());"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.RESPONSE_COMMENT, params);"},{"lineNumber":807,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":808,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":810,"author":{"gitId":"-"},"content":""},{"lineNumber":811,"author":{"gitId":"-"},"content":"        FeedbackResponseCommentData frc \u003d JsonUtils.fromJson(response.responseBody, FeedbackResponseCommentData.class);"},{"lineNumber":812,"author":{"gitId":"-"},"content":""},{"lineNumber":813,"author":{"gitId":"-"},"content":"        if (frc \u003d\u003d null) {"},{"lineNumber":814,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":815,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":816,"author":{"gitId":"-"},"content":""},{"lineNumber":817,"author":{"gitId":"-"},"content":"        return FeedbackResponseCommentAttributes.builder()"},{"lineNumber":818,"author":{"gitId":"-"},"content":"                .withCommentGiver(frc.getCommentGiver())"},{"lineNumber":819,"author":{"gitId":"-"},"content":"                .withCommentText(frc.getCommentText())"},{"lineNumber":820,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":821,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":822,"author":{"gitId":"-"},"content":""},{"lineNumber":823,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":824,"author":{"gitId":"-"},"content":"     * Deletes a course from the database."},{"lineNumber":825,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":826,"author":{"gitId":"-"},"content":"    public void deleteCourse(String courseId) {"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":828,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":829,"author":{"gitId":"-"},"content":"        executeDeleteRequest(Const.ResourceURIs.COURSE, params);"},{"lineNumber":830,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":831,"author":{"gitId":"-"},"content":""},{"lineNumber":832,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":833,"author":{"gitId":"-"},"content":"     * Gets an account request from the database."},{"lineNumber":834,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":835,"author":{"gitId":"-"},"content":"    public AccountRequestAttributes getAccountRequest(String email, String institute) {"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_EMAIL, email);"},{"lineNumber":838,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_INSTITUTION, institute);"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.ACCOUNT_REQUEST, params);"},{"lineNumber":841,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":842,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":843,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":844,"author":{"gitId":"-"},"content":""},{"lineNumber":845,"author":{"gitId":"-"},"content":"        AccountRequestData accountRequestData \u003d JsonUtils.fromJson(response.responseBody, AccountRequestData.class);"},{"lineNumber":846,"author":{"gitId":"-"},"content":""},{"lineNumber":847,"author":{"gitId":"-"},"content":"        return AccountRequestAttributes"},{"lineNumber":848,"author":{"gitId":"-"},"content":"                .builder(accountRequestData.getEmail(), accountRequestData.getInstitute(), accountRequestData.getName())"},{"lineNumber":849,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":850,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":851,"author":{"gitId":"-"},"content":""},{"lineNumber":852,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":853,"author":{"gitId":"-"},"content":"     * Gets registration key of an account request from the database."},{"lineNumber":854,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":855,"author":{"gitId":"-"},"content":"    public String getRegKeyForAccountRequest(String email, String institute) {"},{"lineNumber":856,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":857,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_EMAIL, email);"},{"lineNumber":858,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_INSTITUTION, institute);"},{"lineNumber":859,"author":{"gitId":"-"},"content":""},{"lineNumber":860,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.ACCOUNT_REQUEST, params);"},{"lineNumber":861,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":862,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":863,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":864,"author":{"gitId":"-"},"content":""},{"lineNumber":865,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, AccountRequestData.class).getRegistrationKey();"},{"lineNumber":866,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":867,"author":{"gitId":"-"},"content":""},{"lineNumber":868,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":869,"author":{"gitId":"-"},"content":"     * Deletes an account request from the database."},{"lineNumber":870,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":871,"author":{"gitId":"-"},"content":"    public void deleteAccountRequest(String email, String institute) {"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":873,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_EMAIL, email);"},{"lineNumber":874,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.INSTRUCTOR_INSTITUTION, institute);"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        executeDeleteRequest(Const.ResourceURIs.ACCOUNT_REQUEST, params);"},{"lineNumber":876,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":877,"author":{"gitId":"-"},"content":""},{"lineNumber":878,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":879,"author":{"gitId":"-"},"content":"     * Gets notification data from the database."},{"lineNumber":880,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":881,"author":{"gitId":"-"},"content":"    public NotificationData getNotificationData(String notificationId) {"},{"lineNumber":882,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":883,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.NOTIFICATION_ID, notificationId);"},{"lineNumber":884,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.NOTIFICATION, params);"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":886,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":887,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":888,"author":{"gitId":"-"},"content":"        return JsonUtils.fromJson(response.responseBody, NotificationData.class);"},{"lineNumber":889,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":890,"author":{"gitId":"-"},"content":""},{"lineNumber":891,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":892,"author":{"gitId":"-"},"content":"     * Gets a notification from the database."},{"lineNumber":893,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":894,"author":{"gitId":"-"},"content":"    public NotificationAttributes getNotification(String notificationId) {"},{"lineNumber":895,"author":{"gitId":"-"},"content":"        NotificationData notificationData \u003d getNotificationData(notificationId);"},{"lineNumber":896,"author":{"gitId":"-"},"content":"        if (notificationData \u003d\u003d null) {"},{"lineNumber":897,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":898,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":899,"author":{"gitId":"-"},"content":"        NotificationAttributes notification \u003d NotificationAttributes.builder(notificationData.getNotificationId())"},{"lineNumber":900,"author":{"gitId":"-"},"content":"                .withStartTime(Instant.ofEpochMilli(notificationData.getStartTimestamp()))"},{"lineNumber":901,"author":{"gitId":"-"},"content":"                .withEndTime(Instant.ofEpochMilli(notificationData.getEndTimestamp()))"},{"lineNumber":902,"author":{"gitId":"-"},"content":"                .withStyle(notificationData.getStyle())"},{"lineNumber":903,"author":{"gitId":"-"},"content":"                .withTargetUser(notificationData.getTargetUser())"},{"lineNumber":904,"author":{"gitId":"-"},"content":"                .withTitle(notificationData.getTitle())"},{"lineNumber":905,"author":{"gitId":"-"},"content":"                .withMessage(notificationData.getMessage())"},{"lineNumber":906,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":907,"author":{"gitId":"-"},"content":"        notification.setCreatedAt(Instant.ofEpochMilli(notificationData.getCreatedAt()));"},{"lineNumber":908,"author":{"gitId":"-"},"content":"        return notification;"},{"lineNumber":909,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":910,"author":{"gitId":"-"},"content":""},{"lineNumber":911,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":912,"author":{"gitId":"-"},"content":"     * Deletes a notification from the database."},{"lineNumber":913,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":914,"author":{"gitId":"-"},"content":"    public void deleteNotification(String notificationId) {"},{"lineNumber":915,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":916,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.NOTIFICATION_ID, notificationId);"},{"lineNumber":917,"author":{"gitId":"-"},"content":"        executeDeleteRequest(Const.ResourceURIs.NOTIFICATION, params);"},{"lineNumber":918,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":919,"author":{"gitId":"-"},"content":""},{"lineNumber":920,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":921,"author":{"gitId":"-"},"content":"     * Deletes a notification from the database."},{"lineNumber":922,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":923,"author":{"gitId":"-"},"content":"    public void deleteNotification(UUID notificationId) {"},{"lineNumber":924,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":925,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.NOTIFICATION_ID, notificationId.toString());"},{"lineNumber":926,"author":{"gitId":"-"},"content":"        executeDeleteRequest(Const.ResourceURIs.NOTIFICATION, params);"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":930,"author":{"gitId":"-"},"content":"     * Gets a deadline extension from the database."},{"lineNumber":931,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":932,"author":{"gitId":"-"},"content":"    public DeadlineExtensionAttributes getDeadlineExtension("},{"lineNumber":933,"author":{"gitId":"-"},"content":"            String courseId, String feedbackSessionName, String userEmail, boolean isInstructor) {"},{"lineNumber":934,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":935,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.COURSE_ID, courseId);"},{"lineNumber":936,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.FEEDBACK_SESSION_NAME, feedbackSessionName);"},{"lineNumber":937,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.USER_EMAIL, userEmail);"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        params.put(Const.ParamsNames.IS_INSTRUCTOR, Boolean.toString(isInstructor));"},{"lineNumber":939,"author":{"gitId":"-"},"content":""},{"lineNumber":940,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode response \u003d executeGetRequest(Const.ResourceURIs.DEADLINE_EXTENSION, params);"},{"lineNumber":941,"author":{"gitId":"-"},"content":"        if (response.responseCode \u003d\u003d HttpStatus.SC_NOT_FOUND) {"},{"lineNumber":942,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":944,"author":{"gitId":"-"},"content":""},{"lineNumber":945,"author":{"gitId":"-"},"content":"        DeadlineExtensionData deadlineExtensionData \u003d JsonUtils.fromJson(response.responseBody, DeadlineExtensionData.class);"},{"lineNumber":946,"author":{"gitId":"-"},"content":""},{"lineNumber":947,"author":{"gitId":"-"},"content":"        return DeadlineExtensionAttributes.builder("},{"lineNumber":948,"author":{"gitId":"-"},"content":"                deadlineExtensionData.getCourseId(), deadlineExtensionData.getFeedbackSessionName(),"},{"lineNumber":949,"author":{"gitId":"-"},"content":"                deadlineExtensionData.getUserEmail(), deadlineExtensionData.getIsInstructor())"},{"lineNumber":950,"author":{"gitId":"-"},"content":"                .withEndTime(Instant.ofEpochMilli(deadlineExtensionData.getEndTime()))"},{"lineNumber":951,"author":{"gitId":"-"},"content":"                .withSentClosingEmail(deadlineExtensionData.getSentClosingEmail())"},{"lineNumber":952,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":953,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":954,"author":{"gitId":"-"},"content":""},{"lineNumber":955,"author":{"gitId":"-"},"content":"    private static final class ResponseBodyAndCode {"},{"lineNumber":956,"author":{"gitId":"-"},"content":""},{"lineNumber":957,"author":{"gitId":"-"},"content":"        String responseBody;"},{"lineNumber":958,"author":{"gitId":"-"},"content":"        int responseCode;"},{"lineNumber":959,"author":{"gitId":"-"},"content":""},{"lineNumber":960,"author":{"gitId":"-"},"content":"        ResponseBodyAndCode(String responseBody, int responseCode) {"},{"lineNumber":961,"author":{"gitId":"-"},"content":"            this.responseBody \u003d responseBody;"},{"lineNumber":962,"author":{"gitId":"-"},"content":"            this.responseCode \u003d responseCode;"},{"lineNumber":963,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":964,"author":{"gitId":"-"},"content":""},{"lineNumber":965,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":966,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":11,"-":955}},{"path":"src/test/java/teammates/test/BaseTestCase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.lang.reflect.Method;"},{"lineNumber":5,"author":{"gitId":"dishenggg"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":23,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"},{"lineNumber":25,"author":{"gitId":"xenosf"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.TimeHelperExtension;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.DataBundleLogic;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":32,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":35,"author":{"gitId":"xenosf"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":36,"author":{"gitId":"mingyuanc"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitId":"-"},"content":" * Base class for all test cases."},{"lineNumber":46,"author":{"gitId":"-"},"content":" */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class BaseTestCase {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Test Segment divider. Used to divide a test case into logical sections."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * The weird name is for easy spotting."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param description"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *            of the logical section. This will be printed."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // CHECKSTYLE.OFF:AbbreviationAsWordInName|MethodName the weird name is for easy spotting."},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static void ______TS(String description) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        print(\" * \" + description);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // CHECKSTYLE.ON:AbbreviationAsWordInName|MethodName"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void printTestClassHeader() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        print(\"[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + getClass().getCanonicalName()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d]\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void printTestClassFooter() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        print(getClass().getCanonicalName() + \" completed\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected static void print(String message) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        System.out.println(message);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates a DataBundle as specified in typicalDataBundle.json."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    protected DataBundle getTypicalDataBundle() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return loadDataBundle(\"/typicalDataBundle.json\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    protected DataBundle loadDataBundle(String jsonFileName) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            String pathToJsonFile \u003d getTestDataFolder() + jsonFileName;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            String jsonString \u003d FileHelper.readFile(pathToJsonFile);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return JsonUtils.fromJson(jsonString, DataBundle.class);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    protected SqlDataBundle getTypicalSqlDataBundle() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return loadSqlDataBundle(\"/typicalDataBundle.json\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    protected SqlDataBundle loadSqlDataBundle(String jsonFileName) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            // TODO: rename to loadDataBundle after migration"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            String pathToJsonFile \u003d getTestDataFolder() + jsonFileName;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            String jsonString \u003d FileHelper.readFile(pathToJsonFile);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return DataBundleLogic.deserializeDataBundle(jsonString);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * These getTypicalX functions are used to generate typical entities for tests."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * The entity fields can be changed using setter methods if needed."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * New entity generator functions for tests should be added here, and follow the"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * same naming convention."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * \u003cp\u003eExample usage:"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Account account \u003d getTypicalAccount();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Student student \u003d getTypicalStudent();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * account.setEmail(\"newemail@teammates.com\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * student.setName(\"New Student Name\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    protected Account getTypicalAccount() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new Account(\"google-id\", \"name\", \"email@teammates.com\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    protected Notification getTypicalNotificationWithId() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Notification notification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        notification.setId(UUID.randomUUID());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return notification;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    protected Instructor getTypicalInstructor() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        InstructorPrivileges instructorPrivileges \u003d"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                new InstructorPrivileges(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        InstructorPermissionRole role \u003d InstructorPermissionRole"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .getEnum(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return new Instructor(course, \"instructor-name\", \"valid@teammates.tmt\","},{"lineNumber":146,"author":{"gitId":"-"},"content":"                false, Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR, role, instructorPrivileges);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    protected Course getTypicalCourse() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return new Course(\"course-id\", \"course-name\", Const.DEFAULT_TIME_ZONE, \"teammates\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    protected Student getTypicalStudent() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return new Student(course, \"student-name\", \"validstudent@teammates.tmt\", \"comments\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    protected Section getTypicalSection() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Course course \u003d getTypicalCourse();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return new Section(course, \"test-section\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    protected Team getTypicalTeam() {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Section section \u003d getTypicalSection();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return new Team(section, \"test-team\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    protected FeedbackSession getTypicalFeedbackSessionForCourse(Course course) {"},{"lineNumber":169,"author":{"gitId":"dishenggg"},"content":"        Instant startTime \u003d TimeHelperExtension.getInstantDaysOffsetFromNow(1);"},{"lineNumber":170,"author":{"gitId":"dishenggg"},"content":"        Instant endTime \u003d TimeHelperExtension.getInstantDaysOffsetFromNow(7);"},{"lineNumber":171,"author":{"gitId":"dishenggg"},"content":"        return new FeedbackSession(\"test-feedbacksession\","},{"lineNumber":172,"author":{"gitId":"dishenggg"},"content":"                course,"},{"lineNumber":173,"author":{"gitId":"dishenggg"},"content":"                \"test@teammates.tmt\","},{"lineNumber":174,"author":{"gitId":"dishenggg"},"content":"                \"test-instructions\","},{"lineNumber":175,"author":{"gitId":"dishenggg"},"content":"                startTime,"},{"lineNumber":176,"author":{"gitId":"dishenggg"},"content":"                endTime,"},{"lineNumber":177,"author":{"gitId":"dishenggg"},"content":"                startTime,"},{"lineNumber":178,"author":{"gitId":"dishenggg"},"content":"                endTime,"},{"lineNumber":179,"author":{"gitId":"dishenggg"},"content":"                Duration.ofMinutes(5),"},{"lineNumber":180,"author":{"gitId":"dishenggg"},"content":"                false,"},{"lineNumber":181,"author":{"gitId":"dishenggg"},"content":"                false,"},{"lineNumber":182,"author":{"gitId":"dishenggg"},"content":"                false);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    protected FeedbackQuestion getTypicalFeedbackQuestionForSession(FeedbackSession session) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return FeedbackQuestion.makeQuestion(session, 1, \"test-description\","},{"lineNumber":187,"author":{"gitId":"-"},"content":"                FeedbackParticipantType.SELF, FeedbackParticipantType.SELF, 1, new ArrayList\u003cFeedbackParticipantType\u003e(),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                new ArrayList\u003cFeedbackParticipantType\u003e(), new ArrayList\u003cFeedbackParticipantType\u003e(),"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                new FeedbackTextQuestionDetails(\"test question text\"));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"xenosf"},"content":"    protected FeedbackResponse getTypicalFeedbackResponseForQuestion(FeedbackQuestion question) {"},{"lineNumber":193,"author":{"gitId":"xenosf"},"content":"        return FeedbackResponse.makeResponse(question, \"test-giver\", getTypicalSection(), \"test-recipient\","},{"lineNumber":194,"author":{"gitId":"xenosf"},"content":"                getTypicalSection(), getTypicalFeedbackResponseDetails());"},{"lineNumber":195,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":197,"author":{"gitId":"xenosf"},"content":"    protected FeedbackResponseDetails getTypicalFeedbackResponseDetails() {"},{"lineNumber":198,"author":{"gitId":"xenosf"},"content":"        return new FeedbackTextResponseDetails();"},{"lineNumber":199,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":201,"author":{"gitId":"mingyuanc"},"content":"    protected FeedbackResponseComment getTypicalResponseComment(Long id) {"},{"lineNumber":202,"author":{"gitId":"mingyuanc"},"content":"        FeedbackResponseComment comment \u003d new FeedbackResponseComment(null, \"\","},{"lineNumber":203,"author":{"gitId":"mingyuanc"},"content":"                FeedbackParticipantType.STUDENTS, null, null, \"\","},{"lineNumber":204,"author":{"gitId":"mingyuanc"},"content":"                false, false,"},{"lineNumber":205,"author":{"gitId":"mingyuanc"},"content":"                null, null, null);"},{"lineNumber":206,"author":{"gitId":"mingyuanc"},"content":"        comment.setId(id);"},{"lineNumber":207,"author":{"gitId":"mingyuanc"},"content":"        return comment;"},{"lineNumber":208,"author":{"gitId":"mingyuanc"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"mingyuanc"},"content":""},{"lineNumber":210,"author":{"gitId":"xenosf"},"content":"    protected AccountRequest getTypicalAccountRequest() {"},{"lineNumber":211,"author":{"gitId":"xenosf"},"content":"        return new AccountRequest(\"valid@test.com\", \"Test account Name\", \"TEAMMATES Test Institute 1\");"},{"lineNumber":212,"author":{"gitId":"xenosf"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"xenosf"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Populates the feedback question and response IDs within the data bundle."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFor tests where simulated database is used, the backend will assign the question and response IDs"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * when the entities are persisted into the database, and modify the relation IDs accordingly."},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * However, for tests that do not use simulated database (e.g. pure data structure tests),"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * the assignment of IDs have to be simulated."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    protected void populateQuestionAndResponseIds(DataBundle dataBundle) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        Map\u003cString, Map\u003cInteger, String\u003e\u003e sessionToQuestionNumberToId \u003d new HashMap\u003c\u003e();"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        dataBundle.feedbackQuestions.forEach((key, question) -\u003e {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // Assign the same ID as the key as a later function requires a match between the key and the question ID"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            question.setId(key);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            Map\u003cInteger, String\u003e questionNumberToId \u003d sessionToQuestionNumberToId.computeIfAbsent("},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    question.getCourseId() + \"%\" + question.getFeedbackSessionName(), k -\u003e new HashMap\u003c\u003e());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            questionNumberToId.put(question.getQuestionNumber(), key);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        dataBundle.feedbackResponses.forEach((key, response) -\u003e {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            response.setId(key);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            String feedbackQuestionId \u003d sessionToQuestionNumberToId"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    .get(response.getCourseId() + \"%\" + response.getFeedbackSessionName())"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    .get(Integer.valueOf(response.getFeedbackQuestionId()));"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            response.setFeedbackQuestionId(feedbackQuestionId);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Invokes the method named {@code methodName} as defined in the {@code definingClass}."},{"lineNumber":244,"author":{"gitId":"-"},"content":"     * @param definingClass     the class which defines the method"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * @param parameterTypes    the parameter types of the method,"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     *                          which must be passed in the same order defined in the method"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * @param invokingObject    the object which invokes the method, can be {@code null} if the method is static"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @param args              the arguments to be passed to the method invocation"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    protected static Object invokeMethod(Class\u003c?\u003e definingClass, String methodName, Class\u003c?\u003e[] parameterTypes,"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                                         Object invokingObject, Object[] args)"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        Method method \u003d definingClass.getDeclaredMethod(methodName, parameterTypes);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        method.setAccessible(true);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        return method.invoke(invokingObject, args);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    protected static String getPopulatedErrorMessage(String messageTemplate, String userInput,"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                                                     String fieldName, String errorReason)"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        return getPopulatedErrorMessage(messageTemplate, userInput, fieldName, errorReason, 0);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    protected static String getPopulatedErrorMessage(String messageTemplate, String userInput,"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                                                     String fieldName, String errorReason, int maxLength)"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        return (String) invokeMethod(FieldValidator.class, \"getPopulatedErrorMessage\","},{"lineNumber":268,"author":{"gitId":"-"},"content":"                                     new Class\u003c?\u003e[] { String.class, String.class, String.class, String.class, int.class },"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                                     null, new Object[] { messageTemplate, userInput, fieldName, errorReason, maxLength });"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    protected static String getPopulatedEmptyStringErrorMessage(String messageTemplate, String fieldName, int maxLength)"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        return (String) invokeMethod(FieldValidator.class, \"getPopulatedEmptyStringErrorMessage\","},{"lineNumber":275,"author":{"gitId":"-"},"content":"                new Class\u003c?\u003e[] { String.class, String.class, int.class },"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                null, new Object[] { messageTemplate, fieldName, maxLength });"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":280,"author":{"gitId":"-"},"content":"     * Here are some of the most common assertion methods provided by JUnit."},{"lineNumber":281,"author":{"gitId":"-"},"content":"     * They are copied here to prevent repetitive importing in test classes."},{"lineNumber":282,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    protected static void assertTrue(boolean condition) {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        Assert.assertTrue(condition);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    protected static void assertTrue(String message, boolean condition) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        Assert.assertTrue(message, condition);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    protected static void assertFalse(boolean condition) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        Assert.assertFalse(condition);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"    protected static void assertFalse(String message, boolean condition) {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        Assert.assertFalse(message, condition);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    protected static void assertEquals(int expected, int actual) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"    protected static void assertEquals(String message, int expected, int actual) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        Assert.assertEquals(message, expected, actual);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    protected static void assertEquals(long expected, long actual) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"    protected static void assertEquals(double expected, double actual, double delta) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual, delta);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    protected static void assertEquals(Object expected, Object actual) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    protected static void assertEquals(String message, Object expected, Object actual) {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        Assert.assertEquals(message, expected, actual);"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"    protected static void assertArrayEquals(byte[] expected, byte[] actual) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        Assert.assertArrayEquals(expected, actual);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"    protected static void assertNotEquals(Object first, Object second) {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        Assert.assertNotEquals(first, second);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"    protected static void assertSame(Object expected, Object actual) {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        Assert.assertSame(expected, actual);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    protected static void assertNotSame(Object unexpected, Object actual) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        Assert.assertNotSame(unexpected, actual);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"    protected static void assertNull(Object object) {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        Assert.assertNull(object);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"    protected static void assertNull(String message, Object object) {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Assert.assertNull(message, object);"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"    protected static void assertNotNull(Object object) {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        Assert.assertNotNull(object);"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    protected static void assertNotNull(String message, Object object) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        Assert.assertNotNull(message, object);"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    protected static void fail(String message) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        Assert.fail(message);"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"    // This method is adapted from JUnit 5\u0027s assertThrows."},{"lineNumber":361,"author":{"gitId":"-"},"content":"    // Once we upgrade to JUnit 5, their built-in method shall be used instead."},{"lineNumber":362,"author":{"gitId":"-"},"content":"    @SuppressWarnings({"},{"lineNumber":363,"author":{"gitId":"-"},"content":"            \"unchecked\","},{"lineNumber":364,"author":{"gitId":"-"},"content":"            \"PMD.AvoidCatchingThrowable\", // As per reference method\u0027s specification"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    protected static \u003cT extends Throwable\u003e T assertThrows(Class\u003cT\u003e expectedType, Executable executable) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            executable.execute();"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            if (expectedType.isInstance(actualException)) {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                return (T) actualException;"},{"lineNumber":372,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                String message \u003d String.format(\"Expected %s to be thrown, but %s was instead thrown.\","},{"lineNumber":374,"author":{"gitId":"-"},"content":"                        getCanonicalName(expectedType), getCanonicalName(actualException.getClass()));"},{"lineNumber":375,"author":{"gitId":"-"},"content":"                throw new AssertionError(message, actualException);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"        String message \u003d String.format(\"Expected %s to be thrown, but nothing was thrown.\", getCanonicalName(expectedType));"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        throw new AssertionError(message);"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"    private static String getCanonicalName(Class\u003c?\u003e clazz) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        String canonicalName \u003d clazz.getCanonicalName();"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        return canonicalName \u003d\u003d null ? clazz.getName() : canonicalName;"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":389,"author":{"gitId":"-"},"content":"     * {@code Executable} is a functional interface that can be used to"},{"lineNumber":390,"author":{"gitId":"-"},"content":"     * implement any generic block of code that potentially throws a"},{"lineNumber":391,"author":{"gitId":"-"},"content":"     * {@link Throwable}."},{"lineNumber":392,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":393,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe {@code Executable} interface is similar to {@link Runnable},"},{"lineNumber":394,"author":{"gitId":"-"},"content":"     * except that an {@code Executable} can throw any kind of exception."},{"lineNumber":395,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    // This interface is adapted from JUnit 5\u0027s Executable interface."},{"lineNumber":397,"author":{"gitId":"-"},"content":"    // Once we upgrade to JUnit 5, this interface shall no longer be necessary."},{"lineNumber":398,"author":{"gitId":"-"},"content":"    public interface Executable {"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":401,"author":{"gitId":"-"},"content":"         * Executes a block of code, potentially throwing a {@link Throwable}."},{"lineNumber":402,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        // CHECKSTYLE.OFF:IllegalThrows"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        void execute() throws Throwable;"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        // CHECKSTYLE.ON:IllegalThrows"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xenosf":17,"dishenggg":16,"mingyuanc":10,"-":365}},{"path":"src/test/java/teammates/test/BaseTestCaseWithDatabaseAccess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.DeadlineExtensionAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.EntityAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Base class for all test cases which are allowed to access the database."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public abstract class BaseTestCaseWithDatabaseAccess extends BaseTestCase {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final int VERIFICATION_RETRY_COUNT \u003d 5;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final int VERIFICATION_RETRY_DELAY_IN_MS \u003d 1000;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final int OPERATION_RETRY_COUNT \u003d 5;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final int OPERATION_RETRY_DELAY_IN_MS \u003d 1000;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    protected void verifyPresentInDatabase(DataBundle data) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        data.accounts.values().forEach(this::verifyPresentInDatabase);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        data.instructors.values().forEach(this::verifyPresentInDatabase);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        data.courses.values().stream()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .filter(course -\u003e !course.isCourseDeleted())"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .forEach(this::verifyPresentInDatabase);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        data.students.values().forEach(this::verifyPresentInDatabase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected void verifyPresentInDatabase(EntityAttributes\u003c?\u003e expected) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        int retryLimit \u003d VERIFICATION_RETRY_COUNT;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EntityAttributes\u003c?\u003e actual \u003d getEntity(expected);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        while (actual \u003d\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(VERIFICATION_RETRY_DELAY_IN_MS);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            actual \u003d getEntity(expected);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        verifyEquals(expected, actual);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private EntityAttributes\u003c?\u003e getEntity(EntityAttributes\u003c?\u003e expected) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (expected instanceof AccountAttributes) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return getAccount((AccountAttributes) expected);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } else if (expected instanceof CourseAttributes) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return getCourse((CourseAttributes) expected);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackQuestionAttributes) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return getFeedbackQuestion((FeedbackQuestionAttributes) expected);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseCommentAttributes) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return getFeedbackResponseComment((FeedbackResponseCommentAttributes) expected);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseAttributes) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return getFeedbackResponse((FeedbackResponseAttributes) expected);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackSessionAttributes) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return getFeedbackSession((FeedbackSessionAttributes) expected);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } else if (expected instanceof InstructorAttributes) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return getInstructor((InstructorAttributes) expected);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        } else if (expected instanceof StudentAttributes) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return getStudent((StudentAttributes) expected);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        } else if (expected instanceof AccountRequestAttributes) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return getAccountRequest((AccountRequestAttributes) expected);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        } else if (expected instanceof DeadlineExtensionAttributes) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return getDeadlineExtension((DeadlineExtensionAttributes) expected);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } else if (expected instanceof NotificationAttributes) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return getNotification((NotificationAttributes) expected);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown entity type!\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    protected void verifyAbsentInDatabase(EntityAttributes\u003c?\u003e entity) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        int retryLimit \u003d VERIFICATION_RETRY_COUNT;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        EntityAttributes\u003c?\u003e actual \u003d getEntity(entity);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        while (actual !\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(VERIFICATION_RETRY_DELAY_IN_MS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            actual \u003d getEntity(entity);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertNull(actual);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void verifyEquals(EntityAttributes\u003c?\u003e expected, EntityAttributes\u003c?\u003e actual) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (expected instanceof AccountAttributes) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            AccountAttributes expectedAccount \u003d ((AccountAttributes) expected).getCopy();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            AccountAttributes actualAccount \u003d (AccountAttributes) actual;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedAccount, actualAccount);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccount), JsonUtils.toJson(actualAccount));"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } else if (expected instanceof CourseAttributes) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            CourseAttributes expectedCourse \u003d (CourseAttributes) expected;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            CourseAttributes actualCourse \u003d (CourseAttributes) actual;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedCourse, actualCourse);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedCourse), JsonUtils.toJson(actualCourse));"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackQuestionAttributes) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes expectedFq \u003d (FeedbackQuestionAttributes) expected;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes actualFq \u003d (FeedbackQuestionAttributes) actual;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedFq, actualFq);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedFq), JsonUtils.toJson(actualFq));"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseCommentAttributes) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentAttributes expectedFrc \u003d (FeedbackResponseCommentAttributes) expected;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentAttributes actualFrc \u003d (FeedbackResponseCommentAttributes) actual;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            assertEquals(expectedFrc.getCourseId(), actualFrc.getCourseId());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            assertEquals(expectedFrc.getCommentGiver(), actualFrc.getCommentGiver());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            assertEquals(expectedFrc.getFeedbackSessionName(), actualFrc.getFeedbackSessionName());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            assertEquals(expectedFrc.getCommentText(), actualFrc.getCommentText());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseAttributes) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes expectedFr \u003d (FeedbackResponseAttributes) expected;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes actualFr \u003d (FeedbackResponseAttributes) actual;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedFr, actualFr);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedFr), JsonUtils.toJson(actualFr));"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackSessionAttributes) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            FeedbackSessionAttributes expectedFs \u003d ((FeedbackSessionAttributes) expected).getCopy();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            FeedbackSessionAttributes actualFs \u003d (FeedbackSessionAttributes) actual;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedFs, actualFs);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedFs), JsonUtils.toJson(actualFs));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } else if (expected instanceof InstructorAttributes) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            InstructorAttributes expectedInstructor \u003d ((InstructorAttributes) expected).getCopy();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            InstructorAttributes actualInstructor \u003d (InstructorAttributes) actual;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedInstructor, actualInstructor);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedInstructor), JsonUtils.toJson(actualInstructor));"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } else if (expected instanceof StudentAttributes) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            StudentAttributes expectedStudent \u003d ((StudentAttributes) expected).getCopy();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            StudentAttributes actualStudent \u003d (StudentAttributes) actual;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedStudent, actualStudent);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedStudent), JsonUtils.toJson(actualStudent));"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } else if (expected instanceof AccountRequestAttributes) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            AccountRequestAttributes expectedAccountRequest \u003d (AccountRequestAttributes) expected;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            AccountRequestAttributes actualAccountRequest \u003d (AccountRequestAttributes) actual;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccountRequest), JsonUtils.toJson(actualAccountRequest));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        } else if (expected instanceof DeadlineExtensionAttributes) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            DeadlineExtensionAttributes expectedDeadlineExtension \u003d (DeadlineExtensionAttributes) expected;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            DeadlineExtensionAttributes actualDeadlineExtension \u003d (DeadlineExtensionAttributes) actual;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedDeadlineExtension, actualDeadlineExtension);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedDeadlineExtension), JsonUtils.toJson(actualDeadlineExtension));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } else if (expected instanceof NotificationAttributes) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            NotificationAttributes expectedNotification \u003d (NotificationAttributes) expected;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            NotificationAttributes actualNotification \u003d (NotificationAttributes) actual;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedNotification, actualNotification);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedNotification), JsonUtils.toJson(actualNotification));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown entity type!\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    protected abstract AccountAttributes getAccount(AccountAttributes account);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(AccountAttributes expected, AccountAttributes actual) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(CourseAttributes expected, CourseAttributes actual) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackQuestionAttributes expected, FeedbackQuestionAttributes actual) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        expected.setId(actual.getId());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackResponseAttributes expected, FeedbackResponseAttributes actual) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        expected.setId(actual.getId());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackSessionAttributes expected, FeedbackSessionAttributes actual) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        expected.setCreatedTime(actual.getCreatedTime());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // Not available in FeedbackSessionData and thus ignored"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        expected.setCreatorEmail(actual.getCreatorEmail());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(InstructorAttributes expected, InstructorAttributes actual) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // pretend keys match because the key is generated only before storing into database"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        if (actual.getKey() !\u003d null) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            expected.setKey(actual.getKey());"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(StudentAttributes expected, StudentAttributes actual) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // For these fields, we consider null and \"\" equivalent."},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (expected.getGoogleId() \u003d\u003d null \u0026\u0026 actual.getGoogleId().isEmpty()) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            expected.setGoogleId(\"\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (expected.getTeam() \u003d\u003d null \u0026\u0026 actual.getTeam().isEmpty()) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            expected.setTeam(\"\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        if (expected.getComments() \u003d\u003d null \u0026\u0026 actual.getComments().isEmpty()) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            expected.setComments(\"\");"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // pretend keys match because the key is generated only before storing into database"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (actual.getKey() !\u003d null) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            expected.setKey(actual.getKey());"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(DeadlineExtensionAttributes expected, DeadlineExtensionAttributes actual) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(NotificationAttributes expected, NotificationAttributes actual) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    protected abstract CourseAttributes getCourse(CourseAttributes course);"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    protected abstract FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq);"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    protected abstract FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc);"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    protected abstract FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr);"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    protected abstract FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs);"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    protected abstract InstructorAttributes getInstructor(InstructorAttributes instructor);"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    protected abstract StudentAttributes getStudent(StudentAttributes student);"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    protected abstract AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest);"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    protected abstract DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes accountRequest);"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    protected abstract NotificationAttributes getNotification(NotificationAttributes notification);"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    protected void removeAndRestoreDataBundle(DataBundle testData) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        int retryLimit \u003d OPERATION_RETRY_COUNT;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        boolean isOperationSuccess \u003d doRemoveAndRestoreDataBundle(testData);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        while (!isOperationSuccess \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            print(\"Re-trying removeAndRestoreDataBundle\");"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(OPERATION_RETRY_DELAY_IN_MS);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            isOperationSuccess \u003d doRemoveAndRestoreDataBundle(testData);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        assertTrue(isOperationSuccess);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    protected abstract boolean doRemoveAndRestoreDataBundle(DataBundle testData);"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    protected SqlDataBundle removeAndRestoreSqlDataBundle(SqlDataBundle testData) {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        int retryLimit \u003d OPERATION_RETRY_COUNT;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        SqlDataBundle dataBundle \u003d doRemoveAndRestoreSqlDataBundle(testData);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        while (dataBundle \u003d\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            print(\"Re-trying removeAndRestoreDataBundle\");"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(OPERATION_RETRY_DELAY_IN_MS);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            dataBundle \u003d doRemoveAndRestoreSqlDataBundle(testData);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        assertNotNull(dataBundle);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return dataBundle;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    protected abstract SqlDataBundle doRemoveAndRestoreSqlDataBundle(SqlDataBundle testData);"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    protected void putDocuments(DataBundle testData) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        int retryLimit \u003d OPERATION_RETRY_COUNT;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        boolean isOperationSuccess \u003d doPutDocuments(testData);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        while (!isOperationSuccess \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            print(\"Re-trying putDocuments\");"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(OPERATION_RETRY_DELAY_IN_MS);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            isOperationSuccess \u003d doPutDocuments(testData);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        assertTrue(isOperationSuccess);"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"    protected abstract boolean doPutDocuments(DataBundle testData);"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"domoberzin"},"content":"    protected void putSqlDocuments(SqlDataBundle testData) {"},{"lineNumber":302,"author":{"gitId":"domoberzin"},"content":"        int retryLimit \u003d OPERATION_RETRY_COUNT;"},{"lineNumber":303,"author":{"gitId":"domoberzin"},"content":"        boolean isOperationSuccess \u003d doPutDocumentsSql(testData);"},{"lineNumber":304,"author":{"gitId":"domoberzin"},"content":"        while (!isOperationSuccess \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":305,"author":{"gitId":"domoberzin"},"content":"            retryLimit--;"},{"lineNumber":306,"author":{"gitId":"domoberzin"},"content":"            print(\"Re-trying putSqlDocuments\");"},{"lineNumber":307,"author":{"gitId":"domoberzin"},"content":"            ThreadHelper.waitFor(OPERATION_RETRY_DELAY_IN_MS);"},{"lineNumber":308,"author":{"gitId":"domoberzin"},"content":"            isOperationSuccess \u003d doPutDocumentsSql(testData);"},{"lineNumber":309,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":310,"author":{"gitId":"domoberzin"},"content":"        assertTrue(isOperationSuccess);"},{"lineNumber":311,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":313,"author":{"gitId":"domoberzin"},"content":"    protected abstract boolean doPutDocumentsSql(SqlDataBundle testData);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":13,"-":301}},{"path":"src/test/java/teammates/test/BaseTestCaseWithLocalDatabaseAccess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testcontainers.containers.PostgreSQLContainer;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterSuite;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeSuite;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.google.cloud.datastore.DatastoreOptions;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.google.cloud.datastore.testing.LocalDatastoreHelper;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.ObjectifyFactory;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.ObjectifyService;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.googlecode.objectify.util.Closeable;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.DeadlineExtensionAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.logic.api.LogicExtension;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.logic.core.LogicStarter;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.sqllogic.api.Logic;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.storage.api.OfyHelper;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import teammates.storage.search.AccountRequestSearchManager;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import teammates.storage.search.InstructorSearchManager;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import teammates.storage.search.SearchManagerFactory;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import teammates.storage.search.StudentSearchManager;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitId":"-"},"content":" * Base class for all tests which require access to a locally run database."},{"lineNumber":44,"author":{"gitId":"-"},"content":" *"},{"lineNumber":45,"author":{"gitId":"-"},"content":" * \u003cp\u003eAs all tests are run against a single DB instance and we use shared test data for most tests,"},{"lineNumber":46,"author":{"gitId":"-"},"content":" * the tests need to be run in a single thread to prevent test data contamination across different tests."},{"lineNumber":47,"author":{"gitId":"-"},"content":" */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"@Test(singleThreaded \u003d true)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public abstract class BaseTestCaseWithLocalDatabaseAccess extends BaseTestCaseWithDatabaseAccess {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final PostgreSQLContainer\u003c?\u003e PGSQL \u003d new PostgreSQLContainer\u003c\u003e(\"postgres:15.1-alpine\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final LocalDatastoreHelper LOCAL_DATASTORE_HELPER \u003d LocalDatastoreHelper.newBuilder()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .setConsistency(1.0)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .setPort(TestProperties.TEST_LOCALDATASTORE_PORT)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .setStoreOnDisk(false)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * sqlLogic for use in test cases."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    protected Logic sqlLogic;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final LogicExtension logic \u003d new LogicExtension();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private Closeable closeable;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @BeforeSuite"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setupDbLayer() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        PGSQL.start();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        HibernateUtil.buildSessionFactory(PGSQL.getJdbcUrl(), PGSQL.getUsername(), PGSQL.getPassword());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        teammates.sqllogic.core.LogicStarter.initializeDependencies();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        sqlLogic \u003d Logic.inst();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        LOCAL_DATASTORE_HELPER.start();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        DatastoreOptions options \u003d LOCAL_DATASTORE_HELPER.getOptions();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ObjectifyService.init(new ObjectifyFactory("},{"lineNumber":74,"author":{"gitId":"-"},"content":"                options.getService()"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        OfyHelper.registerEntityClasses();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerAccountRequestSearchManager("},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new AccountRequestSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerInstructorSearchManager("},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new InstructorSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        SearchManagerFactory.registerStudentSearchManager("},{"lineNumber":83,"author":{"gitId":"-"},"content":"                new StudentSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.sqlsearch.SearchManagerFactory.registerAccountRequestSearchManager("},{"lineNumber":86,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.sqlsearch.AccountRequestSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":87,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.sqlsearch.SearchManagerFactory.registerInstructorSearchManager("},{"lineNumber":88,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.sqlsearch.InstructorSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":89,"author":{"gitId":"domoberzin"},"content":"        teammates.storage.sqlsearch.SearchManagerFactory.registerStudentSearchManager("},{"lineNumber":90,"author":{"gitId":"domoberzin"},"content":"            new teammates.storage.sqlsearch.StudentSearchManager(TestProperties.SEARCH_SERVICE_HOST, true));"},{"lineNumber":91,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        LogicStarter.initializeDependencies();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setupObjectify() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        closeable \u003d ObjectifyService.begin();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void tearDownObjectify() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        closeable.close();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void resetDbLayer() throws Exception {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getAccountRequestSearchManager().resetCollections();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getInstructorSearchManager().resetCollections();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        SearchManagerFactory.getStudentSearchManager().resetCollections();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        LOCAL_DATASTORE_HELPER.reset();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @AfterSuite"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void tearDownLocalDatastoreHelper() throws Exception {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        PGSQL.close();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        LOCAL_DATASTORE_HELPER.stop();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        HibernateUtil.beginTransaction();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @AfterMethod"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    protected void tearDown() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        HibernateUtil.rollbackTransaction();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    protected AccountAttributes getAccount(AccountAttributes account) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return logic.getAccount(account.getGoogleId());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    protected CourseAttributes getCourse(CourseAttributes course) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return logic.getCourse(course.getId());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected FeedbackQuestionAttributes getFeedbackQuestion(FeedbackQuestionAttributes fq) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return logic.getFeedbackQuestion(fq.getFeedbackSessionName(), fq.getCourseId(), fq.getQuestionNumber());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    protected FeedbackResponseCommentAttributes getFeedbackResponseComment(FeedbackResponseCommentAttributes frc) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return logic.getFeedbackResponseComment(frc.getFeedbackResponseId(), frc.getCommentGiver(), frc.getCreatedAt());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    protected FeedbackResponseAttributes getFeedbackResponse(FeedbackResponseAttributes fr) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return logic.getFeedbackResponse(fr.getFeedbackQuestionId(), fr.getGiver(), fr.getRecipient());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    protected FeedbackSessionAttributes getFeedbackSession(FeedbackSessionAttributes fs) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return logic.getFeedbackSession(fs.getFeedbackSessionName(), fs.getCourseId());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    protected InstructorAttributes getInstructor(InstructorAttributes instructor) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return instructor.getGoogleId() \u003d\u003d null"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                ? logic.getInstructorForEmail(instructor.getCourseId(), instructor.getEmail())"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                : logic.getInstructorForGoogleId(instructor.getCourseId(), instructor.getGoogleId());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    protected StudentAttributes getStudent(StudentAttributes student) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return logic.getStudentForEmail(student.getCourse(), student.getEmail());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected AccountRequestAttributes getAccountRequest(AccountRequestAttributes accountRequest) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return logic.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    protected DeadlineExtensionAttributes getDeadlineExtension(DeadlineExtensionAttributes deadlineExtension) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return logic.getDeadlineExtension("},{"lineNumber":180,"author":{"gitId":"-"},"content":"                deadlineExtension.getCourseId(), deadlineExtension.getFeedbackSessionName(),"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                deadlineExtension.getUserEmail(), deadlineExtension.getIsInstructor());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    protected NotificationAttributes getNotification(NotificationAttributes notification) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return logic.getNotification(notification.getNotificationId());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    protected void removeAndRestoreTypicalDataBundle() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        DataBundle dataBundle \u003d getTypicalDataBundle();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(dataBundle);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    protected boolean doRemoveAndRestoreDataBundle(DataBundle dataBundle) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            logic.removeDataBundle(dataBundle);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            logic.persistDataBundle(dataBundle);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    protected SqlDataBundle doRemoveAndRestoreSqlDataBundle(SqlDataBundle dataBundle) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            sqlLogic.removeDataBundle(dataBundle);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return sqlLogic.persistDataBundle(dataBundle);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    protected boolean doPutDocuments(DataBundle dataBundle) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            logic.putDocuments(dataBundle);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"domoberzin"},"content":"    @Override"},{"lineNumber":229,"author":{"gitId":"domoberzin"},"content":"    protected boolean doPutDocumentsSql(SqlDataBundle dataBundle) {"},{"lineNumber":230,"author":{"gitId":"domoberzin"},"content":"        try {"},{"lineNumber":231,"author":{"gitId":"domoberzin"},"content":"            sqlLogic.putDocuments(dataBundle);"},{"lineNumber":232,"author":{"gitId":"domoberzin"},"content":"            return true;"},{"lineNumber":233,"author":{"gitId":"domoberzin"},"content":"        } catch (Exception e) {"},{"lineNumber":234,"author":{"gitId":"domoberzin"},"content":"            e.printStackTrace();"},{"lineNumber":235,"author":{"gitId":"domoberzin"},"content":"            return false;"},{"lineNumber":236,"author":{"gitId":"domoberzin"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"domoberzin"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"domoberzin"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    protected Account getAccountFromDatabase(String googleId) {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return sqlLogic.getAccountForGoogleId(googleId);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    protected void clearObjectifyCache() {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        ObjectifyService.ofy().clear();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domoberzin":18,"-":229}},{"path":"src/test/java/teammates/test/BaseTestCaseWithSqlDatabaseAccess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SqlDataBundle;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionDetails;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":6,"author":{"gitId":"dishenggg"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountData;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.ui.output.ApiOutput;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.ui.output.CourseData;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.ui.output.DeadlineExtensionData;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackQuestionData;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponseCommentData;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackResponseData;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.ui.output.FeedbackSessionData;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.ui.output.InstructorData;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":29,"author":{"gitId":"dishenggg"},"content":"import teammates.ui.output.NumberOfEntitiesToGiveFeedbackToSetting;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.ui.output.StudentData;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.ui.output.UsageStatisticsData;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Base class for all test cases which are allowed to access the database."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public abstract class BaseTestCaseWithSqlDatabaseAccess extends BaseTestCase {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final int VERIFICATION_RETRY_COUNT \u003d 5;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final int VERIFICATION_RETRY_DELAY_IN_MS \u003d 1000;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final int OPERATION_RETRY_COUNT \u003d 5;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final int OPERATION_RETRY_DELAY_IN_MS \u003d 1000;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Removes and restores the databundle, with retries."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected SqlDataBundle removeAndRestoreDataBundle(SqlDataBundle testData) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        int retryLimit \u003d OPERATION_RETRY_COUNT;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        SqlDataBundle dataBundle \u003d doRemoveAndRestoreDataBundle(testData);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        while (dataBundle \u003d\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            print(\"Re-trying removeAndRestoreDataBundle\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(OPERATION_RETRY_DELAY_IN_MS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            dataBundle \u003d doRemoveAndRestoreDataBundle(testData);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNotNull(dataBundle);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return dataBundle;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    protected abstract SqlDataBundle doRemoveAndRestoreDataBundle(SqlDataBundle testData);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Verifies that two entities are equal."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    protected void verifyEquals(BaseEntity expected, ApiOutput actual) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (expected instanceof FeedbackQuestion) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            FeedbackQuestion expectedQuestion \u003d (FeedbackQuestion) expected;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails expectedQuestionDetails \u003d expectedQuestion.getQuestionDetailsCopy();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            FeedbackQuestionData actualQuestion \u003d (FeedbackQuestionData) actual;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            FeedbackQuestionDetails actualQuestionDetails \u003d actualQuestion.getQuestionDetails();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            assertEquals(expectedQuestion.getQuestionNumber(), (Integer) actualQuestion.getQuestionNumber());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            assertEquals(expectedQuestion.getDescription(), actualQuestion.getQuestionDescription());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            assertEquals(expectedQuestion.getGiverType(), actualQuestion.getGiverType());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            assertEquals(expectedQuestion.getRecipientType(), actualQuestion.getRecipientType());"},{"lineNumber":74,"author":{"gitId":"dishenggg"},"content":"            if (expectedQuestion.getNumOfEntitiesToGiveFeedbackTo() \u003d\u003d Const.MAX_POSSIBLE_RECIPIENTS) {"},{"lineNumber":75,"author":{"gitId":"dishenggg"},"content":"                assertEquals(actualQuestion.getNumberOfEntitiesToGiveFeedbackToSetting(),"},{"lineNumber":76,"author":{"gitId":"dishenggg"},"content":"                        NumberOfEntitiesToGiveFeedbackToSetting.UNLIMITED);"},{"lineNumber":77,"author":{"gitId":"dishenggg"},"content":"                assertNull(actualQuestion.getCustomNumberOfEntitiesToGiveFeedbackTo());"},{"lineNumber":78,"author":{"gitId":"dishenggg"},"content":"            } else {"},{"lineNumber":79,"author":{"gitId":"dishenggg"},"content":"                assertEquals(actualQuestion.getNumberOfEntitiesToGiveFeedbackToSetting(),"},{"lineNumber":80,"author":{"gitId":"dishenggg"},"content":"                        NumberOfEntitiesToGiveFeedbackToSetting.CUSTOM);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                assertEquals(expectedQuestion.getNumOfEntitiesToGiveFeedbackTo(),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                        actualQuestion.getCustomNumberOfEntitiesToGiveFeedbackTo());"},{"lineNumber":83,"author":{"gitId":"dishenggg"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedQuestionDetails.getJsonString(), actualQuestionDetails.getJsonString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponse) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            FeedbackResponse expectedFeedbackResponse \u003d (FeedbackResponse) expected;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            FeedbackResponseDetails expectedResponseDetails \u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    expectedFeedbackResponse.getFeedbackResponseDetailsCopy();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            FeedbackResponseData actualResponse \u003d (FeedbackResponseData) actual;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            FeedbackResponseDetails actualResponseDetails \u003d actualResponse.getResponseDetails();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponse.getGiver(), actualResponse.getGiverIdentifier());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponse.getRecipient(), actualResponse.getRecipientIdentifier());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            assertEquals(expectedResponseDetails.getAnswerString(),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    actualResponse.getResponseDetails().getAnswerString());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            assertEquals(expectedResponseDetails.getQuestionType(),"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    actualResponse.getResponseDetails().getQuestionType());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedResponseDetails.getJsonString(), actualResponseDetails.getJsonString());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Account) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Account expectedAccount \u003d (Account) expected;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            AccountData actualAccount \u003d (AccountData) actual;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            assertEquals(expectedAccount.getGoogleId(), actualAccount.getGoogleId());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assertEquals(expectedAccount.getName(), actualAccount.getName());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            assertEquals(expectedAccount.getEmail(), actualAccount.getEmail());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Course) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Course expectedCourse \u003d (Course) expected;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            CourseData actualCourse \u003d (CourseData) actual;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            assertEquals(expectedCourse.getName(), actualCourse.getCourseName());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            assertEquals(expectedCourse.getTimeZone(), actualCourse.getTimeZone());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(expectedCourse.getInstitute(), actualCourse.getInstitute());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        } else if (expected instanceof DeadlineExtension) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            DeadlineExtension expectedDeadlineExtension \u003d (DeadlineExtension) expected;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            DeadlineExtensionData actualDeadlineExtension \u003d (DeadlineExtensionData) actual;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            assertEquals(expectedDeadlineExtension.getEndTime().toEpochMilli(), actualDeadlineExtension.getEndTime());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            assertEquals(expectedDeadlineExtension.isClosingSoonEmailSent(),"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                    actualDeadlineExtension.getSentClosingEmail());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackResponseComment) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            FeedbackResponseComment expectedFeedbackResponseComment \u003d (FeedbackResponseComment) expected;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            FeedbackResponseCommentData actualComment \u003d (FeedbackResponseCommentData) actual;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponseComment.getGiver(), actualComment.getCommentGiver());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponseComment.getCommentText(), actualComment.getCommentText());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponseComment.getIsVisibilityFollowingFeedbackQuestion(),"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                    actualComment.isVisibilityFollowingFeedbackQuestion());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackResponseComment.getLastEditorEmail(), actualComment.getLastEditorEmail());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackSession) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            FeedbackSession expectedFeedbackSession \u003d (FeedbackSession) expected;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            FeedbackSessionData actualFeedbackSession \u003d (FeedbackSessionData) actual;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getName(), actualFeedbackSession.getFeedbackSessionName());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getInstructions(), actualFeedbackSession.getInstructions());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getStartTime().toEpochMilli(),"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getSubmissionStartTimestamp());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getEndTime().toEpochMilli(),"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getSubmissionEndTimestamp());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getSessionVisibleFromTime().toEpochMilli(),"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getSessionVisibleFromTimestamp().longValue());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getResultsVisibleFromTime().toEpochMilli(),"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getResultVisibleFromTimestamp().longValue());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.getGracePeriod().toMinutes(),"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getGracePeriod().longValue());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.isClosingEmailEnabled(),"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getIsClosingEmailEnabled());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            assertEquals(expectedFeedbackSession.isPublishedEmailEnabled(),"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                    actualFeedbackSession.getIsPublishedEmailEnabled());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Instructor) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            Instructor expectedInstructor \u003d (Instructor) expected;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            InstructorData actualInstructor \u003d (InstructorData) actual;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getCourseId(), actualInstructor.getCourseId());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getName(), actualInstructor.getName());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getEmail(), actualInstructor.getEmail());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getRegKey(), actualInstructor.getKey());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.isDisplayedToStudents(), actualInstructor.getIsDisplayedToStudents());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getDisplayName(), actualInstructor.getDisplayedToStudentsAs());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            assertEquals(expectedInstructor.getRole(), actualInstructor.getRole());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Notification) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            Notification expectedNotification \u003d (Notification) expected;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            NotificationData actualNotification \u003d (NotificationData) actual;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getStartTime().toEpochMilli(), actualNotification.getStartTimestamp());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getEndTime().toEpochMilli(), actualNotification.getEndTimestamp());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getStyle(), actualNotification.getStyle());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getTargetUser(), actualNotification.getTargetUser());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getTitle(), actualNotification.getTitle());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.getMessage(), actualNotification.getMessage());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            assertEquals(expectedNotification.isShown(), actualNotification.isShown());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Student) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            Student expectedStudent \u003d (Student) expected;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            StudentData actualStudent \u003d (StudentData) actual;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            assertEquals(expectedStudent.getCourseId(), actualStudent.getCourseId());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            assertEquals(expectedStudent.getName(), actualStudent.getName());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            assertEquals(expectedStudent.getEmail(), actualStudent.getEmail());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            assertEquals(expectedStudent.getRegKey(), actualStudent.getKey());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            assertEquals(expectedStudent.getComments(), actualStudent.getComments());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            // TODO: A student might not have a team or section."},{"lineNumber":172,"author":{"gitId":"-"},"content":"            // assertEquals(expectedStudent.getTeamName(), actualStudent.getTeamName());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            // assertEquals(expectedStudent.getSectionName(), actualStudent.getSectionName());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } else if (expected instanceof UsageStatistics) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            UsageStatistics expectedUsageStatistics \u003d (UsageStatistics) expected;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            UsageStatisticsData actualUsageStatistics \u003d (UsageStatisticsData) actual;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getStartTime().toEpochMilli(), actualUsageStatistics.getStartTime());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getTimePeriod(), actualUsageStatistics.getTimePeriod());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumResponses(), actualUsageStatistics.getNumResponses());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumCourses(), actualUsageStatistics.getNumCourses());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumStudents(), actualUsageStatistics.getNumStudents());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumInstructors(), actualUsageStatistics.getNumInstructors());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumAccountRequests(),"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    actualUsageStatistics.getNumAccountRequests());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumEmails(), actualUsageStatistics.getNumEmails());"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            assertEquals(expectedUsageStatistics.getNumSubmissions(), actualUsageStatistics.getNumSubmissions());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            fail(\"Unknown entity\");"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Verifies that the given entity is present in the database."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    protected void verifyPresentInDatabase(BaseEntity expected) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        int retryLimit \u003d VERIFICATION_RETRY_COUNT;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        ApiOutput actual \u003d getEntity(expected);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        while (actual \u003d\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(VERIFICATION_RETRY_DELAY_IN_MS);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            actual \u003d getEntity(expected);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        verifyEquals(expected, actual);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Verifies that the given entity is absent in the database."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    protected void verifyAbsentInDatabase(BaseEntity expected) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        int retryLimit \u003d VERIFICATION_RETRY_COUNT;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        ApiOutput actual \u003d getEntity(expected);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        while (actual !\u003d null \u0026\u0026 retryLimit \u003e 0) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            retryLimit--;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            ThreadHelper.waitFor(VERIFICATION_RETRY_DELAY_IN_MS);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            actual \u003d getEntity(expected);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertNull(actual);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    private ApiOutput getEntity(BaseEntity entity) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (entity instanceof Student) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return getStudent((Student) entity);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        } else if (entity instanceof FeedbackQuestion) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return getFeedbackQuestion((FeedbackQuestion) entity);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        } else if (entity instanceof FeedbackResponse) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return getFeedbackResponse((FeedbackResponse) entity);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown entity type\");"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    protected abstract FeedbackQuestionData getFeedbackQuestion(FeedbackQuestion fq);"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    protected abstract FeedbackResponseData getFeedbackResponse(FeedbackResponse fq);"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    protected abstract StudentData getStudent(Student student);"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dishenggg":10,"-":228}},{"path":"src/web/app/components/comment-box/comment-row/comment-row.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ctm-comment-edit-form *ngIf\u003d\"model.isEditing || mode \u003d\u003d\u003d CommentRowMode.ADD\""},{"lineNumber":2,"author":{"gitId":"-"},"content":"                      [mode]\u003d\"mode\""},{"lineNumber":3,"author":{"gitId":"-"},"content":"                      [model]\u003d\"model.commentEditFormModel\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"                      (modelChange)\u003d\"triggerModelChange(\u0027commentEditFormModel\u0027, $event)\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"                      [isVisibilityOptionEnabled]\u003d\"isVisibilityOptionEnabled\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"                      [isDisabled]\u003d\"isDisabled\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"                      [shouldHideSavingButton]\u003d\"shouldHideSavingButton\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"                      [questionShowResponsesTo]\u003d\"questionShowResponsesTo\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"                      [response]\u003d\"response\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"                      [isFeedbackParticipantComment]\u003d\"isFeedbackParticipantComment\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                      [shouldHideClosingButton]\u003d\"shouldHideClosingButton\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"                      (closeCommentBoxEvent)\u003d\"triggerCloseEditing()\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                      (saveCommentEvent)\u003d\"triggerSaveCommentEvent()\"\u003e\u003c/tm-comment-edit-form\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"card\" *ngIf\u003d\"!model.isEditing \u0026\u0026 mode \u003d\u003d\u003d CommentRowMode.EDIT \u0026\u0026 model.originalComment\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row comment-row\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cspan class\u003d\"by-response-giver text-secondary\" *ngIf\u003d\"isFeedbackParticipantComment\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"          Comment by response giver."},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003c/span\u003e"},{"lineNumber":22,"author":{"gitId":"yuanxi1"},"content":"        \u003cng-container class\u003d\"text-secondary\" *ngIf\u003d\"!isFeedbackParticipantComment\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cspan class\u003d\"comment-giver-name\"\u003e{{ model.commentGiverName ? model.commentGiverName : model.originalComment.commentGiver }} commented at \u003c/span\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cspan class\u003d\"ngb-tooltip-class\" style\u003d\"margin-right: .25rem;\" [ngbTooltip]\u003d\"model.originalComment.createdAt | formatDateDetail: model.timezone!\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            {{ model.originalComment.createdAt | formatDateBrief: model.timezone! }}\u003c/span\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003cng-container *ngIf\u003d\"model.originalComment.lastEditedAt \u0026\u0026 model.originalComment.lastEditedAt !\u003d\u003d model.originalComment.createdAt\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003ci class\u003d\"fas fa-circle dot-xs align-middle\" style\u003d\"margin-right: .25rem;\"\u003e\u003c/i\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cspan id\u003d\"last-editor-name\" style\u003d\"margin-right: .25rem;\" class\u003d\"ngb-tooltip-class\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"                  [ngbTooltip]\u003d\"model.originalComment.lastEditedAt | formatDateDetail: model.timezone!\"\u003eedited by {{ model.lastEditorName ? model.lastEditorName : model.originalComment.lastEditorEmail }}\u003c/span\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/ng-container\u003e"},{"lineNumber":31,"author":{"gitId":"yuanxi1"},"content":"        \u003c/ng-container\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003ci class\u003d\"fa fa-eye\" aria-hidden\u003d\"true\" ngbTooltip\u003d\"This response comment is visible to {{ visibilityStateMachine.getVisibilityTypesUnderVisibilityControl(CommentVisibilityControl.SHOW_COMMENT) | commentVisibilityTypesJointName }}\"\u003e\u003c/i\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"float-end\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cbutton type\u003d\"button\" class\u003d\"btn-edit-comment btn btn-outline-primary btn-sm\" *ngIf\u003d\"!shouldHideEditButton\" ngbTooltip\u003d\u0027Edit this comment\u0027"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                  (click)\u003d\"triggerModelChange(\u0027isEditing\u0027, true)\" [disabled]\u003d\"isDisabled\"\u003e\u003ci class\u003d\"fas fa-pencil-alt\"\u003e\u003c/i\u003e\u003c/button\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cbutton type\u003d\"button\" class\u003d\"btn-delete-comment btn btn-outline-primary btn-sm btn-margin-left\" *ngIf\u003d\"!shouldHideDeleteButton\" ngbTooltip\u003d\u0027Delete this comment\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                  (click)\u003d\"triggerDeleteCommentEvent()\" [disabled]\u003d\"isDisabled\"\u003e\u003ci class\u003d\"fas fa-trash\"\u003e\u003c/i\u003e\u003c/button\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"comment-text col-12\" [innerHTML]\u003d\"model.originalComment.commentText | safeHtml\"\u003e\u003c/div\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"yuanxi1":2,"-":43}},{"path":"src/web/app/components/notification-banner/notification-banner.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"yuanxi1"},"content":"\u003cdiv id\u003d\"notification-banner\" class\u003d\"banner\" [ngClass]\u003d\"notifications[0].style | notificationStyleClass\" *ngIf\u003d\"isShown \u0026\u0026 notifications.length \u003e 0\" [attr.data-testid]\u003d\"notifications[0].notificationId\" @collapseAnim\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cbutton id\u003d\"btn-close-notif\" type\u003d\"button\" class\u003d\"btn-close\" aria-label\u003d\"Close\" (click)\u003d\"closeNotification()\"\u003e\u003c/button\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003ch5\u003e{{ notifications[0].title }}\u003c/h5\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"banner-text\" [innerHTML]\u003d\"notifications[0].message\"\u003e\u003c/div\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"d-flex flex-row-reverse mt-3 me-2\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003cbutton id\u003d\"btn-mark-as-read\" type\u003d\"button\" [ngClass]\u003d\"getButtonClass(notifications[0])\" (click)\u003d\"markNotificationAsRead(notifications[0])\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      Mark as Read"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003c/button\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"yuanxi1":1,"-":9}},{"path":"src/web/app/components/session-edit-form/session-edit-form.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"session-edit-form\" class\u003d\"card card-plain\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"close-header\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cbutton type\u003d\"button\" class\u003d\"btn-close\" aria-label\u003d\"Close\" (click)\u003d\"closeEditFormHandler()\"\u003e\u003c/button\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-lg-7\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row mb-2\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-12 col-sm-3 session-heading-text\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"            \u003ch5\u003eCreate new\u003c/h5\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-12 col-sm-9 create-new-dropdown-div\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \u003cselect id\u003d\"session-type\" class\u003d\"form-control form-select\" [ngModel]\u003d\"model.templateSessionName\" (ngModelChange)\u003d\"triggerModelChange(\u0027templateSessionName\u0027, $event)\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"              \u003coption *ngFor\u003d\"let templateSession of templateSessions\" [ngValue]\u003d\"templateSession.name\"\u003e{{ templateSession.name }}\u003c/option\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \u003c/select\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \u003ca type\u003d\"button\" class\u003d\"btn btn-link\" tmRouterLink\u003d\"/web/instructor/help\" [queryParams]\u003d\"{ questionId: \u0027sessions\u0027, section: \u0027sessions\u0027 }\" target\u003d\"_blank\" aria-label\u003d\"Help for feedback sessions\"\u003e\u003ci class\u003d\"fas fa-info-circle\"\u003e\u003c/i\u003e\u003c/a\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-lg-5\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-12 col-sm-3 col-lg-1 session-heading-text\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003ch5\u003eOr\u003c/h5\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-12 col-sm-9 col-lg-11 text-md-start\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cbutton id\u003d\"btn-copy-session\" type\u003d\"button\" class\u003d\"btn btn-info\" (click)\u003d\"copyOthersHandler()\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              \u003cspan\u003eCopy from previous feedback sessions\u003c/span\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"padding-left-7px\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003ctm-ajax-loading *ngIf\u003d\"isCopyOtherSessionLoading\"\u003e\u003c/tm-ajax-loading\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003c/button\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12 text-center text-md-end session-form-buttons\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-fs-edit\" type\u003d\"button\" class\u003d\"btn btn-primary\" (click)\u003d\"triggerModelChange(\u0027isEditable\u0027, true)\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT \u0026\u0026 !model.isEditable \u0026\u0026 !model.isSaving\"\u003e\u003ci class\u003d\"fas fa-pencil-alt\"\u003e\u003c/i\u003e Edit\u003c/button\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-fs-save\" type\u003d\"button\" class\u003d\"btn btn-primary\" (click)\u003d\"submitFormHandler()\" [disabled]\u003d\"model.isSaving\" *ngIf\u003d\"model.isEditable || model.isSaving\"\u003e\u003ctm-ajax-loading *ngIf\u003d\"model.isSaving\"\u003e\u003c/tm-ajax-loading\u003e \u003ci class\u003d\"fas fa-check\"\u003e\u003c/i\u003e Save\u003c/button\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003cbutton type\u003d\"button\" class\u003d\"btn btn-primary\" ngbTooltip\u003d\"Discard changes to the feedback session\" (click)\u003d\"cancelHandler()\" *ngIf\u003d\"model.isEditable\" [disabled]\u003d\"model.isSaving\"\u003e\u003ci class\u003d\"fas fa-ban\"\u003e\u003c/i\u003e Cancel\u003c/button\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-fs-delete\" type\u003d\"button\" class\u003d\"btn btn-primary\" ngbTooltip\u003d\"Delete the feedback session\" (click)\u003d\"deleteHandler()\" [disabled]\u003d\"model.isSaving\"\u003e\u003ctm-ajax-loading *ngIf\u003d\"model.isDeleting\"\u003e\u003c/tm-ajax-loading\u003e\u003ci class\u003d\"fas fa-trash\"\u003e\u003c/i\u003e Delete\u003c/button\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-fs-copy\" type\u003d\"button\" class\u003d\"btn btn-primary\" ngbTooltip\u003d\"Copy this feedback session to other courses\" (click)\u003d\"copyHandler()\" [disabled]\u003d\"model.isSaving\"\u003e\u003ctm-ajax-loading *ngIf\u003d\"model.isCopying\"\u003e\u003c/tm-ajax-loading\u003e\u003ci class\u003d\"far fa-copy\"\u003e\u003c/i\u003e Copy\u003c/button\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card border-primary margin-top-20px\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\" [ngClass]\u003d\"{\u0027col-form-label\u0027: formMode \u003d\u003d\u003d SessionEditFormMode.ADD}\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003cspan class\u003d\"ngb-tooltip-class\" ngbTooltip\u003d\"Course for which the feedback session is for.\"\u003eCourse ID\u003c/span\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-auto text-md-start\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\"\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"              \u003cselect id\u003d\"add-course-id\" class\u003d\"form-control form-select\" [ngClass]\u003d\"{\u0027is-invalid\u0027: courseCandidates.length \u003d\u003d\u003d 0}\" [ngModel]\u003d\"model.courseId\" (ngModelChange)\u003d\"courseIdChangeHandler($event)\" [disabled]\u003d\"courseCandidates.length \u003d\u003d\u003d 0\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u003coption *ngFor\u003d\"let course of courseCandidates\" [ngValue]\u003d\"course.courseId\"\u003e{{ course.courseId }}\u003c/option\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"              \u003c/select\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"invalid-feedback\" *ngIf\u003d\"courseCandidates.length \u003d\u003d\u003d 0\"\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                There is no un-archived course."},{"lineNumber":59,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u003cdiv id\u003d\"edit-course-id\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\"\u003e {{ model.courseId }} \u003c/div\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        \u003cbr/\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\" [ngClass]\u003d\"{\u0027col-form-label\u0027: formMode \u003d\u003d\u003d SessionEditFormMode.ADD}\"\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            Time Zone"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          \u003cdiv id\u003d\"time-zone\" class\u003d\"col-md-3 text-md-start\" [ngClass]\u003d\"{\u0027col-form-label\u0027: formMode \u003d\u003d\u003d SessionEditFormMode.ADD}\"\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            \u003cspan class\u003d\"ngb-tooltip-class\" ngbTooltip\u003d\"To change this, edit the course settings. TEAMMATES automatically adjusts to match the current time offset in your area, including clock changes due to daylight saving time.\"\u003e{{ model.timeZone }}\u003c/span\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        \u003cbr/\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\"\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            Course Name"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          \u003cdiv id\u003d\"course-name\" class\u003d\"col-md-10 text-md-start\"\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            {{ model.courseName }}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        \u003cbr/\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\"\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\" class\u003d\"ngb-tooltip-class\" ngbTooltip\u003d\"Enter the name of the feedback session e.g. Feedback Session 1.\"\u003eSession Name*\u003c/span\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003cspan *ngIf\u003d\"formMode !\u003d\u003d SessionEditFormMode.ADD\"\u003eSession Name\u003c/span\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-10 text-md-start\"\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\"\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"              \u003cinput id\u003d\"add-session-name\" type\u003d\"text\" class\u003d\"form-control\" [ngModel]\u003d\"model.feedbackSessionName\" (ngModelChange)\u003d\"triggerModelChange(\u0027feedbackSessionName\u0027, $event)\" placeholder\u003d\"e.g. Feedback for Project Presentation 1\" maxlength\u003d\"64\" required #sessionName\u003d\"ngModel\" /\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"              \u003cdiv [hidden]\u003d\"sessionName.valid || (sessionName.pristine \u0026\u0026 sessionName.untouched)\" class\u003d\"invalid-field\"\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u003ci class\u003d\"fa fa-exclamation-circle\" aria-hidden\u003d\"true\"\u003e\u003c/i\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                The field Session Name should not be empty."},{"lineNumber":94,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"              \u003cdiv\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                {{FEEDBACK_SESSION_NAME_MAX_LENGTH - model.feedbackSessionName.length}} characters left"},{"lineNumber":97,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \u003cdiv id\u003d\"edit-session-name\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\"\u003e {{ model.feedbackSessionName }} \u003c/div\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        \u003cbr/\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\"\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            \u003cspan class\u003d\"ngb-tooltip-class\" ngbTooltip\u003d\"Will be displayed at the top of the page when users respond to the session.\"\u003eInstructions\u003c/span\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-10 text-md-start\"\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003ctm-rich-text-editor id\u003d\"instructions\" [richText]\u003d\"model.instructions\" (richTextChange)\u003d\"triggerModelChange(\u0027instructions\u0027, $event)\" [isDisabled]\u003d\"!model.isEditable\" [hasCharacterLimit]\u003d\"true\"\u003e\u003c/tm-rich-text-editor\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        \u003cbr/\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\"\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            Submission Status"},{"lineNumber":115,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"          \u003cdiv id\u003d\"submission-status\" class\u003d\"col-md-4 text-md-start\"\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            {{ model.submissionStatus | submissionStatusName }}"},{"lineNumber":118,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-2 text-md-end font-bold mt-3 mt-md-0\"\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Published Status"},{"lineNumber":121,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          \u003cdiv id\u003d\"published-status\" class\u003d\"col-md-4 text-md-start\"\u003e"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            {{ model.publishStatus | publishStatusName }}"},{"lineNumber":124,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card border-primary margin-top-20px\"\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"col-12 text-md-start\"\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"              \u003cdiv\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u003clabel class\u003d\"ngb-tooltip-class label-control font-bold\" ngbTooltip\u003d\"Users can start submitting responses.\"\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                  Submission opening time"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                \u003c/label\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row text-center align-items-center\"\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"              \u003cdiv id\u003d\"submission-start-date\" class\u003d\"col-md-7 col-xs-center\"\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                \u003ctm-datepicker [isDisabled]\u003d\"!model.isEditable\" (dateChangeCallback)\u003d\"triggerSubmissionOpeningDateModelChange(\u0027submissionStartDate\u0027, $event)\""},{"lineNumber":143,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSubmissionStart\" [maxDate]\u003d\"maxDateForSubmissionStart\""},{"lineNumber":144,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.submissionStartDate\"\u003e\u003c/tm-datepicker\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-md-5\"\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u003ctm-timepicker id\u003d\"submission-start-time\" [isDisabled]\u003d\"!model.isEditable\" (timeChange)\u003d\"triggerModelChange(\u0027submissionStartTime\u0027, $event)\""},{"lineNumber":148,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSubmissionStart\" [maxDate]\u003d\"maxDateForSubmissionStart\""},{"lineNumber":149,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.submissionStartDate\""},{"lineNumber":150,"author":{"gitId":"-"},"content":"                               [minTime]\u003d\"minTimeForSubmissionStart\" [maxTime]\u003d\"maxTimeForSubmissionStart\""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                               [time]\u003d\"model.submissionStartTime\"\u003e\u003c/tm-timepicker\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4 border-left-gray\"\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12 text-md-start ms-md-2\"\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                \u003clabel class\u003d\"ngb-tooltip-class label-control font-bold\" ngbTooltip\u003d\"No more submissions from users.\"\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                  Submission closing time"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                \u003c/label\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row align-items-center\"\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"              \u003cdiv id\u003d\"submission-end-date\" class\u003d\"col-md-7 col-xs-center\"\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                \u003ctm-datepicker [isDisabled]\u003d\"!model.isEditable\" (dateChangeCallback)\u003d\"triggerModelChange(\u0027submissionEndDate\u0027, $event)\""},{"lineNumber":166,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSubmissionEnd\" [maxDate]\u003d\"maxDateForSubmissionEnd\""},{"lineNumber":167,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.submissionEndDate\"\u003e\u003c/tm-datepicker\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":169,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-md-5\"\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                \u003ctm-timepicker id\u003d\"submission-end-time\" [isDisabled]\u003d\"!model.isEditable\" (timeChange)\u003d\"triggerModelChange(\u0027submissionEndTime\u0027, $event)\""},{"lineNumber":171,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSubmissionEnd\" [maxDate]\u003d\"maxDateForSubmissionEnd\""},{"lineNumber":172,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.submissionEndDate\""},{"lineNumber":173,"author":{"gitId":"-"},"content":"                               [minTime]\u003d\"minTimeForSubmissionEnd\" [maxTime]\u003d\"maxTimeForSubmissionEnd\""},{"lineNumber":174,"author":{"gitId":"-"},"content":"                               [time]\u003d\"model.submissionEndTime\"\u003e\u003c/tm-timepicker\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":177,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4 border-left-gray\"\u003e"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":180,"author":{"gitId":"nknguyenhc"},"content":"              \u003cdiv class\u003d\"col-12 text-md-start ms-md-2\"\u003e"},{"lineNumber":181,"author":{"gitId":"nknguyenhc"},"content":"                \u003clabel for\u003d\"grace-period\" class\u003d\"ngb-tooltip-class control-label font-bold\" ngbTooltip\u003d\"Amount of time the system will continue accepting submissions after the specified deadline.\"\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                  Grace period"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \u003c/label\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                \u003cselect id\u003d\"grace-period\" class\u003d\"form-control form-select\" [ngModel]\u003d\"model.gracePeriod\" (ngModelChange)\u003d\"triggerModelChange(\u0027gracePeriod\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                  \u003coption *ngFor\u003d\"let graceMinute of [0, 5, 10, 15, 20, 25, 30]\" [ngValue]\u003d\"graceMinute\"\u003e{{ graceMinute + \u0027 min\u0027}}\u003c/option\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \u003c/select\u003e"},{"lineNumber":191,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":194,"author":{"gitId":"-"},"content":"              \u003ca class\u003d\"ps-3 pt-2\""},{"lineNumber":195,"author":{"gitId":"-"},"content":"                *ngIf\u003d\"formMode !\u003d\u003d SessionEditFormMode.ADD\""},{"lineNumber":196,"author":{"gitId":"-"},"content":"                tmRouterLink\u003d\"/web/instructor/sessions/individual-extension\""},{"lineNumber":197,"author":{"gitId":"-"},"content":"                [queryParams]\u003d\"{ courseid: model.courseId, fsname: model.feedbackSessionName, preselectnonsubmitters: false }\"\u003e"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                Individual Deadline Extensions"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                \u003ci class\u003d\"fas fa-edit\"\u003e\u003c/i\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":"              \u003c/a\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":"              \u003ca class\u003d\"ps-3 pt-2 disabled-link ngb-tooltip-class\""},{"lineNumber":202,"author":{"gitId":"-"},"content":"                *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\""},{"lineNumber":203,"author":{"gitId":"-"},"content":"                ngbTooltip\u003d\"You must save the new session before setting individual deadline extensions\"\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                Individual Deadline Extensions"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                \u003ci class\u003d\"fas fa-edit\"\u003e\u003c/i\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":"              \u003c/a\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"!model.hasVisibleSettingsPanelExpanded\" class\u003d\"margin-top-20px\"\u003e"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      \u003cspan class\u003d\"text-muted\"\u003eSession is visible at submission opening time, responses are only visible when you publish the results.\u003c/span\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      \u003cbutton id\u003d\"btn-change-visibility\" type\u003d\"button\" class\u003d\"btn btn-link\" (click)\u003d\"triggerModelChange(\u0027hasVisibleSettingsPanelExpanded\u0027, true)\" [disabled]\u003d\"!model.isEditable\"\u003e[Change]\u003c/button\u003e"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card border-primary margin-top-20px\" *ngIf\u003d\"model.hasVisibleSettingsPanelExpanded\" @collapseAnim\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row align-items-start\"\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-6 text-center text-md-start\"\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row ms-md-1\"\u003e"},{"lineNumber":222,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                \u003clabel class\u003d\"ngb-tooltip-class label-control font-bold\" ngbTooltip\u003d\"Session can be visible before it is open for submissions so that users can preview the questions.\"\u003eMake session visible \u003c/label\u003e"},{"lineNumber":224,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row mt-md-2 ms-md-1\"\u003e"},{"lineNumber":227,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-md-2 mt-md-1\"\u003e"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"form-check\"\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                  \u003clabel class\u003d\"form-check-label\"\u003e"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u003cinput id\u003d\"session-visibility-custom\" class\u003d\"form-check-input\" type\u003d\"radio\" name\u003d\"sessionVisibleRadio\" [value]\u003d\"SessionVisibleSetting.CUSTOM\" [ngModel]\u003d\"model.sessionVisibleSetting\" (ngModelChange)\u003d\"triggerModelChange(\u0027sessionVisibleSetting\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                    At"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                  \u003c/label\u003e"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":235,"author":{"gitId":"-"},"content":"              \u003cdiv id\u003d\"session-visibility-date\" class\u003d\"col-md-6\"\u003e"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                \u003ctm-datepicker [isDisabled]\u003d\"model.sessionVisibleSetting !\u003d\u003d SessionVisibleSetting.CUSTOM || !model.isEditable\""},{"lineNumber":237,"author":{"gitId":"-"},"content":"                               (dateChangeCallback)\u003d\"triggerModelChange(\u0027customSessionVisibleDate\u0027, $event)\""},{"lineNumber":238,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSessionVisible\" [maxDate]\u003d\"maxDateForSessionVisible\""},{"lineNumber":239,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.customSessionVisibleDate\"\u003e\u003c/tm-datepicker\u003e"},{"lineNumber":240,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":241,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                \u003ctm-timepicker id\u003d\"session-visibility-time\" [isDisabled]\u003d\"model.sessionVisibleSetting !\u003d\u003d SessionVisibleSetting.CUSTOM || !model.isEditable\" (timeChange)\u003d\"triggerModelChange(\u0027customSessionVisibleTime\u0027, $event)\""},{"lineNumber":243,"author":{"gitId":"-"},"content":"                               [minDate]\u003d\"minDateForSessionVisible\" [maxDate]\u003d\"maxDateForSessionVisible\""},{"lineNumber":244,"author":{"gitId":"-"},"content":"                               [date]\u003d\"model.customSessionVisibleDate\""},{"lineNumber":245,"author":{"gitId":"-"},"content":"                               [minTime]\u003d\"minTimeForSessionVisible\" [maxTime]\u003d\"maxTimeForSessionVisible\""},{"lineNumber":246,"author":{"gitId":"-"},"content":"                               [time]\u003d\"model.customSessionVisibleTime\" \u003e\u003c/tm-timepicker\u003e"},{"lineNumber":247,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row mt-md-1 ms-md-3\"\u003e"},{"lineNumber":250,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12 form-check\"\u003e"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                \u003clabel class\u003d\"form-check-label\"\u003e"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                  \u003cinput id\u003d\"session-visibility-at-open\" class\u003d\"form-check-input\" type\u003d\"radio\" name\u003d\"sessionVisibleRadio\" [value]\u003d\"SessionVisibleSetting.AT_OPEN\" [ngModel]\u003d\"model.sessionVisibleSetting\" (ngModelChange)\u003d\"triggerModelChange(\u0027sessionVisibleSetting\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                  Submission opening time"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                \u003c/label\u003e"},{"lineNumber":255,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":257,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":258,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-6 sessionVisibleRadio border-left-gray text-center text-md-start\"\u003e"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row ms-md-1\"\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                \u003clabel class\u003d\"ngb-tooltip-class label-control font-bold\" ngbTooltip\u003d\"Make responses for the feedback session visible to designated recipients.\"\u003eMake response visible \u003c/label\u003e"},{"lineNumber":262,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row mt-md-2 ms-md-1\"\u003e"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"col-md-2 mt-md-1\"\u003e"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                  \u003cdiv class\u003d\"form-check\"\u003e"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                    \u003clabel class\u003d\"form-check-label\"\u003e"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                      \u003cinput id\u003d\"response-visibility-custom\" class\u003d\"form-check-input\" type\u003d\"radio\" name\u003d\"responseVisibleRadio\" [value]\u003d\"ResponseVisibleSetting.CUSTOM\" [ngModel]\u003d\"model.responseVisibleSetting\" (ngModelChange)\u003d\"triggerModelChange(\u0027responseVisibleSetting\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"/\u003e"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                      At"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                    \u003c/label\u003e"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                  \u003c/div\u003e"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                \u003cdiv id\u003d\"response-visibility-date\" class\u003d\"col-md-6\"\u003e"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                  \u003ctm-datepicker [isDisabled]\u003d\"model.responseVisibleSetting !\u003d\u003d ResponseVisibleSetting.CUSTOM || !model.isEditable\""},{"lineNumber":275,"author":{"gitId":"-"},"content":"                                 (dateChangeCallback)\u003d\"triggerModelChange(\u0027customResponseVisibleDate\u0027, $event)\""},{"lineNumber":276,"author":{"gitId":"-"},"content":"                                 [minDate]\u003d\"minDateForResponseVisible\" [date]\u003d\"model.customResponseVisibleDate\"\u003e\u003c/tm-datepicker\u003e"},{"lineNumber":277,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                  \u003ctm-timepicker id\u003d\"response-visibility-time\" [isDisabled]\u003d\"model.responseVisibleSetting !\u003d\u003d ResponseVisibleSetting.CUSTOM || !model.isEditable\" (timeChange)\u003d\"triggerModelChange(\u0027customResponseVisibleTime\u0027, $event)\""},{"lineNumber":280,"author":{"gitId":"-"},"content":"                                 [minDate]\u003d\"minDateForResponseVisible\" [date]\u003d\"model.customResponseVisibleDate\""},{"lineNumber":281,"author":{"gitId":"-"},"content":"                                 [minTime]\u003d\"minTimeForResponseVisible\" [time]\u003d\"model.customResponseVisibleTime\" \u003e\u003c/tm-timepicker\u003e"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row mt-md-2 ms-md-1\"\u003e"},{"lineNumber":285,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":286,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"form-check\"\u003e"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                  \u003clabel class\u003d\"ngb-tooltip-class form-check-label\" ngbTooltip\u003d\"Same time as when the session becomes visible to users.\"\u003e"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                    \u003cinput id\u003d\"response-visibility-immediately\" class\u003d\"form-check-input\" type\u003d\"radio\" name\u003d\"responseVisibleRadio\" [value]\u003d\"ResponseVisibleSetting.AT_VISIBLE\" [ngModel]\u003d\"model.responseVisibleSetting\" (ngModelChange)\u003d\"triggerModelChange(\u0027responseVisibleSetting\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                    Immediately"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                  \u003c/label\u003e"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":292,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row mt-md-2 ms-md-1\"\u003e"},{"lineNumber":295,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"form-check\"\u003e"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                  \u003clabel class\u003d\"ngb-tooltip-class form-check-label\" ngbTooltip\u003d\"Remember to manually publish the responses for this session later on.\"\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                    \u003cinput id\u003d\"response-visibility-manually\" class\u003d\"form-check-input\" type\u003d\"radio\" name\u003d\"responseVisibleRadio\" [value]\u003d\"ResponseVisibleSetting.LATER\" [ngModel]\u003d\"model.responseVisibleSetting\" (ngModelChange)\u003d\"triggerModelChange(\u0027responseVisibleSetting\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e"},{"lineNumber":299,"author":{"gitId":"-"},"content":"                    Not now (publish manually)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                  \u003c/label\u003e"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":302,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":304,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":306,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"!model.hasEmailSettingsPanelExpanded\"\u003e"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003cspan class\u003d\"text-muted\"\u003eEmails are sent when session opens (within 15 minutes), 24 hrs before session closes and when results are published.\u003c/span\u003e"},{"lineNumber":310,"author":{"gitId":"-"},"content":"      \u003cbutton id\u003d\"btn-change-email\" type\u003d\"button\" class\u003d\"btn btn-link\" (click)\u003d\"triggerModelChange(\u0027hasEmailSettingsPanelExpanded\u0027, true)\" [disabled]\u003d\"!model.isEditable\"\u003e[Change]\u003c/button\u003e"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card border-primary margin-top-20px\" *ngIf\u003d\"model.hasEmailSettingsPanelExpanded\" @collapseAnim\u003e"},{"lineNumber":313,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"col-12 font-bold\"\u003e"},{"lineNumber":315,"author":{"gitId":"-"},"content":"          Send emails for"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row ms-md-1 mt-md-3\"\u003e"},{"lineNumber":318,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"form-check form-check-inline\"\u003e"},{"lineNumber":320,"author":{"gitId":"-"},"content":"              \u003clabel class\u003d\"ngb-tooltip-class form-check-label\" ngbTooltip\u003d\"Notify students when the session is open for submission.\"\u003e"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                \u003cinput id\u003d\"email-opening\" class\u003d\"form-check-input\" type\u003d\"checkbox\" checked disabled\u003eSession opening reminder"},{"lineNumber":322,"author":{"gitId":"-"},"content":"              \u003c/label\u003e"},{"lineNumber":323,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":324,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":325,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"form-check form-check-inline\"\u003e"},{"lineNumber":327,"author":{"gitId":"-"},"content":"              \u003clabel class\u003d\"ngb-tooltip-class form-check-label\" ngbTooltip\u003d\"Remind students to submit 24 hours before the end of the session.\"\u003e"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                \u003cinput id\u003d\"email-closing\" class\u003d\"form-check-input\" type\u003d\"checkbox\" [ngModel]\u003d\"model.isClosingEmailEnabled\" (ngModelChange)\u003d\"triggerModelChange(\u0027isClosingEmailEnabled\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e Session closing reminder"},{"lineNumber":329,"author":{"gitId":"-"},"content":"              \u003c/label\u003e"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":331,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":332,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-4\"\u003e"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"form-check form-check-inline\"\u003e"},{"lineNumber":334,"author":{"gitId":"-"},"content":"              \u003clabel class\u003d\"ngb-tooltip-class form-check-label\" ngbTooltip\u003d\"Notify students when the session results is published.\"\u003e"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                \u003cinput id\u003d\"email-published\" class\u003d\"form-check-input\" type\u003d\"checkbox\" [ngModel]\u003d\"model.isPublishedEmailEnabled\" (ngModelChange)\u003d\"triggerModelChange(\u0027isPublishedEmailEnabled\u0027, $event)\" [disabled]\u003d\"!model.isEditable\"\u003e Results published announcement"},{"lineNumber":336,"author":{"gitId":"-"},"content":"              \u003c/label\u003e"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":338,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":340,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row margin-top-20px\"\u003e"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12 text-center\"\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        \u003cspan class\u003d\"loader\"\u003e\u003c/span\u003e"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.ADD\"\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":"          \u003cbutton id\u003d\"btn-create-session\" type\u003d\"button\" class\u003d\"btn btn-primary\" [disabled]\u003d\"courseCandidates.length \u003d\u003d\u003d 0 || model.isSaving || !model.feedbackSessionName\" (click)\u003d\"submitFormHandler()\"\u003e"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            \u003ctm-ajax-loading *ngIf\u003d\"model.isSaving\"\u003e\u003c/tm-ajax-loading\u003eCreate Feedback Session"},{"lineNumber":348,"author":{"gitId":"-"},"content":"          \u003c/button\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":"          \u003cp class\u003d\"text-danger margin-top-20px\" *ngIf\u003d\"courseCandidates.length \u003d\u003d\u003d 0\"\u003e\u003cb\u003eYou need to have an active(unarchived) course to create a session!\u003c/b\u003e\u003c/p\u003e"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\"\u003e"},{"lineNumber":352,"author":{"gitId":"-"},"content":"          \u003cbutton type\u003d\"button\" class\u003d\"btn btn-success\" [disabled]\u003d\"model.isSaving || !model.isEditable\" *ngIf\u003d\"formMode \u003d\u003d\u003d SessionEditFormMode.EDIT\" (click)\u003d\"submitFormHandler()\"\u003e"},{"lineNumber":353,"author":{"gitId":"-"},"content":"            \u003ctm-ajax-loading *ngIf\u003d\"model.isSaving\"\u003e\u003c/tm-ajax-loading\u003eSave Changes"},{"lineNumber":354,"author":{"gitId":"-"},"content":"          \u003c/button\u003e"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":356,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":358,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":359,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"nknguyenhc":2,"-":357}},{"path":"src/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ch1 id\u003d\"records-header\"\u003e{{studentName}}\u0027s Records\u003csmall class\u003d\"text-muted text-break\"\u003e - {{courseId}}\u003c/small\u003e\u003c/h1\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003ch2\u003eRecords in feedback sessions\u003c/h2\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003ctm-loading-retry [shouldShowRetry]\u003d\"hasStudentResultsLoadingFailed\" [message]\u003d\"\u0027Failed to load student results\u0027\" (retryEvent)\u003d\"loadStudentResults()\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u003cdiv *tmIsLoading\u003d\"isStudentResultsLoading\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cdiv *ngFor\u003d\"let session of sessionTabs\" class\u003d\"card card-default mb-4\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-header cursor-pointer\" (click)\u003d\"session.isCollapsed \u003d !session.isCollapsed\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        \u003cstrong class\u003d\"text-break\"\u003eFeedback Session: {{ session.feedbackSession.feedbackSessionName }}\u003c/strong\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"card-header-btn-toolbar\"\u003e"},{"lineNumber":9,"author":{"gitId":"Tim-Siu"},"content":"          \u003ctm-panel-chevron [isExpanded]\u003d\"!session.isCollapsed\" chevronColor\u003d\"black\"\u003e\u003c/tm-panel-chevron\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-body\" *ngIf\u003d\"!session.isCollapsed\" @collapseAnim\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003ctm-grq-rgq-view-responses *ngIf\u003d\"session.responsesReceivedByStudent.length \u003e 0\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"                                   [session]\u003d\"session.feedbackSession\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"                                   [responses]\u003d\"session.responsesReceivedByStudent\" [groupByTeam]\u003d\"false\" [section]\u003d\"\" [sectionType]\u003d\"\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"                                   [isGrq]\u003d\"false\" [instructorCommentTableModel]\u003d\"instructorCommentTableModel\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"                                   (saveNewCommentEvent)\u003d\"saveNewComment($event, session.feedbackSession.timeZone)\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                                   (deleteCommentEvent)\u003d\"deleteComment($event)\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"                                   (updateCommentEvent)\u003d\"updateComment($event, session.feedbackSession.timeZone)\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"                                   [isExpandAll]\u003d\"true\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003c/tm-grq-rgq-view-responses\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"session.responsesReceivedByStudent.length \u003d\u003d\u003d 0\" class\u003d\"mb-3\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          No feedback responses for {{studentName}} ({{studentTeam}}) found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003ctm-grq-rgq-view-responses *ngIf\u003d\"session.responsesGivenByStudent.length \u003e 0\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"                                   [session]\u003d\"session.feedbackSession\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"                                   [responses]\u003d\"session.responsesGivenByStudent\" [groupByTeam]\u003d\"false\" [section]\u003d\"\" [sectionType]\u003d\"\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"                                   [isGrq]\u003d\"true\" [instructorCommentTableModel]\u003d\"instructorCommentTableModel\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"                                   (saveNewCommentEvent)\u003d\"saveNewComment($event, session.feedbackSession.timeZone)\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"                                   (deleteCommentEvent)\u003d\"deleteComment($event)\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"                                   (updateCommentEvent)\u003d\"updateComment($event, session.feedbackSession.timeZone)\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"                                   [isExpandAll]\u003d\"true\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003e\u003c/tm-grq-rgq-view-responses\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"session.responsesGivenByStudent.length \u003d\u003d\u003d 0\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          No feedback responses from {{studentName}} ({{studentTeam}}) found."},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/tm-loading-retry\u003e"}],"authorContributionMap":{"-":39,"Tim-Siu":1}}]
